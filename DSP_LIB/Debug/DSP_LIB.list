
DSP_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007508  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001345c  080076e8  080076e8  000086e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ab44  0801ab44  0001c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ab44  0801ab44  0001bb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ab4c  0801ab4c  0001c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ab4c  0801ab4c  0001bb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ab50  0801ab50  0001bb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0801ab54  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055c4  200001d4  0801ad28  0001c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005798  0801ad28  0001c798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f778  00000000  00000000  0001c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000688b  00000000  00000000  0004b97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000daac  00000000  00000000  00052207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a58  00000000  00000000  0005fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a80  00000000  00000000  00061710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000249de  00000000  00000000  00063190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a05f  00000000  00000000  00087b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e45b1  00000000  00000000  000b1bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  0019617e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004994  00000000  00000000  00196238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0019abcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002f41  00000000  00000000  0019ac24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000b8  00000000  00000000  0019db65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080076d0 	.word	0x080076d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	080076d0 	.word	0x080076d0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <fft_blackman_harris_92db_f32>:


void fft_blackman_harris_92db_f32(
        float32_t * pDst,
        uint32_t blockSize)
{
 80002d0:	b570      	push	{r4, r5, r6, lr}
   float32_t k = 2.0f / ((float32_t) blockSize);
 80002d2:	ee07 1a90 	vmov	s15, r1
 80002d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002da:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
{
 80002de:	ed2d 8b0a 	vpush	{d8-d12}
   float32_t k = 2.0f / ((float32_t) blockSize);
 80002e2:	ee87 9a27 	vdiv.f32	s18, s14, s15
{
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 80002ea:	2600      	movs	r6, #0
   {
     w = PI * i * k;
 80002ec:	eddf 9a1a 	vldr	s19, [pc, #104]	@ 8000358 <fft_blackman_harris_92db_f32+0x88>
        w = 0.35875f - 0.48829f * cosf (w) +
 80002f0:	ed9f aa1a 	vldr	s20, [pc, #104]	@ 800035c <fft_blackman_harris_92db_f32+0x8c>
 80002f4:	eddf aa1a 	vldr	s21, [pc, #104]	@ 8000360 <fft_blackman_harris_92db_f32+0x90>
 80002f8:	ed9f ba1a 	vldr	s22, [pc, #104]	@ 8000364 <fft_blackman_harris_92db_f32+0x94>
 80002fc:	ed9f ca1a 	vldr	s24, [pc, #104]	@ 8000368 <fft_blackman_harris_92db_f32+0x98>
    0.14128f * cosf (2.f * w) - 0.01168f * cosf (3.f * w);
 8000300:	eef0 ba08 	vmov.f32	s23, #8	@ 0x40400000  3.0
   for(uint32_t i=0;i<blockSize;i++)
 8000304:	42ae      	cmp	r6, r5
 8000306:	d102      	bne.n	800030e <fft_blackman_harris_92db_f32+0x3e>

        pDst[i] = w*pDst[i];
   }
}
 8000308:	ecbd 8b0a 	vpop	{d8-d12}
 800030c:	bd70      	pop	{r4, r5, r6, pc}
     w = PI * i * k;
 800030e:	ee07 6a90 	vmov	s15, r6
 8000312:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        w = 0.35875f - 0.48829f * cosf (w) +
 8000316:	eef0 8a6a 	vmov.f32	s17, s21
     w = PI * i * k;
 800031a:	ee28 8a29 	vmul.f32	s16, s16, s19
   for(uint32_t i=0;i<blockSize;i++)
 800031e:	3601      	adds	r6, #1
     w = PI * i * k;
 8000320:	ee28 8a09 	vmul.f32	s16, s16, s18
        w = 0.35875f - 0.48829f * cosf (w) +
 8000324:	eeb0 0a48 	vmov.f32	s0, s16
 8000328:	f006 fc9a 	bl	8006c60 <cosf>
 800032c:	eee0 8a4a 	vfms.f32	s17, s0, s20
    0.14128f * cosf (2.f * w) - 0.01168f * cosf (3.f * w);
 8000330:	ee38 0a08 	vadd.f32	s0, s16, s16
 8000334:	f006 fc94 	bl	8006c60 <cosf>
        w = 0.35875f - 0.48829f * cosf (w) +
 8000338:	eee0 8a0b 	vfma.f32	s17, s0, s22
    0.14128f * cosf (2.f * w) - 0.01168f * cosf (3.f * w);
 800033c:	ee28 0a2b 	vmul.f32	s0, s16, s23
 8000340:	f006 fc8e 	bl	8006c60 <cosf>
        w = 0.35875f - 0.48829f * cosf (w) +
 8000344:	eee0 8a4c 	vfms.f32	s17, s0, s24
        pDst[i] = w*pDst[i];
 8000348:	edd4 7a00 	vldr	s15, [r4]
 800034c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8000350:	ece4 7a01 	vstmia	r4!, {s15}
   for(uint32_t i=0;i<blockSize;i++)
 8000354:	e7d6      	b.n	8000304 <fft_blackman_harris_92db_f32+0x34>
 8000356:	bf00      	nop
 8000358:	40490fdb 	.word	0x40490fdb
 800035c:	3efa0126 	.word	0x3efa0126
 8000360:	3eb7ae14 	.word	0x3eb7ae14
 8000364:	3e10abb4 	.word	0x3e10abb4
 8000368:	3c3f5d79 	.word	0x3c3f5d79

0800036c <USB_send_message>:

void USB_send_message(const char *message) {
 800036c:	b500      	push	{lr}
 800036e:	b09f      	sub	sp, #124	@ 0x7c
 8000370:	4602      	mov	r2, r0
    // 将字符串写入缓冲�?
	uint32_t	TEMP_CDC_BUFFER[CDC_BUFFER_SIZE];
    sprintf((char *)TEMP_CDC_BUFFER, "%s\r\n", message);
 8000372:	4907      	ldr	r1, [pc, #28]	@ (8000390 <USB_send_message+0x24>)
 8000374:	4668      	mov	r0, sp
 8000376:	f005 ffd3 	bl	8006320 <siprintf>
    // 计算消息的实际长�?
    uint32_t message_length = strlen((char *)TEMP_CDC_BUFFER);
 800037a:	4668      	mov	r0, sp
 800037c:	f7ff ff50 	bl	8000220 <strlen>
    // 发�?�缓冲区内容
    CDC_Transmit_FS((uint8_t *)TEMP_CDC_BUFFER, message_length);
 8000380:	b281      	uxth	r1, r0
 8000382:	4668      	mov	r0, sp
 8000384:	f004 fda2 	bl	8004ecc <CDC_Transmit_FS>
}
 8000388:	b01f      	add	sp, #124	@ 0x7c
 800038a:	f85d fb04 	ldr.w	pc, [sp], #4
 800038e:	bf00      	nop
 8000390:	080076e8 	.word	0x080076e8

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b510      	push	{r4, lr}
 8000396:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000398:	2238      	movs	r2, #56	@ 0x38
 800039a:	2100      	movs	r1, #0
 800039c:	a806      	add	r0, sp, #24
 800039e:	f005 ffdf 	bl	8006360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a2:	2214      	movs	r2, #20
 80003a4:	2100      	movs	r1, #0
 80003a6:	a801      	add	r0, sp, #4
 80003a8:	f005 ffda 	bl	8006360 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003ac:	2000      	movs	r0, #0
 80003ae:	f002 fccb 	bl	8002d48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b2:	2221      	movs	r2, #33	@ 0x21
 80003b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003bc:	2101      	movs	r1, #1
 80003be:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c0:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003c2:	2255      	movs	r2, #85	@ 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c6:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80003ca:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003ce:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003d2:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f002 fd17 	bl	8002e08 <HAL_RCC_OscConfig>
 80003da:	b108      	cbz	r0, 80003e0 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003de:	e7fe      	b.n	80003de <SystemClock_Config+0x4a>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003e0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e2:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e8:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003ea:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003f2:	f002 ff4b 	bl	800328c <HAL_RCC_ClockConfig>
 80003f6:	b108      	cbz	r0, 80003fc <SystemClock_Config+0x68>
 80003f8:	b672      	cpsid	i
  while (1)
 80003fa:	e7fe      	b.n	80003fa <SystemClock_Config+0x66>
}
 80003fc:	b014      	add	sp, #80	@ 0x50
 80003fe:	bd10      	pop	{r4, pc}

08000400 <main>:
{
 8000400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000404:	4cb2      	ldr	r4, [pc, #712]	@ (80006d0 <main+0x2d0>)
{
 8000406:	b095      	sub	sp, #84	@ 0x54
  HAL_Init();
 8000408:	f000 fb8c 	bl	8000b24 <HAL_Init>
  SystemClock_Config();
 800040c:	f7ff ffc2 	bl	8000394 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	2214      	movs	r2, #20
 8000412:	2100      	movs	r1, #0
 8000414:	a808      	add	r0, sp, #32
 8000416:	f005 ffa3 	bl	8006360 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800041c:	f043 0320 	orr.w	r3, r3, #32
 8000420:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000422:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000424:	f003 0320 	and.w	r3, r3, #32
 8000428:	9305      	str	r3, [sp, #20]
 800042a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000434:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	9306      	str	r3, [sp, #24]
 800043c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000440:	f043 0302 	orr.w	r3, r3, #2
 8000444:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000446:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000448:	f003 0302 	and.w	r3, r3, #2
 800044c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2101      	movs	r1, #1
 8000452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000458:	f001 fd5c 	bl	8001f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	489d      	ldr	r0, [pc, #628]	@ (80006d4 <main+0x2d4>)
 8000460:	2107      	movs	r1, #7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000464:	f001 fd56 	bl	8001f14 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000468:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	a908      	add	r1, sp, #32
 800046c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000470:	e9cd 6608 	strd	r6, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	f001 fc82 	bl	8001d80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800047c:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047e:	4895      	ldr	r0, [pc, #596]	@ (80006d4 <main+0x2d4>)
 8000480:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048a:	f001 fc79 	bl	8001d80 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800048e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000496:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	9303      	str	r3, [sp, #12]
 800049e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80004a2:	4333      	orrs	r3, r6
 80004a4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80004a6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  hadc2.Instance = ADC2;
 80004a8:	4c8b      	ldr	r4, [pc, #556]	@ (80006d8 <main+0x2d8>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004aa:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ac:	462a      	mov	r2, r5
 80004ae:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b0:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004b2:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b4:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004b6:	f001 f8d9 	bl	800166c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004ba:	200b      	movs	r0, #11
 80004bc:	f001 f908 	bl	80016d0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80004c0:	462a      	mov	r2, r5
 80004c2:	4629      	mov	r1, r5
 80004c4:	200c      	movs	r0, #12
 80004c6:	f001 f8d1 	bl	800166c <HAL_NVIC_SetPriority>
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	2720      	movs	r7, #32
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80004cc:	200c      	movs	r0, #12
 80004ce:	f001 f8ff 	bl	80016d0 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463a      	mov	r2, r7
 80004d4:	4629      	mov	r1, r5
 80004d6:	eb0d 0007 	add.w	r0, sp, r7
 80004da:	f005 ff41 	bl	8006360 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004de:	487f      	ldr	r0, [pc, #508]	@ (80006dc <main+0x2dc>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004e0:	83a5      	strh	r5, [r4, #28]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80004e6:	e9c4 0300 	strd	r0, r3, [r4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ea:	f04f 0804 	mov.w	r8, #4
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004ee:	f44f 6cb4 	mov.w	ip, #1440	@ 0x5a0
 80004f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004f6:	4620      	mov	r0, r4
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f8:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000500:	e9c4 c30b 	strd	ip, r3, [r4, #44]	@ 0x2c
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000504:	f8c4 8018 	str.w	r8, [r4, #24]
  hadc2.Init.NbrOfConversion = 1;
 8000508:	6226      	str	r6, [r4, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800050a:	f884 5024 	strb.w	r5, [r4, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800050e:	f884 6038 	strb.w	r6, [r4, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000512:	63e5      	str	r5, [r4, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000514:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000518:	f000 fb7e 	bl	8000c18 <HAL_ADC_Init>
 800051c:	b108      	cbz	r0, 8000522 <main+0x122>
 800051e:	b672      	cpsid	i
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x120>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000522:	496f      	ldr	r1, [pc, #444]	@ (80006e0 <main+0x2e0>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000524:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000526:	2306      	movs	r3, #6
 8000528:	e9cd 1308 	strd	r1, r3, [sp, #32]
  sConfig.Offset = 0;
 800052c:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800052e:	237f      	movs	r3, #127	@ 0x7f
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000530:	a908      	add	r1, sp, #32
 8000532:	4620      	mov	r0, r4
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000534:	e9cd 380b 	strd	r3, r8, [sp, #44]	@ 0x2c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000538:	f000 fdc8 	bl	80010cc <HAL_ADC_ConfigChannel>
 800053c:	b108      	cbz	r0, 8000542 <main+0x142>
 800053e:	b672      	cpsid	i
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x140>
  htim6.Instance = TIM6;
 8000542:	4c68      	ldr	r4, [pc, #416]	@ (80006e4 <main+0x2e4>)
  htim6.Init.Prescaler = 17-1;
 8000544:	4a68      	ldr	r2, [pc, #416]	@ (80006e8 <main+0x2e8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000546:	900a      	str	r0, [sp, #40]	@ 0x28
 8000548:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim6.Init.Period = 4;
 800054c:	e9c4 0802 	strd	r0, r8, [r4, #8]
  htim6.Init.Prescaler = 17-1;
 8000550:	2310      	movs	r3, #16
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000554:	4620      	mov	r0, r4
  htim6.Init.Prescaler = 17-1;
 8000556:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800055a:	f003 f963 	bl	8003824 <HAL_TIM_Base_Init>
 800055e:	b108      	cbz	r0, 8000564 <main+0x164>
 8000560:	b672      	cpsid	i
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x162>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000564:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000566:	a908      	add	r1, sp, #32
 8000568:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800056a:	9708      	str	r7, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800056c:	f003 f98a 	bl	8003884 <HAL_TIMEx_MasterConfigSynchronization>
 8000570:	4601      	mov	r1, r0
 8000572:	b108      	cbz	r0, 8000578 <main+0x178>
 8000574:	b672      	cpsid	i
  while (1)
 8000576:	e7fe      	b.n	8000576 <main+0x176>
  hdac3.Instance = DAC3;
 8000578:	4c5c      	ldr	r4, [pc, #368]	@ (80006ec <main+0x2ec>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800057a:	2230      	movs	r2, #48	@ 0x30
 800057c:	a808      	add	r0, sp, #32
 800057e:	f005 feef 	bl	8006360 <memset>
  hdac3.Instance = DAC3;
 8000582:	4b5b      	ldr	r3, [pc, #364]	@ (80006f0 <main+0x2f0>)
 8000584:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000586:	4620      	mov	r0, r4
 8000588:	f001 f8c4 	bl	8001714 <HAL_DAC_Init>
 800058c:	4602      	mov	r2, r0
 800058e:	b108      	cbz	r0, 8000594 <main+0x194>
 8000590:	b672      	cpsid	i
  while (1)
 8000592:	e7fe      	b.n	8000592 <main+0x192>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000594:	211e      	movs	r1, #30
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000596:	2302      	movs	r3, #2
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000598:	e9cd 100b 	strd	r1, r0, [sp, #44]	@ 0x2c
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800059c:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005a0:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005a2:	900f      	str	r0, [sp, #60]	@ 0x3c
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005a4:	a908      	add	r1, sp, #32
 80005a6:	4620      	mov	r0, r4
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80005a8:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80005ac:	9308      	str	r3, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005ae:	f001 f95b 	bl	8001868 <HAL_DAC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b108      	cbz	r0, 80005ba <main+0x1ba>
 80005b6:	b672      	cpsid	i
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x1b8>
  hopamp1.Instance = OPAMP1;
 80005ba:	484e      	ldr	r0, [pc, #312]	@ (80006f4 <main+0x2f4>)
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80005bc:	4a4e      	ldr	r2, [pc, #312]	@ (80006f8 <main+0x2f8>)
  hopamp1.Init.InternalOutput = DISABLE;
 80005be:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80005c0:	2580      	movs	r5, #128	@ 0x80
 80005c2:	e9c0 2500 	strd	r2, r5, [r0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80005c6:	2460      	movs	r4, #96	@ 0x60
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80005c8:	220c      	movs	r2, #12
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80005ca:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80005cc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80005ce:	6084      	str	r4, [r0, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80005d0:	6102      	str	r2, [r0, #16]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80005d2:	f001 fca5 	bl	8001f20 <HAL_OPAMP_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b108      	cbz	r0, 80005de <main+0x1de>
 80005da:	b672      	cpsid	i
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x1dc>
  hopamp3.Instance = OPAMP3;
 80005de:	4847      	ldr	r0, [pc, #284]	@ (80006fc <main+0x2fc>)
 80005e0:	4a47      	ldr	r2, [pc, #284]	@ (8000700 <main+0x300>)
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 80005e2:	6084      	str	r4, [r0, #8]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80005e4:	e9c0 2500 	strd	r2, r5, [r0]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80005e8:	2208      	movs	r2, #8
 80005ea:	6102      	str	r2, [r0, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80005ec:	7506      	strb	r6, [r0, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80005ee:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80005f0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80005f2:	f001 fc95 	bl	8001f20 <HAL_OPAMP_Init>
 80005f6:	b108      	cbz	r0, 80005fc <main+0x1fc>
 80005f8:	b672      	cpsid	i
  while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x1fa>
  hcordic.Instance = CORDIC;
 80005fc:	4841      	ldr	r0, [pc, #260]	@ (8000704 <main+0x304>)
 80005fe:	4b42      	ldr	r3, [pc, #264]	@ (8000708 <main+0x308>)
 8000600:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000602:	f001 f808 	bl	8001616 <HAL_CORDIC_Init>
 8000606:	b108      	cbz	r0, 800060c <main+0x20c>
 8000608:	b672      	cpsid	i
  while (1)
 800060a:	e7fe      	b.n	800060a <main+0x20a>
  hfmac.Instance = FMAC;
 800060c:	483f      	ldr	r0, [pc, #252]	@ (800070c <main+0x30c>)
 800060e:	4b40      	ldr	r3, [pc, #256]	@ (8000710 <main+0x310>)
 8000610:	6003      	str	r3, [r0, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000612:	f001 fb82 	bl	8001d1a <HAL_FMAC_Init>
 8000616:	b108      	cbz	r0, 800061c <main+0x21c>
 8000618:	b672      	cpsid	i
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x21a>
  MX_USB_Device_Init();
 800061c:	f004 fc06 	bl	8004e2c <MX_USB_Device_Init>
HAL_OPAMP_Start(&hopamp1);
 8000620:	4834      	ldr	r0, [pc, #208]	@ (80006f4 <main+0x2f4>)
		if (WHILE_FLAG==2) {
 8000622:	4d3c      	ldr	r5, [pc, #240]	@ (8000714 <main+0x314>)
			fft_blackman_harris_92db_f32(WHILE_BUFFER, BUFFER_SIZE);
 8000624:	4e3c      	ldr	r6, [pc, #240]	@ (8000718 <main+0x318>)
HAL_OPAMP_Start(&hopamp1);
 8000626:	f001 fce9 	bl	8001ffc <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp3);
 800062a:	4834      	ldr	r0, [pc, #208]	@ (80006fc <main+0x2fc>)
 800062c:	f001 fce6 	bl	8001ffc <HAL_OPAMP_Start>
HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 8000630:	493a      	ldr	r1, [pc, #232]	@ (800071c <main+0x31c>)
 8000632:	4829      	ldr	r0, [pc, #164]	@ (80006d8 <main+0x2d8>)
 8000634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000638:	f000 ff76 	bl	8001528 <HAL_ADC_Start_DMA>
HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, DAC_BUFFER, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800063c:	2100      	movs	r1, #0
 800063e:	4a38      	ldr	r2, [pc, #224]	@ (8000720 <main+0x320>)
 8000640:	9100      	str	r1, [sp, #0]
 8000642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000646:	4829      	ldr	r0, [pc, #164]	@ (80006ec <main+0x2ec>)
 8000648:	f001 f878 	bl	800173c <HAL_DAC_Start_DMA>
HAL_TIM_Base_Start(&htim6);
 800064c:	4825      	ldr	r0, [pc, #148]	@ (80006e4 <main+0x2e4>)
 800064e:	f003 f853 	bl	80036f8 <HAL_TIM_Base_Start>
arm_rfft_fast_init_f32(&hFFT,BUFFER_SIZE);
 8000652:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000656:	a808      	add	r0, sp, #32
 8000658:	f004 fee0 	bl	800541c <arm_rfft_fast_init_f32>
HAL_Delay(10);
 800065c:	200a      	movs	r0, #10
 800065e:	f000 fa83 	bl	8000b68 <HAL_Delay>
	  USB_send_message("1234567890\r\n");
 8000662:	4c30      	ldr	r4, [pc, #192]	@ (8000724 <main+0x324>)
 8000664:	4620      	mov	r0, r4
 8000666:	f7ff fe81 	bl	800036c <USB_send_message>
	  HAL_Delay(100);
 800066a:	2064      	movs	r0, #100	@ 0x64
 800066c:	f000 fa7c 	bl	8000b68 <HAL_Delay>
		if (WHILE_FLAG==2) {
 8000670:	682b      	ldr	r3, [r5, #0]
 8000672:	2b02      	cmp	r3, #2
 8000674:	d1f6      	bne.n	8000664 <main+0x264>
			fft_blackman_harris_92db_f32(WHILE_BUFFER, BUFFER_SIZE);
 8000676:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800067a:	4630      	mov	r0, r6
 800067c:	f7ff fe28 	bl	80002d0 <fft_blackman_harris_92db_f32>
			arm_rfft_fast_f32(&hFFT, WHILE_BUFFER, FFT_BUFFER, 0);
 8000680:	4a29      	ldr	r2, [pc, #164]	@ (8000728 <main+0x328>)
 8000682:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8000728 <main+0x328>
			  sprintf(CDC_BUFFER,"V:%d,%d\r\n",FFT_BUFFER[i],i+BUFFER_SIZE);
 8000686:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8000730 <main+0x330>
 800068a:	4f28      	ldr	r7, [pc, #160]	@ (800072c <main+0x32c>)
			arm_rfft_fast_f32(&hFFT, WHILE_BUFFER, FFT_BUFFER, 0);
 800068c:	2300      	movs	r3, #0
 800068e:	4631      	mov	r1, r6
 8000690:	a808      	add	r0, sp, #32
 8000692:	f004 ffa7 	bl	80055e4 <arm_rfft_fast_f32>
			HAL_Delay(100);
 8000696:	2064      	movs	r0, #100	@ 0x64
 8000698:	f000 fa66 	bl	8000b68 <HAL_Delay>
 800069c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
			HAL_Delay(2);
 80006a0:	2002      	movs	r0, #2
 80006a2:	f000 fa61 	bl	8000b68 <HAL_Delay>
			  sprintf(CDC_BUFFER,"V:%d,%d\r\n",FFT_BUFFER[i],i+BUFFER_SIZE);
 80006a6:	4623      	mov	r3, r4
 80006a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80006ac:	4649      	mov	r1, r9
 80006ae:	4638      	mov	r0, r7
 80006b0:	f005 fe36 	bl	8006320 <siprintf>
			for (int i = 0; i < BUFFER_SIZE; ++i) {
 80006b4:	3401      	adds	r4, #1
			  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 80006b6:	211e      	movs	r1, #30
 80006b8:	4638      	mov	r0, r7
 80006ba:	f004 fc07 	bl	8004ecc <CDC_Transmit_FS>
			for (int i = 0; i < BUFFER_SIZE; ++i) {
 80006be:	f5b4 6f00 	cmp.w	r4, #2048	@ 0x800
 80006c2:	d1ed      	bne.n	80006a0 <main+0x2a0>
			HAL_Delay(10);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f000 fa4f 	bl	8000b68 <HAL_Delay>
			  WHILE_FLAG=0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	602b      	str	r3, [r5, #0]
 80006ce:	e7c8      	b.n	8000662 <main+0x262>
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000400 	.word	0x48000400
 80006d8:	2000440c 	.word	0x2000440c
 80006dc:	50000100 	.word	0x50000100
 80006e0:	cb8c0000 	.word	0xcb8c0000
 80006e4:	20004214 	.word	0x20004214
 80006e8:	40001000 	.word	0x40001000
 80006ec:	20004370 	.word	0x20004370
 80006f0:	50001000 	.word	0x50001000
 80006f4:	2000429c 	.word	0x2000429c
 80006f8:	40010300 	.word	0x40010300
 80006fc:	20004260 	.word	0x20004260
 8000700:	40010308 	.word	0x40010308
 8000704:	20004384 	.word	0x20004384
 8000708:	40020c00 	.word	0x40020c00
 800070c:	200042d8 	.word	0x200042d8
 8000710:	40021400 	.word	0x40021400
 8000714:	200001f0 	.word	0x200001f0
 8000718:	20001214 	.word	0x20001214
 800071c:	20003214 	.word	0x20003214
 8000720:	20002214 	.word	0x20002214
 8000724:	080076ed 	.word	0x080076ed
 8000728:	20000214 	.word	0x20000214
 800072c:	200001f4 	.word	0x200001f4
 8000730:	080076fa 	.word	0x080076fa

08000734 <HAL_ADC_ConvHalfCpltCallback>:
{
 8000734:	b510      	push	{r4, lr}
	if (WHILE_FLAG==0) {
 8000736:	4c09      	ldr	r4, [pc, #36]	@ (800075c <HAL_ADC_ConvHalfCpltCallback+0x28>)
	for (size_t i = 0; i < BUFFER_SIZE_HALF; i++) 			{		DAC_BUFFER[i] = ADC_BUFFER[i];	}
 8000738:	4909      	ldr	r1, [pc, #36]	@ (8000760 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800073a:	480a      	ldr	r0, [pc, #40]	@ (8000764 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800073c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000740:	f005 fe42 	bl	80063c8 <memcpy>
	if (WHILE_FLAG==0) {
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	b93b      	cbnz	r3, 8000758 <HAL_ADC_ConvHalfCpltCallback+0x24>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000748:	4905      	ldr	r1, [pc, #20]	@ (8000760 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800074a:	4807      	ldr	r0, [pc, #28]	@ (8000768 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800074c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000750:	f005 fe3a 	bl	80063c8 <memcpy>
		WHILE_FLAG=1;
 8000754:	2301      	movs	r3, #1
 8000756:	6023      	str	r3, [r4, #0]
}
 8000758:	bd10      	pop	{r4, pc}
 800075a:	bf00      	nop
 800075c:	200001f0 	.word	0x200001f0
 8000760:	20003214 	.word	0x20003214
 8000764:	20002214 	.word	0x20002214
 8000768:	20001214 	.word	0x20001214

0800076c <HAL_ADC_ConvCpltCallback>:
{
 800076c:	b510      	push	{r4, lr}
	if (WHILE_FLAG==1) {
 800076e:	4c09      	ldr	r4, [pc, #36]	@ (8000794 <HAL_ADC_ConvCpltCallback+0x28>)
	 	for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++) {		DAC_BUFFER[i] = ADC_BUFFER[i];	}
 8000770:	4909      	ldr	r1, [pc, #36]	@ (8000798 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000772:	480a      	ldr	r0, [pc, #40]	@ (800079c <HAL_ADC_ConvCpltCallback+0x30>)
 8000774:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000778:	f005 fe26 	bl	80063c8 <memcpy>
	if (WHILE_FLAG==1) {
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d107      	bne.n	8000792 <HAL_ADC_ConvCpltCallback+0x26>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000782:	4905      	ldr	r1, [pc, #20]	@ (8000798 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000784:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <HAL_ADC_ConvCpltCallback+0x34>)
 8000786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800078a:	f005 fe1d 	bl	80063c8 <memcpy>
		WHILE_FLAG=2;
 800078e:	2302      	movs	r3, #2
 8000790:	6023      	str	r3, [r4, #0]
}
 8000792:	bd10      	pop	{r4, pc}
 8000794:	200001f0 	.word	0x200001f0
 8000798:	20003a14 	.word	0x20003a14
 800079c:	20002a14 	.word	0x20002a14
 80007a0:	20001a14 	.word	0x20001a14

080007a4 <Error_Handler>:
 80007a4:	b672      	cpsid	i
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <Error_Handler+0x2>

080007a8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a8:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <HAL_MspInit+0x44>)
{
 80007aa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80007ae:	f042 0201 	orr.w	r2, r2, #1
 80007b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80007b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80007b6:	f002 0201 	and.w	r2, r2, #1
 80007ba:	9200      	str	r2, [sp, #0]
 80007bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007c0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80007c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80007c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80007ce:	2000      	movs	r0, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80007d2:	f000 f9dd 	bl	8000b90 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80007d6:	f000 f9ef 	bl	8000bb8 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f9e2 	bl	8000ba4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e0:	b003      	add	sp, #12
 80007e2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80007e6:	f002 bb07 	b.w	8002df8 <HAL_PWREx_DisableUCPDDeadBattery>
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f0:	b530      	push	{r4, r5, lr}
 80007f2:	4605      	mov	r5, r0
 80007f4:	b093      	sub	sp, #76	@ 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f6:	2244      	movs	r2, #68	@ 0x44
 80007f8:	2100      	movs	r1, #0
 80007fa:	a801      	add	r0, sp, #4
 80007fc:	f005 fdb0 	bl	8006360 <memset>
  if(hadc->Instance==ADC2)
 8000800:	682a      	ldr	r2, [r5, #0]
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <HAL_ADC_MspInit+0x90>)
 8000804:	429a      	cmp	r2, r3
 8000806:	d138      	bne.n	800087a <HAL_ADC_MspInit+0x8a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000808:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800080c:	9301      	str	r3, [sp, #4]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080e:	a801      	add	r0, sp, #4
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000810:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000814:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000816:	f002 fe33 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	b108      	cbz	r0, 8000820 <HAL_ADC_MspInit+0x30>
    {
      Error_Handler();
 800081c:	f7ff ffc2 	bl	80007a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <HAL_ADC_MspInit+0x94>)

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000822:	4c19      	ldr	r4, [pc, #100]	@ (8000888 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000824:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000826:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800082a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800082e:	4a17      	ldr	r2, [pc, #92]	@ (800088c <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	9b00      	ldr	r3, [sp, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000838:	2324      	movs	r3, #36	@ 0x24
 800083a:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800083e:	2180      	movs	r1, #128	@ 0x80
 8000840:	f44f 7200 	mov.w	r2, #512	@ 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000844:	f44f 6000 	mov.w	r0, #2048	@ 0x800
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800084c:	2220      	movs	r2, #32
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800084e:	2300      	movs	r3, #0
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000850:	e9c4 0206 	strd	r0, r2, [r4, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000854:	4620      	mov	r0, r4
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000856:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800085a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800085c:	f001 f946 	bl	8001aec <HAL_DMA_Init>
 8000860:	b108      	cbz	r0, 8000866 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000862:	f7ff ff9f 	bl	80007a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800086a:	656c      	str	r4, [r5, #84]	@ 0x54
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800086c:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800086e:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000870:	f000 fefc 	bl	800166c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000874:	2012      	movs	r0, #18
 8000876:	f000 ff2b 	bl	80016d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800087a:	b013      	add	sp, #76	@ 0x4c
 800087c:	bd30      	pop	{r4, r5, pc}
 800087e:	bf00      	nop
 8000880:	50000100 	.word	0x50000100
 8000884:	40021000 	.word	0x40021000
 8000888:	200043ac 	.word	0x200043ac
 800088c:	40020008 	.word	0x40020008

08000890 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8000890:	6802      	ldr	r2, [r0, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_CORDIC_MspInit+0x28>)
 8000894:	429a      	cmp	r2, r3
{
 8000896:	b082      	sub	sp, #8
  if(hcordic->Instance==CORDIC)
 8000898:	d10c      	bne.n	80008b4 <HAL_CORDIC_MspInit+0x24>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800089a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 800089e:	f042 0208 	orr.w	r2, r2, #8
 80008a2:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
 80008a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80008aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008ac:	f003 0308 	and.w	r3, r3, #8
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80008b4:	b002      	add	sp, #8
 80008b6:	4770      	bx	lr
 80008b8:	40020c00 	.word	0x40020c00

080008bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80008bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hdac->Instance==DAC3)
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <HAL_DAC_MspInit+0x68>)
 80008c0:	6802      	ldr	r2, [r0, #0]
 80008c2:	429a      	cmp	r2, r3
{
 80008c4:	4605      	mov	r5, r0
  if(hdac->Instance==DAC3)
 80008c6:	d12a      	bne.n	800091e <HAL_DAC_MspInit+0x62>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80008c8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 80008cc:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel2;
 80008d0:	4c15      	ldr	r4, [pc, #84]	@ (8000928 <HAL_DAC_MspInit+0x6c>)
    __HAL_RCC_DAC3_CLK_ENABLE();
 80008d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008d4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80008d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 80008dc:	4a13      	ldr	r2, [pc, #76]	@ (800092c <HAL_DAC_MspInit+0x70>)
    __HAL_RCC_DAC3_CLK_ENABLE();
 80008de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	9b01      	ldr	r3, [sp, #4]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 80008e6:	2366      	movs	r3, #102	@ 0x66
 80008e8:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ec:	2110      	movs	r1, #16
 80008ee:	2300      	movs	r3, #0
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008f0:	2080      	movs	r0, #128	@ 0x80
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f2:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008fa:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 80008fe:	f44f 6c00 	mov.w	ip, #2048	@ 0x800
 8000902:	2320      	movs	r3, #32
 8000904:	e9c4 c306 	strd	ip, r3, [r4, #24]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8000908:	4620      	mov	r0, r4
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800090a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800090e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8000910:	f001 f8ec 	bl	8001aec <HAL_DMA_Init>
 8000914:	b108      	cbz	r0, 800091a <HAL_DAC_MspInit+0x5e>
    {
      Error_Handler();
 8000916:	f7ff ff45 	bl	80007a4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 800091a:	60ac      	str	r4, [r5, #8]
 800091c:	62a5      	str	r5, [r4, #40]	@ 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 800091e:	b003      	add	sp, #12
 8000920:	bd30      	pop	{r4, r5, pc}
 8000922:	bf00      	nop
 8000924:	50001000 	.word	0x50001000
 8000928:	20004310 	.word	0x20004310
 800092c:	4002001c 	.word	0x4002001c

08000930 <HAL_FMAC_MspInit>:
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
  if(hfmac->Instance==FMAC)
 8000930:	6802      	ldr	r2, [r0, #0]
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <HAL_FMAC_MspInit+0x24>)
 8000934:	429a      	cmp	r2, r3
{
 8000936:	b082      	sub	sp, #8
  if(hfmac->Instance==FMAC)
 8000938:	d10a      	bne.n	8000950 <HAL_FMAC_MspInit+0x20>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800093a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800093e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000940:	f042 0210 	orr.w	r2, r2, #16
 8000944:	649a      	str	r2, [r3, #72]	@ 0x48
 8000946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8000950:	b002      	add	sp, #8
 8000952:	4770      	bx	lr
 8000954:	40021400 	.word	0x40021400

08000958 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000958:	b510      	push	{r4, lr}
 800095a:	4604      	mov	r4, r0
 800095c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	2214      	movs	r2, #20
 8000960:	2100      	movs	r1, #0
 8000962:	a803      	add	r0, sp, #12
 8000964:	f005 fcfc 	bl	8006360 <memset>
  if(hopamp->Instance==OPAMP1)
 8000968:	6823      	ldr	r3, [r4, #0]
 800096a:	4a13      	ldr	r2, [pc, #76]	@ (80009b8 <HAL_OPAMP_MspInit+0x60>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d114      	bne.n	800099a <HAL_OPAMP_MspInit+0x42>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <HAL_OPAMP_MspInit+0x64>)
 8000972:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000974:	f042 0201 	orr.w	r2, r2, #1
 8000978:	64da      	str	r2, [r3, #76]	@ 0x4c
 800097a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	9b01      	ldr	r3, [sp, #4]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000984:	2304      	movs	r3, #4

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**OPAMP3 GPIO Configuration
    PA1     ------> OPAMP3_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000986:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000990:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f001 f9f5 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8000996:	b008      	add	sp, #32
 8000998:	bd10      	pop	{r4, pc}
  else if(hopamp->Instance==OPAMP3)
 800099a:	4a09      	ldr	r2, [pc, #36]	@ (80009c0 <HAL_OPAMP_MspInit+0x68>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d1fa      	bne.n	8000996 <HAL_OPAMP_MspInit+0x3e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_OPAMP_MspInit+0x64>)
 80009a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009a4:	f042 0201 	orr.w	r2, r2, #1
 80009a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009b4:	2302      	movs	r3, #2
 80009b6:	e7e6      	b.n	8000986 <HAL_OPAMP_MspInit+0x2e>
 80009b8:	40010300 	.word	0x40010300
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010308 	.word	0x40010308

080009c4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 80009c4:	6802      	ldr	r2, [r0, #0]
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_TIM_Base_MspInit+0x24>)
 80009c8:	429a      	cmp	r2, r3
{
 80009ca:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM6)
 80009cc:	d10a      	bne.n	80009e4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009ce:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80009d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009d4:	f042 0210 	orr.w	r2, r2, #16
 80009d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80009da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80009e4:	b002      	add	sp, #8
 80009e6:	4770      	bx	lr
 80009e8:	40001000 	.word	0x40001000

080009ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler>

080009ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler>

080009f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler>

080009f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler>

080009f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler>

080009f6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 b8a2 	b.w	8000b44 <HAL_IncTick>

08000a00 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000a00:	4801      	ldr	r0, [pc, #4]	@ (8000a08 <DMA1_Channel1_IRQHandler+0x8>)
 8000a02:	f001 b923 	b.w	8001c4c <HAL_DMA_IRQHandler>
 8000a06:	bf00      	nop
 8000a08:	200043ac 	.word	0x200043ac

08000a0c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8000a0c:	4801      	ldr	r0, [pc, #4]	@ (8000a14 <DMA1_Channel2_IRQHandler+0x8>)
 8000a0e:	f001 b91d 	b.w	8001c4c <HAL_DMA_IRQHandler>
 8000a12:	bf00      	nop
 8000a14:	20004310 	.word	0x20004310

08000a18 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000a18:	4801      	ldr	r0, [pc, #4]	@ (8000a20 <ADC1_2_IRQHandler+0x8>)
 8000a1a:	f000 b9f7 	b.w	8000e0c <HAL_ADC_IRQHandler>
 8000a1e:	bf00      	nop
 8000a20:	2000440c 	.word	0x2000440c

08000a24 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a24:	4801      	ldr	r0, [pc, #4]	@ (8000a2c <USB_LP_IRQHandler+0x8>)
 8000a26:	f001 bb7b 	b.w	8002120 <HAL_PCD_IRQHandler>
 8000a2a:	bf00      	nop
 8000a2c:	20005374 	.word	0x20005374

08000a30 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a30:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <_sbrk+0x30>)
 8000a32:	6811      	ldr	r1, [r2, #0]
{
 8000a34:	b510      	push	{r4, lr}
 8000a36:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000a38:	b909      	cbnz	r1, 8000a3e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000a3a:	490a      	ldr	r1, [pc, #40]	@ (8000a64 <_sbrk+0x34>)
 8000a3c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3e:	6810      	ldr	r0, [r2, #0]
 8000a40:	4909      	ldr	r1, [pc, #36]	@ (8000a68 <_sbrk+0x38>)
 8000a42:	4c0a      	ldr	r4, [pc, #40]	@ (8000a6c <_sbrk+0x3c>)
 8000a44:	4403      	add	r3, r0
 8000a46:	1b09      	subs	r1, r1, r4
 8000a48:	428b      	cmp	r3, r1
 8000a4a:	d906      	bls.n	8000a5a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000a4c:	f005 fc90 	bl	8006370 <__errno>
 8000a50:	230c      	movs	r3, #12
 8000a52:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000a58:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000a5a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000a5c:	e7fc      	b.n	8000a58 <_sbrk+0x28>
 8000a5e:	bf00      	nop
 8000a60:	20004478 	.word	0x20004478
 8000a64:	20005798 	.word	0x20005798
 8000a68:	20008000 	.word	0x20008000
 8000a6c:	00000400 	.word	0x00000400

08000a70 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a70:	4a03      	ldr	r2, [pc, #12]	@ (8000a80 <SystemInit+0x10>)
 8000a72:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000a76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a84:	480d      	ldr	r0, [pc, #52]	@ (8000abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a86:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff fff2 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	@ (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f005 fc63 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fca3 	bl	8000400 <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   r0, =_estack
 8000abc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000ac8:	0801ab54 	.word	0x0801ab54
  ldr r2, =_sbss
 8000acc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000ad0:	20005798 	.word	0x20005798

08000ad4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <COMP1_2_3_IRQHandler>
	...

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_InitTick+0x40>)
 8000adc:	681a      	ldr	r2, [r3, #0]
{
 8000ade:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000ae0:	b90a      	cbnz	r2, 8000ae6 <HAL_InitTick+0xe>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae2:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000ae4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8000aee:	4a0b      	ldr	r2, [pc, #44]	@ (8000b1c <HAL_InitTick+0x44>)
 8000af0:	6810      	ldr	r0, [r2, #0]
 8000af2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000af6:	f000 fdf9 	bl	80016ec <HAL_SYSTICK_Config>
 8000afa:	4604      	mov	r4, r0
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d1f0      	bne.n	8000ae2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	2d0f      	cmp	r5, #15
 8000b02:	d8ee      	bhi.n	8000ae2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	4602      	mov	r2, r0
 8000b06:	4629      	mov	r1, r5
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f000 fdae 	bl	800166c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b10:	4b03      	ldr	r3, [pc, #12]	@ (8000b20 <HAL_InitTick+0x48>)
 8000b12:	4620      	mov	r0, r4
 8000b14:	601d      	str	r5, [r3, #0]
  return status;
 8000b16:	e7e5      	b.n	8000ae4 <HAL_InitTick+0xc>
 8000b18:	20000004 	.word	0x20000004
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000008 	.word	0x20000008

08000b24 <HAL_Init>:
{
 8000b24:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 fd8e 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2c:	200f      	movs	r0, #15
 8000b2e:	f7ff ffd3 	bl	8000ad8 <HAL_InitTick>
 8000b32:	4604      	mov	r4, r0
 8000b34:	b918      	cbnz	r0, 8000b3e <HAL_Init+0x1a>
    HAL_MspInit();
 8000b36:	f7ff fe37 	bl	80007a8 <HAL_MspInit>
}
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000b3e:	2401      	movs	r4, #1
 8000b40:	e7fb      	b.n	8000b3a <HAL_Init+0x16>
	...

08000b44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b44:	4a03      	ldr	r2, [pc, #12]	@ (8000b54 <HAL_IncTick+0x10>)
 8000b46:	4904      	ldr	r1, [pc, #16]	@ (8000b58 <HAL_IncTick+0x14>)
 8000b48:	6813      	ldr	r3, [r2, #0]
 8000b4a:	6809      	ldr	r1, [r1, #0]
 8000b4c:	440b      	add	r3, r1
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000447c 	.word	0x2000447c
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b5c:	4b01      	ldr	r3, [pc, #4]	@ (8000b64 <HAL_GetTick+0x8>)
 8000b5e:	6818      	ldr	r0, [r3, #0]
}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	2000447c 	.word	0x2000447c

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff fff6 	bl	8000b5c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b70:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b72:	bf1c      	itt	ne
 8000b74:	4b05      	ldrne	r3, [pc, #20]	@ (8000b8c <HAL_Delay+0x24>)
 8000b76:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	bf18      	it	ne
 8000b7c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7e:	f7ff ffed 	bl	8000b5c <HAL_GetTick>
 8000b82:	1b43      	subs	r3, r0, r5
 8000b84:	42a3      	cmp	r3, r4
 8000b86:	d3fa      	bcc.n	8000b7e <HAL_Delay+0x16>
  {
  }
}
 8000b88:	bd38      	pop	{r3, r4, r5, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000b90:	4a03      	ldr	r2, [pc, #12]	@ (8000ba0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8000b92:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000b94:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b98:	4303      	orrs	r3, r0
 8000b9a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40010000 	.word	0x40010000

08000ba4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000ba4:	4a03      	ldr	r2, [pc, #12]	@ (8000bb4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8000ba6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000ba8:	f023 0302 	bic.w	r3, r3, #2
 8000bac:	4303      	orrs	r3, r0
 8000bae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40010000 	.word	0x40010000

08000bb8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000bb8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000bba:	4c0a      	ldr	r4, [pc, #40]	@ (8000be4 <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 8000bbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000bc4:	f7ff ffca 	bl	8000b5c <HAL_GetTick>
 8000bc8:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000bca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000bcc:	071b      	lsls	r3, r3, #28
 8000bce:	d501      	bpl.n	8000bd4 <HAL_SYSCFG_EnableVREFBUF+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8000bd0:	2000      	movs	r0, #0
}
 8000bd2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000bd4:	f7ff ffc2 	bl	8000b5c <HAL_GetTick>
 8000bd8:	1b40      	subs	r0, r0, r5
 8000bda:	280a      	cmp	r0, #10
 8000bdc:	d9f5      	bls.n	8000bca <HAL_SYSCFG_EnableVREFBUF+0x12>
      return HAL_TIMEOUT;
 8000bde:	2003      	movs	r0, #3
 8000be0:	e7f7      	b.n	8000bd2 <HAL_SYSCFG_EnableVREFBUF+0x1a>
 8000be2:	bf00      	nop
 8000be4:	40010000 	.word	0x40010000

08000be8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000be8:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000bea:	0dcc      	lsrs	r4, r1, #23
 8000bec:	f004 0404 	and.w	r4, r4, #4
 8000bf0:	3014      	adds	r0, #20
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000bf2:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000bf6:	5903      	ldr	r3, [r0, r4]
 8000bf8:	2507      	movs	r5, #7
 8000bfa:	408d      	lsls	r5, r1
 8000bfc:	ea23 0305 	bic.w	r3, r3, r5
 8000c00:	408a      	lsls	r2, r1
 8000c02:	4313      	orrs	r3, r2
 8000c04:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c06:	bd30      	pop	{r4, r5, pc}

08000c08 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c08:	6880      	ldr	r0, [r0, #8]
}
 8000c0a:	f000 0001 	and.w	r0, r0, #1
 8000c0e:	4770      	bx	lr

08000c10 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c10:	6880      	ldr	r0, [r0, #8]
}
 8000c12:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000c16:	4770      	bx	lr

08000c18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c1e:	4604      	mov	r4, r0
 8000c20:	2800      	cmp	r0, #0
 8000c22:	f000 80dd 	beq.w	8000de0 <HAL_ADC_Init+0x1c8>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c26:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8000c28:	b925      	cbnz	r5, 8000c34 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c2a:	f7ff fde1 	bl	80007f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c2e:	6625      	str	r5, [r4, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c30:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000c34:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	0095      	lsls	r5, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c3a:	bf41      	itttt	mi
 8000c3c:	689a      	ldrmi	r2, [r3, #8]
 8000c3e:	f022 4220 	bicmi.w	r2, r2, #2684354560	@ 0xa0000000
 8000c42:	f022 023f 	bicmi.w	r2, r2, #63	@ 0x3f
 8000c46:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	00d0      	lsls	r0, r2, #3
 8000c4c:	f140 80a0 	bpl.w	8000d90 <HAL_ADC_Init+0x178>
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	00d1      	lsls	r1, r2, #3
 8000c54:	f100 80b3 	bmi.w	8000dbe <HAL_ADC_Init+0x1a6>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c58:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000c5a:	f042 0210 	orr.w	r2, r2, #16
 8000c5e:	65e2      	str	r2, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c60:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8000c62:	f042 0201 	orr.w	r2, r2, #1
 8000c66:	6622      	str	r2, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000c68:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ffd0 	bl	8000c10 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c70:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000c72:	f002 0210 	and.w	r2, r2, #16
 8000c76:	4302      	orrs	r2, r0
 8000c78:	f040 80ae 	bne.w	8000dd8 <HAL_ADC_Init+0x1c0>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c7c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000c7e:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8000c82:	f042 0202 	orr.w	r2, r2, #2
 8000c86:	65e2      	str	r2, [r4, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffbd 	bl	8000c08 <LL_ADC_IsEnabled>
 8000c8e:	b980      	cbnz	r0, 8000cb2 <HAL_ADC_Init+0x9a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000c94:	f7ff ffb8 	bl	8000c08 <LL_ADC_IsEnabled>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	4852      	ldr	r0, [pc, #328]	@ (8000de4 <HAL_ADC_Init+0x1cc>)
 8000c9c:	f7ff ffb4 	bl	8000c08 <LL_ADC_IsEnabled>
 8000ca0:	4302      	orrs	r2, r0
 8000ca2:	d106      	bne.n	8000cb2 <HAL_ADC_Init+0x9a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ca4:	4850      	ldr	r0, [pc, #320]	@ (8000de8 <HAL_ADC_Init+0x1d0>)
 8000ca6:	6865      	ldr	r5, [r4, #4]
 8000ca8:	6882      	ldr	r2, [r0, #8]
 8000caa:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	6082      	str	r2, [r0, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8000cb2:	68e5      	ldr	r5, [r4, #12]
 8000cb4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000cb6:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8000cba:	432a      	orrs	r2, r5
 8000cbc:	68a5      	ldr	r5, [r4, #8]
 8000cbe:	432a      	orrs	r2, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cc0:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cc2:	2801      	cmp	r0, #1
                 hadc->Init.DataAlign                                                   |
 8000cc4:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cc8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ccc:	bf02      	ittt	eq
 8000cce:	6aa0      	ldreq	r0, [r4, #40]	@ 0x28
 8000cd0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8000cd4:	ea42 4240 	orreq.w	r2, r2, r0, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cd8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000cda:	b120      	cbz	r0, 8000ce6 <HAL_ADC_Init+0xce>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8000cdc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cde:	f400 7078 	and.w	r0, r0, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000ce2:	4328      	orrs	r0, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ce4:	4302      	orrs	r2, r0
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000ce6:	68dd      	ldr	r5, [r3, #12]
 8000ce8:	4840      	ldr	r0, [pc, #256]	@ (8000dec <HAL_ADC_Init+0x1d4>)
 8000cea:	4028      	ands	r0, r5
 8000cec:	4310      	orrs	r0, r2
 8000cee:	60d8      	str	r0, [r3, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000cf0:	691a      	ldr	r2, [r3, #16]
 8000cf2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8000cf4:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8000cf8:	4302      	orrs	r2, r0
 8000cfa:	611a      	str	r2, [r3, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	0712      	lsls	r2, r2, #28
 8000d00:	d42e      	bmi.n	8000d60 <HAL_ADC_Init+0x148>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000d02:	68d8      	ldr	r0, [r3, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d04:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d08:	7f25      	ldrb	r5, [r4, #28]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d0a:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000d0c:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d10:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000d14:	f020 0002 	bic.w	r0, r0, #2
 8000d18:	4302      	orrs	r2, r0

      if (hadc->Init.GainCompensation != 0UL)
 8000d1a:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000d1c:	60da      	str	r2, [r3, #12]
      if (hadc->Init.GainCompensation != 0UL)
 8000d1e:	4834      	ldr	r0, [pc, #208]	@ (8000df0 <HAL_ADC_Init+0x1d8>)
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000d20:	691a      	ldr	r2, [r3, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d04d      	beq.n	8000dc2 <HAL_ADC_Init+0x1aa>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000d26:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000d2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000d2c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8000d30:	4002      	ands	r2, r0
 8000d32:	432a      	orrs	r2, r5
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000d34:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d38:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 8000d3c:	2a01      	cmp	r2, #1
 8000d3e:	d147      	bne.n	8000dd0 <HAL_ADC_Init+0x1b8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d40:	e9d4 2511 	ldrd	r2, r5, [r4, #68]	@ 0x44
 8000d44:	6918      	ldr	r0, [r3, #16]
 8000d46:	f420 60ff 	bic.w	r0, r0, #2040	@ 0x7f8
 8000d4a:	f020 0004 	bic.w	r0, r0, #4
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	4302      	orrs	r2, r0
 8000d52:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8000d54:	4302      	orrs	r2, r0
 8000d56:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8000d58:	4302      	orrs	r2, r0
 8000d5a:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d5e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d60:	6962      	ldr	r2, [r4, #20]
 8000d62:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d64:	bf05      	ittet	eq
 8000d66:	6b18      	ldreq	r0, [r3, #48]	@ 0x30
 8000d68:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d6a:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d6c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000d70:	bf06      	itte	eq
 8000d72:	f020 000f 	biceq.w	r0, r0, #15
 8000d76:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d78:	f022 020f 	bicne.w	r2, r2, #15
 8000d7c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d7e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000d80:	f023 0303 	bic.w	r3, r3, #3
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	b003      	add	sp, #12
 8000d8e:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8000d90:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d92:	4918      	ldr	r1, [pc, #96]	@ (8000df4 <HAL_ADC_Init+0x1dc>)
 8000d94:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8000d98:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8000d9c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <HAL_ADC_Init+0x1e0>)
 8000da4:	6812      	ldr	r2, [r2, #0]
 8000da6:	fbb2 f2f1 	udiv	r2, r2, r1
 8000daa:	3201      	adds	r2, #1
 8000dac:	0052      	lsls	r2, r2, #1
      wait_loop_index--;
 8000dae:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8000db0:	9a01      	ldr	r2, [sp, #4]
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f43f af4c 	beq.w	8000c50 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8000db8:	9a01      	ldr	r2, [sp, #4]
 8000dba:	3a01      	subs	r2, #1
 8000dbc:	e7f7      	b.n	8000dae <HAL_ADC_Init+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	e753      	b.n	8000c6a <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000dc2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000dc6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000dc8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8000dcc:	4002      	ands	r2, r0
 8000dce:	e7b1      	b.n	8000d34 <HAL_ADC_Init+0x11c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	e7c2      	b.n	8000d5e <HAL_ADC_Init+0x146>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8000de0:	2101      	movs	r1, #1
 8000de2:	e7d2      	b.n	8000d8a <HAL_ADC_Init+0x172>
 8000de4:	50000100 	.word	0x50000100
 8000de8:	50000300 	.word	0x50000300
 8000dec:	fff04007 	.word	0xfff04007
 8000df0:	ffffc000 	.word	0xffffc000
 8000df4:	00030d40 	.word	0x00030d40
 8000df8:	20000000 	.word	0x20000000

08000dfc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000dfc:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000dfe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8000e00:	f7ff fc98 	bl	8000734 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e04:	bd08      	pop	{r3, pc}

08000e06 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8000e06:	4770      	bx	lr

08000e08 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8000e08:	4770      	bx	lr
	...

08000e0c <HAL_ADC_IRQHandler>:
{
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000e0e:	6803      	ldr	r3, [r0, #0]
 8000e10:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000e12:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e14:	4b8a      	ldr	r3, [pc, #552]	@ (8001040 <HAL_ADC_IRQHandler+0x234>)
 8000e16:	689f      	ldr	r7, [r3, #8]
{
 8000e18:	4604      	mov	r4, r0
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000e1a:	07b0      	lsls	r0, r6, #30
 8000e1c:	f007 071f 	and.w	r7, r7, #31
 8000e20:	d50e      	bpl.n	8000e40 <HAL_ADC_IRQHandler+0x34>
 8000e22:	07a9      	lsls	r1, r5, #30
 8000e24:	d50c      	bpl.n	8000e40 <HAL_ADC_IRQHandler+0x34>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e26:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000e28:	06da      	lsls	r2, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000e2a:	bf5e      	ittt	pl
 8000e2c:	6de3      	ldrpl	r3, [r4, #92]	@ 0x5c
 8000e2e:	f443 6300 	orrpl.w	r3, r3, #2048	@ 0x800
 8000e32:	65e3      	strpl	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000e34:	4620      	mov	r0, r4
 8000e36:	f000 fbed 	bl	8001614 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000e3a:	6823      	ldr	r3, [r4, #0]
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e40:	0773      	lsls	r3, r6, #29
 8000e42:	d501      	bpl.n	8000e48 <HAL_ADC_IRQHandler+0x3c>
 8000e44:	0768      	lsls	r0, r5, #29
 8000e46:	d403      	bmi.n	8000e50 <HAL_ADC_IRQHandler+0x44>
 8000e48:	0731      	lsls	r1, r6, #28
 8000e4a:	d537      	bpl.n	8000ebc <HAL_ADC_IRQHandler+0xb0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000e4c:	072a      	lsls	r2, r5, #28
 8000e4e:	d535      	bpl.n	8000ebc <HAL_ADC_IRQHandler+0xb0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e50:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000e52:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e54:	bf5e      	ittt	pl
 8000e56:	6de3      	ldrpl	r3, [r4, #92]	@ 0x5c
 8000e58:	f443 7300 	orrpl.w	r3, r3, #512	@ 0x200
 8000e5c:	65e3      	strpl	r3, [r4, #92]	@ 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000e5e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8000e66:	d123      	bne.n	8000eb0 <HAL_ADC_IRQHandler+0xa4>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e68:	4a76      	ldr	r2, [pc, #472]	@ (8001044 <HAL_ADC_IRQHandler+0x238>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d105      	bne.n	8000e7a <HAL_ADC_IRQHandler+0x6e>
 8000e6e:	f240 2221 	movw	r2, #545	@ 0x221
 8000e72:	40fa      	lsrs	r2, r7
 8000e74:	07d0      	lsls	r0, r2, #31
 8000e76:	f140 80bf 	bpl.w	8000ff8 <HAL_ADC_IRQHandler+0x1ec>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000e7a:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000e7c:	0491      	lsls	r1, r2, #18
 8000e7e:	d417      	bmi.n	8000eb0 <HAL_ADC_IRQHandler+0xa4>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	0712      	lsls	r2, r2, #28
 8000e84:	d514      	bpl.n	8000eb0 <HAL_ADC_IRQHandler+0xa4>
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fec2 	bl	8000c10 <LL_ADC_REG_IsConversionOngoing>
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	f040 80b7 	bne.w	8001000 <HAL_ADC_IRQHandler+0x1f4>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	f022 020c 	bic.w	r2, r2, #12
 8000e98:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e9a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ea0:	65e3      	str	r3, [r4, #92]	@ 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000ea2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000ea4:	04d8      	lsls	r0, r3, #19
 8000ea6:	d403      	bmi.n	8000eb0 <HAL_ADC_IRQHandler+0xa4>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ea8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff fc5b 	bl	800076c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	220c      	movs	r2, #12
 8000eba:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000ebc:	06b1      	lsls	r1, r6, #26
 8000ebe:	d501      	bpl.n	8000ec4 <HAL_ADC_IRQHandler+0xb8>
 8000ec0:	06aa      	lsls	r2, r5, #26
 8000ec2:	d403      	bmi.n	8000ecc <HAL_ADC_IRQHandler+0xc0>
 8000ec4:	0673      	lsls	r3, r6, #25
 8000ec6:	d53b      	bpl.n	8000f40 <HAL_ADC_IRQHandler+0x134>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000ec8:	0668      	lsls	r0, r5, #25
 8000eca:	d539      	bpl.n	8000f40 <HAL_ADC_IRQHandler+0x134>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ecc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ece:	4a5d      	ldr	r2, [pc, #372]	@ (8001044 <HAL_ADC_IRQHandler+0x238>)
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ed0:	06d9      	lsls	r1, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ed2:	bf5e      	ittt	pl
 8000ed4:	6de3      	ldrpl	r3, [r4, #92]	@ 0x5c
 8000ed6:	f443 5300 	orrpl.w	r3, r3, #8192	@ 0x2000
 8000eda:	65e3      	strpl	r3, [r4, #92]	@ 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000edc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000ede:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ee0:	68d8      	ldr	r0, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ee2:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000ee4:	f401 71c0 	and.w	r1, r1, #384	@ 0x180
 8000ee8:	f040 8093 	bne.w	8001012 <HAL_ADC_IRQHandler+0x206>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000eec:	22c1      	movs	r2, #193	@ 0xc1
 8000eee:	40fa      	lsrs	r2, r7
 8000ef0:	07d2      	lsls	r2, r2, #31
 8000ef2:	f100 808e 	bmi.w	8001012 <HAL_ADC_IRQHandler+0x206>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000ef6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000efa:	68d2      	ldr	r2, [r2, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8000efc:	b9d1      	cbnz	r1, 8000f34 <HAL_ADC_IRQHandler+0x128>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8000efe:	0191      	lsls	r1, r2, #6
 8000f00:	d505      	bpl.n	8000f0e <HAL_ADC_IRQHandler+0x102>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8000f02:	f402 5100 	and.w	r1, r2, #8192	@ 0x2000
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f06:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8000f0a:	4301      	orrs	r1, r0
 8000f0c:	d112      	bne.n	8000f34 <HAL_ADC_IRQHandler+0x128>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	0649      	lsls	r1, r1, #25
 8000f12:	d50f      	bpl.n	8000f34 <HAL_ADC_IRQHandler+0x128>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000f14:	0292      	lsls	r2, r2, #10
 8000f16:	d40d      	bmi.n	8000f34 <HAL_ADC_IRQHandler+0x128>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	0710      	lsls	r0, r2, #28
 8000f1c:	d47b      	bmi.n	8001016 <HAL_ADC_IRQHandler+0x20a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8000f24:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000f26:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000f28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f2c:	65e3      	str	r3, [r4, #92]	@ 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000f2e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000f30:	05d9      	lsls	r1, r3, #23
 8000f32:	d579      	bpl.n	8001028 <HAL_ADC_IRQHandler+0x21c>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f34:	4620      	mov	r0, r4
 8000f36:	f000 fb69 	bl	800160c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	2260      	movs	r2, #96	@ 0x60
 8000f3e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000f40:	0632      	lsls	r2, r6, #24
 8000f42:	d50b      	bpl.n	8000f5c <HAL_ADC_IRQHandler+0x150>
 8000f44:	062b      	lsls	r3, r5, #24
 8000f46:	d509      	bpl.n	8000f5c <HAL_ADC_IRQHandler+0x150>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f48:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f4e:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f50:	4620      	mov	r0, r4
 8000f52:	f7ff ff58 	bl	8000e06 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	2280      	movs	r2, #128	@ 0x80
 8000f5a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000f5c:	05f0      	lsls	r0, r6, #23
 8000f5e:	d50c      	bpl.n	8000f7a <HAL_ADC_IRQHandler+0x16e>
 8000f60:	05e9      	lsls	r1, r5, #23
 8000f62:	d50a      	bpl.n	8000f7a <HAL_ADC_IRQHandler+0x16e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000f64:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6a:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f000 fb4f 	bl	8001610 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f78:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000f7a:	05b2      	lsls	r2, r6, #22
 8000f7c:	d50c      	bpl.n	8000f98 <HAL_ADC_IRQHandler+0x18c>
 8000f7e:	05ab      	lsls	r3, r5, #22
 8000f80:	d50a      	bpl.n	8000f98 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000f82:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f88:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f000 fb41 	bl	8001612 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f96:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000f98:	06f0      	lsls	r0, r6, #27
 8000f9a:	d518      	bpl.n	8000fce <HAL_ADC_IRQHandler+0x1c2>
 8000f9c:	06e9      	lsls	r1, r5, #27
 8000f9e:	d516      	bpl.n	8000fce <HAL_ADC_IRQHandler+0x1c2>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000fa0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000fa2:	b133      	cbz	r3, 8000fb2 <HAL_ADC_IRQHandler+0x1a6>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8000fa4:	2f00      	cmp	r7, #0
 8000fa6:	d044      	beq.n	8001032 <HAL_ADC_IRQHandler+0x226>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000fa8:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <HAL_ADC_IRQHandler+0x234>)
 8000faa:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000fac:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8000fb0:	d00a      	beq.n	8000fc8 <HAL_ADC_IRQHandler+0x1bc>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000fb2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000fb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fb8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000fba:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6623      	str	r3, [r4, #96]	@ 0x60
      HAL_ADC_ErrorCallback(hadc);
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff ff20 	bl	8000e08 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	2210      	movs	r2, #16
 8000fcc:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8000fce:	0572      	lsls	r2, r6, #21
 8000fd0:	d534      	bpl.n	800103c <HAL_ADC_IRQHandler+0x230>
 8000fd2:	056b      	lsls	r3, r5, #21
 8000fd4:	d532      	bpl.n	800103c <HAL_ADC_IRQHandler+0x230>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000fd6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fdc:	65e3      	str	r3, [r4, #92]	@ 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000fde:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	6623      	str	r3, [r4, #96]	@ 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fec:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000fee:	4620      	mov	r0, r4
}
 8000ff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000ff4:	f000 bb0b 	b.w	800160e <HAL_ADCEx_InjectedQueueOverflowCallback>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000ff8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ffc:	68d2      	ldr	r2, [r2, #12]
 8000ffe:	e73d      	b.n	8000e7c <HAL_ADC_IRQHandler+0x70>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001000:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	65e3      	str	r3, [r4, #92]	@ 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001008:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6623      	str	r3, [r4, #96]	@ 0x60
 8001010:	e74e      	b.n	8000eb0 <HAL_ADC_IRQHandler+0xa4>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	e772      	b.n	8000efc <HAL_ADC_IRQHandler+0xf0>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001016:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001018:	f043 0310 	orr.w	r3, r3, #16
 800101c:	65e3      	str	r3, [r4, #92]	@ 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6623      	str	r3, [r4, #96]	@ 0x60
 8001026:	e785      	b.n	8000f34 <HAL_ADC_IRQHandler+0x128>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001028:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8001030:	e780      	b.n	8000f34 <HAL_ADC_IRQHandler+0x128>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	f013 0f01 	tst.w	r3, #1
 800103a:	e7b9      	b.n	8000fb0 <HAL_ADC_IRQHandler+0x1a4>
}
 800103c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800103e:	bf00      	nop
 8001040:	50000300 	.word	0x50000300
 8001044:	50000100 	.word	0x50000100

08001048 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001048:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800104a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800104c:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8001050:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001052:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001054:	d121      	bne.n	800109a <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800105a:	65da      	str	r2, [r3, #92]	@ 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	6811      	ldr	r1, [r2, #0]
 8001060:	0708      	lsls	r0, r1, #28
 8001062:	d516      	bpl.n	8001092 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001064:	68d1      	ldr	r1, [r2, #12]
 8001066:	f411 6f40 	tst.w	r1, #3072	@ 0xc00
 800106a:	d10e      	bne.n	800108a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800106c:	68d2      	ldr	r2, [r2, #12]
 800106e:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001072:	d10a      	bne.n	800108a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001074:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001076:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800107a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800107c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800107e:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001080:	bf5e      	ittt	pl
 8001082:	6dda      	ldrpl	r2, [r3, #92]	@ 0x5c
 8001084:	f042 0201 	orrpl.w	r2, r2, #1
 8001088:	65da      	strpl	r2, [r3, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fb6e 	bl	800076c <HAL_ADC_ConvCpltCallback>
}
 8001090:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001092:	68d2      	ldr	r2, [r2, #12]
 8001094:	f012 0f02 	tst.w	r2, #2
 8001098:	e7eb      	b.n	8001072 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800109a:	06d2      	lsls	r2, r2, #27
 800109c:	d503      	bpl.n	80010a6 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff feb2 	bl	8000e08 <HAL_ADC_ErrorCallback>
 80010a4:	e7f4      	b.n	8001090 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80010a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80010a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80010ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ae:	4718      	bx	r3

080010b0 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010b0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80010b2:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010b4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80010b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ba:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010bc:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80010c4:	f7ff fea0 	bl	8000e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010c8:	bd08      	pop	{r3, pc}
	...

080010cc <HAL_ADC_ConfigChannel>:
{
 80010cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80010d2:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 80010d6:	2b01      	cmp	r3, #1
{
 80010d8:	4605      	mov	r5, r0
 80010da:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 80010dc:	f000 81b0 	beq.w	8001440 <HAL_ADC_ConfigChannel+0x374>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010e0:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 80010e2:	2301      	movs	r3, #1
 80010e4:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010e8:	4620      	mov	r0, r4
 80010ea:	f7ff fd91 	bl	8000c10 <LL_ADC_REG_IsConversionOngoing>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	f040 81a0 	bne.w	8001434 <HAL_ADC_ConfigChannel+0x368>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80010f4:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(*preg,
 80010f6:	6833      	ldr	r3, [r6, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010f8:	0991      	lsrs	r1, r2, #6
 80010fa:	f001 010c 	and.w	r1, r1, #12
 80010fe:	f104 0730 	add.w	r7, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8001102:	f002 021f 	and.w	r2, r2, #31
 8001106:	5878      	ldr	r0, [r7, r1]
 8001108:	f04f 0c1f 	mov.w	ip, #31
 800110c:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001110:	4093      	lsls	r3, r2
 8001112:	fa0c f202 	lsl.w	r2, ip, r2
 8001116:	ea20 0202 	bic.w	r2, r0, r2
 800111a:	4313      	orrs	r3, r2
 800111c:	507b      	str	r3, [r7, r1]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff fd76 	bl	8000c10 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001124:	68a2      	ldr	r2, [r4, #8]
 8001126:	f002 0208 	and.w	r2, r2, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800112a:	4302      	orrs	r2, r0
 800112c:	d13b      	bne.n	80011a6 <HAL_ADC_ConfigChannel+0xda>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800112e:	68b3      	ldr	r3, [r6, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001130:	6831      	ldr	r1, [r6, #0]
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001132:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001136:	d17a      	bne.n	800122e <HAL_ADC_ConfigChannel+0x162>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001138:	4620      	mov	r0, r4
 800113a:	f7ff fd55 	bl	8000be8 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800113e:	6963      	ldr	r3, [r4, #20]
 8001140:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001144:	6163      	str	r3, [r4, #20]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001146:	6937      	ldr	r7, [r6, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001148:	6971      	ldr	r1, [r6, #20]
 800114a:	68e0      	ldr	r0, [r4, #12]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800114c:	6832      	ldr	r2, [r6, #0]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800114e:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001150:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8001154:	d073      	beq.n	800123e <HAL_ADC_ConfigChannel+0x172>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001156:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800115a:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 800115c:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
 8001160:	4081      	lsls	r1, r0
 8001162:	48b8      	ldr	r0, [pc, #736]	@ (8001444 <HAL_ADC_ConfigChannel+0x378>)
 8001164:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8001168:	ea0c 0000 	and.w	r0, ip, r0
 800116c:	4310      	orrs	r0, r2
 800116e:	ea41 0200 	orr.w	r2, r1, r0
 8001172:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001176:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117a:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(*preg,
 800117c:	69b0      	ldr	r0, [r6, #24]
 800117e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001182:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8001186:	4302      	orrs	r2, r0
 8001188:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800118c:	7f31      	ldrb	r1, [r6, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800118e:	6930      	ldr	r0, [r6, #16]
 8001190:	1e4f      	subs	r7, r1, #1
  MODIFY_REG(*preg,
 8001192:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8001196:	4279      	negs	r1, r7
 8001198:	4179      	adcs	r1, r7
 800119a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800119e:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 80011a2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011a6:	4620      	mov	r0, r4
 80011a8:	f7ff fd2e 	bl	8000c08 <LL_ADC_IsEnabled>
 80011ac:	bba0      	cbnz	r0, 8001218 <HAL_ADC_ConfigChannel+0x14c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80011ae:	68f7      	ldr	r7, [r6, #12]
 80011b0:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80011b2:	4aa5      	ldr	r2, [pc, #660]	@ (8001448 <HAL_ADC_ConfigChannel+0x37c>)
 80011b4:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80011b8:	f007 0c18 	and.w	ip, r7, #24
 80011bc:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80011c0:	fa22 f20c 	lsr.w	r2, r2, ip
 80011c4:	401a      	ands	r2, r3
 80011c6:	ea21 0100 	bic.w	r1, r1, r0
 80011ca:	430a      	orrs	r2, r1
 80011cc:	f8c4 20b0 	str.w	r2, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80011d0:	4a9e      	ldr	r2, [pc, #632]	@ (800144c <HAL_ADC_ConfigChannel+0x380>)
 80011d2:	4297      	cmp	r7, r2
 80011d4:	d120      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x14c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80011d6:	2800      	cmp	r0, #0
 80011d8:	f040 8090 	bne.w	80012fc <HAL_ADC_ConfigChannel+0x230>
 80011dc:	0e9a      	lsrs	r2, r3, #26
 80011de:	3201      	adds	r2, #1
 80011e0:	f002 071f 	and.w	r7, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011e4:	2f09      	cmp	r7, #9
 80011e6:	f04f 0101 	mov.w	r1, #1
 80011ea:	ea4f 6282 	mov.w	r2, r2, lsl #26
 80011ee:	f200 80a5 	bhi.w	800133c <HAL_ADC_ConfigChannel+0x270>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80011f2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80011f6:	40b9      	lsls	r1, r7
 80011f8:	430a      	orrs	r2, r1
 80011fa:	2800      	cmp	r0, #0
 80011fc:	f040 8099 	bne.w	8001332 <HAL_ADC_ConfigChannel+0x266>
 8001200:	0e99      	lsrs	r1, r3, #26
 8001202:	3101      	adds	r1, #1
 8001204:	f001 011f 	and.w	r1, r1, #31
 8001208:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800120c:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800120e:	4311      	orrs	r1, r2
 8001210:	4620      	mov	r0, r4
 8001212:	68b2      	ldr	r2, [r6, #8]
 8001214:	f7ff fce8 	bl	8000be8 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001218:	6833      	ldr	r3, [r6, #0]
 800121a:	4a8d      	ldr	r2, [pc, #564]	@ (8001450 <HAL_ADC_ConfigChannel+0x384>)
 800121c:	4213      	tst	r3, r2
 800121e:	f040 80bb 	bne.w	8001398 <HAL_ADC_ConfigChannel+0x2cc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001222:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001224:	2300      	movs	r3, #0
 8001226:	f885 3058 	strb.w	r3, [r5, #88]	@ 0x58
}
 800122a:	b003      	add	sp, #12
 800122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800122e:	461a      	mov	r2, r3
 8001230:	4620      	mov	r0, r4
 8001232:	f7ff fcd9 	bl	8000be8 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001236:	6963      	ldr	r3, [r4, #20]
 8001238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800123c:	e782      	b.n	8001144 <HAL_ADC_ConfigChannel+0x78>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800123e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8001240:	6e21      	ldr	r1, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001242:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001246:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800124a:	2800      	cmp	r0, #0
 800124c:	d139      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x1f6>
 800124e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001252:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8001254:	bf02      	ittt	eq
 8001256:	6e22      	ldreq	r2, [r4, #96]	@ 0x60
 8001258:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 800125c:	6622      	streq	r2, [r4, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800125e:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001260:	6832      	ldr	r2, [r6, #0]
 8001262:	6859      	ldr	r1, [r3, #4]
 8001264:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001268:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800126c:	2800      	cmp	r0, #0
 800126e:	d12f      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x204>
 8001270:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001274:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8001276:	bf02      	ittt	eq
 8001278:	685a      	ldreq	r2, [r3, #4]
 800127a:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 800127e:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001280:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001282:	6832      	ldr	r2, [r6, #0]
 8001284:	6899      	ldr	r1, [r3, #8]
 8001286:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800128a:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800128e:	bb30      	cbnz	r0, 80012de <HAL_ADC_ConfigChannel+0x212>
 8001290:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001294:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8001296:	bf02      	ittt	eq
 8001298:	689a      	ldreq	r2, [r3, #8]
 800129a:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 800129e:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012a0:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80012a2:	6832      	ldr	r2, [r6, #0]
 80012a4:	68d9      	ldr	r1, [r3, #12]
 80012a6:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80012aa:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80012ae:	b9e8      	cbnz	r0, 80012ec <HAL_ADC_ConfigChannel+0x220>
 80012b0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80012b4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80012b6:	bf02      	ittt	eq
 80012b8:	68da      	ldreq	r2, [r3, #12]
 80012ba:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80012be:	60da      	streq	r2, [r3, #12]
}
 80012c0:	e771      	b.n	80011a6 <HAL_ADC_ConfigChannel+0xda>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d0c9      	beq.n	800125e <HAL_ADC_ConfigChannel+0x192>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80012ca:	fab2 f282 	clz	r2, r2
 80012ce:	e7c0      	b.n	8001252 <HAL_ADC_ConfigChannel+0x186>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d0d3      	beq.n	8001280 <HAL_ADC_ConfigChannel+0x1b4>
  return __builtin_clz(value);
 80012d8:	fab2 f282 	clz	r2, r2
 80012dc:	e7ca      	b.n	8001274 <HAL_ADC_ConfigChannel+0x1a8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	d0dc      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x1d4>
  return __builtin_clz(value);
 80012e6:	fab2 f282 	clz	r2, r2
 80012ea:	e7d3      	b.n	8001294 <HAL_ADC_ConfigChannel+0x1c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80012f0:	2a00      	cmp	r2, #0
 80012f2:	f43f af58 	beq.w	80011a6 <HAL_ADC_ConfigChannel+0xda>
  return __builtin_clz(value);
 80012f6:	fab2 f282 	clz	r2, r2
 80012fa:	e7db      	b.n	80012b4 <HAL_ADC_ConfigChannel+0x1e8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8001300:	b132      	cbz	r2, 8001310 <HAL_ADC_ConfigChannel+0x244>
  return __builtin_clz(value);
 8001302:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001306:	3201      	adds	r2, #1
 8001308:	f002 021f 	and.w	r2, r2, #31
 800130c:	2a09      	cmp	r2, #9
 800130e:	d825      	bhi.n	800135c <HAL_ADC_ConfigChannel+0x290>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8001314:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001318:	3201      	adds	r2, #1
 800131a:	0692      	lsls	r2, r2, #26
 800131c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8001324:	fab7 f787 	clz	r7, r7
 8001328:	3701      	adds	r7, #1
 800132a:	f007 071f 	and.w	r7, r7, #31
 800132e:	2101      	movs	r1, #1
 8001330:	e761      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x12a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8001336:	fab1 f181 	clz	r1, r1
 800133a:	e762      	b.n	8001202 <HAL_ADC_ConfigChannel+0x136>
 800133c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8001340:	40b9      	lsls	r1, r7
 8001342:	430a      	orrs	r2, r1
 8001344:	b9d8      	cbnz	r0, 800137e <HAL_ADC_ConfigChannel+0x2b2>
 8001346:	0e99      	lsrs	r1, r3, #26
 8001348:	3101      	adds	r1, #1
 800134a:	f001 011f 	and.w	r1, r1, #31
 800134e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001352:	391e      	subs	r1, #30
 8001354:	0509      	lsls	r1, r1, #20
 8001356:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 800135a:	e758      	b.n	800120e <HAL_ADC_ConfigChannel+0x142>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8001360:	fab2 f282 	clz	r2, r2
 8001364:	3201      	adds	r2, #1
 8001366:	0692      	lsls	r2, r2, #26
 8001368:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8001370:	fab7 f787 	clz	r7, r7
 8001374:	3701      	adds	r7, #1
 8001376:	f007 071f 	and.w	r7, r7, #31
 800137a:	2101      	movs	r1, #1
 800137c:	e7e0      	b.n	8001340 <HAL_ADC_ConfigChannel+0x274>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	3301      	adds	r3, #1
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	2103      	movs	r1, #3
 800138e:	f06f 001d 	mvn.w	r0, #29
 8001392:	fb11 0103 	smlabb	r1, r1, r3, r0
 8001396:	e7dd      	b.n	8001354 <HAL_ADC_ConfigChannel+0x288>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001398:	4a2e      	ldr	r2, [pc, #184]	@ (8001454 <HAL_ADC_ConfigChannel+0x388>)
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800139a:	482f      	ldr	r0, [pc, #188]	@ (8001458 <HAL_ADC_ConfigChannel+0x38c>)
 800139c:	6892      	ldr	r2, [r2, #8]
 800139e:	4283      	cmp	r3, r0
 80013a0:	f002 71e0 	and.w	r1, r2, #29360128	@ 0x1c00000
 80013a4:	d002      	beq.n	80013ac <HAL_ADC_ConfigChannel+0x2e0>
 80013a6:	482d      	ldr	r0, [pc, #180]	@ (800145c <HAL_ADC_ConfigChannel+0x390>)
 80013a8:	4283      	cmp	r3, r0
 80013aa:	d11d      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x31c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80013ac:	0210      	lsls	r0, r2, #8
 80013ae:	d41b      	bmi.n	80013e8 <HAL_ADC_ConfigChannel+0x31c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80013b0:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 80013b4:	f47f af35 	bne.w	8001222 <HAL_ADC_ConfigChannel+0x156>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013b8:	4a26      	ldr	r2, [pc, #152]	@ (8001454 <HAL_ADC_ConfigChannel+0x388>)
 80013ba:	6893      	ldr	r3, [r2, #8]
 80013bc:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80013c0:	430b      	orrs	r3, r1
 80013c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013c6:	6093      	str	r3, [r2, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <HAL_ADC_ConfigChannel+0x394>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b25      	ldr	r3, [pc, #148]	@ (8001464 <HAL_ADC_ConfigChannel+0x398>)
 80013ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80013d2:	230c      	movs	r3, #12
 80013d4:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 80013d8:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80013da:	9b01      	ldr	r3, [sp, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f43f af20 	beq.w	8001222 <HAL_ADC_ConfigChannel+0x156>
            wait_loop_index--;
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	e7f7      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x30c>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80013e8:	481f      	ldr	r0, [pc, #124]	@ (8001468 <HAL_ADC_ConfigChannel+0x39c>)
 80013ea:	4283      	cmp	r3, r0
 80013ec:	d10f      	bne.n	800140e <HAL_ADC_ConfigChannel+0x342>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80013ee:	01d2      	lsls	r2, r2, #7
 80013f0:	f53f af17 	bmi.w	8001222 <HAL_ADC_ConfigChannel+0x156>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013f4:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <HAL_ADC_ConfigChannel+0x3a0>)
 80013f6:	429c      	cmp	r4, r3
 80013f8:	f43f af13 	beq.w	8001222 <HAL_ADC_ConfigChannel+0x156>
 80013fc:	4a15      	ldr	r2, [pc, #84]	@ (8001454 <HAL_ADC_ConfigChannel+0x388>)
 80013fe:	6893      	ldr	r3, [r2, #8]
 8001400:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8001404:	430b      	orrs	r3, r1
 8001406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800140a:	6093      	str	r3, [r2, #8]
}
 800140c:	e709      	b.n	8001222 <HAL_ADC_ConfigChannel+0x156>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800140e:	4818      	ldr	r0, [pc, #96]	@ (8001470 <HAL_ADC_ConfigChannel+0x3a4>)
 8001410:	4283      	cmp	r3, r0
 8001412:	f47f af06 	bne.w	8001222 <HAL_ADC_ConfigChannel+0x156>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001416:	0253      	lsls	r3, r2, #9
 8001418:	f53f af03 	bmi.w	8001222 <HAL_ADC_ConfigChannel+0x156>
        if (ADC_VREFINT_INSTANCE(hadc))
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_ADC_ConfigChannel+0x3a0>)
 800141e:	429c      	cmp	r4, r3
 8001420:	f43f aeff 	beq.w	8001222 <HAL_ADC_ConfigChannel+0x156>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001424:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <HAL_ADC_ConfigChannel+0x388>)
 8001426:	6893      	ldr	r3, [r2, #8]
 8001428:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800142c:	430b      	orrs	r3, r1
 800142e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001432:	e7ea      	b.n	800140a <HAL_ADC_ConfigChannel+0x33e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001434:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001436:	f042 0220 	orr.w	r2, r2, #32
 800143a:	65ea      	str	r2, [r5, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
 800143c:	4618      	mov	r0, r3
 800143e:	e6f1      	b.n	8001224 <HAL_ADC_ConfigChannel+0x158>
  __HAL_LOCK(hadc);
 8001440:	2002      	movs	r0, #2
 8001442:	e6f2      	b.n	800122a <HAL_ADC_ConfigChannel+0x15e>
 8001444:	03fff000 	.word	0x03fff000
 8001448:	0007ffff 	.word	0x0007ffff
 800144c:	407f0000 	.word	0x407f0000
 8001450:	80080000 	.word	0x80080000
 8001454:	50000300 	.word	0x50000300
 8001458:	c3210000 	.word	0xc3210000
 800145c:	90c00010 	.word	0x90c00010
 8001460:	20000000 	.word	0x20000000
 8001464:	00030d40 	.word	0x00030d40
 8001468:	c7520000 	.word	0xc7520000
 800146c:	50000100 	.word	0x50000100
 8001470:	cb840000 	.word	0xcb840000

08001474 <ADC_Enable>:
{
 8001474:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001476:	6802      	ldr	r2, [r0, #0]
{
 8001478:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800147a:	2300      	movs	r3, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800147c:	4610      	mov	r0, r2
  __IO uint32_t wait_loop_index = 0UL;
 800147e:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001480:	f7ff fbc2 	bl	8000c08 <LL_ADC_IsEnabled>
 8001484:	b110      	cbz	r0, 800148c <ADC_Enable+0x18>
  return HAL_OK;
 8001486:	2000      	movs	r0, #0
}
 8001488:	b002      	add	sp, #8
 800148a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800148c:	6891      	ldr	r1, [r2, #8]
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <ADC_Enable+0xa0>)
 8001490:	4219      	tst	r1, r3
 8001492:	d009      	beq.n	80014a8 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001494:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 80014a4:	2001      	movs	r0, #1
 80014a6:	e7ef      	b.n	8001488 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 80014a8:	6893      	ldr	r3, [r2, #8]
 80014aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014b8:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <ADC_Enable+0xa4>)
 80014ba:	689b      	ldr	r3, [r3, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80014bc:	0219      	lsls	r1, r3, #8
 80014be:	d41a      	bmi.n	80014f6 <ADC_Enable+0x82>
    tickstart = HAL_GetTick();
 80014c0:	f7ff fb4c 	bl	8000b5c <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 80014c4:	4e15      	ldr	r6, [pc, #84]	@ (800151c <ADC_Enable+0xa8>)
 80014c6:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80014c8:	6822      	ldr	r2, [r4, #0]
 80014ca:	6813      	ldr	r3, [r2, #0]
 80014cc:	07db      	lsls	r3, r3, #31
 80014ce:	d4da      	bmi.n	8001486 <ADC_Enable+0x12>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014d0:	4610      	mov	r0, r2
 80014d2:	f7ff fb99 	bl	8000c08 <LL_ADC_IsEnabled>
 80014d6:	b920      	cbnz	r0, 80014e2 <ADC_Enable+0x6e>
 80014d8:	6893      	ldr	r3, [r2, #8]
 80014da:	4033      	ands	r3, r6
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014e2:	f7ff fb3b 	bl	8000b5c <HAL_GetTick>
 80014e6:	1b40      	subs	r0, r0, r5
 80014e8:	2802      	cmp	r0, #2
 80014ea:	d9ed      	bls.n	80014c8 <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	07da      	lsls	r2, r3, #31
 80014f2:	d4e9      	bmi.n	80014c8 <ADC_Enable+0x54>
 80014f4:	e7ce      	b.n	8001494 <ADC_Enable+0x20>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <ADC_Enable+0xac>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <ADC_Enable+0xb0>)
 80014fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001500:	230c      	movs	r3, #12
 8001502:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 8001506:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001508:	9b01      	ldr	r3, [sp, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0d8      	beq.n	80014c0 <ADC_Enable+0x4c>
        wait_loop_index--;
 800150e:	9b01      	ldr	r3, [sp, #4]
 8001510:	3b01      	subs	r3, #1
 8001512:	e7f8      	b.n	8001506 <ADC_Enable+0x92>
 8001514:	8000003f 	.word	0x8000003f
 8001518:	50000300 	.word	0x50000300
 800151c:	7fffffc0 	.word	0x7fffffc0
 8001520:	20000000 	.word	0x20000000
 8001524:	00030d40 	.word	0x00030d40

08001528 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <HAL_ADC_Start_DMA+0xd0>)
{
 800152a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800152e:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001530:	6800      	ldr	r0, [r0, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f7ff fb6c 	bl	8000c10 <LL_ADC_REG_IsConversionOngoing>
{
 8001538:	460e      	mov	r6, r1
 800153a:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800153c:	4605      	mov	r5, r0
 800153e:	2800      	cmp	r0, #0
 8001540:	d158      	bne.n	80015f4 <HAL_ADC_Start_DMA+0xcc>
    __HAL_LOCK(hadc);
 8001542:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
 8001546:	2a01      	cmp	r2, #1
 8001548:	d054      	beq.n	80015f4 <HAL_ADC_Start_DMA+0xcc>
 800154a:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800154e:	f240 2321 	movw	r3, #545	@ 0x221
    __HAL_LOCK(hadc);
 8001552:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001554:	fa23 f308 	lsr.w	r3, r3, r8
 8001558:	4003      	ands	r3, r0
    __HAL_LOCK(hadc);
 800155a:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800155e:	d046      	beq.n	80015ee <HAL_ADC_Start_DMA+0xc6>
      tmp_hal_status = ADC_Enable(hadc);
 8001560:	4620      	mov	r0, r4
 8001562:	f7ff ff87 	bl	8001474 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001566:	2800      	cmp	r0, #0
 8001568:	d13e      	bne.n	80015e8 <HAL_ADC_Start_DMA+0xc0>
        ADC_STATE_CLR_SET(hadc->State,
 800156a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800156c:	6821      	ldr	r1, [r4, #0]
 800156e:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <HAL_ADC_Start_DMA+0xd4>)
        ADC_STATE_CLR_SET(hadc->State,
 8001570:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
 8001574:	f020 0001 	bic.w	r0, r0, #1
 8001578:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800157c:	4299      	cmp	r1, r3
        ADC_STATE_CLR_SET(hadc->State,
 800157e:	65e0      	str	r0, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001580:	d102      	bne.n	8001588 <HAL_ADC_Start_DMA+0x60>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001582:	f1b8 0f00 	cmp.w	r8, #0
 8001586:	d103      	bne.n	8001590 <HAL_ADC_Start_DMA+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001588:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800158a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800158e:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001590:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001592:	6d60      	ldr	r0, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001594:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001598:	bf1c      	itt	ne
 800159a:	6e23      	ldrne	r3, [r4, #96]	@ 0x60
 800159c:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	6623      	str	r3, [r4, #96]	@ 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <HAL_ADC_Start_DMA+0xd8>)
 80015a4:	62c3      	str	r3, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <HAL_ADC_Start_DMA+0xdc>)
 80015a8:	6303      	str	r3, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <HAL_ADC_Start_DMA+0xe0>)
 80015ac:	6343      	str	r3, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015ae:	231c      	movs	r3, #28
 80015b0:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 80015b2:	2300      	movs	r3, #0
 80015b4:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015b8:	684b      	ldr	r3, [r1, #4]
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80015c0:	68cb      	ldr	r3, [r1, #12]
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015c8:	4632      	mov	r2, r6
 80015ca:	463b      	mov	r3, r7
 80015cc:	3140      	adds	r1, #64	@ 0x40
 80015ce:	f000 fafd 	bl	8001bcc <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015d2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80015d4:	6893      	ldr	r3, [r2, #8]
 80015d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6093      	str	r3, [r2, #8]
}
 80015e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80015e8:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 80015ec:	e7fa      	b.n	80015e4 <HAL_ADC_Start_DMA+0xbc>
      __HAL_UNLOCK(hadc);
 80015ee:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 80015f2:	e7f7      	b.n	80015e4 <HAL_ADC_Start_DMA+0xbc>
    __HAL_LOCK(hadc);
 80015f4:	2002      	movs	r0, #2
 80015f6:	e7f5      	b.n	80015e4 <HAL_ADC_Start_DMA+0xbc>
 80015f8:	50000300 	.word	0x50000300
 80015fc:	50000100 	.word	0x50000100
 8001600:	08001049 	.word	0x08001049
 8001604:	08000dfd 	.word	0x08000dfd
 8001608:	080010b1 	.word	0x080010b1

0800160c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800160c:	4770      	bx	lr

0800160e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 800160e:	4770      	bx	lr

08001610 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8001610:	4770      	bx	lr

08001612 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8001612:	4770      	bx	lr

08001614 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8001614:	4770      	bx	lr

08001616 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8001616:	b510      	push	{r4, lr}
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8001618:	4604      	mov	r4, r0
 800161a:	b198      	cbz	r0, 8001644 <HAL_CORDIC_Init+0x2e>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800161c:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8001620:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001624:	b91b      	cbnz	r3, 800162e <HAL_CORDIC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8001626:	f880 2020 	strb.w	r2, [r0, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800162a:	f7ff f931 	bl	8000890 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800162e:	2000      	movs	r0, #0

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
  hcordic->pOutBuff = NULL;
 8001630:	e9c4 0001 	strd	r0, r0, [r4, #4]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
  hcordic->NbCalcToGet = 0U;
 8001634:	e9c4 0003 	strd	r0, r0, [r4, #12]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8001638:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800163a:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800163c:	6160      	str	r0, [r4, #20]
  hcordic->State = HAL_CORDIC_STATE_READY;
 800163e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
}
 8001642:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001644:	2001      	movs	r0, #1
 8001646:	e7fc      	b.n	8001642 <HAL_CORDIC_Init+0x2c>

08001648 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4907      	ldr	r1, [pc, #28]	@ (8001668 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800164a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001658:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001664:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166e:	b530      	push	{r4, r5, lr}
 8001670:	68dc      	ldr	r4, [r3, #12]
 8001672:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001676:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	2b04      	cmp	r3, #4
 800167e:	bf28      	it	cs
 8001680:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001688:	bf8c      	ite	hi
 800168a:	3c03      	subhi	r4, #3
 800168c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168e:	fa05 f303 	lsl.w	r3, r5, r3
 8001692:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001696:	40a5      	lsls	r5, r4
 8001698:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800169e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	bfac      	ite	ge
 80016a6:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	4a08      	ldrlt	r2, [pc, #32]	@ (80016cc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	bfb8      	it	lt
 80016b2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	bfaa      	itet	ge
 80016ba:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016c4:	bd30      	pop	{r4, r5, pc}
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00
 80016cc:	e000ed14 	.word	0xe000ed14

080016d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016d0:	2800      	cmp	r0, #0
 80016d2:	db07      	blt.n	80016e4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d4:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <HAL_NVIC_EnableIRQ+0x18>)
 80016d6:	0941      	lsrs	r1, r0, #5
 80016d8:	2301      	movs	r3, #1
 80016da:	f000 001f 	and.w	r0, r0, #31
 80016de:	4083      	lsls	r3, r0
 80016e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100

080016ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	3801      	subs	r0, #1
 80016ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80016f2:	d20b      	bcs.n	800170c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	21f0      	movs	r1, #240	@ 0xf0
 80016fe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001702:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001704:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001706:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001708:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800170c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001714:	b510      	push	{r4, lr}
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001716:	4604      	mov	r4, r0
 8001718:	b168      	cbz	r0, 8001736 <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800171a:	7903      	ldrb	r3, [r0, #4]
 800171c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001720:	b913      	cbnz	r3, 8001728 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001722:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001724:	f7ff f8ca 	bl	80008bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001728:	2302      	movs	r3, #2
 800172a:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800172c:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800172e:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001730:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001732:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8001734:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001736:	2001      	movs	r0, #1
 8001738:	e7fc      	b.n	8001734 <HAL_DAC_Init+0x20>
	...

0800173c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800173c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800173e:	460e      	mov	r6, r1
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001740:	4605      	mov	r5, r0
{
 8001742:	4611      	mov	r1, r2
 8001744:	9a08      	ldr	r2, [sp, #32]
  if (hdac == NULL)
 8001746:	2800      	cmp	r0, #0
 8001748:	d05f      	beq.n	800180a <HAL_DAC_Start_DMA+0xce>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800174a:	7940      	ldrb	r0, [r0, #5]
 800174c:	2801      	cmp	r0, #1
 800174e:	f04f 0002 	mov.w	r0, #2
 8001752:	d033      	beq.n	80017bc <HAL_DAC_Start_DMA+0x80>
 8001754:	2401      	movs	r4, #1
 8001756:	716c      	strb	r4, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001758:	7128      	strb	r0, [r5, #4]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800175a:	682c      	ldr	r4, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 800175c:	2e00      	cmp	r6, #0
 800175e:	d132      	bne.n	80017c6 <HAL_DAC_Start_DMA+0x8a>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001760:	68a8      	ldr	r0, [r5, #8]
 8001762:	4f2b      	ldr	r7, [pc, #172]	@ (8001810 <HAL_DAC_Start_DMA+0xd4>)
 8001764:	62c7      	str	r7, [r0, #44]	@ 0x2c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001766:	4f2b      	ldr	r7, [pc, #172]	@ (8001814 <HAL_DAC_Start_DMA+0xd8>)
 8001768:	6307      	str	r7, [r0, #48]	@ 0x30
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800176a:	4f2b      	ldr	r7, [pc, #172]	@ (8001818 <HAL_DAC_Start_DMA+0xdc>)
 800176c:	6347      	str	r7, [r0, #52]	@ 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800176e:	6827      	ldr	r7, [r4, #0]
 8001770:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 8001774:	6027      	str	r7, [r4, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001776:	b122      	cbz	r2, 8001782 <HAL_DAC_Start_DMA+0x46>
 8001778:	2a04      	cmp	r2, #4
 800177a:	d021      	beq.n	80017c0 <HAL_DAC_Start_DMA+0x84>
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
        break;
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800177c:	f104 0210 	add.w	r2, r4, #16
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8001780:	e001      	b.n	8001786 <HAL_DAC_Start_DMA+0x4a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001782:	f104 0208 	add.w	r2, r4, #8
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001786:	6827      	ldr	r7, [r4, #0]
 8001788:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800178c:	6027      	str	r7, [r4, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800178e:	f000 fa1d 	bl	8001bcc <HAL_DMA_Start_IT>
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001792:	2300      	movs	r3, #0
 8001794:	716b      	strb	r3, [r5, #5]

  if (status == HAL_OK)
 8001796:	2800      	cmp	r0, #0
 8001798:	d132      	bne.n	8001800 <HAL_DAC_Start_DMA+0xc4>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800179a:	682a      	ldr	r2, [r5, #0]
 800179c:	f006 0610 	and.w	r6, r6, #16
 80017a0:	6811      	ldr	r1, [r2, #0]
 80017a2:	2301      	movs	r3, #1
 80017a4:	40b3      	lsls	r3, r6
 80017a6:	430b      	orrs	r3, r1
 80017a8:	6013      	str	r3, [r2, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017aa:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <HAL_DAC_Start_DMA+0xe0>)
 80017ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <HAL_DAC_Start_DMA+0xe4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80017b4:	3301      	adds	r3, #1
    while (wait_loop_index != 0UL)
    {
      wait_loop_index--;
 80017b6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80017b8:	9b01      	ldr	r3, [sp, #4]
 80017ba:	b9f3      	cbnz	r3, 80017fa <HAL_DAC_Start_DMA+0xbe>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80017bc:	b003      	add	sp, #12
 80017be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80017c0:	f104 020c 	add.w	r2, r4, #12
  if (Channel == DAC_CHANNEL_1)
 80017c4:	e7df      	b.n	8001786 <HAL_DAC_Start_DMA+0x4a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80017c6:	68e8      	ldr	r0, [r5, #12]
 80017c8:	4f16      	ldr	r7, [pc, #88]	@ (8001824 <HAL_DAC_Start_DMA+0xe8>)
 80017ca:	62c7      	str	r7, [r0, #44]	@ 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80017cc:	4f16      	ldr	r7, [pc, #88]	@ (8001828 <HAL_DAC_Start_DMA+0xec>)
 80017ce:	6307      	str	r7, [r0, #48]	@ 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80017d0:	4f16      	ldr	r7, [pc, #88]	@ (800182c <HAL_DAC_Start_DMA+0xf0>)
 80017d2:	6347      	str	r7, [r0, #52]	@ 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80017d4:	6827      	ldr	r7, [r4, #0]
 80017d6:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 80017da:	6027      	str	r7, [r4, #0]
    switch (Alignment)
 80017dc:	b122      	cbz	r2, 80017e8 <HAL_DAC_Start_DMA+0xac>
 80017de:	2a04      	cmp	r2, #4
 80017e0:	d008      	beq.n	80017f4 <HAL_DAC_Start_DMA+0xb8>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80017e2:	f104 021c 	add.w	r2, r4, #28
  if (Channel == DAC_CHANNEL_1)
 80017e6:	e001      	b.n	80017ec <HAL_DAC_Start_DMA+0xb0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80017e8:	f104 0214 	add.w	r2, r4, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80017ec:	6827      	ldr	r7, [r4, #0]
 80017ee:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 80017f2:	e7cb      	b.n	800178c <HAL_DAC_Start_DMA+0x50>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80017f4:	f104 0218 	add.w	r2, r4, #24
  if (Channel == DAC_CHANNEL_1)
 80017f8:	e7f8      	b.n	80017ec <HAL_DAC_Start_DMA+0xb0>
      wait_loop_index--;
 80017fa:	9b01      	ldr	r3, [sp, #4]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	e7da      	b.n	80017b6 <HAL_DAC_Start_DMA+0x7a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001800:	692b      	ldr	r3, [r5, #16]
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	612b      	str	r3, [r5, #16]
 8001808:	e7d8      	b.n	80017bc <HAL_DAC_Start_DMA+0x80>
    return HAL_ERROR;
 800180a:	2001      	movs	r0, #1
 800180c:	e7d6      	b.n	80017bc <HAL_DAC_Start_DMA+0x80>
 800180e:	bf00      	nop
 8001810:	08001833 	.word	0x08001833
 8001814:	08001845 	.word	0x08001845
 8001818:	08001851 	.word	0x08001851
 800181c:	20000000 	.word	0x20000000
 8001820:	00030d40 	.word	0x00030d40
 8001824:	08001a3b 	.word	0x08001a3b
 8001828:	08001a4d 	.word	0x08001a4d
 800182c:	08001a59 	.word	0x08001a59

08001830 <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8001830:	4770      	bx	lr

08001832 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001832:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001834:	6a84      	ldr	r4, [r0, #40]	@ 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001836:	4620      	mov	r0, r4
 8001838:	f7ff fffa 	bl	8001830 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800183c:	2301      	movs	r3, #1
 800183e:	7123      	strb	r3, [r4, #4]
}
 8001840:	bd10      	pop	{r4, pc}

08001842 <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8001842:	4770      	bx	lr

08001844 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001844:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001846:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001848:	f7ff fffb 	bl	8001842 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800184c:	bd08      	pop	{r3, pc}

0800184e <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 800184e:	4770      	bx	lr

08001850 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001850:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001852:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001854:	6923      	ldr	r3, [r4, #16]
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800185c:	4620      	mov	r0, r4
 800185e:	f7ff fff6 	bl	800184e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001862:	2301      	movs	r3, #1
 8001864:	7123      	strb	r3, [r4, #4]
}
 8001866:	bd10      	pop	{r4, pc}

08001868 <HAL_DAC_ConfigChannel>:
{
 8001868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800186c:	460e      	mov	r6, r1
 800186e:	4615      	mov	r5, r2
  if ((hdac == NULL) || (sConfig == NULL))
 8001870:	4604      	mov	r4, r0
 8001872:	2800      	cmp	r0, #0
 8001874:	f000 80da 	beq.w	8001a2c <HAL_DAC_ConfigChannel+0x1c4>
 8001878:	2900      	cmp	r1, #0
 800187a:	f000 80d7 	beq.w	8001a2c <HAL_DAC_ConfigChannel+0x1c4>
  __HAL_LOCK(hdac);
 800187e:	7942      	ldrb	r2, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001880:	688b      	ldr	r3, [r1, #8]
  __HAL_LOCK(hdac);
 8001882:	2a01      	cmp	r2, #1
 8001884:	f04f 0002 	mov.w	r0, #2
 8001888:	d020      	beq.n	80018cc <HAL_DAC_ConfigChannel+0x64>
 800188a:	2201      	movs	r2, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800188c:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 800188e:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001890:	7120      	strb	r0, [r4, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001892:	d139      	bne.n	8001908 <HAL_DAC_ConfigChannel+0xa0>
    tickstart = HAL_GetTick();
 8001894:	f7ff f962 	bl	8000b5c <HAL_GetTick>
 8001898:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 800189a:	b1cd      	cbz	r5, 80018d0 <HAL_DAC_ConfigChannel+0x68>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	f2c0 80aa 	blt.w	80019fa <HAL_DAC_ConfigChannel+0x192>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80018a6:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80018a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80018aa:	e017      	b.n	80018dc <HAL_DAC_ConfigChannel+0x74>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80018ac:	f7ff f956 	bl	8000b5c <HAL_GetTick>
 80018b0:	1bc0      	subs	r0, r0, r7
 80018b2:	2801      	cmp	r0, #1
 80018b4:	d90c      	bls.n	80018d0 <HAL_DAC_ConfigChannel+0x68>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ba:	0419      	lsls	r1, r3, #16
 80018bc:	d508      	bpl.n	80018d0 <HAL_DAC_ConfigChannel+0x68>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80018be:	6923      	ldr	r3, [r4, #16]
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	7123      	strb	r3, [r4, #4]
            return HAL_TIMEOUT;
 80018ca:	2003      	movs	r0, #3
}
 80018cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018d4:	0412      	lsls	r2, r2, #16
 80018d6:	d4e9      	bmi.n	80018ac <HAL_DAC_ConfigChannel+0x44>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80018d8:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80018dc:	6822      	ldr	r2, [r4, #0]
 80018de:	f005 0110 	and.w	r1, r5, #16
 80018e2:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 80018e4:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 80018e8:	4088      	lsls	r0, r1
 80018ea:	ea23 0300 	bic.w	r3, r3, r0
 80018ee:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 80018f0:	4088      	lsls	r0, r1
 80018f2:	4303      	orrs	r3, r0
 80018f4:	6493      	str	r3, [r2, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80018f6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80018f8:	20ff      	movs	r0, #255	@ 0xff
 80018fa:	4088      	lsls	r0, r1
 80018fc:	ea23 0300 	bic.w	r3, r3, r0
 8001900:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8001902:	4088      	lsls	r0, r1
 8001904:	4303      	orrs	r3, r0
 8001906:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001908:	69f3      	ldr	r3, [r6, #28]
    tmpreg1 = hdac->Instance->CCR;
 800190a:	6822      	ldr	r2, [r4, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800190c:	2b01      	cmp	r3, #1
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800190e:	f005 0510 	and.w	r5, r5, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001912:	d108      	bne.n	8001926 <HAL_DAC_ConfigChannel+0xbe>
    tmpreg1 = hdac->Instance->CCR;
 8001914:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001916:	231f      	movs	r3, #31
 8001918:	40ab      	lsls	r3, r5
 800191a:	ea21 0103 	bic.w	r1, r1, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800191e:	6a33      	ldr	r3, [r6, #32]
 8001920:	40ab      	lsls	r3, r5
 8001922:	430b      	orrs	r3, r1
    hdac->Instance->CCR = tmpreg1;
 8001924:	6393      	str	r3, [r2, #56]	@ 0x38
  tmpreg1 = hdac->Instance->MCR;
 8001926:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001928:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800192c:	2007      	movs	r0, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800192e:	2a01      	cmp	r2, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001930:	fa00 f005 	lsl.w	r0, r0, r5
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001934:	d06d      	beq.n	8001a12 <HAL_DAC_ConfigChannel+0x1aa>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001936:	2a02      	cmp	r2, #2
 8001938:	d06d      	beq.n	8001a16 <HAL_DAC_ConfigChannel+0x1ae>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800193a:	fab3 f283 	clz	r2, r3
 800193e:	0952      	lsrs	r2, r2, #5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001940:	f44f 7700 	mov.w	r7, #512	@ 0x200
 8001944:	40af      	lsls	r7, r5
 8001946:	ea21 0807 	bic.w	r8, r1, r7
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800194a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800194e:	40a9      	lsls	r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001950:	4301      	orrs	r1, r0
 8001952:	ea28 0801 	bic.w	r8, r8, r1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001956:	7931      	ldrb	r1, [r6, #4]
 8001958:	1e48      	subs	r0, r1, #1
 800195a:	4241      	negs	r1, r0
 800195c:	4141      	adcs	r1, r0
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800195e:	68b0      	ldr	r0, [r6, #8]
 8001960:	ea43 0700 	orr.w	r7, r3, r0
 8001964:	7973      	ldrb	r3, [r6, #5]
 8001966:	f103 3cff 	add.w	ip, r3, #4294967295
 800196a:	f1dc 0300 	rsbs	r3, ip, #0
 800196e:	eb43 030c 	adc.w	r3, r3, ip
 8001972:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
 8001976:	ea47 2743 	orr.w	r7, r7, r3, lsl #9
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800197a:	6833      	ldr	r3, [r6, #0]
 800197c:	2b02      	cmp	r3, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800197e:	ea47 0702 	orr.w	r7, r7, r2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001982:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001986:	d14e      	bne.n	8001a26 <HAL_DAC_ConfigChannel+0x1be>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001988:	f001 fd74 	bl	8003474 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800198c:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_DAC_ConfigChannel+0x1c8>)
 800198e:	4298      	cmp	r0, r3
 8001990:	d943      	bls.n	8001a1a <HAL_DAC_ConfigChannel+0x1b2>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001992:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
  hdac->Instance->MCR = tmpreg1;
 8001996:	6822      	ldr	r2, [r4, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001998:	40af      	lsls	r7, r5
 800199a:	ea47 0708 	orr.w	r7, r7, r8
  hdac->Instance->MCR = tmpreg1;
 800199e:	63d7      	str	r7, [r2, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019a6:	40a9      	lsls	r1, r5
 80019a8:	ea23 0301 	bic.w	r3, r3, r1
 80019ac:	6013      	str	r3, [r2, #0]
  tmpreg1 = hdac->Instance->CR;
 80019ae:	6810      	ldr	r0, [r2, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80019b0:	f640 73fe 	movw	r3, #4094	@ 0xffe
 80019b4:	40ab      	lsls	r3, r5
 80019b6:	ea20 0003 	bic.w	r0, r0, r3
  tmpreg2 = sConfig->DAC_Trigger;
 80019ba:	68f3      	ldr	r3, [r6, #12]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019bc:	fa03 f105 	lsl.w	r1, r3, r5
 80019c0:	4301      	orrs	r1, r0
  hdac->Instance->CR = tmpreg1;
 80019c2:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80019c4:	6811      	ldr	r1, [r2, #0]
 80019c6:	20c0      	movs	r0, #192	@ 0xc0
 80019c8:	40a8      	lsls	r0, r5
 80019ca:	ea21 0100 	bic.w	r1, r1, r0
 80019ce:	6011      	str	r1, [r2, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80019d0:	f3c3 0183 	ubfx	r1, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80019d4:	6933      	ldr	r3, [r6, #16]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80019d6:	6e10      	ldr	r0, [r2, #96]	@ 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80019de:	430b      	orrs	r3, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80019e0:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80019e4:	40a9      	lsls	r1, r5
 80019e6:	ea20 0101 	bic.w	r1, r0, r1
 80019ea:	40ab      	lsls	r3, r5
 80019ec:	430b      	orrs	r3, r1
 80019ee:	6613      	str	r3, [r2, #96]	@ 0x60
  __HAL_UNLOCK(hdac);
 80019f0:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80019f2:	2301      	movs	r3, #1
 80019f4:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80019f6:	7160      	strb	r0, [r4, #5]
  return status;
 80019f8:	e768      	b.n	80018cc <HAL_DAC_ConfigChannel+0x64>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019fa:	f7ff f8af 	bl	8000b5c <HAL_GetTick>
 80019fe:	1bc0      	subs	r0, r0, r7
 8001a00:	2801      	cmp	r0, #1
 8001a02:	f67f af4b 	bls.w	800189c <HAL_DAC_ConfigChannel+0x34>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f6bf af46 	bge.w	800189c <HAL_DAC_ConfigChannel+0x34>
 8001a10:	e755      	b.n	80018be <HAL_DAC_ConfigChannel+0x56>
    connectOnChip = 0x00000000UL;
 8001a12:	2200      	movs	r2, #0
 8001a14:	e794      	b.n	8001940 <HAL_DAC_ConfigChannel+0xd8>
    connectOnChip = DAC_MCR_MODE1_0;
 8001a16:	2201      	movs	r2, #1
 8001a18:	e792      	b.n	8001940 <HAL_DAC_ConfigChannel+0xd8>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_DAC_ConfigChannel+0x1cc>)
 8001a1c:	4298      	cmp	r0, r3
 8001a1e:	d9ba      	bls.n	8001996 <HAL_DAC_ConfigChannel+0x12e>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001a20:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 8001a24:	e7b7      	b.n	8001996 <HAL_DAC_ConfigChannel+0x12e>
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001a26:	ea48 0803 	orr.w	r8, r8, r3
 8001a2a:	e7b4      	b.n	8001996 <HAL_DAC_ConfigChannel+0x12e>
    return HAL_ERROR;
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	e74d      	b.n	80018cc <HAL_DAC_ConfigChannel+0x64>
 8001a30:	09896800 	.word	0x09896800
 8001a34:	04c4b400 	.word	0x04c4b400

08001a38 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a38:	4770      	bx	lr

08001a3a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a3a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a3c:	6a84      	ldr	r4, [r0, #40]	@ 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff fffa 	bl	8001a38 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a44:	2301      	movs	r3, #1
 8001a46:	7123      	strb	r3, [r4, #4]
}
 8001a48:	bd10      	pop	{r4, pc}

08001a4a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 8001a4a:	4770      	bx	lr

08001a4c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001a4e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001a50:	f7ff fffb 	bl	8001a4a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a54:	bd08      	pop	{r3, pc}

08001a56 <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 8001a56:	4770      	bx	lr

08001a58 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001a58:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a5a:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a5c:	6923      	ldr	r3, [r4, #16]
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff fff6 	bl	8001a56 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	7123      	strb	r3, [r4, #4]
}
 8001a6e:	bd10      	pop	{r4, pc}

08001a70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a70:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a72:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	@ 0x4c
 8001a76:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a78:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8001a7a:	b114      	cbz	r4, 8001a82 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a7c:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	@ 0x58
 8001a80:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a82:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	@ 0x40
 8001a86:	f004 061f 	and.w	r6, r4, #31
 8001a8a:	2401      	movs	r4, #1
 8001a8c:	40b4      	lsls	r4, r6
 8001a8e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a90:	6804      	ldr	r4, [r0, #0]
 8001a92:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a94:	6883      	ldr	r3, [r0, #8]
 8001a96:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a98:	bf0b      	itete	eq
 8001a9a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001a9c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001a9e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001aa0:	60e2      	strne	r2, [r4, #12]
  }
}
 8001aa2:	bd70      	pop	{r4, r5, r6, pc}

08001aa4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001aa4:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001aa6:	490d      	ldr	r1, [pc, #52]	@ (8001adc <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 8001aaa:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001aac:	4c0d      	ldr	r4, [pc, #52]	@ (8001ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8001aae:	42a3      	cmp	r3, r4
 8001ab0:	bf88      	it	hi
 8001ab2:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ab4:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001ab6:	f021 0103 	bic.w	r1, r1, #3
 8001aba:	440a      	add	r2, r1
 8001abc:	6482      	str	r2, [r0, #72]	@ 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001abe:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ac0:	4a09      	ldr	r2, [pc, #36]	@ (8001ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001ac2:	64c2      	str	r2, [r0, #76]	@ 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ac4:	3b08      	subs	r3, #8
 8001ac6:	2214      	movs	r2, #20
 8001ac8:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8001ad8:	bd10      	pop	{r4, pc}
 8001ada:	bf00      	nop
 8001adc:	40020820 	.word	0x40020820
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	40020407 	.word	0x40020407
 8001ae8:	40020880 	.word	0x40020880

08001aec <HAL_DMA_Init>:
{
 8001aec:	b538      	push	{r3, r4, r5, lr}
  if (hdma == NULL)
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d059      	beq.n	8001ba6 <HAL_DMA_Init+0xba>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001af2:	6802      	ldr	r2, [r0, #0]
 8001af4:	4b2d      	ldr	r3, [pc, #180]	@ (8001bac <HAL_DMA_Init+0xc0>)
 8001af6:	429a      	cmp	r2, r3
 8001af8:	f04f 0114 	mov.w	r1, #20
 8001afc:	d847      	bhi.n	8001b8e <HAL_DMA_Init+0xa2>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001afe:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb0 <HAL_DMA_Init+0xc4>)
 8001b00:	4413      	add	r3, r2
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	492b      	ldr	r1, [pc, #172]	@ (8001bb4 <HAL_DMA_Init+0xc8>)
 8001b08:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8001b0a:	e9c0 1310 	strd	r1, r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8001b14:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b18:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8001b1a:	6811      	ldr	r1, [r2, #0]
  tmp |=  hdma->Init.Direction        |
 8001b1c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1e:	432b      	orrs	r3, r5
 8001b20:	6945      	ldr	r5, [r0, #20]
 8001b22:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b24:	6985      	ldr	r5, [r0, #24]
 8001b26:	432b      	orrs	r3, r5
 8001b28:	69c5      	ldr	r5, [r0, #28]
 8001b2a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2c:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b2e:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8001b32:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b36:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8001b38:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8001b3a:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b3c:	f7ff ffb2 	bl	8001aa4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b40:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b44:	bf04      	itt	eq
 8001b46:	2300      	moveq	r3, #0
 8001b48:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b4a:	6843      	ldr	r3, [r0, #4]
 8001b4c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	600a      	str	r2, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b52:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	@ 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b56:	3b01      	subs	r3, #1
 8001b58:	2b03      	cmp	r3, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b5a:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b5c:	d81e      	bhi.n	8001b9c <HAL_DMA_Init+0xb0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_DMA_Init+0xcc>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b60:	4916      	ldr	r1, [pc, #88]	@ (8001bbc <HAL_DMA_Init+0xd0>)
 8001b62:	6581      	str	r1, [r0, #88]	@ 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	3a01      	subs	r2, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b70:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b72:	6543      	str	r3, [r0, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001b74:	65c2      	str	r2, [r0, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b76:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_DMA_Init+0xd4>)
 8001b7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7c:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001b7e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b80:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001b82:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001b86:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
  return HAL_OK;
 8001b8a:	4618      	mov	r0, r3
}
 8001b8c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <HAL_DMA_Init+0xd8>)
 8001b90:	4413      	add	r3, r2
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	490c      	ldr	r1, [pc, #48]	@ (8001bc8 <HAL_DMA_Init+0xdc>)
 8001b98:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8001b9a:	e7b6      	b.n	8001b0a <HAL_DMA_Init+0x1e>
    hdma->DMAmuxRequestGen = 0U;
 8001b9c:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b9e:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ba2:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8001ba4:	e7ea      	b.n	8001b7c <HAL_DMA_Init+0x90>
    return HAL_ERROR;
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	e7f0      	b.n	8001b8c <HAL_DMA_Init+0xa0>
 8001baa:	bf00      	nop
 8001bac:	40020407 	.word	0x40020407
 8001bb0:	bffdfff8 	.word	0xbffdfff8
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	1000823f 	.word	0x1000823f
 8001bbc:	40020940 	.word	0x40020940
 8001bc0:	40020900 	.word	0x40020900
 8001bc4:	bffdfbf8 	.word	0xbffdfbf8
 8001bc8:	40020400 	.word	0x40020400

08001bcc <HAL_DMA_Start_IT>:
{
 8001bcc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001bce:	f890 5024 	ldrb.w	r5, [r0, #36]	@ 0x24
 8001bd2:	2d01      	cmp	r5, #1
{
 8001bd4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001bd6:	d037      	beq.n	8001c48 <HAL_DMA_Start_IT+0x7c>
 8001bd8:	2501      	movs	r5, #1
 8001bda:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8001bde:	f890 5025 	ldrb.w	r5, [r0, #37]	@ 0x25
 8001be2:	2d01      	cmp	r5, #1
 8001be4:	f04f 0500 	mov.w	r5, #0
 8001be8:	d12c      	bne.n	8001c44 <HAL_DMA_Start_IT+0x78>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bea:	2602      	movs	r6, #2
 8001bec:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf0:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	6805      	ldr	r5, [r0, #0]
 8001bf4:	682e      	ldr	r6, [r5, #0]
 8001bf6:	f026 0601 	bic.w	r6, r6, #1
 8001bfa:	602e      	str	r6, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfc:	f7ff ff38 	bl	8001a70 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001c00:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001c02:	b1bb      	cbz	r3, 8001c34 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c0a:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c0c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	03d2      	lsls	r2, r2, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c12:	bf42      	ittt	mi
 8001c14:	681a      	ldrmi	r2, [r3, #0]
 8001c16:	f442 7280 	orrmi.w	r2, r2, #256	@ 0x100
 8001c1a:	601a      	strmi	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001c1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001c1e:	b11b      	cbz	r3, 8001c28 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c26:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c30:	2000      	movs	r0, #0
}
 8001c32:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	f023 0304 	bic.w	r3, r3, #4
 8001c3a:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c3c:	682b      	ldr	r3, [r5, #0]
 8001c3e:	f043 030a 	orr.w	r3, r3, #10
 8001c42:	e7e2      	b.n	8001c0a <HAL_DMA_Start_IT+0x3e>
    __HAL_UNLOCK(hdma);
 8001c44:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8001c48:	2002      	movs	r0, #2
 8001c4a:	e7f2      	b.n	8001c32 <HAL_DMA_Start_IT+0x66>

08001c4c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c4c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c4e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001c50:	6803      	ldr	r3, [r0, #0]
{
 8001c52:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c54:	f002 021f 	and.w	r2, r2, #31
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c58:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001c5a:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c5c:	2404      	movs	r4, #4
 8001c5e:	4094      	lsls	r4, r2
 8001c60:	4234      	tst	r4, r6
 8001c62:	d00e      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x36>
 8001c64:	f015 0f04 	tst.w	r5, #4
 8001c68:	d00b      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c6e:	bf5e      	ittt	pl
 8001c70:	681a      	ldrpl	r2, [r3, #0]
 8001c72:	f022 0204 	bicpl.w	r2, r2, #4
 8001c76:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001c78:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c7a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001c7c:	b373      	cbz	r3, 8001cdc <HAL_DMA_IRQHandler+0x90>
}
 8001c7e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001c80:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001c82:	2402      	movs	r4, #2
 8001c84:	4094      	lsls	r4, r2
 8001c86:	4234      	tst	r4, r6
 8001c88:	d012      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x64>
           && (0U != (source_it & DMA_IT_TC)))
 8001c8a:	f015 0f02 	tst.w	r5, #2
 8001c8e:	d00f      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	0695      	lsls	r5, r2, #26
 8001c94:	d406      	bmi.n	8001ca4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f022 020a 	bic.w	r2, r2, #10
 8001c9c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8001ca4:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ca6:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001ca8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8001cac:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001cae:	e7e5      	b.n	8001c7c <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001cb0:	2408      	movs	r4, #8
 8001cb2:	4094      	lsls	r4, r2
 8001cb4:	4234      	tst	r4, r6
 8001cb6:	d011      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x90>
           && (0U != (source_it & DMA_IT_TE)))
 8001cb8:	072c      	lsls	r4, r5, #28
 8001cba:	d50f      	bpl.n	8001cdc <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cbc:	681c      	ldr	r4, [r3, #0]
 8001cbe:	f024 040e 	bic.w	r4, r4, #14
 8001cc2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	fa03 f202 	lsl.w	r2, r3, r2
 8001cca:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ccc:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001cce:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8001cd8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001cda:	e7cf      	b.n	8001c7c <HAL_DMA_IRQHandler+0x30>
}
 8001cdc:	bc70      	pop	{r4, r5, r6}
 8001cde:	4770      	bx	lr

08001ce0 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8001ce0:	b538      	push	{r3, r4, r5, lr}
 8001ce2:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ce4:	f7fe ff3a 	bl	8000b5c <HAL_GetTick>

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8001ce8:	6822      	ldr	r2, [r4, #0]
 8001cea:	6913      	ldr	r3, [r2, #16]
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
  tickstart = HAL_GetTick();
 8001cf0:	4605      	mov	r5, r0
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8001cf2:	6113      	str	r3, [r2, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	6918      	ldr	r0, [r3, #16]
 8001cf8:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 8001cfc:	d101      	bne.n	8001d02 <FMAC_Reset+0x22>
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
      return HAL_ERROR;
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8001cfe:	6360      	str	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001d00:	e00a      	b.n	8001d18 <FMAC_Reset+0x38>
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8001d02:	f7fe ff2b 	bl	8000b5c <HAL_GetTick>
 8001d06:	1b40      	subs	r0, r0, r5
 8001d08:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8001d0c:	d9f2      	bls.n	8001cf4 <FMAC_Reset+0x14>
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8001d0e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d14:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
}
 8001d18:	bd38      	pop	{r3, r4, r5, pc}

08001d1a <HAL_FMAC_Init>:
{
 8001d1a:	b570      	push	{r4, r5, r6, lr}
  if (hfmac == NULL)
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	b360      	cbz	r0, 8001d7a <HAL_FMAC_Init+0x60>
  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8001d20:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8001d24:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001d28:	b91b      	cbnz	r3, 8001d32 <HAL_FMAC_Init+0x18>
    hfmac->Lock = HAL_UNLOCKED;
 8001d2a:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
    HAL_FMAC_MspInit(hfmac);
 8001d2e:	f7fe fdff 	bl	8000930 <HAL_FMAC_MspInit>
  hfmac->FilterParam = 0U;
 8001d32:	2500      	movs	r5, #0
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pInput = NULL;
  hfmac->pInputSize = NULL;
  hfmac->InputCurrentSize = 0U;
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8001d34:	2620      	movs	r6, #32
 8001d36:	f884 6033 	strb.w	r6, [r4, #51]	@ 0x33
  hfmac->FilterParam = 0U;
 8001d3a:	6065      	str	r5, [r4, #4]
  hfmac->pInput = NULL;
 8001d3c:	60e5      	str	r5, [r4, #12]
  hfmac->pInputSize = NULL;
 8001d3e:	6165      	str	r5, [r4, #20]
  hfmac->InputCurrentSize = 0U;
 8001d40:	8225      	strh	r5, [r4, #16]
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pOutput = NULL;
 8001d42:	61a5      	str	r5, [r4, #24]
  hfmac->pOutputSize = NULL;
 8001d44:	6225      	str	r5, [r4, #32]
  hfmac->OutputCurrentSize = 0U;
 8001d46:	83a5      	strh	r5, [r4, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8001d48:	f884 6032 	strb.w	r6, [r4, #50]	@ 0x32
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7ff ffc7 	bl	8001ce0 <FMAC_Reset>
 8001d52:	2801      	cmp	r0, #1
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8001d54:	bf09      	itett	eq
 8001d56:	6b63      	ldreq	r3, [r4, #52]	@ 0x34
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8001d58:	6365      	strne	r5, [r4, #52]	@ 0x34
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8001d5a:	f043 0310 	orreq.w	r3, r3, #16
 8001d5e:	6363      	streq	r3, [r4, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8001d60:	bf04      	itt	eq
 8001d62:	23a0      	moveq	r3, #160	@ 0xa0
 8001d64:	f884 3031 	strbeq.w	r3, [r4, #49]	@ 0x31
  __HAL_UNLOCK(hfmac);
 8001d68:	f04f 0300 	mov.w	r3, #0
    hfmac->State = HAL_FMAC_STATE_READY;
 8001d6c:	bf1c      	itt	ne
 8001d6e:	f884 6031 	strbne.w	r6, [r4, #49]	@ 0x31
    status = HAL_OK;
 8001d72:	4628      	movne	r0, r5
  __HAL_UNLOCK(hfmac);
 8001d74:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8001d78:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	e7fc      	b.n	8001d78 <HAL_FMAC_Init+0x5e>
	...

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d84:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8001f10 <HAL_GPIO_Init+0x190>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d88:	4c5f      	ldr	r4, [pc, #380]	@ (8001f08 <HAL_GPIO_Init+0x188>)
  uint32_t position = 0x00U;
 8001d8a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d8c:	680a      	ldr	r2, [r1, #0]
 8001d8e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001d92:	d102      	bne.n	8001d9a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001d94:	b003      	add	sp, #12
 8001d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d9a:	2501      	movs	r5, #1
 8001d9c:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8001da0:	ea18 0202 	ands.w	r2, r8, r2
 8001da4:	f000 80a4 	beq.w	8001ef0 <HAL_GPIO_Init+0x170>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da8:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001daa:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dac:	f006 0503 	and.w	r5, r6, #3
 8001db0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001db4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db8:	1e6f      	subs	r7, r5, #1
 8001dba:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dbc:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dc0:	d834      	bhi.n	8001e2c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001dc2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dc4:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc8:	68cf      	ldr	r7, [r1, #12]
 8001dca:	fa07 f70e 	lsl.w	r7, r7, lr
 8001dce:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001dd2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001dd4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dd6:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dda:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001dde:	409f      	lsls	r7, r3
 8001de0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001de4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001de6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de8:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dec:	688f      	ldr	r7, [r1, #8]
 8001dee:	fa07 f70e 	lsl.w	r7, r7, lr
 8001df2:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df6:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001df8:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	d119      	bne.n	8001e30 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8001dfc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8001e00:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e04:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001e08:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e0c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001e10:	f04f 0b0f 	mov.w	fp, #15
 8001e14:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001e18:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e1c:	690f      	ldr	r7, [r1, #16]
 8001e1e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001e22:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8001e26:	f8c8 7020 	str.w	r7, [r8, #32]
 8001e2a:	e001      	b.n	8001e30 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2c:	2d03      	cmp	r5, #3
 8001e2e:	d1da      	bne.n	8001de6 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8001e30:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e32:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e36:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e3a:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e3c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001e40:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e42:	d055      	beq.n	8001ef0 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e44:	f8d9 5060 	ldr.w	r5, [r9, #96]	@ 0x60
 8001e48:	f045 0501 	orr.w	r5, r5, #1
 8001e4c:	f8c9 5060 	str.w	r5, [r9, #96]	@ 0x60
 8001e50:	f8d9 5060 	ldr.w	r5, [r9, #96]	@ 0x60
 8001e54:	f023 0703 	bic.w	r7, r3, #3
 8001e58:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001e5c:	f005 0501 	and.w	r5, r5, #1
 8001e60:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8001e64:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e66:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e6e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001e72:	f04f 0e0f 	mov.w	lr, #15
 8001e76:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e7a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e7e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e82:	d037      	beq.n	8001ef4 <HAL_GPIO_Init+0x174>
 8001e84:	4d21      	ldr	r5, [pc, #132]	@ (8001f0c <HAL_GPIO_Init+0x18c>)
 8001e86:	42a8      	cmp	r0, r5
 8001e88:	d036      	beq.n	8001ef8 <HAL_GPIO_Init+0x178>
 8001e8a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001e8e:	42a8      	cmp	r0, r5
 8001e90:	d034      	beq.n	8001efc <HAL_GPIO_Init+0x17c>
 8001e92:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001e96:	42a8      	cmp	r0, r5
 8001e98:	d032      	beq.n	8001f00 <HAL_GPIO_Init+0x180>
 8001e9a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001e9e:	42a8      	cmp	r0, r5
 8001ea0:	d030      	beq.n	8001f04 <HAL_GPIO_Init+0x184>
 8001ea2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001ea6:	42a8      	cmp	r0, r5
 8001ea8:	bf14      	ite	ne
 8001eaa:	2506      	movne	r5, #6
 8001eac:	2505      	moveq	r5, #5
 8001eae:	fa05 f50c 	lsl.w	r5, r5, ip
 8001eb2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8001eb8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8001eba:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ebc:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8001ec0:	bf0c      	ite	eq
 8001ec2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001ec4:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8001ec6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001ec8:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eca:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8001ece:	bf0c      	ite	eq
 8001ed0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001ed2:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8001ed4:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8001ed6:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed8:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8001edc:	bf0c      	ite	eq
 8001ede:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001ee0:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8001ee2:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8001ee4:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee6:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8001ee8:	bf54      	ite	pl
 8001eea:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001eec:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8001eee:	6025      	str	r5, [r4, #0]
    position++;
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	e74b      	b.n	8001d8c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	e7da      	b.n	8001eae <HAL_GPIO_Init+0x12e>
 8001ef8:	2501      	movs	r5, #1
 8001efa:	e7d8      	b.n	8001eae <HAL_GPIO_Init+0x12e>
 8001efc:	2502      	movs	r5, #2
 8001efe:	e7d6      	b.n	8001eae <HAL_GPIO_Init+0x12e>
 8001f00:	2503      	movs	r5, #3
 8001f02:	e7d4      	b.n	8001eae <HAL_GPIO_Init+0x12e>
 8001f04:	2504      	movs	r5, #4
 8001f06:	e7d2      	b.n	8001eae <HAL_GPIO_Init+0x12e>
 8001f08:	40010400 	.word	0x40010400
 8001f0c:	48000400 	.word	0x48000400
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f14:	b10a      	cbz	r2, 8001f1a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f16:	6181      	str	r1, [r0, #24]
 8001f18:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f1a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8001f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8001f24:	4604      	mov	r4, r0
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d062      	beq.n	8001ff0 <HAL_OPAMP_Init+0xd0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001f2a:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d05e      	beq.n	8001ff0 <HAL_OPAMP_Init+0xd0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8001f32:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d05a      	beq.n	8001ff0 <HAL_OPAMP_Init+0xd0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff4 <HAL_OPAMP_Init+0xd4>)
 8001f3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	661a      	str	r2, [r3, #96]	@ 0x60
 8001f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001f4e:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8001f52:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001f56:	b90b      	cbnz	r3, 8001f5c <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8001f58:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f7fe fcfb 	bl	8000958 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8001f62:	6821      	ldr	r1, [r4, #0]
 8001f64:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8001f66:	680e      	ldr	r6, [r1, #0]
 8001f68:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 8001f6c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8001f70:	4821      	ldr	r0, [pc, #132]	@ (8001ff8 <HAL_OPAMP_Init+0xd8>)
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8001f72:	f023 0220 	bic.w	r2, r3, #32
      MODIFY_REG(hopamp->Instance->CSR,
 8001f76:	f026 0610 	bic.w	r6, r6, #16
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8001f7a:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 8001f7c:	ea46 0609 	orr.w	r6, r6, r9
 8001f80:	6862      	ldr	r2, [r4, #4]
 8001f82:	e9d4 ec09 	ldrd	lr, ip, [r4, #36]	@ 0x24
 8001f86:	e9d4 750c 	ldrd	r7, r5, [r4, #48]	@ 0x30
 8001f8a:	600e      	str	r6, [r1, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8001f8c:	ea43 0302 	orr.w	r3, r3, r2
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8001f90:	bf18      	it	ne
 8001f92:	68e2      	ldrne	r2, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 8001f94:	680e      	ldr	r6, [r1, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8001f96:	bf18      	it	ne
 8001f98:	4313      	orrne	r3, r2
 8001f9a:	ea43 0308 	orr.w	r3, r3, r8
 8001f9e:	7d22      	ldrb	r2, [r4, #20]
 8001fa0:	ea43 030e 	orr.w	r3, r3, lr
 8001fa4:	ea43 030c 	orr.w	r3, r3, ip
 8001fa8:	4006      	ands	r6, r0
 8001faa:	ea43 43c7 	orr.w	r3, r3, r7, lsl #19
 8001fae:	1e50      	subs	r0, r2, #1
 8001fb0:	4242      	negs	r2, r0
 8001fb2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001fb6:	4142      	adcs	r2, r0
 8001fb8:	4333      	orrs	r3, r6
 8001fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fbe:	600b      	str	r3, [r1, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8001fc0:	698b      	ldr	r3, [r1, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db09      	blt.n	8001fda <HAL_OPAMP_Init+0xba>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8001fc6:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8001fca:	698a      	ldr	r2, [r1, #24]
 8001fcc:	4303      	orrs	r3, r0
 8001fce:	6a20      	ldr	r0, [r4, #32]
 8001fd0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001fd4:	4303      	orrs	r3, r0
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	618b      	str	r3, [r1, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001fda:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8001fde:	b11b      	cbz	r3, 8001fe8 <HAL_OPAMP_Init+0xc8>
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8001fe0:	2000      	movs	r0, #0
  }
}
 8001fe2:	b003      	add	sp, #12
 8001fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hopamp->State = HAL_OPAMP_STATE_READY;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 8001fee:	e7f7      	b.n	8001fe0 <HAL_OPAMP_Init+0xc0>
    return HAL_ERROR;
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	e7f6      	b.n	8001fe2 <HAL_OPAMP_Init+0xc2>
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	e0003e11 	.word	0xe0003e11

08001ffc <HAL_OPAMP_Start>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8001ffc:	b188      	cbz	r0, 8002022 <HAL_OPAMP_Start+0x26>
  {
    status = HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001ffe:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8002002:	2b05      	cmp	r3, #5
 8002004:	d00d      	beq.n	8002022 <HAL_OPAMP_Start+0x26>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8002006:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 800200a:	2b01      	cmp	r3, #1
 800200c:	d109      	bne.n	8002022 <HAL_OPAMP_Start+0x26>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800200e:	6802      	ldr	r2, [r0, #0]
 8002010:	6813      	ldr	r3, [r2, #0]
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8002018:	2304      	movs	r3, #4
 800201a:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2000      	movs	r0, #0
 8002020:	4770      	bx	lr
    status = HAL_ERROR;
 8002022:	2001      	movs	r0, #1
    }


  }
  return status;
}
 8002024:	4770      	bx	lr

08002026 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002026:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002028:	4604      	mov	r4, r0
 800202a:	2800      	cmp	r0, #0
 800202c:	d04d      	beq.n	80020ca <HAL_PCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800202e:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8002032:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002036:	b91b      	cbnz	r3, 8002040 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002038:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800203c:	f002 ffda 	bl	8004ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002040:	2303      	movs	r3, #3
 8002042:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002046:	6820      	ldr	r0, [r4, #0]
 8002048:	f001 fc69 	bl	800391e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204c:	2200      	movs	r2, #0
 800204e:	7925      	ldrb	r5, [r4, #4]
 8002050:	f104 0310 	add.w	r3, r4, #16
 8002054:	4611      	mov	r1, r2
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002056:	2601      	movs	r6, #1
 8002058:	b2d0      	uxtb	r0, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205a:	4285      	cmp	r5, r0
 800205c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002060:	d817      	bhi.n	8002092 <HAL_PCD_Init+0x6c>
 8002062:	2100      	movs	r1, #0
 8002064:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002068:	460a      	mov	r2, r1
 800206a:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206c:	4285      	cmp	r5, r0
 800206e:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002072:	d81a      	bhi.n	80020aa <HAL_PCD_Init+0x84>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002074:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8002078:	6820      	ldr	r0, [r4, #0]
 800207a:	f001 fc5a 	bl	8003932 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002082:	2301      	movs	r3, #1
 8002084:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002088:	7aa3      	ldrb	r3, [r4, #10]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d019      	beq.n	80020c2 <HAL_PCD_Init+0x9c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 800208e:	2000      	movs	r0, #0
}
 8002090:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002092:	e943 1106 	strd	r1, r1, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8002096:	f803 6c27 	strb.w	r6, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 800209a:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800209e:	f803 1c25 	strb.w	r1, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020a2:	f843 1c10 	str.w	r1, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a6:	3201      	adds	r2, #1
 80020a8:	e7d6      	b.n	8002058 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020aa:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 80020ae:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 80020b2:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020b6:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020ba:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020be:	3101      	adds	r1, #1
 80020c0:	e7d3      	b.n	800206a <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020c2:	4620      	mov	r0, r4
 80020c4:	f000 fe2a 	bl	8002d1c <HAL_PCDEx_ActivateLPM>
 80020c8:	e7e1      	b.n	800208e <HAL_PCD_Init+0x68>
    return HAL_ERROR;
 80020ca:	2001      	movs	r0, #1
 80020cc:	e7e0      	b.n	8002090 <HAL_PCD_Init+0x6a>

080020ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020ce:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80020d0:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 80020d4:	2b01      	cmp	r3, #1
{
 80020d6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80020d8:	d00c      	beq.n	80020f4 <HAL_PCD_Start+0x26>
 80020da:	2301      	movs	r3, #1
 80020dc:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80020e0:	6800      	ldr	r0, [r0, #0]
 80020e2:	f001 fc13 	bl	800390c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020e6:	6820      	ldr	r0, [r4, #0]
 80020e8:	f001 feda 	bl	8003ea0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 80020f2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80020f4:	2002      	movs	r0, #2
 80020f6:	e7fc      	b.n	80020f2 <HAL_PCD_Start+0x24>

080020f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020f8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80020fa:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
 80020fe:	2a01      	cmp	r2, #1
{
 8002100:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002102:	d00a      	beq.n	800211a <HAL_PCD_SetAddress+0x22>
 8002104:	2201      	movs	r2, #1
 8002106:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  hpcd->USB_Address = address;
 800210a:	7301      	strb	r1, [r0, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800210c:	6800      	ldr	r0, [r0, #0]
 800210e:	f001 fec1 	bl	8003e94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002112:	2000      	movs	r0, #0
 8002114:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8002118:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800211a:	2002      	movs	r0, #2
 800211c:	e7fc      	b.n	8002118 <HAL_PCD_SetAddress+0x20>
	...

08002120 <HAL_PCD_IRQHandler>:
{
 8002120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002124:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002126:	6800      	ldr	r0, [r0, #0]
 8002128:	f001 fec5 	bl	8003eb6 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800212c:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8002130:	f000 8423 	beq.w	800297a <HAL_PCD_IRQHandler+0x85a>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002134:	f8df 99a8 	ldr.w	r9, [pc, #2472]	@ 8002ae0 <HAL_PCD_IRQHandler+0x9c0>

        if (ep->type == EP_TYPE_ISOC)
 8002138:	f04f 0828 	mov.w	r8, #40	@ 0x28
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800213c:	6820      	ldr	r0, [r4, #0]
 800213e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8002142:	041a      	lsls	r2, r3, #16
 8002144:	d401      	bmi.n	800214a <HAL_PCD_IRQHandler+0x2a>
}
 8002146:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 800214a:	f8b0 5044 	ldrh.w	r5, [r0, #68]	@ 0x44
 800214e:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8002150:	f015 050f 	ands.w	r5, r5, #15
 8002154:	f040 80be 	bne.w	80022d4 <HAL_PCD_IRQHandler+0x1b4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002158:	f011 0110 	ands.w	r1, r1, #16
 800215c:	d126      	bne.n	80021ac <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800215e:	8803      	ldrh	r3, [r0, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	ea03 0309 	and.w	r3, r3, r9
 8002166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800216a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800216c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002170:	7c22      	ldrb	r2, [r4, #16]
 8002172:	f200 4002 	addw	r0, r0, #1026	@ 0x402
 8002176:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800217a:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800217c:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8002180:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002182:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8002186:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002188:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 800218a:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800218c:	f002 ff6f 	bl	800506e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002190:	7b23      	ldrb	r3, [r4, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0d2      	beq.n	800213c <HAL_PCD_IRQHandler+0x1c>
 8002196:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002198:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800219a:	2a00      	cmp	r2, #0
 800219c:	d1ce      	bne.n	800213c <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800219e:	7b23      	ldrb	r3, [r4, #12]
 80021a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021a4:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80021a8:	7322      	strb	r2, [r4, #12]
 80021aa:	e7c7      	b.n	800213c <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021ac:	8805      	ldrh	r5, [r0, #0]
 80021ae:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021b0:	f415 6500 	ands.w	r5, r5, #2048	@ 0x800
 80021b4:	d020      	beq.n	80021f8 <HAL_PCD_IRQHandler+0xd8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021b6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80021ba:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 80021be:	f200 4106 	addw	r1, r0, #1030	@ 0x406
 80021c2:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021c6:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80021ca:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 80021ce:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 80021d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021d6:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021da:	f002 f8ce 	bl	800437a <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021de:	6822      	ldr	r2, [r4, #0]
 80021e0:	8813      	ldrh	r3, [r2, #0]
 80021e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021e6:	051b      	lsls	r3, r3, #20
 80021e8:	0d1b      	lsrs	r3, r3, #20
 80021ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ee:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80021f0:	4620      	mov	r0, r4
 80021f2:	f002 ff2d 	bl	8005050 <HAL_PCD_SetupStageCallback>
 80021f6:	e7a1      	b.n	800213c <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021f8:	0419      	lsls	r1, r3, #16
 80021fa:	d59f      	bpl.n	800213c <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021fc:	8803      	ldrh	r3, [r0, #0]
 80021fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002202:	051b      	lsls	r3, r3, #20
 8002204:	0d1b      	lsrs	r3, r3, #20
 8002206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800220a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800220c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002210:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8002214:	f200 4106 	addw	r1, r0, #1030	@ 0x406
 8002218:	fa11 f383 	uxtah	r3, r1, r3
 800221c:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8002220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002224:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002228:	b18b      	cbz	r3, 800224e <HAL_PCD_IRQHandler+0x12e>
 800222a:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 800222e:	b171      	cbz	r1, 800224e <HAL_PCD_IRQHandler+0x12e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002230:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8002234:	f002 f8a1 	bl	800437a <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002238:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 800223c:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
 8002240:	4413      	add	r3, r2
 8002242:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002246:	4629      	mov	r1, r5
 8002248:	4620      	mov	r0, r4
 800224a:	f002 ff07 	bl	800505c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800224e:	6821      	ldr	r1, [r4, #0]
 8002250:	880a      	ldrh	r2, [r1, #0]
 8002252:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002254:	0512      	lsls	r2, r2, #20
 8002256:	f53f af71 	bmi.w	800213c <HAL_PCD_IRQHandler+0x1c>
 800225a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800225e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002262:	f43f af6b 	beq.w	800213c <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002266:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 800226a:	f201 4006 	addw	r0, r1, #1030	@ 0x406
 800226e:	b292      	uxth	r2, r2
 8002270:	5a83      	ldrh	r3, [r0, r2]
 8002272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002276:	5283      	strh	r3, [r0, r2]
 8002278:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 800227c:	2b3e      	cmp	r3, #62	@ 0x3e
 800227e:	d91d      	bls.n	80022bc <HAL_PCD_IRQHandler+0x19c>
 8002280:	095d      	lsrs	r5, r3, #5
 8002282:	06df      	lsls	r7, r3, #27
 8002284:	5a83      	ldrh	r3, [r0, r2]
 8002286:	bf08      	it	eq
 8002288:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800228c:	b29b      	uxth	r3, r3
 800228e:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 8002292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800229a:	b29b      	uxth	r3, r3
 800229c:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800229e:	880b      	ldrh	r3, [r1, #0]
 80022a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	0c1b      	lsrs	r3, r3, #16
 80022ac:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80022b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022b8:	800b      	strh	r3, [r1, #0]
 80022ba:	e73f      	b.n	800213c <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022bc:	b90b      	cbnz	r3, 80022c2 <HAL_PCD_IRQHandler+0x1a2>
 80022be:	5a83      	ldrh	r3, [r0, r2]
 80022c0:	e7e7      	b.n	8002292 <HAL_PCD_IRQHandler+0x172>
 80022c2:	085d      	lsrs	r5, r3, #1
 80022c4:	07de      	lsls	r6, r3, #31
 80022c6:	5a83      	ldrh	r3, [r0, r2]
 80022c8:	bf48      	it	mi
 80022ca:	3501      	addmi	r5, #1
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 80022d2:	e7e2      	b.n	800229a <HAL_PCD_IRQHandler+0x17a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022d4:	b22e      	sxth	r6, r5
 80022d6:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022da:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022dc:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022de:	f140 80ed 	bpl.w	80024bc <HAL_PCD_IRQHandler+0x39c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022e2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ea:	051b      	lsls	r3, r3, #20
 80022ec:	0d1b      	lsrs	r3, r3, #20
 80022ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f2:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80022f6:	fb08 4105 	mla	r1, r8, r5, r4
 80022fa:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 80022fe:	b9bb      	cbnz	r3, 8002330 <HAL_PCD_IRQHandler+0x210>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002300:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002304:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8002308:	f200 4c06 	addw	ip, r0, #1030	@ 0x406
 800230c:	fa1c f383 	uxtah	r3, ip, r3
 8002310:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8002314:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8002318:	f1ba 0f00 	cmp.w	sl, #0
 800231c:	f000 80b4 	beq.w	8002488 <HAL_PCD_IRQHandler+0x368>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002320:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
 8002324:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002326:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 800232a:	f002 f826 	bl	800437a <USB_ReadPMA>
 800232e:	e0ab      	b.n	8002488 <HAL_PCD_IRQHandler+0x368>
          if (ep->type == EP_TYPE_BULK)
 8002330:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153
 8002334:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8002338:	2b02      	cmp	r3, #2
 800233a:	f040 8083 	bne.w	8002444 <HAL_PCD_IRQHandler+0x324>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800233e:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50

    if (ep->xfer_len >= count)
 8002342:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002346:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 800234a:	fa10 fe8e 	uxtah	lr, r0, lr
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800234e:	f417 4b80 	ands.w	fp, r7, #16384	@ 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002352:	44d6      	add	lr, sl
 8002354:	f007 0c40 	and.w	ip, r7, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002358:	d03a      	beq.n	80023d0 <HAL_PCD_IRQHandler+0x2b0>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800235a:	f8be a402 	ldrh.w	sl, [lr, #1026]	@ 0x402
 800235e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8002362:	459a      	cmp	sl, r3
 8002364:	d913      	bls.n	800238e <HAL_PCD_IRQHandler+0x26e>
 8002366:	2300      	movs	r3, #0
 8002368:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800236c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002370:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	0c1b      	lsrs	r3, r3, #16
 800237c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002388:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800238c:	e005      	b.n	800239a <HAL_PCD_IRQHandler+0x27a>
      ep->xfer_len -= count;
 800238e:	eba3 030a 	sub.w	r3, r3, sl
 8002392:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0e8      	beq.n	800236c <HAL_PCD_IRQHandler+0x24c>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800239a:	f1bc 0f00 	cmp.w	ip, #0
 800239e:	d00d      	beq.n	80023bc <HAL_PCD_IRQHandler+0x29c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ac:	041b      	lsls	r3, r3, #16
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80023bc:	f1ba 0f00 	cmp.w	sl, #0
 80023c0:	d062      	beq.n	8002488 <HAL_PCD_IRQHandler+0x368>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023c2:	2128      	movs	r1, #40	@ 0x28
 80023c4:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023c8:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 80023cc:	4653      	mov	r3, sl
 80023ce:	e7aa      	b.n	8002326 <HAL_PCD_IRQHandler+0x206>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023d0:	f8be a406 	ldrh.w	sl, [lr, #1030]	@ 0x406
 80023d4:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 80023d8:	459a      	cmp	sl, r3
 80023da:	d912      	bls.n	8002402 <HAL_PCD_IRQHandler+0x2e2>
 80023dc:	f8c1 b168 	str.w	fp, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	0c1b      	lsrs	r3, r3, #16
 80023f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80023f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002400:	e005      	b.n	800240e <HAL_PCD_IRQHandler+0x2ee>
      ep->xfer_len -= count;
 8002402:	eba3 030a 	sub.w	r3, r3, sl
 8002406:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0e8      	beq.n	80023e0 <HAL_PCD_IRQHandler+0x2c0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800240e:	f1bc 0f00 	cmp.w	ip, #0
 8002412:	d10d      	bne.n	8002430 <HAL_PCD_IRQHandler+0x310>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002414:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800241c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002428:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800242c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8002430:	f1ba 0f00 	cmp.w	sl, #0
 8002434:	d028      	beq.n	8002488 <HAL_PCD_IRQHandler+0x368>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002436:	2128      	movs	r1, #40	@ 0x28
 8002438:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800243c:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8002440:	4653      	mov	r3, sl
 8002442:	e770      	b.n	8002326 <HAL_PCD_IRQHandler+0x206>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002444:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800244c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	0c1b      	lsrs	r3, r3, #16
 8002454:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002458:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800245c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002460:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8002464:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002468:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800246c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002470:	d058      	beq.n	8002524 <HAL_PCD_IRQHandler+0x404>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002472:	f200 4c02 	addw	ip, r0, #1026	@ 0x402
 8002476:	fa1c f383 	uxtah	r3, ip, r3
 800247a:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 800247e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002482:	f1ba 0f00 	cmp.w	sl, #0
 8002486:	d19f      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x2a8>
        ep->xfer_count += count;
 8002488:	fb08 4305 	mla	r3, r8, r5, r4
 800248c:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8002490:	4452      	add	r2, sl
 8002492:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8002496:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800249a:	4452      	add	r2, sl
 800249c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024a0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 80024a4:	b11a      	cbz	r2, 80024ae <HAL_PCD_IRQHandler+0x38e>
 80024a6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80024aa:	459a      	cmp	sl, r3
 80024ac:	d246      	bcs.n	800253c <HAL_PCD_IRQHandler+0x41c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024ae:	fb08 4305 	mla	r3, r8, r5, r4
 80024b2:	4620      	mov	r0, r4
 80024b4:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 80024b8:	f002 fdd0 	bl	800505c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024bc:	063b      	lsls	r3, r7, #24
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024be:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024c0:	f57f ae3c 	bpl.w	800213c <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024c4:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	ea03 0309 	and.w	r3, r3, r9
 80024ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024d2:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80024d6:	fb08 4c05 	mla	ip, r8, r5, r4
 80024da:	f89c 3013 	ldrb.w	r3, [ip, #19]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d15f      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x482>
          ep->xfer_len = 0U;
 80024e2:	fb05 8308 	mla	r3, r5, r8, r8
 80024e6:	2200      	movs	r2, #0
 80024e8:	50e2      	str	r2, [r4, r3]
          if (ep->doublebuffer != 0U)
 80024ea:	f89c 301c 	ldrb.w	r3, [ip, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d039      	beq.n	8002566 <HAL_PCD_IRQHandler+0x446>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024f2:	f017 0740 	ands.w	r7, r7, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f6:	f89c 3011 	ldrb.w	r3, [ip, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024fa:	d03c      	beq.n	8002576 <HAL_PCD_IRQHandler+0x456>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024fc:	bb33      	cbnz	r3, 800254c <HAL_PCD_IRQHandler+0x42c>
 80024fe:	f89c 2010 	ldrb.w	r2, [ip, #16]
 8002502:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002506:	f200 4002 	addw	r0, r0, #1026	@ 0x402
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800250a:	fa10 f383 	uxtah	r3, r0, r3
 800250e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002518:	801a      	strh	r2, [r3, #0]
 800251a:	881a      	ldrh	r2, [r3, #0]
 800251c:	b292      	uxth	r2, r2
 800251e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002522:	e01f      	b.n	8002564 <HAL_PCD_IRQHandler+0x444>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002524:	f200 4c06 	addw	ip, r0, #1030	@ 0x406
 8002528:	fa1c f383 	uxtah	r3, ip, r3
 800252c:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8002530:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002534:	f1ba 0f00 	cmp.w	sl, #0
 8002538:	d0a6      	beq.n	8002488 <HAL_PCD_IRQHandler+0x368>
 800253a:	e77f      	b.n	800243c <HAL_PCD_IRQHandler+0x31c>
        ep = &hpcd->OUT_ep[epindex];
 800253c:	fb08 4105 	mla	r1, r8, r5, r4
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002540:	6820      	ldr	r0, [r4, #0]
 8002542:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8002546:	f001 fcc9 	bl	8003edc <USB_EPStartXfer>
 800254a:	e7b7      	b.n	80024bc <HAL_PCD_IRQHandler+0x39c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800254c:	2b01      	cmp	r3, #1
 800254e:	d10a      	bne.n	8002566 <HAL_PCD_IRQHandler+0x446>
 8002550:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002554:	f89c 1010 	ldrb.w	r1, [ip, #16]
 8002558:	f200 4002 	addw	r0, r0, #1026	@ 0x402
 800255c:	fa10 f383 	uxtah	r3, r0, r3
 8002560:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002564:	801a      	strh	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002566:	2328      	movs	r3, #40	@ 0x28
 8002568:	fb03 4305 	mla	r3, r3, r5, r4
 800256c:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800256e:	4620      	mov	r0, r4
 8002570:	f002 fd7d 	bl	800506e <HAL_PCD_DataInStageCallback>
 8002574:	e5e2      	b.n	800213c <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002576:	b933      	cbnz	r3, 8002586 <HAL_PCD_IRQHandler+0x466>
 8002578:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800257c:	f89c 2010 	ldrb.w	r2, [ip, #16]
 8002580:	f200 4006 	addw	r0, r0, #1030	@ 0x406
 8002584:	e7c1      	b.n	800250a <HAL_PCD_IRQHandler+0x3ea>
 8002586:	2b01      	cmp	r3, #1
 8002588:	d1ed      	bne.n	8002566 <HAL_PCD_IRQHandler+0x446>
 800258a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800258e:	f89c 2010 	ldrb.w	r2, [ip, #16]
 8002592:	f200 4006 	addw	r0, r0, #1030	@ 0x406
 8002596:	fa10 f383 	uxtah	r3, r0, r3
 800259a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800259e:	801f      	strh	r7, [r3, #0]
 80025a0:	e7e1      	b.n	8002566 <HAL_PCD_IRQHandler+0x446>
          if ((wEPVal & USB_EP_KIND) == 0U)
 80025a2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025a6:	f89c 1010 	ldrb.w	r1, [ip, #16]
 80025aa:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 80025ae:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 80025b2:	f417 7b80 	ands.w	fp, r7, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 80025b6:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025b8:	460a      	mov	r2, r1
 80025ba:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 80025be:	d11d      	bne.n	80025fc <HAL_PCD_IRQHandler+0x4dc>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025c0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80025c4:	fa1e f282 	uxtah	r2, lr, r2
 80025c8:	4402      	add	r2, r0
 80025ca:	f8b2 2402 	ldrh.w	r2, [r2, #1026]	@ 0x402
            if (ep->xfer_len > TxPctSize)
 80025ce:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <HAL_PCD_IRQHandler+0x4bc>
 80025d6:	f8c6 b028 	str.w	fp, [r6, #40]	@ 0x28
 80025da:	e7c8      	b.n	800256e <HAL_PCD_IRQHandler+0x44e>
              ep->xfer_len -= TxPctSize;
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	62b3      	str	r3, [r6, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 80025e0:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 80025e4:	4413      	add	r3, r2
 80025e6:	f8cc 3024 	str.w	r3, [ip, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 80025ea:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 80025ec:	f10a 0110 	add.w	r1, sl, #16
              ep->xfer_count += TxPctSize;
 80025f0:	4413      	add	r3, r2
 80025f2:	62f3      	str	r3, [r6, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025f4:	4421      	add	r1, r4
 80025f6:	f001 fc71 	bl	8003edc <USB_EPStartXfer>
 80025fa:	e59f      	b.n	800213c <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025fc:	f017 0a40 	ands.w	sl, r7, #64	@ 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002600:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8002604:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002608:	f000 80dd 	beq.w	80027c6 <HAL_PCD_IRQHandler+0x6a6>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800260c:	f200 4e02 	addw	lr, r0, #1026	@ 0x402
 8002610:	fa1e fc8c 	uxtah	ip, lr, ip
 8002614:	b2bf      	uxth	r7, r7
 8002616:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]

    if (ep->xfer_len > TxPctSize)
 800261a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800261e:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxPctSize;
 8002620:	bf34      	ite	cc
 8002622:	eba3 030c 	subcc.w	r3, r3, ip
    }
    else
    {
      ep->xfer_len = 0U;
 8002626:	2300      	movcs	r3, #0
 8002628:	62b3      	str	r3, [r6, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800262a:	2b00      	cmp	r3, #0
 800262c:	d158      	bne.n	80026e0 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800262e:	2628      	movs	r6, #40	@ 0x28
 8002630:	fb06 4605 	mla	r6, r6, r5, r4
 8002634:	7c76      	ldrb	r6, [r6, #17]
 8002636:	2e00      	cmp	r6, #0
 8002638:	d141      	bne.n	80026be <HAL_PCD_IRQHandler+0x59e>
 800263a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
 800263e:	fa1e f686 	uxtah	r6, lr, r6
 8002642:	f836 3031 	ldrh.w	r3, [r6, r1, lsl #3]
 8002646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264a:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
 800264e:	f836 3031 	ldrh.w	r3, [r6, r1, lsl #3]
 8002652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265a:	b29b      	uxth	r3, r3
 800265c:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002660:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002664:	f200 4006 	addw	r0, r0, #1030	@ 0x406
 8002668:	fa10 f083 	uxtah	r0, r0, r3
 800266c:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8002670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002674:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 8002678:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 800267c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002684:	b29b      	uxth	r3, r3
 8002686:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800268a:	4620      	mov	r0, r4
 800268c:	f002 fcef 	bl	800506e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002690:	2f00      	cmp	r7, #0
 8002692:	f000 80dd 	beq.w	8002850 <HAL_PCD_IRQHandler+0x730>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002696:	2328      	movs	r3, #40	@ 0x28
 8002698:	fb03 4305 	mla	r3, r3, r5, r4
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	7c19      	ldrb	r1, [r3, #16]
 80026a0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80026a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ac:	041b      	lsls	r3, r3, #16
 80026ae:	0c1b      	lsrs	r3, r3, #16
 80026b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80026bc:	e0c8      	b.n	8002850 <HAL_PCD_IRQHandler+0x730>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026be:	2e01      	cmp	r6, #1
 80026c0:	d1e3      	bne.n	800268a <HAL_PCD_IRQHandler+0x56a>
 80026c2:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
 80026c6:	fa1e f686 	uxtah	r6, lr, r6
 80026ca:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026ce:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
 80026d2:	f200 4006 	addw	r0, r0, #1030	@ 0x406
 80026d6:	fa10 f686 	uxtah	r6, r0, r6
 80026da:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
 80026de:	e7d4      	b.n	800268a <HAL_PCD_IRQHandler+0x56a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026e0:	b16f      	cbz	r7, 80026fe <HAL_PCD_IRQHandler+0x5de>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026e2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80026e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ee:	041b      	lsls	r3, r3, #16
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026fa:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80026fe:	2728      	movs	r7, #40	@ 0x28
 8002700:	fb07 4705 	mla	r7, r7, r5, r4
 8002704:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002708:	2b01      	cmp	r3, #1
 800270a:	f040 80a1 	bne.w	8002850 <HAL_PCD_IRQHandler+0x730>
        ep->xfer_buff += TxPctSize;
 800270e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002710:	4461      	add	r1, ip
 8002712:	6279      	str	r1, [r7, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8002714:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8002716:	4463      	add	r3, ip
 8002718:	62f3      	str	r3, [r6, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	6a3e      	ldr	r6, [r7, #32]
 800271e:	42b3      	cmp	r3, r6
 8002720:	d32d      	bcc.n	800277e <HAL_PCD_IRQHandler+0x65e>
          ep->xfer_len_db -= len;
 8002722:	1b9b      	subs	r3, r3, r6
 8002724:	633b      	str	r3, [r7, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002726:	2328      	movs	r3, #40	@ 0x28
 8002728:	fb03 4305 	mla	r3, r3, r5, r4
 800272c:	7c5f      	ldrb	r7, [r3, #17]
 800272e:	b2b3      	uxth	r3, r6
 8002730:	2f00      	cmp	r7, #0
 8002732:	d13f      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x694>
 8002734:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8002738:	fa1e f787 	uxtah	r7, lr, r7
 800273c:	2e3e      	cmp	r6, #62	@ 0x3e
 800273e:	f837 c032 	ldrh.w	ip, [r7, r2, lsl #3]
 8002742:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002746:	f827 c032 	strh.w	ip, [r7, r2, lsl #3]
 800274a:	d923      	bls.n	8002794 <HAL_PCD_IRQHandler+0x674>
 800274c:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8002750:	06f6      	lsls	r6, r6, #27
 8002752:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 8002756:	bf08      	it	eq
 8002758:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800275c:	b2b6      	uxth	r6, r6
 800275e:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 8002762:	ea6f 4646 	mvn.w	r6, r6, lsl #17
 8002766:	ea6f 4656 	mvn.w	r6, r6, lsr #17
 800276a:	b2b6      	uxth	r6, r6
 800276c:	f827 6032 	strh.w	r6, [r7, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002770:	2228      	movs	r2, #40	@ 0x28
 8002772:	fb02 4205 	mla	r2, r2, r5, r4
 8002776:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002778:	f001 fba1 	bl	8003ebe <USB_WritePMA>
 800277c:	e068      	b.n	8002850 <HAL_PCD_IRQHandler+0x730>
        else if (ep->xfer_len_db == 0U)
 800277e:	b91b      	cbnz	r3, 8002788 <HAL_PCD_IRQHandler+0x668>
          ep->xfer_fill_db = 0U;
 8002780:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    if (ep->xfer_len > TxPctSize)
 8002784:	4666      	mov	r6, ip
 8002786:	e7ce      	b.n	8002726 <HAL_PCD_IRQHandler+0x606>
          ep->xfer_fill_db = 0U;
 8002788:	2600      	movs	r6, #0
 800278a:	f887 6034 	strb.w	r6, [r7, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 800278e:	633e      	str	r6, [r7, #48]	@ 0x30
 8002790:	461e      	mov	r6, r3
 8002792:	e7c8      	b.n	8002726 <HAL_PCD_IRQHandler+0x606>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002794:	b916      	cbnz	r6, 800279c <HAL_PCD_IRQHandler+0x67c>
 8002796:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 800279a:	e7e2      	b.n	8002762 <HAL_PCD_IRQHandler+0x642>
 800279c:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 80027a0:	07f6      	lsls	r6, r6, #31
 80027a2:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 80027a6:	bf48      	it	mi
 80027a8:	f10c 0c01 	addmi.w	ip, ip, #1
 80027ac:	b2b6      	uxth	r6, r6
 80027ae:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 80027b2:	e7da      	b.n	800276a <HAL_PCD_IRQHandler+0x64a>
 80027b4:	2f01      	cmp	r7, #1
 80027b6:	bf02      	ittt	eq
 80027b8:	f8b0 6050 	ldrheq.w	r6, [r0, #80]	@ 0x50
 80027bc:	fa1e f686 	uxtaheq	r6, lr, r6
 80027c0:	f826 3032 	strheq.w	r3, [r6, r2, lsl #3]
 80027c4:	e7d4      	b.n	8002770 <HAL_PCD_IRQHandler+0x650>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027c6:	f200 4e06 	addw	lr, r0, #1030	@ 0x406
 80027ca:	fa1e fc8c 	uxtah	ip, lr, ip
 80027ce:	b2bf      	uxth	r7, r7
 80027d0:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]
    if (ep->xfer_len >= TxPctSize)
 80027d4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80027d8:	459c      	cmp	ip, r3
      ep->xfer_len -= TxPctSize;
 80027da:	bf94      	ite	ls
 80027dc:	eba3 030c 	subls.w	r3, r3, ip
      ep->xfer_len = 0U;
 80027e0:	4653      	movhi	r3, sl
 80027e2:	62b3      	str	r3, [r6, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d158      	bne.n	800289a <HAL_PCD_IRQHandler+0x77a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027e8:	2628      	movs	r6, #40	@ 0x28
 80027ea:	fb06 4605 	mla	r6, r6, r5, r4
 80027ee:	7c76      	ldrb	r6, [r6, #17]
 80027f0:	2e00      	cmp	r6, #0
 80027f2:	d143      	bne.n	800287c <HAL_PCD_IRQHandler+0x75c>
 80027f4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
 80027f8:	f200 4302 	addw	r3, r0, #1026	@ 0x402
 80027fc:	fa13 f686 	uxtah	r6, r3, r6
 8002800:	f836 3031 	ldrh.w	r3, [r6, r1, lsl #3]
 8002804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002808:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
 800280c:	f836 3031 	ldrh.w	r3, [r6, r1, lsl #3]
 8002810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002818:	b29b      	uxth	r3, r3
 800281a:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800281e:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
 8002822:	fa1e f080 	uxtah	r0, lr, r0
 8002826:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 800282a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800282e:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 8002832:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8002836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283e:	b29b      	uxth	r3, r3
 8002840:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002844:	4620      	mov	r0, r4
 8002846:	f002 fc12 	bl	800506e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800284a:	2f00      	cmp	r7, #0
 800284c:	f43f af23 	beq.w	8002696 <HAL_PCD_IRQHandler+0x576>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002850:	2328      	movs	r3, #40	@ 0x28
 8002852:	fb03 4505 	mla	r5, r3, r5, r4
 8002856:	6822      	ldr	r2, [r4, #0]
 8002858:	7c29      	ldrb	r1, [r5, #16]
 800285a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800285e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800286e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002876:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800287a:	e45f      	b.n	800213c <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800287c:	2e01      	cmp	r6, #1
 800287e:	d1e1      	bne.n	8002844 <HAL_PCD_IRQHandler+0x724>
 8002880:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
 8002884:	f200 4c02 	addw	ip, r0, #1026	@ 0x402
 8002888:	fa1c f686 	uxtah	r6, ip, r6
 800288c:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002890:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
 8002894:	fa1e f080 	uxtah	r0, lr, r0
 8002898:	e7d2      	b.n	8002840 <HAL_PCD_IRQHandler+0x720>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800289a:	b96f      	cbnz	r7, 80028b8 <HAL_PCD_IRQHandler+0x798>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800289c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80028a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80028b8:	2728      	movs	r7, #40	@ 0x28
 80028ba:	fb07 4705 	mla	r7, r7, r5, r4
 80028be:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d1c4      	bne.n	8002850 <HAL_PCD_IRQHandler+0x730>
        ep->xfer_buff += TxPctSize;
 80028c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028c8:	4461      	add	r1, ip
 80028ca:	6279      	str	r1, [r7, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80028cc:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80028ce:	4463      	add	r3, ip
 80028d0:	62f3      	str	r3, [r6, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80028d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d4:	6a3e      	ldr	r6, [r7, #32]
 80028d6:	42b3      	cmp	r3, r6
 80028d8:	d32b      	bcc.n	8002932 <HAL_PCD_IRQHandler+0x812>
          ep->xfer_len_db -= len;
 80028da:	1b9b      	subs	r3, r3, r6
 80028dc:	633b      	str	r3, [r7, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028de:	2328      	movs	r3, #40	@ 0x28
 80028e0:	fb03 4305 	mla	r3, r3, r5, r4
 80028e4:	7c5f      	ldrb	r7, [r3, #17]
 80028e6:	b2b3      	uxth	r3, r6
 80028e8:	2f00      	cmp	r7, #0
 80028ea:	d13d      	bne.n	8002968 <HAL_PCD_IRQHandler+0x848>
 80028ec:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 80028f0:	fa1e f787 	uxtah	r7, lr, r7
 80028f4:	2e3e      	cmp	r6, #62	@ 0x3e
 80028f6:	f837 c032 	ldrh.w	ip, [r7, r2, lsl #3]
 80028fa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80028fe:	f827 c032 	strh.w	ip, [r7, r2, lsl #3]
 8002902:	d921      	bls.n	8002948 <HAL_PCD_IRQHandler+0x828>
 8002904:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8002908:	06f6      	lsls	r6, r6, #27
 800290a:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 800290e:	bf08      	it	eq
 8002910:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002914:	b2b6      	uxth	r6, r6
 8002916:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 800291a:	ea6f 4646 	mvn.w	r6, r6, lsl #17
 800291e:	ea6f 4656 	mvn.w	r6, r6, lsr #17
 8002922:	b2b6      	uxth	r6, r6
 8002924:	f827 6032 	strh.w	r6, [r7, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002928:	2228      	movs	r2, #40	@ 0x28
 800292a:	fb02 4205 	mla	r2, r2, r5, r4
 800292e:	8b52      	ldrh	r2, [r2, #26]
 8002930:	e722      	b.n	8002778 <HAL_PCD_IRQHandler+0x658>
        else if (ep->xfer_len_db == 0U)
 8002932:	b91b      	cbnz	r3, 800293c <HAL_PCD_IRQHandler+0x81c>
          ep->xfer_fill_db = 0U;
 8002934:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    if (ep->xfer_len >= TxPctSize)
 8002938:	4666      	mov	r6, ip
 800293a:	e7d0      	b.n	80028de <HAL_PCD_IRQHandler+0x7be>
          ep->xfer_len_db = 0U;
 800293c:	2600      	movs	r6, #0
 800293e:	633e      	str	r6, [r7, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8002940:	f887 6034 	strb.w	r6, [r7, #52]	@ 0x34
 8002944:	461e      	mov	r6, r3
 8002946:	e7ca      	b.n	80028de <HAL_PCD_IRQHandler+0x7be>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002948:	b916      	cbnz	r6, 8002950 <HAL_PCD_IRQHandler+0x830>
 800294a:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 800294e:	e7e4      	b.n	800291a <HAL_PCD_IRQHandler+0x7fa>
 8002950:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 8002954:	07f6      	lsls	r6, r6, #31
 8002956:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 800295a:	bf48      	it	mi
 800295c:	f10c 0c01 	addmi.w	ip, ip, #1
 8002960:	b2b6      	uxth	r6, r6
 8002962:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 8002966:	e7dc      	b.n	8002922 <HAL_PCD_IRQHandler+0x802>
 8002968:	2f01      	cmp	r7, #1
 800296a:	bf02      	ittt	eq
 800296c:	f8b0 6050 	ldrheq.w	r6, [r0, #80]	@ 0x50
 8002970:	fa1e f686 	uxtaheq	r6, lr, r6
 8002974:	f826 3032 	strheq.w	r3, [r6, r2, lsl #3]
 8002978:	e7d6      	b.n	8002928 <HAL_PCD_IRQHandler+0x808>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800297a:	0543      	lsls	r3, r0, #21
 800297c:	d511      	bpl.n	80029a2 <HAL_PCD_IRQHandler+0x882>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002984:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 800298c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800298e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002992:	f002 fb78 	bl	8005086 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002996:	4629      	mov	r1, r5
 8002998:	4620      	mov	r0, r4
}
 800299a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800299e:	f7ff bbab 	b.w	80020f8 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80029a2:	0447      	lsls	r7, r0, #17
 80029a4:	d50a      	bpl.n	80029bc <HAL_PCD_IRQHandler+0x89c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029a6:	6822      	ldr	r2, [r4, #0]
 80029a8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80029ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80029b8:	f7ff bbc5 	b.w	8002146 <HAL_PCD_IRQHandler+0x26>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80029bc:	f410 5100 	ands.w	r1, r0, #8192	@ 0x2000
 80029c0:	d005      	beq.n	80029ce <HAL_PCD_IRQHandler+0x8ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029c2:	6822      	ldr	r2, [r4, #0]
 80029c4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80029c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029cc:	e7f0      	b.n	80029b0 <HAL_PCD_IRQHandler+0x890>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80029ce:	04c6      	lsls	r6, r0, #19
 80029d0:	d522      	bpl.n	8002a18 <HAL_PCD_IRQHandler+0x8f8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	041b      	lsls	r3, r3, #16
 80029de:	0c1b      	lsrs	r3, r3, #16
 80029e0:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029e4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80029e8:	f023 0308 	bic.w	r3, r3, #8
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    if (hpcd->LPM_State == LPM_L1)
 80029f4:	f894 32c8 	ldrb.w	r3, [r4, #712]	@ 0x2c8
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d104      	bne.n	8002a06 <HAL_PCD_IRQHandler+0x8e6>
      hpcd->LPM_State = LPM_L0;
 80029fc:	f884 12c8 	strb.w	r1, [r4, #712]	@ 0x2c8
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a00:	4620      	mov	r0, r4
 8002a02:	f002 fc19 	bl	8005238 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8002a06:	4620      	mov	r0, r4
 8002a08:	f002 fb60 	bl	80050cc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a16:	e7cb      	b.n	80029b0 <HAL_PCD_IRQHandler+0x890>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a18:	0505      	lsls	r5, r0, #20
 8002a1a:	d51b      	bpl.n	8002a54 <HAL_PCD_IRQHandler+0x934>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a1c:	6822      	ldr	r2, [r4, #0]
 8002a1e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f043 0308 	orr.w	r3, r3, #8
 8002a28:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a2c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002a30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	0c1b      	lsrs	r3, r3, #16
 8002a38:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a3c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
      HAL_PCD_SuspendCallback(hpcd);
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f002 fb2e 	bl	80050ac <HAL_PCD_SuspendCallback>
 8002a50:	f7ff bb79 	b.w	8002146 <HAL_PCD_IRQHandler+0x26>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002a54:	0601      	lsls	r1, r0, #24
 8002a56:	d52a      	bpl.n	8002aae <HAL_PCD_IRQHandler+0x98e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002a5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a62:	0412      	lsls	r2, r2, #16
 8002a64:	0c12      	lsrs	r2, r2, #16
 8002a66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002a6a:	f894 22c8 	ldrb.w	r2, [r4, #712]	@ 0x2c8
 8002a6e:	2a00      	cmp	r2, #0
 8002a70:	d1eb      	bne.n	8002a4a <HAL_PCD_IRQHandler+0x92a>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a72:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002a76:	b292      	uxth	r2, r2
 8002a78:	f042 0204 	orr.w	r2, r2, #4
 8002a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a80:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002a84:	b292      	uxth	r2, r2
 8002a86:	f042 0208 	orr.w	r2, r2, #8
      hpcd->LPM_State = LPM_L1;
 8002a8a:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->LPM_State = LPM_L1;
 8002a90:	f884 12c8 	strb.w	r1, [r4, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002a94:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002a98:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002a9c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002aa0:	f8c4 32cc 	str.w	r3, [r4, #716]	@ 0x2cc
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002aa4:	4620      	mov	r0, r4
}
 8002aa6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002aaa:	f002 bbc5 	b.w	8005238 <HAL_PCDEx_LPM_Callback>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002aae:	0582      	lsls	r2, r0, #22
 8002ab0:	d50d      	bpl.n	8002ace <HAL_PCD_IRQHandler+0x9ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002ab8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	0c1b      	lsrs	r3, r3, #16
 8002ac0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f002 fada 	bl	800507e <HAL_PCD_SOFCallback>
    return;
 8002aca:	f7ff bb3c 	b.w	8002146 <HAL_PCD_IRQHandler+0x26>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ace:	05c3      	lsls	r3, r0, #23
 8002ad0:	f57f ab39 	bpl.w	8002146 <HAL_PCD_IRQHandler+0x26>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ad4:	6822      	ldr	r2, [r4, #0]
 8002ad6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002ada:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ade:	e767      	b.n	80029b0 <HAL_PCD_IRQHandler+0x890>
 8002ae0:	ffff8f0f 	.word	0xffff8f0f

08002ae4 <HAL_PCD_EP_Open>:
{
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	f001 0607 	and.w	r6, r1, #7
 8002aea:	eb06 0486 	add.w	r4, r6, r6, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002aee:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 8002af2:	4605      	mov	r5, r0
 8002af4:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8002af8:	f04f 0028 	mov.w	r0, #40	@ 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8002afc:	d01b      	beq.n	8002b36 <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 8002afe:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b02:	f104 0110 	add.w	r1, r4, #16
    ep->is_in = 1U;
 8002b06:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b08:	4429      	add	r1, r5
    ep->is_in = 1U;
 8002b0a:	7444      	strb	r4, [r0, #17]
  if (ep_type == EP_TYPE_BULK)
 8002b0c:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8002b0e:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8002b10:	bf04      	itt	eq
 8002b12:	2300      	moveq	r3, #0
 8002b14:	710b      	strbeq	r3, [r1, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b16:	700e      	strb	r6, [r1, #0]
  ep->maxpacket = ep_mps;
 8002b18:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8002b1a:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d012      	beq.n	8002b48 <HAL_PCD_EP_Open+0x64>
 8002b22:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b24:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8002b26:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b2a:	f000 ff13 	bl	8003954 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 8002b34:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8002b36:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3a:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
    ep->is_in = 0U;
 8002b3e:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b40:	4429      	add	r1, r5
    ep->is_in = 0U;
 8002b42:	f880 4151 	strb.w	r4, [r0, #337]	@ 0x151
 8002b46:	e7e1      	b.n	8002b0c <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
 8002b48:	2002      	movs	r0, #2
 8002b4a:	e7f3      	b.n	8002b34 <HAL_PCD_EP_Open+0x50>

08002b4c <HAL_PCD_EP_Close>:
{
 8002b4c:	b510      	push	{r4, lr}
 8002b4e:	4604      	mov	r4, r0
 8002b50:	f001 0007 	and.w	r0, r1, #7
 8002b54:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002b58:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002b5c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002b60:	f04f 0228 	mov.w	r2, #40	@ 0x28
 8002b64:	d015      	beq.n	8002b92 <HAL_PCD_EP_Close+0x46>
    ep->is_in = 1U;
 8002b66:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6a:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8002b6e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b70:	4421      	add	r1, r4
    ep->is_in = 1U;
 8002b72:	7453      	strb	r3, [r2, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b74:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8002b76:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d012      	beq.n	8002ba4 <HAL_PCD_EP_Close+0x58>
 8002b7e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b80:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002b82:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b86:	f001 f849 	bl	8003c1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8002b90:	bd10      	pop	{r4, pc}
    ep->is_in = 0U;
 8002b92:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b96:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8002b9a:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b9c:	4421      	add	r1, r4
    ep->is_in = 0U;
 8002b9e:	f882 3151 	strb.w	r3, [r2, #337]	@ 0x151
 8002ba2:	e7e7      	b.n	8002b74 <HAL_PCD_EP_Close+0x28>
  __HAL_LOCK(hpcd);
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	e7f3      	b.n	8002b90 <HAL_PCD_EP_Close+0x44>

08002ba8 <HAL_PCD_EP_Receive>:
{
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002bae:	2628      	movs	r6, #40	@ 0x28
 8002bb0:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 8002bb4:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb6:	f884 1150 	strb.w	r1, [r4, #336]	@ 0x150
  ep->xfer_len = len;
 8002bba:	e9c4 2359 	strd	r2, r3, [r4, #356]	@ 0x164
  ep->xfer_count = 0U;
 8002bbe:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  ep->is_in = 0U;
 8002bc2:	f884 5151 	strb.w	r5, [r4, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bc6:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
 8002bca:	6800      	ldr	r0, [r0, #0]
 8002bcc:	f001 f986 	bl	8003edc <USB_EPStartXfer>
}
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}

08002bd4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bd4:	f001 0107 	and.w	r1, r1, #7
 8002bd8:	2328      	movs	r3, #40	@ 0x28
 8002bda:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002bde:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 8002be2:	4770      	bx	lr

08002be4 <HAL_PCD_EP_Transmit>:
{
 8002be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be6:	f001 0607 	and.w	r6, r1, #7
  ep->xfer_buff = pBuf;
 8002bea:	2428      	movs	r4, #40	@ 0x28
 8002bec:	fb04 0406 	mla	r4, r4, r6, r0
 8002bf0:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8002bf4:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
 8002bf8:	6262      	str	r2, [r4, #36]	@ 0x24
  ep->xfer_count = 0U;
 8002bfa:	2500      	movs	r5, #0
  ep->xfer_fill_db = 1U;
 8002bfc:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bfe:	4639      	mov	r1, r7
  ep->xfer_len = len;
 8002c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c02:	3110      	adds	r1, #16
  ep->xfer_fill_db = 1U;
 8002c04:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 8002c08:	6323      	str	r3, [r4, #48]	@ 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c0a:	6800      	ldr	r0, [r0, #0]
  ep->xfer_count = 0U;
 8002c0c:	62fd      	str	r5, [r7, #44]	@ 0x2c
  ep->is_in = 1U;
 8002c0e:	7462      	strb	r2, [r4, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c10:	7426      	strb	r6, [r4, #16]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c12:	f001 f963 	bl	8003edc <USB_EPStartXfer>
}
 8002c16:	4628      	mov	r0, r5
 8002c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c1a <HAL_PCD_EP_SetStall>:
{
 8002c1a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c1c:	7903      	ldrb	r3, [r0, #4]
 8002c1e:	f001 0507 	and.w	r5, r1, #7
 8002c22:	42ab      	cmp	r3, r5
{
 8002c24:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c26:	d324      	bcc.n	8002c72 <HAL_PCD_EP_SetStall+0x58>
  if ((0x80U & ep_addr) == 0x80U)
 8002c28:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002c2c:	f04f 0028 	mov.w	r0, #40	@ 0x28
 8002c30:	d016      	beq.n	8002c60 <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c32:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 8002c36:	fb00 4005 	mla	r0, r0, r5, r4
 8002c3a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c3c:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8002c3e:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 1U;
 8002c40:	2301      	movs	r3, #1
 8002c42:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c44:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002c46:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d013      	beq.n	8002c76 <HAL_PCD_EP_SetStall+0x5c>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c4e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002c50:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c54:	f001 f8b5 	bl	8003dc2 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8002c5e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8002c60:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 8002c64:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8002c66:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f882 3151 	strb.w	r3, [r2, #337]	@ 0x151
 8002c70:	e7e6      	b.n	8002c40 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8002c72:	2001      	movs	r0, #1
 8002c74:	e7f3      	b.n	8002c5e <HAL_PCD_EP_SetStall+0x44>
  __HAL_LOCK(hpcd);
 8002c76:	2002      	movs	r0, #2
 8002c78:	e7f1      	b.n	8002c5e <HAL_PCD_EP_SetStall+0x44>

08002c7a <HAL_PCD_EP_ClrStall>:
{
 8002c7a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c7c:	7902      	ldrb	r2, [r0, #4]
 8002c7e:	f001 030f 	and.w	r3, r1, #15
 8002c82:	429a      	cmp	r2, r3
{
 8002c84:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c86:	d32b      	bcc.n	8002ce0 <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8002c88:	f001 0007 	and.w	r0, r1, #7
 8002c8c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8002c90:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002c94:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002c98:	f04f 0228 	mov.w	r2, #40	@ 0x28
 8002c9c:	d017      	beq.n	8002cce <HAL_PCD_EP_ClrStall+0x54>
    ep->is_in = 1U;
 8002c9e:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8002ca6:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	4421      	add	r1, r4
    ep->is_in = 1U;
 8002caa:	7453      	strb	r3, [r2, #17]
  ep->is_stall = 0U;
 8002cac:	2500      	movs	r5, #0
 8002cae:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb0:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8002cb2:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d014      	beq.n	8002ce4 <HAL_PCD_EP_ClrStall+0x6a>
 8002cba:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cbc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002cbe:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cc2:	f001 f89e 	bl	8003e02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cc6:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
  return HAL_OK;
 8002cca:	4628      	mov	r0, r5
}
 8002ccc:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8002cce:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd2:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8002cd6:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd8:	4421      	add	r1, r4
    ep->is_in = 0U;
 8002cda:	f882 3151 	strb.w	r3, [r2, #337]	@ 0x151
 8002cde:	e7e5      	b.n	8002cac <HAL_PCD_EP_ClrStall+0x32>
    return HAL_ERROR;
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	e7f3      	b.n	8002ccc <HAL_PCD_EP_ClrStall+0x52>
  __HAL_LOCK(hpcd);
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	e7f1      	b.n	8002ccc <HAL_PCD_EP_ClrStall+0x52>

08002ce8 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ce8:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cec:	bf18      	it	ne
 8002cee:	f001 0107 	andne.w	r1, r1, #7
{
 8002cf2:	b510      	push	{r4, lr}
 8002cf4:	f04f 0428 	mov.w	r4, #40	@ 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf8:	bf15      	itete	ne
 8002cfa:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cfe:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 8002d04:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d08:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8002d0a:	b91a      	cbnz	r2, 8002d14 <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 8002d0c:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8002d0e:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002d10:	2000      	movs	r0, #0
 8002d12:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8002d14:	2201      	movs	r2, #1
 8002d16:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d18:	6083      	str	r3, [r0, #8]
 8002d1a:	e7f9      	b.n	8002d10 <HAL_PCDEx_PMAConfig+0x28>

08002d1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d1c:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
  hpcd->lpm_active = 1U;
 8002d1e:	2101      	movs	r1, #1
  USB_TypeDef *USBx = hpcd->Instance;
 8002d20:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8002d22:	f8c0 12d0 	str.w	r1, [r0, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002d26:	2000      	movs	r0, #0
 8002d28:	f883 02c8 	strb.w	r0, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d2c:	f8b2 3054 	ldrh.w	r3, [r2, #84]	@ 0x54
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	430b      	orrs	r3, r1
 8002d34:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d38:	f8b2 3054 	ldrh.w	r3, [r2, #84]	@ 0x54
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 8002d46:	4770      	bx	lr

08002d48 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d48:	4b28      	ldr	r3, [pc, #160]	@ (8002dec <HAL_PWREx_ControlVoltageScaling+0xa4>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d4a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d4c:	bb18      	cbnz	r0, 8002d96 <HAL_PWREx_ControlVoltageScaling+0x4e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d4e:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 8002d52:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d56:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002d5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d62:	d140      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x9e>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8002d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d70:	4a1f      	ldr	r2, [pc, #124]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	2132      	movs	r1, #50	@ 0x32
 8002d76:	434a      	muls	r2, r1
 8002d78:	491e      	ldr	r1, [pc, #120]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002d7a:	fbb2 f2f1 	udiv	r2, r2, r1
 8002d7e:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d80:	6959      	ldr	r1, [r3, #20]
 8002d82:	0549      	lsls	r1, r1, #21
 8002d84:	d500      	bpl.n	8002d88 <HAL_PWREx_ControlVoltageScaling+0x40>
 8002d86:	b922      	cbnz	r2, 8002d92 <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	0558      	lsls	r0, r3, #21
 8002d8c:	d52b      	bpl.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x9e>
      {
        return HAL_TIMEOUT;
 8002d8e:	2003      	movs	r0, #3
 8002d90:	4770      	bx	lr
        wait_loop_index--;
 8002d92:	3a01      	subs	r2, #1
 8002d94:	e7f4      	b.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x38>
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d96:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002d9a:	d11f      	bne.n	8002ddc <HAL_PWREx_ControlVoltageScaling+0x94>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d9c:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 8002da0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002da4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002db0:	d119      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x9e>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8002db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	2132      	movs	r1, #50	@ 0x32
 8002dc4:	434a      	muls	r2, r1
 8002dc6:	490b      	ldr	r1, [pc, #44]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002dc8:	fbb2 f2f1 	udiv	r2, r2, r1
 8002dcc:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dce:	6959      	ldr	r1, [r3, #20]
 8002dd0:	0549      	lsls	r1, r1, #21
 8002dd2:	d5d9      	bpl.n	8002d88 <HAL_PWREx_ControlVoltageScaling+0x40>
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	d0d7      	beq.n	8002d88 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
 8002dd8:	3a01      	subs	r2, #1
 8002dda:	e7f8      	b.n	8002dce <HAL_PWREx_ControlVoltageScaling+0x86>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ddc:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8002de0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002de4:	601a      	str	r2, [r3, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002de6:	2000      	movs	r0, #0
}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40007000 	.word	0x40007000
 8002df0:	20000000 	.word	0x20000000
 8002df4:	000f4240 	.word	0x000f4240

08002df8 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002df8:	4a02      	ldr	r2, [pc, #8]	@ (8002e04 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002dfa:	6893      	ldr	r3, [r2, #8]
 8002dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e00:	6093      	str	r3, [r2, #8]
}
 8002e02:	4770      	bx	lr
 8002e04:	40007000 	.word	0x40007000

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	b918      	cbnz	r0, 8002e18 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002e10:	2001      	movs	r0, #1
    }
  }
  }

  return HAL_OK;
}
 8002e12:	b002      	add	sp, #8
 8002e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e18:	6803      	ldr	r3, [r0, #0]
 8002e1a:	07d9      	lsls	r1, r3, #31
 8002e1c:	d414      	bmi.n	8002e48 <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	079a      	lsls	r2, r3, #30
 8002e22:	d458      	bmi.n	8002ed6 <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	0719      	lsls	r1, r3, #28
 8002e28:	f100 80a1 	bmi.w	8002f6e <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	075a      	lsls	r2, r3, #29
 8002e30:	f100 80c8 	bmi.w	8002fc4 <HAL_RCC_OscConfig+0x1bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	069a      	lsls	r2, r3, #26
 8002e38:	f100 812f 	bmi.w	800309a <HAL_RCC_OscConfig+0x292>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e3c:	69e3      	ldr	r3, [r4, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 815c 	bne.w	80030fc <HAL_RCC_OscConfig+0x2f4>
  return HAL_OK;
 8002e44:	2000      	movs	r0, #0
 8002e46:	e7e4      	b.n	8002e12 <HAL_RCC_OscConfig+0xa>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e48:	4d9f      	ldr	r5, [pc, #636]	@ (80030c8 <HAL_RCC_OscConfig+0x2c0>)
 8002e4a:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e4c:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d10a      	bne.n	8002e6c <HAL_RCC_OscConfig+0x64>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e56:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCC_OscConfig+0x68>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5e:	682b      	ldr	r3, [r5, #0]
 8002e60:	039b      	lsls	r3, r3, #14
 8002e62:	d5dc      	bpl.n	8002e1e <HAL_RCC_OscConfig+0x16>
 8002e64:	6863      	ldr	r3, [r4, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1d9      	bne.n	8002e1e <HAL_RCC_OscConfig+0x16>
 8002e6a:	e7d1      	b.n	8002e10 <HAL_RCC_OscConfig+0x8>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	e7f5      	b.n	8002e5c <HAL_RCC_OscConfig+0x54>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e70:	6863      	ldr	r3, [r4, #4]
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e76:	d110      	bne.n	8002e9a <HAL_RCC_OscConfig+0x92>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e80:	f7fd fe6c 	bl	8000b5c <HAL_GetTick>
 8002e84:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e86:	682b      	ldr	r3, [r5, #0]
 8002e88:	039f      	lsls	r7, r3, #14
 8002e8a:	d4c8      	bmi.n	8002e1e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fd fe66 	bl	8000b5c <HAL_GetTick>
 8002e90:	1b80      	subs	r0, r0, r6
 8002e92:	2864      	cmp	r0, #100	@ 0x64
 8002e94:	d9f7      	bls.n	8002e86 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002e96:	2003      	movs	r0, #3
 8002e98:	e7bb      	b.n	8002e12 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e9e:	d104      	bne.n	8002eaa <HAL_RCC_OscConfig+0xa2>
 8002ea0:	682b      	ldr	r3, [r5, #0]
 8002ea2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea6:	602b      	str	r3, [r5, #0]
 8002ea8:	e7e6      	b.n	8002e78 <HAL_RCC_OscConfig+0x70>
 8002eaa:	682a      	ldr	r2, [r5, #0]
 8002eac:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002eb0:	602a      	str	r2, [r5, #0]
 8002eb2:	682a      	ldr	r2, [r5, #0]
 8002eb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002eb8:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x78>
        tickstart = HAL_GetTick();
 8002ebe:	f7fd fe4d 	bl	8000b5c <HAL_GetTick>
 8002ec2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	0399      	lsls	r1, r3, #14
 8002ec8:	d5a9      	bpl.n	8002e1e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eca:	f7fd fe47 	bl	8000b5c <HAL_GetTick>
 8002ece:	1b80      	subs	r0, r0, r6
 8002ed0:	2864      	cmp	r0, #100	@ 0x64
 8002ed2:	d9f7      	bls.n	8002ec4 <HAL_RCC_OscConfig+0xbc>
 8002ed4:	e7df      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed6:	4d7c      	ldr	r5, [pc, #496]	@ (80030c8 <HAL_RCC_OscConfig+0x2c0>)
 8002ed8:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eda:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002edc:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	d117      	bne.n	8002f14 <HAL_RCC_OscConfig+0x10c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee4:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d115      	bne.n	8002f18 <HAL_RCC_OscConfig+0x110>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	055a      	lsls	r2, r3, #21
 8002ef0:	d502      	bpl.n	8002ef8 <HAL_RCC_OscConfig+0xf0>
 8002ef2:	68e3      	ldr	r3, [r4, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d08b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	686b      	ldr	r3, [r5, #4]
 8002efa:	6922      	ldr	r2, [r4, #16]
 8002efc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002f00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f04:	606b      	str	r3, [r5, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f06:	4b71      	ldr	r3, [pc, #452]	@ (80030cc <HAL_RCC_OscConfig+0x2c4>)
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	f7fd fde5 	bl	8000ad8 <HAL_InitTick>
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d088      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1c>
 8002f12:	e77d      	b.n	8002e10 <HAL_RCC_OscConfig+0x8>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	e7e8      	b.n	8002eea <HAL_RCC_OscConfig+0xe2>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f18:	68e3      	ldr	r3, [r4, #12]
 8002f1a:	b1bb      	cbz	r3, 8002f4c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_ENABLE();
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f22:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f24:	f7fd fe1a 	bl	8000b5c <HAL_GetTick>
 8002f28:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	055b      	lsls	r3, r3, #21
 8002f2e:	d507      	bpl.n	8002f40 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f30:	686b      	ldr	r3, [r5, #4]
 8002f32:	6922      	ldr	r2, [r4, #16]
 8002f34:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002f38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f3c:	606b      	str	r3, [r5, #4]
 8002f3e:	e771      	b.n	8002e24 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fd fe0c 	bl	8000b5c <HAL_GetTick>
 8002f44:	1b80      	subs	r0, r0, r6
 8002f46:	2802      	cmp	r0, #2
 8002f48:	d9ef      	bls.n	8002f2a <HAL_RCC_OscConfig+0x122>
 8002f4a:	e7a4      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f54:	f7fd fe02 	bl	8000b5c <HAL_GetTick>
 8002f58:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	055f      	lsls	r7, r3, #21
 8002f5e:	f57f af61 	bpl.w	8002e24 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f62:	f7fd fdfb 	bl	8000b5c <HAL_GetTick>
 8002f66:	1b80      	subs	r0, r0, r6
 8002f68:	2802      	cmp	r0, #2
 8002f6a:	d9f6      	bls.n	8002f5a <HAL_RCC_OscConfig+0x152>
 8002f6c:	e793      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f6e:	6963      	ldr	r3, [r4, #20]
 8002f70:	4d55      	ldr	r5, [pc, #340]	@ (80030c8 <HAL_RCC_OscConfig+0x2c0>)
 8002f72:	b19b      	cbz	r3, 8002f9c <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_LSI_ENABLE();
 8002f74:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002f80:	f7fd fdec 	bl	8000b5c <HAL_GetTick>
 8002f84:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f86:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8002f8a:	079b      	lsls	r3, r3, #30
 8002f8c:	f53f af4e 	bmi.w	8002e2c <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f90:	f7fd fde4 	bl	8000b5c <HAL_GetTick>
 8002f94:	1b80      	subs	r0, r0, r6
 8002f96:	2802      	cmp	r0, #2
 8002f98:	d9f5      	bls.n	8002f86 <HAL_RCC_OscConfig+0x17e>
 8002f9a:	e77c      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002f9c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002fa8:	f7fd fdd8 	bl	8000b5c <HAL_GetTick>
 8002fac:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fae:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8002fb2:	079f      	lsls	r7, r3, #30
 8002fb4:	f57f af3a 	bpl.w	8002e2c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb8:	f7fd fdd0 	bl	8000b5c <HAL_GetTick>
 8002fbc:	1b80      	subs	r0, r0, r6
 8002fbe:	2802      	cmp	r0, #2
 8002fc0:	d9f5      	bls.n	8002fae <HAL_RCC_OscConfig+0x1a6>
 8002fc2:	e768      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fc4:	4d40      	ldr	r5, [pc, #256]	@ (80030c8 <HAL_RCC_OscConfig+0x2c0>)
 8002fc6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002fc8:	00d8      	lsls	r0, r3, #3
 8002fca:	d427      	bmi.n	800301c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fcc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	65ab      	str	r3, [r5, #88]	@ 0x58
 8002fd4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002fde:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe0:	4e3b      	ldr	r6, [pc, #236]	@ (80030d0 <HAL_RCC_OscConfig+0x2c8>)
 8002fe2:	6833      	ldr	r3, [r6, #0]
 8002fe4:	05d9      	lsls	r1, r3, #23
 8002fe6:	d51b      	bpl.n	8003020 <HAL_RCC_OscConfig+0x218>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	68a3      	ldr	r3, [r4, #8]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d129      	bne.n	8003042 <HAL_RCC_OscConfig+0x23a>
 8002fee:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8002ffa:	f7fd fdaf 	bl	8000b5c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003002:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003004:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003008:	079b      	lsls	r3, r3, #30
 800300a:	d540      	bpl.n	800308e <HAL_RCC_OscConfig+0x286>
    if (pwrclkchanged == SET)
 800300c:	2f00      	cmp	r7, #0
 800300e:	f43f af11 	beq.w	8002e34 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003012:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003018:	65ab      	str	r3, [r5, #88]	@ 0x58
 800301a:	e70b      	b.n	8002e34 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800301c:	2700      	movs	r7, #0
 800301e:	e7df      	b.n	8002fe0 <HAL_RCC_OscConfig+0x1d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003020:	6833      	ldr	r3, [r6, #0]
 8003022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003026:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003028:	f7fd fd98 	bl	8000b5c <HAL_GetTick>
 800302c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	6833      	ldr	r3, [r6, #0]
 8003030:	05da      	lsls	r2, r3, #23
 8003032:	d4d9      	bmi.n	8002fe8 <HAL_RCC_OscConfig+0x1e0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003034:	f7fd fd92 	bl	8000b5c <HAL_GetTick>
 8003038:	eba0 0008 	sub.w	r0, r0, r8
 800303c:	2802      	cmp	r0, #2
 800303e:	d9f6      	bls.n	800302e <HAL_RCC_OscConfig+0x226>
 8003040:	e729      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003042:	2b05      	cmp	r3, #5
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x24c>
 8003046:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
 8003052:	e7cc      	b.n	8002fee <HAL_RCC_OscConfig+0x1e6>
 8003054:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
 8003060:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 8003064:	f022 0204 	bic.w	r2, r2, #4
 8003068:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1c4      	bne.n	8002ffa <HAL_RCC_OscConfig+0x1f2>
      tickstart = HAL_GetTick();
 8003070:	f7fd fd74 	bl	8000b5c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003078:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800307a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800307e:	0799      	lsls	r1, r3, #30
 8003080:	d5c4      	bpl.n	800300c <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7fd fd6b 	bl	8000b5c <HAL_GetTick>
 8003086:	1b80      	subs	r0, r0, r6
 8003088:	4540      	cmp	r0, r8
 800308a:	d9f6      	bls.n	800307a <HAL_RCC_OscConfig+0x272>
 800308c:	e703      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fd fd65 	bl	8000b5c <HAL_GetTick>
 8003092:	1b80      	subs	r0, r0, r6
 8003094:	4540      	cmp	r0, r8
 8003096:	d9b5      	bls.n	8003004 <HAL_RCC_OscConfig+0x1fc>
 8003098:	e6fd      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800309a:	69a3      	ldr	r3, [r4, #24]
 800309c:	4d0a      	ldr	r5, [pc, #40]	@ (80030c8 <HAL_RCC_OscConfig+0x2c0>)
 800309e:	b1cb      	cbz	r3, 80030d4 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_HSI48_ENABLE();
 80030a0:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80030ac:	f7fd fd56 	bl	8000b5c <HAL_GetTick>
 80030b0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030b2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80030b6:	079b      	lsls	r3, r3, #30
 80030b8:	f53f aec0 	bmi.w	8002e3c <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030bc:	f7fd fd4e 	bl	8000b5c <HAL_GetTick>
 80030c0:	1b80      	subs	r0, r0, r6
 80030c2:	2802      	cmp	r0, #2
 80030c4:	d9f5      	bls.n	80030b2 <HAL_RCC_OscConfig+0x2aa>
 80030c6:	e6e6      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
 80030c8:	40021000 	.word	0x40021000
 80030cc:	20000008 	.word	0x20000008
 80030d0:	40007000 	.word	0x40007000
      __HAL_RCC_HSI48_DISABLE();
 80030d4:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80030e0:	f7fd fd3c 	bl	8000b5c <HAL_GetTick>
 80030e4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030e6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80030ea:	079f      	lsls	r7, r3, #30
 80030ec:	f57f aea6 	bpl.w	8002e3c <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f0:	f7fd fd34 	bl	8000b5c <HAL_GetTick>
 80030f4:	1b80      	subs	r0, r0, r6
 80030f6:	2802      	cmp	r0, #2
 80030f8:	d9f5      	bls.n	80030e6 <HAL_RCC_OscConfig+0x2de>
 80030fa:	e6cc      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fc:	4d45      	ldr	r5, [pc, #276]	@ (8003214 <HAL_RCC_OscConfig+0x40c>)
 80030fe:	68aa      	ldr	r2, [r5, #8]
 8003100:	f002 020c 	and.w	r2, r2, #12
 8003104:	2a0c      	cmp	r2, #12
 8003106:	d051      	beq.n	80031ac <HAL_RCC_OscConfig+0x3a4>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003108:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800310a:	682b      	ldr	r3, [r5, #0]
 800310c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003110:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003112:	d13a      	bne.n	800318a <HAL_RCC_OscConfig+0x382>
        tickstart = HAL_GetTick();
 8003114:	f7fd fd22 	bl	8000b5c <HAL_GetTick>
 8003118:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311a:	682b      	ldr	r3, [r5, #0]
 800311c:	0199      	lsls	r1, r3, #6
 800311e:	d42e      	bmi.n	800317e <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003120:	68ea      	ldr	r2, [r5, #12]
 8003122:	4b3d      	ldr	r3, [pc, #244]	@ (8003218 <HAL_RCC_OscConfig+0x410>)
 8003124:	4013      	ands	r3, r2
 8003126:	6a22      	ldr	r2, [r4, #32]
 8003128:	4313      	orrs	r3, r2
 800312a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800312c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003130:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003132:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8003136:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003138:	3a01      	subs	r2, #1
 800313a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800313e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003140:	0852      	lsrs	r2, r2, #1
 8003142:	3a01      	subs	r2, #1
 8003144:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003148:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800314a:	0852      	lsrs	r2, r2, #1
 800314c:	3a01      	subs	r2, #1
 800314e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003152:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800315a:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800315c:	68eb      	ldr	r3, [r5, #12]
 800315e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003162:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003164:	f7fd fcfa 	bl	8000b5c <HAL_GetTick>
 8003168:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316a:	682b      	ldr	r3, [r5, #0]
 800316c:	019a      	lsls	r2, r3, #6
 800316e:	f53f ae69 	bmi.w	8002e44 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003172:	f7fd fcf3 	bl	8000b5c <HAL_GetTick>
 8003176:	1b00      	subs	r0, r0, r4
 8003178:	2802      	cmp	r0, #2
 800317a:	d9f6      	bls.n	800316a <HAL_RCC_OscConfig+0x362>
 800317c:	e68b      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7fd fced 	bl	8000b5c <HAL_GetTick>
 8003182:	1b80      	subs	r0, r0, r6
 8003184:	2802      	cmp	r0, #2
 8003186:	d9c8      	bls.n	800311a <HAL_RCC_OscConfig+0x312>
 8003188:	e685      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800318a:	f7fd fce7 	bl	8000b5c <HAL_GetTick>
 800318e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003190:	682b      	ldr	r3, [r5, #0]
 8003192:	019b      	lsls	r3, r3, #6
 8003194:	d404      	bmi.n	80031a0 <HAL_RCC_OscConfig+0x398>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003196:	68ea      	ldr	r2, [r5, #12]
 8003198:	4b20      	ldr	r3, [pc, #128]	@ (800321c <HAL_RCC_OscConfig+0x414>)
 800319a:	4013      	ands	r3, r2
 800319c:	60eb      	str	r3, [r5, #12]
 800319e:	e651      	b.n	8002e44 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fd fcdc 	bl	8000b5c <HAL_GetTick>
 80031a4:	1b00      	subs	r0, r0, r4
 80031a6:	2802      	cmp	r0, #2
 80031a8:	d9f2      	bls.n	8003190 <HAL_RCC_OscConfig+0x388>
 80031aa:	e674      	b.n	8002e96 <HAL_RCC_OscConfig+0x8e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f43f ae2f 	beq.w	8002e10 <HAL_RCC_OscConfig+0x8>
      temp_pllckcfg = RCC->PLLCFGR;
 80031b2:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b4:	6a22      	ldr	r2, [r4, #32]
 80031b6:	f003 0103 	and.w	r1, r3, #3
 80031ba:	4291      	cmp	r1, r2
 80031bc:	f47f ae28 	bne.w	8002e10 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031c0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80031c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031c6:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80031cc:	f47f ae20 	bne.w	8002e10 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031d0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80031d2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031d6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80031da:	f47f ae19 	bne.w	8002e10 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80031e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e4:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80031e8:	f47f ae12 	bne.w	8002e10 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80031ee:	0852      	lsrs	r2, r2, #1
 80031f0:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80031f4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031f6:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80031fa:	f47f ae09 	bne.w	8002e10 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031fe:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003200:	0852      	lsrs	r2, r2, #1
 8003202:	3a01      	subs	r2, #1
 8003204:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003208:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800320c:	bf14      	ite	ne
 800320e:	2001      	movne	r0, #1
 8003210:	2000      	moveq	r0, #0
 8003212:	e5fe      	b.n	8002e12 <HAL_RCC_OscConfig+0xa>
 8003214:	40021000 	.word	0x40021000
 8003218:	019f800c 	.word	0x019f800c
 800321c:	feeefffc 	.word	0xfeeefffc

08003220 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003220:	4b17      	ldr	r3, [pc, #92]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x60>)
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	f002 020c 	and.w	r2, r2, #12
 8003228:	2a04      	cmp	r2, #4
 800322a:	d023      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	f002 020c 	and.w	r2, r2, #12
 8003232:	2a08      	cmp	r2, #8
 8003234:	d020      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	f002 020c 	and.w	r2, r2, #12
 800323c:	2a0c      	cmp	r2, #12
 800323e:	d11d      	bne.n	800327c <HAL_RCC_GetSysClockFreq+0x5c>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003240:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003242:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003244:	68d8      	ldr	r0, [r3, #12]
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003246:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003248:	f001 0103 	and.w	r1, r1, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800324c:	f3c3 6341 	ubfx	r3, r3, #25, #2
    switch (pllsource)
 8003250:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003252:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003256:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800325a:	f103 0301 	add.w	r3, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800325e:	bf0c      	ite	eq
 8003260:	4908      	ldreq	r1, [pc, #32]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x64>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003262:	4909      	ldrne	r1, [pc, #36]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x68>)
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003264:	005b      	lsls	r3, r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003266:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003268:	fbb1 f2f2 	udiv	r2, r1, r2
 800326c:	4350      	muls	r0, r2
    sysclockfreq = pllvco/pllr;
 800326e:	fbb0 f0f3 	udiv	r0, r0, r3
  else
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
 8003272:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003274:	4804      	ldr	r0, [pc, #16]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x68>)
 8003276:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003278:	4802      	ldr	r0, [pc, #8]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x64>)
 800327a:	4770      	bx	lr
    sysclockfreq = 0U;
 800327c:	2000      	movs	r0, #0
}
 800327e:	4770      	bx	lr
 8003280:	40021000 	.word	0x40021000
 8003284:	007a1200 	.word	0x007a1200
 8003288:	00f42400 	.word	0x00f42400

0800328c <HAL_RCC_ClockConfig>:
{
 800328c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003290:	460e      	mov	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8003292:	4605      	mov	r5, r0
 8003294:	b910      	cbnz	r0, 800329c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003296:	2001      	movs	r0, #1
}
 8003298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800329c:	4a6d      	ldr	r2, [pc, #436]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	428b      	cmp	r3, r1
 80032a6:	d345      	bcc.n	8003334 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a8:	6829      	ldr	r1, [r5, #0]
 80032aa:	f011 0801 	ands.w	r8, r1, #1
 80032ae:	d14c      	bne.n	800334a <HAL_RCC_ClockConfig+0xbe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b0:	682a      	ldr	r2, [r5, #0]
 80032b2:	0791      	lsls	r1, r2, #30
 80032b4:	f140 80a7 	bpl.w	8003406 <HAL_RCC_ClockConfig+0x17a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	4b67      	ldr	r3, [pc, #412]	@ (8003458 <HAL_RCC_ClockConfig+0x1cc>)
 80032ba:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032be:	bf1e      	ittt	ne
 80032c0:	6899      	ldrne	r1, [r3, #8]
 80032c2:	f441 61e0 	orrne.w	r1, r1, #1792	@ 0x700
 80032c6:	6099      	strne	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	0712      	lsls	r2, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032ca:	bf41      	itttt	mi
 80032cc:	689a      	ldrmi	r2, [r3, #8]
 80032ce:	f422 527c 	bicmi.w	r2, r2, #16128	@ 0x3f00
 80032d2:	f442 62e0 	orrmi.w	r2, r2, #1792	@ 0x700
 80032d6:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	68a9      	ldr	r1, [r5, #8]
 80032dc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80032e0:	430a      	orrs	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e4:	4c5b      	ldr	r4, [pc, #364]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	42b3      	cmp	r3, r6
 80032ee:	f200 8093 	bhi.w	8003418 <HAL_RCC_ClockConfig+0x18c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f2:	682a      	ldr	r2, [r5, #0]
 80032f4:	4c58      	ldr	r4, [pc, #352]	@ (8003458 <HAL_RCC_ClockConfig+0x1cc>)
 80032f6:	f012 0f04 	tst.w	r2, #4
 80032fa:	f040 80a3 	bne.w	8003444 <HAL_RCC_ClockConfig+0x1b8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	0713      	lsls	r3, r2, #28
 8003300:	d506      	bpl.n	8003310 <HAL_RCC_ClockConfig+0x84>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003302:	68a3      	ldr	r3, [r4, #8]
 8003304:	692a      	ldr	r2, [r5, #16]
 8003306:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800330a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800330e:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003310:	f7ff ff86 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 8003314:	68a3      	ldr	r3, [r4, #8]
 8003316:	4a51      	ldr	r2, [pc, #324]	@ (800345c <HAL_RCC_ClockConfig+0x1d0>)
 8003318:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800331c:	5cd3      	ldrb	r3, [r2, r3]
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	40d8      	lsrs	r0, r3
 8003324:	4b4e      	ldr	r3, [pc, #312]	@ (8003460 <HAL_RCC_ClockConfig+0x1d4>)
 8003326:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003328:	4b4e      	ldr	r3, [pc, #312]	@ (8003464 <HAL_RCC_ClockConfig+0x1d8>)
 800332a:	6818      	ldr	r0, [r3, #0]
}
 800332c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8003330:	f7fd bbd2 	b.w	8000ad8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	430b      	orrs	r3, r1
 800333c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	6813      	ldr	r3, [r2, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	428b      	cmp	r3, r1
 8003346:	d1a6      	bne.n	8003296 <HAL_RCC_ClockConfig+0xa>
 8003348:	e7ae      	b.n	80032a8 <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334a:	686f      	ldr	r7, [r5, #4]
 800334c:	4c42      	ldr	r4, [pc, #264]	@ (8003458 <HAL_RCC_ClockConfig+0x1cc>)
 800334e:	2f03      	cmp	r7, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003350:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	d149      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x15c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003354:	019b      	lsls	r3, r3, #6
 8003356:	d59e      	bpl.n	8003296 <HAL_RCC_ClockConfig+0xa>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003358:	68e3      	ldr	r3, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800335a:	68e2      	ldr	r2, [r4, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800335c:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8003360:	2b03      	cmp	r3, #3
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003362:	68e3      	ldr	r3, [r4, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003364:	bf0c      	ite	eq
 8003366:	4840      	ldreq	r0, [pc, #256]	@ (8003468 <HAL_RCC_ClockConfig+0x1dc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003368:	4840      	ldrne	r0, [pc, #256]	@ (800346c <HAL_RCC_ClockConfig+0x1e0>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800336a:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800336e:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003372:	3201      	adds	r2, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003374:	fbb0 f2f2 	udiv	r2, r0, r2
 8003378:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800337a:	68e2      	ldr	r2, [r4, #12]
 800337c:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8003380:	3201      	adds	r2, #1
 8003382:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 8003384:	fbb3 f3f2 	udiv	r3, r3, r2
      if(pllfreq > 80000000U)
 8003388:	4a39      	ldr	r2, [pc, #228]	@ (8003470 <HAL_RCC_ClockConfig+0x1e4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d81a      	bhi.n	80033c4 <HAL_RCC_ClockConfig+0x138>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800338e:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003392:	68a3      	ldr	r3, [r4, #8]
 8003394:	f023 0303 	bic.w	r3, r3, #3
 8003398:	433b      	orrs	r3, r7
 800339a:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800339c:	f7fd fbde 	bl	8000b5c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f241 3988 	movw	r9, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80033a4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	68a3      	ldr	r3, [r4, #8]
 80033a8:	686a      	ldr	r2, [r5, #4]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033b2:	f43f af7d 	beq.w	80032b0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b6:	f7fd fbd1 	bl	8000b5c <HAL_GetTick>
 80033ba:	1bc0      	subs	r0, r0, r7
 80033bc:	4548      	cmp	r0, r9
 80033be:	d9f2      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x11a>
        return HAL_TIMEOUT;
 80033c0:	2003      	movs	r0, #3
 80033c2:	e769      	b.n	8003298 <HAL_RCC_ClockConfig+0xc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033c4:	68a3      	ldr	r3, [r4, #8]
 80033c6:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 80033ca:	d004      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x14a>
 80033cc:	0788      	lsls	r0, r1, #30
 80033ce:	d5de      	bpl.n	800338e <HAL_RCC_ClockConfig+0x102>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033d0:	68ab      	ldr	r3, [r5, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1db      	bne.n	800338e <HAL_RCC_ClockConfig+0x102>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033d6:	68a3      	ldr	r3, [r4, #8]
 80033d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e0:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033e2:	f04f 0880 	mov.w	r8, #128	@ 0x80
 80033e6:	e7d4      	b.n	8003392 <HAL_RCC_ClockConfig+0x106>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e8:	2f02      	cmp	r7, #2
 80033ea:	d109      	bne.n	8003400 <HAL_RCC_ClockConfig+0x174>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ec:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f0:	f43f af51 	beq.w	8003296 <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033f4:	f7ff ff14 	bl	8003220 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80033f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <HAL_RCC_ClockConfig+0x1e4>)
 80033fa:	4298      	cmp	r0, r3
 80033fc:	d9c7      	bls.n	800338e <HAL_RCC_ClockConfig+0x102>
 80033fe:	e7ea      	b.n	80033d6 <HAL_RCC_ClockConfig+0x14a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003400:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003404:	e7f4      	b.n	80033f0 <HAL_RCC_ClockConfig+0x164>
    if(hpre == RCC_SYSCLK_DIV2)
 8003406:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800340a:	bf01      	itttt	eq
 800340c:	4a12      	ldreq	r2, [pc, #72]	@ (8003458 <HAL_RCC_ClockConfig+0x1cc>)
 800340e:	6893      	ldreq	r3, [r2, #8]
 8003410:	f023 03f0 	biceq.w	r3, r3, #240	@ 0xf0
 8003414:	6093      	streq	r3, [r2, #8]
 8003416:	e765      	b.n	80032e4 <HAL_RCC_ClockConfig+0x58>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	f023 030f 	bic.w	r3, r3, #15
 800341e:	4333      	orrs	r3, r6
 8003420:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003422:	f7fd fb9b 	bl	8000b5c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003426:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800342a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	42b3      	cmp	r3, r6
 8003434:	f43f af5d 	beq.w	80032f2 <HAL_RCC_ClockConfig+0x66>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fd fb90 	bl	8000b5c <HAL_GetTick>
 800343c:	1bc0      	subs	r0, r0, r7
 800343e:	4540      	cmp	r0, r8
 8003440:	d9f4      	bls.n	800342c <HAL_RCC_ClockConfig+0x1a0>
 8003442:	e7bd      	b.n	80033c0 <HAL_RCC_ClockConfig+0x134>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003444:	68a3      	ldr	r3, [r4, #8]
 8003446:	68e9      	ldr	r1, [r5, #12]
 8003448:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800344c:	430b      	orrs	r3, r1
 800344e:	60a3      	str	r3, [r4, #8]
 8003450:	e755      	b.n	80032fe <HAL_RCC_ClockConfig+0x72>
 8003452:	bf00      	nop
 8003454:	40022000 	.word	0x40022000
 8003458:	40021000 	.word	0x40021000
 800345c:	08007704 	.word	0x08007704
 8003460:	20000000 	.word	0x20000000
 8003464:	20000008 	.word	0x20000008
 8003468:	007a1200 	.word	0x007a1200
 800346c:	00f42400 	.word	0x00f42400
 8003470:	04c4b400 	.word	0x04c4b400

08003474 <HAL_RCC_GetHCLKFreq>:
}
 8003474:	4b01      	ldr	r3, [pc, #4]	@ (800347c <HAL_RCC_GetHCLKFreq+0x8>)
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003480:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003484:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003486:	6800      	ldr	r0, [r0, #0]
 8003488:	f410 2000 	ands.w	r0, r0, #524288	@ 0x80000
 800348c:	d056      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348e:	4d98      	ldr	r5, [pc, #608]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003490:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003492:	00d8      	lsls	r0, r3, #3
 8003494:	d444      	bmi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800349c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800349e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80034a8:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034aa:	4f92      	ldr	r7, [pc, #584]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b2:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034b4:	f7fd fb52 	bl	8000b5c <HAL_GetTick>
 80034b8:	4680      	mov	r8, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	05d9      	lsls	r1, r3, #23
 80034be:	d531      	bpl.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034c0:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034c6:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 80034ca:	d01f      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d011      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034d0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034d4:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 80034d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80034dc:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034e0:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034e8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80034ec:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034f0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034f4:	07da      	lsls	r2, r3, #31
 80034f6:	d509      	bpl.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fd fb30 	bl	8000b5c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003500:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003502:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003506:	079b      	lsls	r3, r3, #30
 8003508:	f140 80eb 	bpl.w	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800350c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003510:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800351c:	2000      	movs	r0, #0
 800351e:	e008      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    FlagStatus       pwrclkchanged = RESET;
 8003520:	2600      	movs	r6, #0
 8003522:	e7c2      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7fd fb1a 	bl	8000b5c <HAL_GetTick>
 8003528:	eba0 0008 	sub.w	r0, r0, r8
 800352c:	2802      	cmp	r0, #2
 800352e:	d9c4      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003530:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003532:	b11e      	cbz	r6, 800353c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003534:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353a:	65ab      	str	r3, [r5, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	07de      	lsls	r6, r3, #31
 8003540:	d508      	bpl.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003542:	496b      	ldr	r1, [pc, #428]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003544:	6865      	ldr	r5, [r4, #4]
 8003546:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800354a:	f022 0203 	bic.w	r2, r2, #3
 800354e:	432a      	orrs	r2, r5
 8003550:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003554:	079d      	lsls	r5, r3, #30
 8003556:	d508      	bpl.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003558:	4965      	ldr	r1, [pc, #404]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800355a:	68a5      	ldr	r5, [r4, #8]
 800355c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003560:	f022 020c 	bic.w	r2, r2, #12
 8003564:	432a      	orrs	r2, r5
 8003566:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800356a:	0759      	lsls	r1, r3, #29
 800356c:	d508      	bpl.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800356e:	4960      	ldr	r1, [pc, #384]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003570:	68e5      	ldr	r5, [r4, #12]
 8003572:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003576:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800357a:	432a      	orrs	r2, r5
 800357c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003580:	071a      	lsls	r2, r3, #28
 8003582:	d508      	bpl.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003584:	495a      	ldr	r1, [pc, #360]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003586:	6925      	ldr	r5, [r4, #16]
 8003588:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800358c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8003590:	432a      	orrs	r2, r5
 8003592:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003596:	069f      	lsls	r7, r3, #26
 8003598:	d508      	bpl.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800359a:	4955      	ldr	r1, [pc, #340]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800359c:	6965      	ldr	r5, [r4, #20]
 800359e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80035a2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80035a6:	432a      	orrs	r2, r5
 80035a8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ac:	065e      	lsls	r6, r3, #25
 80035ae:	d508      	bpl.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b0:	494f      	ldr	r1, [pc, #316]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80035b2:	69a5      	ldr	r5, [r4, #24]
 80035b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80035b8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80035bc:	432a      	orrs	r2, r5
 80035be:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035c2:	061d      	lsls	r5, r3, #24
 80035c4:	d508      	bpl.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035c6:	494a      	ldr	r1, [pc, #296]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80035c8:	69e5      	ldr	r5, [r4, #28]
 80035ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80035ce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80035d2:	432a      	orrs	r2, r5
 80035d4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035d8:	05d9      	lsls	r1, r3, #23
 80035da:	d508      	bpl.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035dc:	4944      	ldr	r1, [pc, #272]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80035de:	6a25      	ldr	r5, [r4, #32]
 80035e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80035e4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80035e8:	432a      	orrs	r2, r5
 80035ea:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ee:	059a      	lsls	r2, r3, #22
 80035f0:	d508      	bpl.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035f2:	493f      	ldr	r1, [pc, #252]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80035f4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80035f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80035fa:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80035fe:	432a      	orrs	r2, r5
 8003600:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003604:	055f      	lsls	r7, r3, #21
 8003606:	d50f      	bpl.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003608:	4939      	ldr	r1, [pc, #228]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800360a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800360c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003610:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003614:	432a      	orrs	r2, r5
 8003616:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800361a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361e:	bf02      	ittt	eq
 8003620:	68ca      	ldreq	r2, [r1, #12]
 8003622:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 8003626:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003628:	051e      	lsls	r6, r3, #20
 800362a:	d50f      	bpl.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800362c:	4930      	ldr	r1, [pc, #192]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800362e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8003630:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003634:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003638:	432a      	orrs	r2, r5
 800363a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800363e:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003642:	bf02      	ittt	eq
 8003644:	68ca      	ldreq	r2, [r1, #12]
 8003646:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 800364a:	60ca      	streq	r2, [r1, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800364c:	04dd      	lsls	r5, r3, #19
 800364e:	d50f      	bpl.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003650:	4927      	ldr	r1, [pc, #156]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003652:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8003654:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003658:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800365c:	432a      	orrs	r2, r5
 800365e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003662:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003666:	bf02      	ittt	eq
 8003668:	68ca      	ldreq	r2, [r1, #12]
 800366a:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 800366e:	60ca      	streq	r2, [r1, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003670:	0499      	lsls	r1, r3, #18
 8003672:	d50f      	bpl.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003674:	491e      	ldr	r1, [pc, #120]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003676:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8003678:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800367c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003680:	432a      	orrs	r2, r5
 8003682:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003686:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368a:	bf02      	ittt	eq
 800368c:	68ca      	ldreq	r2, [r1, #12]
 800368e:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 8003692:	60ca      	streq	r2, [r1, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003694:	045a      	lsls	r2, r3, #17
 8003696:	d50f      	bpl.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003698:	4915      	ldr	r1, [pc, #84]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800369a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800369c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80036a0:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80036a4:	432a      	orrs	r2, r5
 80036a6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036aa:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ae:	bf02      	ittt	eq
 80036b0:	68ca      	ldreq	r2, [r1, #12]
 80036b2:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 80036b6:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	d50f      	bpl.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036bc:	4a0c      	ldr	r2, [pc, #48]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80036be:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80036c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80036c4:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80036c8:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80036ca:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80036d2:	d103      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036d4:	68d3      	ldr	r3, [r2, #12]
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036da:	60d3      	str	r3, [r2, #12]
  }

#endif /* QUADSPI */

  return status;
}
 80036dc:	b002      	add	sp, #8
 80036de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fd fa3b 	bl	8000b5c <HAL_GetTick>
 80036e6:	1bc0      	subs	r0, r0, r7
 80036e8:	4540      	cmp	r0, r8
 80036ea:	f67f af0a 	bls.w	8003502 <HAL_RCCEx_PeriphCLKConfig+0x82>
 80036ee:	e71f      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40007000 	.word	0x40007000

080036f8 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d127      	bne.n	8003750 <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003702:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003708:	6803      	ldr	r3, [r0, #0]
 800370a:	4293      	cmp	r3, r2
 800370c:	d012      	beq.n	8003734 <HAL_TIM_Base_Start+0x3c>
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003712:	d00f      	beq.n	8003734 <HAL_TIM_Base_Start+0x3c>
 8003714:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003718:	4293      	cmp	r3, r2
 800371a:	d00b      	beq.n	8003734 <HAL_TIM_Base_Start+0x3c>
 800371c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <HAL_TIM_Base_Start+0x3c>
 8003724:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <HAL_TIM_Base_Start+0x3c>
 800372c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003730:	4293      	cmp	r3, r2
 8003732:	d107      	bne.n	8003744 <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	4a08      	ldr	r2, [pc, #32]	@ (8003758 <HAL_TIM_Base_Start+0x60>)
 8003738:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373a:	2a06      	cmp	r2, #6
 800373c:	d006      	beq.n	800374c <HAL_TIM_Base_Start+0x54>
 800373e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003742:	d003      	beq.n	800374c <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800374c:	2000      	movs	r0, #0
 800374e:	4770      	bx	lr
    return HAL_ERROR;
 8003750:	2001      	movs	r0, #1
}
 8003752:	4770      	bx	lr
 8003754:	40012c00 	.word	0x40012c00
 8003758:	00010007 	.word	0x00010007

0800375c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800375c:	4a2f      	ldr	r2, [pc, #188]	@ (800381c <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 800375e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003760:	4290      	cmp	r0, r2
 8003762:	d00e      	beq.n	8003782 <TIM_Base_SetConfig+0x26>
 8003764:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003768:	d00b      	beq.n	8003782 <TIM_Base_SetConfig+0x26>
 800376a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800376e:	4290      	cmp	r0, r2
 8003770:	d007      	beq.n	8003782 <TIM_Base_SetConfig+0x26>
 8003772:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003776:	4290      	cmp	r0, r2
 8003778:	d003      	beq.n	8003782 <TIM_Base_SetConfig+0x26>
 800377a:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800377e:	4290      	cmp	r0, r2
 8003780:	d115      	bne.n	80037ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003782:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003788:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378a:	4a24      	ldr	r2, [pc, #144]	@ (800381c <TIM_Base_SetConfig+0xc0>)
 800378c:	4290      	cmp	r0, r2
 800378e:	d019      	beq.n	80037c4 <TIM_Base_SetConfig+0x68>
 8003790:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003794:	d016      	beq.n	80037c4 <TIM_Base_SetConfig+0x68>
 8003796:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800379a:	4290      	cmp	r0, r2
 800379c:	d012      	beq.n	80037c4 <TIM_Base_SetConfig+0x68>
 800379e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037a2:	4290      	cmp	r0, r2
 80037a4:	d00e      	beq.n	80037c4 <TIM_Base_SetConfig+0x68>
 80037a6:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80037aa:	4290      	cmp	r0, r2
 80037ac:	d00a      	beq.n	80037c4 <TIM_Base_SetConfig+0x68>
 80037ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003820 <TIM_Base_SetConfig+0xc4>)
 80037b0:	4290      	cmp	r0, r2
 80037b2:	d007      	beq.n	80037c4 <TIM_Base_SetConfig+0x68>
 80037b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037b8:	4290      	cmp	r0, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_Base_SetConfig+0x68>
 80037bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037c0:	4290      	cmp	r0, r2
 80037c2:	d103      	bne.n	80037cc <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ca:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037cc:	694a      	ldr	r2, [r1, #20]
 80037ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037d2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80037d4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d6:	688b      	ldr	r3, [r1, #8]
 80037d8:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037da:	680b      	ldr	r3, [r1, #0]
 80037dc:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037de:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <TIM_Base_SetConfig+0xc0>)
 80037e0:	4298      	cmp	r0, r3
 80037e2:	d00f      	beq.n	8003804 <TIM_Base_SetConfig+0xa8>
 80037e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e8:	4298      	cmp	r0, r3
 80037ea:	d00b      	beq.n	8003804 <TIM_Base_SetConfig+0xa8>
 80037ec:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80037f0:	4298      	cmp	r0, r3
 80037f2:	d007      	beq.n	8003804 <TIM_Base_SetConfig+0xa8>
 80037f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037f8:	4298      	cmp	r0, r3
 80037fa:	d003      	beq.n	8003804 <TIM_Base_SetConfig+0xa8>
 80037fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003800:	4298      	cmp	r0, r3
 8003802:	d101      	bne.n	8003808 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003804:	690b      	ldr	r3, [r1, #16]
 8003806:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003808:	2301      	movs	r3, #1
 800380a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800380c:	6903      	ldr	r3, [r0, #16]
 800380e:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003810:	bf42      	ittt	mi
 8003812:	6903      	ldrmi	r3, [r0, #16]
 8003814:	f023 0301 	bicmi.w	r3, r3, #1
 8003818:	6103      	strmi	r3, [r0, #16]
  }
}
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40014000 	.word	0x40014000

08003824 <HAL_TIM_Base_Init>:
{
 8003824:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003826:	4604      	mov	r4, r0
 8003828:	b350      	cbz	r0, 8003880 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800382a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800382e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003832:	b91b      	cbnz	r3, 800383c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003834:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003838:	f7fd f8c4 	bl	80009c4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003844:	1d21      	adds	r1, r4, #4
 8003846:	f7ff ff89 	bl	800375c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384a:	2301      	movs	r3, #1
 800384c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8003850:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003856:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800385a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800385e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003862:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003866:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800386e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003872:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003876:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800387a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800387e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003880:	2001      	movs	r0, #1
 8003882:	e7fc      	b.n	800387e <HAL_TIM_Base_Init+0x5a>

08003884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003884:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003886:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800388a:	2b01      	cmp	r3, #1
{
 800388c:	4604      	mov	r4, r0
 800388e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003892:	d037      	beq.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0x80>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003894:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003896:	4d1c      	ldr	r5, [pc, #112]	@ (8003908 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800389c:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800389e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80038a0:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038a2:	d003      	beq.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0x28>
 80038a4:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80038a8:	42ab      	cmp	r3, r5
 80038aa:	d103      	bne.n	80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x30>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038ac:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038b2:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038b4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b6:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80038ba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038be:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c2:	4a11      	ldr	r2, [pc, #68]	@ (8003908 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d012      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038cc:	d00f      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80038ce:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80038d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80038de:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80038e6:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d104      	bne.n	80038f8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ee:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038f0:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038f4:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80038fa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003900:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8003904:	bd30      	pop	{r4, r5, pc}
 8003906:	bf00      	nop
 8003908:	40012c00 	.word	0x40012c00

0800390c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800390c:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800390e:	f64b 7280 	movw	r2, #49024	@ 0xbf80
  USBx->ISTR = 0U;
 8003912:	2000      	movs	r0, #0
 8003914:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8003918:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 800391c:	4770      	bx	lr

0800391e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800391e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8003922:	f423 537e 	bic.w	r3, r3, #16256	@ 0x3f80
 8003926:	045b      	lsls	r3, r3, #17
 8003928:	0c5b      	lsrs	r3, r3, #17
 800392a:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 800392e:	2000      	movs	r0, #0
 8003930:	4770      	bx	lr

08003932 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003932:	b082      	sub	sp, #8
 8003934:	4603      	mov	r3, r0
 8003936:	a802      	add	r0, sp, #8
 8003938:	e900 0006 	stmdb	r0, {r1, r2}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800393c:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800393e:	2201      	movs	r2, #1
 8003940:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  USBx->CNTR = 0U;
 8003944:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003948:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800394c:	f8a3 0050 	strh.w	r0, [r3, #80]	@ 0x50

  return HAL_OK;
}
 8003950:	b002      	add	sp, #8
 8003952:	4770      	bx	lr

08003954 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003954:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003956:	780d      	ldrb	r5, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003958:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800395a:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 800395e:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8003962:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8003966:	0424      	lsls	r4, r4, #16
{
 8003968:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800396a:	462a      	mov	r2, r5
 800396c:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 800396e:	2e03      	cmp	r6, #3
 8003970:	d853      	bhi.n	8003a1a <USB_ActivateEndpoint+0xc6>
 8003972:	e8df f006 	tbb	[pc, r6]
 8003976:	4f02      	.short	0x4f02
 8003978:	4b4d      	.short	0x4b4d
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800397a:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 800397e:	4630      	mov	r0, r6
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003980:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8003984:	ea44 040c 	orr.w	r4, r4, ip
 8003988:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800398c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003990:	f8df e284 	ldr.w	lr, [pc, #644]	@ 8003c18 <USB_ActivateEndpoint+0x2c4>
 8003994:	b2a4      	uxth	r4, r4
 8003996:	ea04 040e 	and.w	r4, r4, lr
 800399a:	432c      	orrs	r4, r5
 800399c:	ea4c 0404 	orr.w	r4, ip, r4
 80039a0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80039a4:	7b0c      	ldrb	r4, [r1, #12]
 80039a6:	eb03 07c5 	add.w	r7, r3, r5, lsl #3
 80039aa:	2c00      	cmp	r4, #0
 80039ac:	f040 8087 	bne.w	8003abe <USB_ActivateEndpoint+0x16a>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039b0:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 80039b2:	f891 c001 	ldrb.w	ip, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039b6:	0864      	lsrs	r4, r4, #1
 80039b8:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 80039ba:	f1bc 0f00 	cmp.w	ip, #0
 80039be:	d02e      	beq.n	8003a1e <USB_ActivateEndpoint+0xca>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039c0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80039c4:	fa17 f181 	uxtah	r1, r7, r1
 80039c8:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039cc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80039d0:	0649      	lsls	r1, r1, #25
 80039d2:	d50a      	bpl.n	80039ea <USB_ActivateEndpoint+0x96>
 80039d4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80039d8:	b289      	uxth	r1, r1
 80039da:	ea01 010e 	and.w	r1, r1, lr
 80039de:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80039e2:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 80039e6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039ea:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80039ee:	4c88      	ldr	r4, [pc, #544]	@ (8003c10 <USB_ActivateEndpoint+0x2bc>)
 80039f0:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 80039f2:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039f4:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80039f8:	d001      	beq.n	80039fe <USB_ActivateEndpoint+0xaa>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039fa:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039fe:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003a02:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8003a06:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8003a0a:	e0b8      	b.n	8003b7e <USB_ActivateEndpoint+0x22a>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003a0c:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003a10:	2000      	movs	r0, #0
      break;
 8003a12:	e7b5      	b.n	8003980 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003a14:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8003a18:	e7fa      	b.n	8003a10 <USB_ActivateEndpoint+0xbc>
  switch (ep->type)
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	e7b0      	b.n	8003980 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a1e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003a22:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a24:	fa17 f686 	uxtah	r6, r7, r6
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003a28:	293e      	cmp	r1, #62	@ 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a2a:	f8a6 4404 	strh.w	r4, [r6, #1028]	@ 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003a2e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8003a32:	fa17 f484 	uxtah	r4, r7, r4
 8003a36:	f8b4 6406 	ldrh.w	r6, [r4, #1030]	@ 0x406
 8003a3a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003a3e:	f8a4 6406 	strh.w	r6, [r4, #1030]	@ 0x406
 8003a42:	d92b      	bls.n	8003a9c <USB_ActivateEndpoint+0x148>
 8003a44:	094e      	lsrs	r6, r1, #5
 8003a46:	06cf      	lsls	r7, r1, #27
 8003a48:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	@ 0x406
 8003a4c:	bf08      	it	eq
 8003a4e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003a52:	b289      	uxth	r1, r1
 8003a54:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003a58:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003a5c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003a60:	b289      	uxth	r1, r1
 8003a62:	f8a4 1406 	strh.w	r1, [r4, #1030]	@ 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a66:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003a6a:	044f      	lsls	r7, r1, #17
 8003a6c:	d50d      	bpl.n	8003a8a <USB_ActivateEndpoint+0x136>
 8003a6e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003a72:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8003a76:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8003a7a:	0409      	lsls	r1, r1, #16
 8003a7c:	0c09      	lsrs	r1, r1, #16
 8003a7e:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8003a82:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8003a86:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a8a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003a8e:	4c61      	ldr	r4, [pc, #388]	@ (8003c14 <USB_ActivateEndpoint+0x2c0>)
 8003a90:	b289      	uxth	r1, r1
 8003a92:	4021      	ands	r1, r4
      if (ep->num == 0U)
 8003a94:	b985      	cbnz	r5, 8003ab8 <USB_ActivateEndpoint+0x164>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a96:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8003a9a:	e7b0      	b.n	80039fe <USB_ActivateEndpoint+0xaa>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003a9c:	b911      	cbnz	r1, 8003aa4 <USB_ActivateEndpoint+0x150>
 8003a9e:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	@ 0x406
 8003aa2:	e7d9      	b.n	8003a58 <USB_ActivateEndpoint+0x104>
 8003aa4:	084e      	lsrs	r6, r1, #1
 8003aa6:	07c9      	lsls	r1, r1, #31
 8003aa8:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	@ 0x406
 8003aac:	bf48      	it	mi
 8003aae:	3601      	addmi	r6, #1
 8003ab0:	b289      	uxth	r1, r1
 8003ab2:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003ab6:	e7d3      	b.n	8003a60 <USB_ActivateEndpoint+0x10c>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003ab8:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8003abc:	e79f      	b.n	80039fe <USB_ActivateEndpoint+0xaa>
    if (ep->type == EP_TYPE_BULK)
 8003abe:	2e02      	cmp	r6, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003ac0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8003ac4:	d15c      	bne.n	8003b80 <USB_ActivateEndpoint+0x22c>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003ac6:	b2a4      	uxth	r4, r4
 8003ac8:	ea04 040e 	and.w	r4, r4, lr
 8003acc:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8003ad0:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8003ad4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003ad8:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
 8003adc:	890c      	ldrh	r4, [r1, #8]
 8003ade:	fa17 f585 	uxtah	r5, r7, r5
 8003ae2:	0864      	lsrs	r4, r4, #1
 8003ae4:	0064      	lsls	r4, r4, #1
 8003ae6:	f8a5 4400 	strh.w	r4, [r5, #1024]	@ 0x400
 8003aea:	894c      	ldrh	r4, [r1, #10]
 8003aec:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
 8003af0:	0864      	lsrs	r4, r4, #1
 8003af2:	fa17 f585 	uxtah	r5, r7, r5
 8003af6:	0064      	lsls	r4, r4, #1
 8003af8:	f8a5 4404 	strh.w	r4, [r5, #1028]	@ 0x404
    if (ep->is_in == 0U)
 8003afc:	7849      	ldrb	r1, [r1, #1]
 8003afe:	2900      	cmp	r1, #0
 8003b00:	d149      	bne.n	8003b96 <USB_ActivateEndpoint+0x242>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b02:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003b06:	044e      	lsls	r6, r1, #17
 8003b08:	d50d      	bpl.n	8003b26 <USB_ActivateEndpoint+0x1d2>
 8003b0a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003b0e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8003b12:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8003b16:	0409      	lsls	r1, r1, #16
 8003b18:	0c09      	lsrs	r1, r1, #16
 8003b1a:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8003b1e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8003b22:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b26:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003b2a:	064d      	lsls	r5, r1, #25
 8003b2c:	d50d      	bpl.n	8003b4a <USB_ActivateEndpoint+0x1f6>
 8003b2e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003b32:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8003b36:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8003b3a:	0409      	lsls	r1, r1, #16
 8003b3c:	0c09      	lsrs	r1, r1, #16
 8003b3e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003b42:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8003b46:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b4a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003b4e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8003b52:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8003b56:	0409      	lsls	r1, r1, #16
 8003b58:	0c09      	lsrs	r1, r1, #16
 8003b5a:	f248 0480 	movw	r4, #32896	@ 0x8080
 8003b5e:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8003b62:	4321      	orrs	r1, r4
 8003b64:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b68:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003b6c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8003b70:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8003b74:	0409      	lsls	r1, r1, #16
 8003b76:	0c09      	lsrs	r1, r1, #16
 8003b78:	430c      	orrs	r4, r1
 8003b7a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8003b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003b80:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8003b84:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8003b88:	0424      	lsls	r4, r4, #16
 8003b8a:	0c24      	lsrs	r4, r4, #16
 8003b8c:	ea4c 0c04 	orr.w	ip, ip, r4
 8003b90:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
 8003b94:	e7a0      	b.n	8003ad8 <USB_ActivateEndpoint+0x184>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b96:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003b9a:	044c      	lsls	r4, r1, #17
 8003b9c:	d50d      	bpl.n	8003bba <USB_ActivateEndpoint+0x266>
 8003b9e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003ba2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8003ba6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8003baa:	0409      	lsls	r1, r1, #16
 8003bac:	0c09      	lsrs	r1, r1, #16
 8003bae:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8003bb2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8003bb6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bba:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003bbe:	0649      	lsls	r1, r1, #25
 8003bc0:	d50d      	bpl.n	8003bde <USB_ActivateEndpoint+0x28a>
 8003bc2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003bc6:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8003bca:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8003bce:	0409      	lsls	r1, r1, #16
 8003bd0:	0c09      	lsrs	r1, r1, #16
 8003bd2:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003bd6:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8003bda:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bde:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003be2:	4c0b      	ldr	r4, [pc, #44]	@ (8003c10 <USB_ActivateEndpoint+0x2bc>)
 8003be4:	b289      	uxth	r1, r1
 8003be6:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8003be8:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bea:	bf18      	it	ne
 8003bec:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bf0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003bf4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8003bf8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bfc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003c00:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8003c04:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8003c08:	0409      	lsls	r1, r1, #16
 8003c0a:	0c09      	lsrs	r1, r1, #16
 8003c0c:	e6f7      	b.n	80039fe <USB_ActivateEndpoint+0xaa>
 8003c0e:	bf00      	nop
 8003c10:	ffff8fbf 	.word	0xffff8fbf
 8003c14:	ffffbf8f 	.word	0xffffbf8f
 8003c18:	ffff8f8f 	.word	0xffff8f8f

08003c1c <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8003c1c:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c1e:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8003c20:	7b09      	ldrb	r1, [r1, #12]
 8003c22:	bbd9      	cbnz	r1, 8003c9c <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8003c24:	b30a      	cbz	r2, 8003c6a <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c2a:	0651      	lsls	r1, r2, #25
 8003c2c:	d50d      	bpl.n	8003c4a <USB_DeactivateEndpoint+0x2e>
 8003c2e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c32:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003c36:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003c3a:	0412      	lsls	r2, r2, #16
 8003c3c:	0c12      	lsrs	r2, r2, #16
 8003c3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c42:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8003c46:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c4a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c4e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c56:	0412      	lsls	r2, r2, #16
 8003c58:	0c12      	lsrs	r2, r2, #16
 8003c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c62:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003c66:	2000      	movs	r0, #0
 8003c68:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c6a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c6e:	0452      	lsls	r2, r2, #17
 8003c70:	d50d      	bpl.n	8003c8e <USB_DeactivateEndpoint+0x72>
 8003c72:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c76:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003c7a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003c7e:	0412      	lsls	r2, r2, #16
 8003c80:	0c12      	lsrs	r2, r2, #16
 8003c82:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003c86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c8a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c8e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c96:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003c9a:	e7dc      	b.n	8003c56 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8003c9c:	2a00      	cmp	r2, #0
 8003c9e:	d14a      	bne.n	8003d36 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ca0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003ca4:	0451      	lsls	r1, r2, #17
 8003ca6:	d50d      	bpl.n	8003cc4 <USB_DeactivateEndpoint+0xa8>
 8003ca8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cac:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003cb0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003cb4:	0412      	lsls	r2, r2, #16
 8003cb6:	0c12      	lsrs	r2, r2, #16
 8003cb8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003cbc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cc0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cc4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cc8:	0652      	lsls	r2, r2, #25
 8003cca:	d50d      	bpl.n	8003ce8 <USB_DeactivateEndpoint+0xcc>
 8003ccc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cd0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003cd4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003cd8:	0412      	lsls	r2, r2, #16
 8003cda:	0c12      	lsrs	r2, r2, #16
 8003cdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ce0:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8003ce4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003ce8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cec:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003cf0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003cf4:	0412      	lsls	r2, r2, #16
 8003cf6:	0c12      	lsrs	r2, r2, #16
 8003cf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cfc:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8003d00:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d04:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d08:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d0c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d10:	0412      	lsls	r2, r2, #16
 8003d12:	0c12      	lsrs	r2, r2, #16
 8003d14:	f248 0180 	movw	r1, #32896	@ 0x8080
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d1e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d22:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d2a:	0412      	lsls	r2, r2, #16
 8003d2c:	0c12      	lsrs	r2, r2, #16
 8003d2e:	4311      	orrs	r1, r2
 8003d30:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8003d34:	e797      	b.n	8003c66 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d3a:	0451      	lsls	r1, r2, #17
 8003d3c:	d50d      	bpl.n	8003d5a <USB_DeactivateEndpoint+0x13e>
 8003d3e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d42:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003d46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d4a:	0412      	lsls	r2, r2, #16
 8003d4c:	0c12      	lsrs	r2, r2, #16
 8003d4e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003d52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d56:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d5e:	0652      	lsls	r2, r2, #25
 8003d60:	d50d      	bpl.n	8003d7e <USB_DeactivateEndpoint+0x162>
 8003d62:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d66:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003d6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d6e:	0412      	lsls	r2, r2, #16
 8003d70:	0c12      	lsrs	r2, r2, #16
 8003d72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d76:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8003d7a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003d7e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d82:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003d86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d8a:	0412      	lsls	r2, r2, #16
 8003d8c:	0c12      	lsrs	r2, r2, #16
 8003d8e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003d92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d96:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d9a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d9e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003da2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003da6:	0412      	lsls	r2, r2, #16
 8003da8:	0c12      	lsrs	r2, r2, #16
 8003daa:	f248 0180 	movw	r1, #32896	@ 0x8080
 8003dae:	430a      	orrs	r2, r1
 8003db0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003db4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003db8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003dbc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003dc0:	e7b3      	b.n	8003d2a <USB_DeactivateEndpoint+0x10e>

08003dc2 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003dc2:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003dc4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8003dc6:	b18b      	cbz	r3, 8003dec <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003dc8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003dcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	0c1b      	lsrs	r3, r3, #16
 8003dd8:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003de8:	2000      	movs	r0, #0
 8003dea:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003dec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003df0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	0c1b      	lsrs	r3, r3, #16
 8003dfc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003e00:	e7ec      	b.n	8003ddc <USB_EPSetStall+0x1a>

08003e02 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003e02:	7b0b      	ldrb	r3, [r1, #12]
 8003e04:	bb3b      	cbnz	r3, 8003e56 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8003e06:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e08:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8003e0a:	b333      	cbz	r3, 8003e5a <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e10:	065b      	lsls	r3, r3, #25
 8003e12:	d50d      	bpl.n	8003e30 <USB_EPClearStall+0x2e>
 8003e14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e2c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003e30:	78cb      	ldrb	r3, [r1, #3]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d00f      	beq.n	8003e56 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003e56:	2000      	movs	r0, #0
 8003e58:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e5e:	045b      	lsls	r3, r3, #17
 8003e60:	d50d      	bpl.n	8003e7e <USB_EPClearStall+0x7c>
 8003e62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8003e92:	e7da      	b.n	8003e4a <USB_EPClearStall+0x48>

08003e94 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003e94:	b911      	cbnz	r1, 8003e9c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003e96:	2380      	movs	r3, #128	@ 0x80
 8003e98:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	4770      	bx	lr

08003ea0 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8003ea0:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8003ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	4770      	bx	lr

08003eb6 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003eb6:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8003eba:	b280      	uxth	r0, r0
 8003ebc:	4770      	bx	lr

08003ebe <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ebe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003ec2:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ec4:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003ecc:	1a40      	subs	r0, r0, r1

  for (count = n; count != 0U; count--)
 8003ece:	428b      	cmp	r3, r1
 8003ed0:	d100      	bne.n	8003ed4 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8003ed2:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003ed4:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8003ed6:	520a      	strh	r2, [r1, r0]
    pBuf++;
 8003ed8:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8003eda:	e7f8      	b.n	8003ece <USB_WritePMA+0x10>

08003edc <USB_EPStartXfer>:
{
 8003edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8003ee0:	784b      	ldrb	r3, [r1, #1]
    if (ep->doublebuffer == 0U)
 8003ee2:	7b0e      	ldrb	r6, [r1, #12]
  if (ep->is_in == 1U)
 8003ee4:	2b01      	cmp	r3, #1
{
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8003eea:	f040 811c 	bne.w	8004126 <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 8003eee:	f8d1 a010 	ldr.w	sl, [r1, #16]
 8003ef2:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ef4:	6949      	ldr	r1, [r1, #20]
 8003ef6:	4557      	cmp	r7, sl
 8003ef8:	bf28      	it	cs
 8003efa:	4657      	movcs	r7, sl
    if (ep->doublebuffer == 0U)
 8003efc:	bb16      	cbnz	r6, 8003f44 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003efe:	b2bf      	uxth	r7, r7
 8003f00:	88ea      	ldrh	r2, [r5, #6]
 8003f02:	463b      	mov	r3, r7
 8003f04:	f7ff ffdb 	bl	8003ebe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f08:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8003f0c:	782b      	ldrb	r3, [r5, #0]
 8003f0e:	f204 4102 	addw	r1, r4, #1026	@ 0x402
 8003f12:	fa11 f282 	uxtah	r2, r1, r2
 8003f16:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003f1a:	8017      	strh	r7, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003f1c:	782a      	ldrb	r2, [r5, #0]
 8003f1e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8003f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f3a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  return HAL_OK;
 8003f3e:	2000      	movs	r0, #0
}
 8003f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8003f44:	78eb      	ldrb	r3, [r5, #3]
        if (ep->xfer_len_db > ep->maxpacket)
 8003f46:	6a2e      	ldr	r6, [r5, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003f48:	f895 c000 	ldrb.w	ip, [r5]
      if (ep->type == EP_TYPE_BULK)
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	f040 80d3 	bne.w	80040f8 <USB_EPStartXfer+0x21c>
        if (ep->xfer_len_db > ep->maxpacket)
 8003f52:	45b2      	cmp	sl, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003f54:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8003f58:	f080 80b7 	bcs.w	80040ca <USB_EPStartXfer+0x1ee>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003f5c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003f60:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f64:	0412      	lsls	r2, r2, #16
 8003f66:	0c12      	lsrs	r2, r2, #16
 8003f68:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8003f6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f70:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f74:	f830 802c 	ldrh.w	r8, [r0, ip, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f78:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8003f7c:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f7e:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 8003f82:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 8003f84:	eb01 0907 	add.w	r9, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003f88:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f8a:	d051      	beq.n	8004030 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f8c:	f200 4e06 	addw	lr, r0, #1030	@ 0x406
 8003f90:	fa1e f282 	uxtah	r2, lr, r2
 8003f94:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f98:	896a      	ldrh	r2, [r5, #10]
 8003f9a:	f7ff ff90 	bl	8003ebe <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003f9e:	45b2      	cmp	sl, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003fa0:	786a      	ldrb	r2, [r5, #1]
            ep->xfer_buff += len;
 8003fa2:	f8c5 9014 	str.w	r9, [r5, #20]
              ep->xfer_len_db -= len;
 8003fa6:	bf36      	itet	cc
 8003fa8:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8003faa:	2300      	movcs	r3, #0
 8003fac:	463e      	movcc	r6, r7
 8003fae:	622b      	str	r3, [r5, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003fb0:	b2b3      	uxth	r3, r6
 8003fb2:	bb82      	cbnz	r2, 8004016 <USB_EPStartXfer+0x13a>
 8003fb4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8003fb8:	7829      	ldrb	r1, [r5, #0]
 8003fba:	f204 4002 	addw	r0, r4, #1026	@ 0x402
 8003fbe:	fa10 f282 	uxtah	r2, r0, r2
 8003fc2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003fc6:	2e3e      	cmp	r6, #62	@ 0x3e
 8003fc8:	8811      	ldrh	r1, [r2, #0]
 8003fca:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003fce:	8011      	strh	r1, [r2, #0]
 8003fd0:	d914      	bls.n	8003ffc <USB_EPStartXfer+0x120>
 8003fd2:	8811      	ldrh	r1, [r2, #0]
 8003fd4:	0970      	lsrs	r0, r6, #5
 8003fd6:	06f6      	lsls	r6, r6, #27
 8003fd8:	bf08      	it	eq
 8003fda:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003fde:	b289      	uxth	r1, r1
 8003fe0:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003fe4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003fe8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003fec:	b289      	uxth	r1, r1
 8003fee:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ff0:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ff6:	f7ff ff62 	bl	8003ebe <USB_WritePMA>
 8003ffa:	e78f      	b.n	8003f1c <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ffc:	b90e      	cbnz	r6, 8004002 <USB_EPStartXfer+0x126>
 8003ffe:	8811      	ldrh	r1, [r2, #0]
 8004000:	e7f0      	b.n	8003fe4 <USB_EPStartXfer+0x108>
 8004002:	07f1      	lsls	r1, r6, #31
 8004004:	8811      	ldrh	r1, [r2, #0]
 8004006:	ea4f 0056 	mov.w	r0, r6, lsr #1
 800400a:	bf48      	it	mi
 800400c:	3001      	addmi	r0, #1
 800400e:	b289      	uxth	r1, r1
 8004010:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004014:	e7ea      	b.n	8003fec <USB_EPStartXfer+0x110>
 8004016:	2a01      	cmp	r2, #1
 8004018:	d1ea      	bne.n	8003ff0 <USB_EPStartXfer+0x114>
 800401a:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800401e:	7829      	ldrb	r1, [r5, #0]
 8004020:	f204 4002 	addw	r0, r4, #1026	@ 0x402
 8004024:	fa10 f282 	uxtah	r2, r0, r2
 8004028:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800402c:	8013      	strh	r3, [r2, #0]
 800402e:	e7df      	b.n	8003ff0 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004030:	f200 4e02 	addw	lr, r0, #1026	@ 0x402
 8004034:	fa1e f282 	uxtah	r2, lr, r2
 8004038:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800403c:	892a      	ldrh	r2, [r5, #8]
 800403e:	f7ff ff3e 	bl	8003ebe <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004042:	45b2      	cmp	sl, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004044:	786a      	ldrb	r2, [r5, #1]
            ep->xfer_buff += len;
 8004046:	f8c5 9014 	str.w	r9, [r5, #20]
              ep->xfer_len_db -= len;
 800404a:	bf36      	itet	cc
 800404c:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800404e:	4643      	movcs	r3, r8
 8004050:	463e      	movcc	r6, r7
 8004052:	622b      	str	r3, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004054:	b2b3      	uxth	r3, r6
 8004056:	bb5a      	cbnz	r2, 80040b0 <USB_EPStartXfer+0x1d4>
 8004058:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800405c:	7829      	ldrb	r1, [r5, #0]
 800405e:	f204 4006 	addw	r0, r4, #1030	@ 0x406
 8004062:	fa10 f282 	uxtah	r2, r0, r2
 8004066:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800406a:	2e3e      	cmp	r6, #62	@ 0x3e
 800406c:	8811      	ldrh	r1, [r2, #0]
 800406e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004072:	8011      	strh	r1, [r2, #0]
 8004074:	d910      	bls.n	8004098 <USB_EPStartXfer+0x1bc>
 8004076:	8811      	ldrh	r1, [r2, #0]
 8004078:	0970      	lsrs	r0, r6, #5
 800407a:	06f7      	lsls	r7, r6, #27
 800407c:	bf08      	it	eq
 800407e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004082:	b289      	uxth	r1, r1
 8004084:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004088:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800408c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004090:	b289      	uxth	r1, r1
 8004092:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004094:	896a      	ldrh	r2, [r5, #10]
 8004096:	e7ac      	b.n	8003ff2 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004098:	b90e      	cbnz	r6, 800409e <USB_EPStartXfer+0x1c2>
 800409a:	8811      	ldrh	r1, [r2, #0]
 800409c:	e7f4      	b.n	8004088 <USB_EPStartXfer+0x1ac>
 800409e:	8811      	ldrh	r1, [r2, #0]
 80040a0:	0870      	lsrs	r0, r6, #1
 80040a2:	07f6      	lsls	r6, r6, #31
 80040a4:	bf48      	it	mi
 80040a6:	3001      	addmi	r0, #1
 80040a8:	b289      	uxth	r1, r1
 80040aa:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80040ae:	e7ef      	b.n	8004090 <USB_EPStartXfer+0x1b4>
 80040b0:	2a01      	cmp	r2, #1
 80040b2:	d1ef      	bne.n	8004094 <USB_EPStartXfer+0x1b8>
 80040b4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80040b8:	7829      	ldrb	r1, [r5, #0]
 80040ba:	f204 4006 	addw	r0, r4, #1030	@ 0x406
 80040be:	fa10 f282 	uxtah	r2, r0, r2
 80040c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80040c6:	8013      	strh	r3, [r2, #0]
 80040c8:	e7e4      	b.n	8004094 <USB_EPStartXfer+0x1b8>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80040ca:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80040ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80040d2:	0412      	lsls	r2, r2, #16
 80040d4:	0c12      	lsrs	r2, r2, #16
 80040d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80040de:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040e2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80040e6:	f200 4302 	addw	r3, r0, #1026	@ 0x402
 80040ea:	fa13 f282 	uxtah	r2, r3, r2
 80040ee:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040f0:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040f4:	892a      	ldrh	r2, [r5, #8]
 80040f6:	e77e      	b.n	8003ff6 <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040f8:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        ep->xfer_len_db -= len;
 80040fc:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040fe:	f012 0f40 	tst.w	r2, #64	@ 0x40
        ep->xfer_len_db -= len;
 8004102:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004104:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004108:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800410a:	d007      	beq.n	800411c <USB_EPStartXfer+0x240>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800410c:	f200 4606 	addw	r6, r0, #1030	@ 0x406
 8004110:	fa16 f282 	uxtah	r2, r6, r2
 8004114:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004118:	896a      	ldrh	r2, [r5, #10]
 800411a:	e76c      	b.n	8003ff6 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800411c:	f200 4602 	addw	r6, r0, #1026	@ 0x402
 8004120:	fa16 f282 	uxtah	r2, r6, r2
 8004124:	e7e4      	b.n	80040f0 <USB_EPStartXfer+0x214>
    if (ep->doublebuffer == 0U)
 8004126:	2e00      	cmp	r6, #0
 8004128:	d13c      	bne.n	80041a4 <USB_EPStartXfer+0x2c8>
      if (ep->xfer_len > ep->maxpacket)
 800412a:	698a      	ldr	r2, [r1, #24]
 800412c:	690b      	ldr	r3, [r1, #16]
 800412e:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8004130:	bf84      	itt	hi
 8004132:	1ad6      	subhi	r6, r2, r3
 8004134:	461a      	movhi	r2, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004136:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800413a:	618e      	str	r6, [r1, #24]
 800413c:	f200 4006 	addw	r0, r0, #1030	@ 0x406
 8004140:	7809      	ldrb	r1, [r1, #0]
 8004142:	fa10 f383 	uxtah	r3, r0, r3
 8004146:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800414a:	2a3e      	cmp	r2, #62	@ 0x3e
 800414c:	8819      	ldrh	r1, [r3, #0]
 800414e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004152:	8019      	strh	r1, [r3, #0]
 8004154:	d91a      	bls.n	800418c <USB_EPStartXfer+0x2b0>
 8004156:	0951      	lsrs	r1, r2, #5
 8004158:	06d0      	lsls	r0, r2, #27
 800415a:	881a      	ldrh	r2, [r3, #0]
 800415c:	bf08      	it	eq
 800415e:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8004162:	b292      	uxth	r2, r2
 8004164:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004168:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800416c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004170:	b292      	uxth	r2, r2
 8004172:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004174:	782a      	ldrb	r2, [r5, #0]
 8004176:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800417a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800417e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800418a:	e6d2      	b.n	8003f32 <USB_EPStartXfer+0x56>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800418c:	b90a      	cbnz	r2, 8004192 <USB_EPStartXfer+0x2b6>
 800418e:	881a      	ldrh	r2, [r3, #0]
 8004190:	e7ea      	b.n	8004168 <USB_EPStartXfer+0x28c>
 8004192:	0851      	lsrs	r1, r2, #1
 8004194:	07d2      	lsls	r2, r2, #31
 8004196:	881a      	ldrh	r2, [r3, #0]
 8004198:	bf48      	it	mi
 800419a:	3101      	addmi	r1, #1
 800419c:	b292      	uxth	r2, r2
 800419e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80041a2:	e7e5      	b.n	8004170 <USB_EPStartXfer+0x294>
      if (ep->type == EP_TYPE_BULK)
 80041a4:	78ca      	ldrb	r2, [r1, #3]
 80041a6:	2a02      	cmp	r2, #2
 80041a8:	d17b      	bne.n	80042a2 <USB_EPStartXfer+0x3c6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d13f      	bne.n	800422e <USB_EPStartXfer+0x352>
 80041ae:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
 80041b2:	780b      	ldrb	r3, [r1, #0]
 80041b4:	f204 4202 	addw	r2, r4, #1026	@ 0x402
 80041b8:	fa12 f080 	uxtah	r0, r2, r0
 80041bc:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 80041c0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80041c4:	f820 2033 	strh.w	r2, [r0, r3, lsl #3]
 80041c8:	690a      	ldr	r2, [r1, #16]
 80041ca:	2a3e      	cmp	r2, #62	@ 0x3e
 80041cc:	d94c      	bls.n	8004268 <USB_EPStartXfer+0x38c>
 80041ce:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
 80041d2:	0956      	lsrs	r6, r2, #5
 80041d4:	06d7      	lsls	r7, r2, #27
 80041d6:	bf08      	it	eq
 80041d8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80041dc:	b289      	uxth	r1, r1
 80041de:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80041e2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80041e6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80041ea:	b289      	uxth	r1, r1
 80041ec:	f820 1033 	strh.w	r1, [r0, r3, lsl #3]
 80041f0:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 80041f4:	f204 4006 	addw	r0, r4, #1030	@ 0x406
 80041f8:	fa10 f181 	uxtah	r1, r0, r1
 80041fc:	2a3e      	cmp	r2, #62	@ 0x3e
 80041fe:	f831 0033 	ldrh.w	r0, [r1, r3, lsl #3]
 8004202:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004206:	f821 0033 	strh.w	r0, [r1, r3, lsl #3]
 800420a:	d93c      	bls.n	8004286 <USB_EPStartXfer+0x3aa>
 800420c:	0950      	lsrs	r0, r2, #5
 800420e:	06d7      	lsls	r7, r2, #27
 8004210:	f831 2033 	ldrh.w	r2, [r1, r3, lsl #3]
 8004214:	bf08      	it	eq
 8004216:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800421a:	b292      	uxth	r2, r2
 800421c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8004220:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004224:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004228:	b292      	uxth	r2, r2
 800422a:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
        if (ep->xfer_count != 0U)
 800422e:	69eb      	ldr	r3, [r5, #28]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d09f      	beq.n	8004174 <USB_EPStartXfer+0x298>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004234:	782a      	ldrb	r2, [r5, #0]
 8004236:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800423a:	f244 0340 	movw	r3, #16448	@ 0x4040
 800423e:	ea03 0001 	and.w	r0, r3, r1
 8004242:	438b      	bics	r3, r1
 8004244:	d001      	beq.n	800424a <USB_EPStartXfer+0x36e>
 8004246:	2800      	cmp	r0, #0
 8004248:	d194      	bne.n	8004174 <USB_EPStartXfer+0x298>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800424a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800425e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004262:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8004266:	e785      	b.n	8004174 <USB_EPStartXfer+0x298>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004268:	b912      	cbnz	r2, 8004270 <USB_EPStartXfer+0x394>
 800426a:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
 800426e:	e7b8      	b.n	80041e2 <USB_EPStartXfer+0x306>
 8004270:	07d1      	lsls	r1, r2, #31
 8004272:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
 8004276:	ea4f 0652 	mov.w	r6, r2, lsr #1
 800427a:	bf48      	it	mi
 800427c:	3601      	addmi	r6, #1
 800427e:	b289      	uxth	r1, r1
 8004280:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004284:	e7b1      	b.n	80041ea <USB_EPStartXfer+0x30e>
 8004286:	b912      	cbnz	r2, 800428e <USB_EPStartXfer+0x3b2>
 8004288:	f831 2033 	ldrh.w	r2, [r1, r3, lsl #3]
 800428c:	e7c8      	b.n	8004220 <USB_EPStartXfer+0x344>
 800428e:	0850      	lsrs	r0, r2, #1
 8004290:	07d6      	lsls	r6, r2, #31
 8004292:	f831 2033 	ldrh.w	r2, [r1, r3, lsl #3]
 8004296:	bf48      	it	mi
 8004298:	3001      	addmi	r0, #1
 800429a:	b292      	uxth	r2, r2
 800429c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80042a0:	e7c2      	b.n	8004228 <USB_EPStartXfer+0x34c>
      else if (ep->type == EP_TYPE_ISOC)
 80042a2:	2a01      	cmp	r2, #1
 80042a4:	d167      	bne.n	8004376 <USB_EPStartXfer+0x49a>
        if (ep->xfer_len > ep->maxpacket)
 80042a6:	698a      	ldr	r2, [r1, #24]
 80042a8:	6909      	ldr	r1, [r1, #16]
 80042aa:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 80042ac:	bf8a      	itet	hi
 80042ae:	1a50      	subhi	r0, r2, r1
          ep->xfer_len = 0U;
 80042b0:	2000      	movls	r0, #0
 80042b2:	460a      	movhi	r2, r1
 80042b4:	61a8      	str	r0, [r5, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f47f af5c 	bne.w	8004174 <USB_EPStartXfer+0x298>
 80042bc:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80042c0:	782b      	ldrb	r3, [r5, #0]
 80042c2:	f204 4102 	addw	r1, r4, #1026	@ 0x402
 80042c6:	fa11 f080 	uxtah	r0, r1, r0
 80042ca:	2a3e      	cmp	r2, #62	@ 0x3e
 80042cc:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
 80042d0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80042d4:	f820 1033 	strh.w	r1, [r0, r3, lsl #3]
 80042d8:	d931      	bls.n	800433e <USB_EPStartXfer+0x462>
 80042da:	06d1      	lsls	r1, r2, #27
 80042dc:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
 80042e0:	ea4f 1652 	mov.w	r6, r2, lsr #5
 80042e4:	bf08      	it	eq
 80042e6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80042ea:	b289      	uxth	r1, r1
 80042ec:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80042f0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80042f4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80042f8:	b289      	uxth	r1, r1
 80042fa:	f820 1033 	strh.w	r1, [r0, r3, lsl #3]
 80042fe:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 8004302:	f204 4006 	addw	r0, r4, #1030	@ 0x406
 8004306:	fa10 f181 	uxtah	r1, r0, r1
 800430a:	2a3e      	cmp	r2, #62	@ 0x3e
 800430c:	f831 0033 	ldrh.w	r0, [r1, r3, lsl #3]
 8004310:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004314:	f821 0033 	strh.w	r0, [r1, r3, lsl #3]
 8004318:	d91f      	bls.n	800435a <USB_EPStartXfer+0x47e>
 800431a:	0950      	lsrs	r0, r2, #5
 800431c:	06d6      	lsls	r6, r2, #27
 800431e:	f831 2033 	ldrh.w	r2, [r1, r3, lsl #3]
 8004322:	bf08      	it	eq
 8004324:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004328:	b292      	uxth	r2, r2
 800432a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800432e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004332:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004336:	b292      	uxth	r2, r2
 8004338:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
 800433c:	e71a      	b.n	8004174 <USB_EPStartXfer+0x298>
 800433e:	b912      	cbnz	r2, 8004346 <USB_EPStartXfer+0x46a>
 8004340:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
 8004344:	e7d4      	b.n	80042f0 <USB_EPStartXfer+0x414>
 8004346:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
 800434a:	0856      	lsrs	r6, r2, #1
 800434c:	07d7      	lsls	r7, r2, #31
 800434e:	bf48      	it	mi
 8004350:	3601      	addmi	r6, #1
 8004352:	b289      	uxth	r1, r1
 8004354:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004358:	e7ce      	b.n	80042f8 <USB_EPStartXfer+0x41c>
 800435a:	b912      	cbnz	r2, 8004362 <USB_EPStartXfer+0x486>
 800435c:	f831 2033 	ldrh.w	r2, [r1, r3, lsl #3]
 8004360:	e7e5      	b.n	800432e <USB_EPStartXfer+0x452>
 8004362:	0850      	lsrs	r0, r2, #1
 8004364:	07d2      	lsls	r2, r2, #31
 8004366:	f831 2033 	ldrh.w	r2, [r1, r3, lsl #3]
 800436a:	bf48      	it	mi
 800436c:	3001      	addmi	r0, #1
 800436e:	b292      	uxth	r2, r2
 8004370:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8004374:	e7df      	b.n	8004336 <USB_EPStartXfer+0x45a>
        return HAL_ERROR;
 8004376:	2001      	movs	r0, #1
 8004378:	e5e2      	b.n	8003f40 <USB_EPStartXfer+0x64>

0800437a <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800437a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
{
 800437e:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004380:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004382:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8004384:	460c      	mov	r4, r1
 8004386:	462e      	mov	r6, r5
 8004388:	1a47      	subs	r7, r0, r1
 800438a:	193a      	adds	r2, r7, r4
 800438c:	3402      	adds	r4, #2
 800438e:	b936      	cbnz	r6, 800439e <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004390:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8004392:	bf44      	itt	mi
 8004394:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004398:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800439c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800439e:	8812      	ldrh	r2, [r2, #0]
 80043a0:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80043a2:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80043a6:	0a12      	lsrs	r2, r2, #8
 80043a8:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 80043ac:	3e01      	subs	r6, #1
 80043ae:	e7ec      	b.n	800438a <USB_ReadPMA+0x10>

080043b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80043b0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043b2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 80043b6:	b18c      	cbz	r4, 80043dc <USBD_CDC_EP0_RxReady+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80043b8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
 80043bc:	b11b      	cbz	r3, 80043c6 <USBD_CDC_EP0_RxReady+0x16>
 80043be:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80043c2:	28ff      	cmp	r0, #255	@ 0xff
 80043c4:	d101      	bne.n	80043ca <USBD_CDC_EP0_RxReady+0x1a>
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
  }

  return (uint8_t)USBD_OK;
 80043c6:	2000      	movs	r0, #0
}
 80043c8:	bd10      	pop	{r4, pc}
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80043d0:	4621      	mov	r1, r4
 80043d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80043d4:	23ff      	movs	r3, #255	@ 0xff
 80043d6:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
 80043da:	e7f4      	b.n	80043c6 <USBD_CDC_EP0_RxReady+0x16>
    return (uint8_t)USBD_FAIL;
 80043dc:	2003      	movs	r0, #3
 80043de:	e7f3      	b.n	80043c8 <USBD_CDC_EP0_RxReady+0x18>

080043e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80043e0:	2343      	movs	r3, #67	@ 0x43
 80043e2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80043e4:	4800      	ldr	r0, [pc, #0]	@ (80043e8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80043e6:	4770      	bx	lr
 80043e8:	20000050 	.word	0x20000050

080043ec <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80043ec:	2343      	movs	r3, #67	@ 0x43
 80043ee:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80043f0:	4800      	ldr	r0, [pc, #0]	@ (80043f4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80043f2:	4770      	bx	lr
 80043f4:	20000094 	.word	0x20000094

080043f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80043f8:	2343      	movs	r3, #67	@ 0x43
 80043fa:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80043fc:	4800      	ldr	r0, [pc, #0]	@ (8004400 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80043fe:	4770      	bx	lr
 8004400:	2000000c 	.word	0x2000000c

08004404 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004404:	230a      	movs	r3, #10
 8004406:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8004408:	4800      	ldr	r0, [pc, #0]	@ (800440c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800440a:	4770      	bx	lr
 800440c:	20000110 	.word	0x20000110

08004410 <USBD_CDC_DataOut>:
{
 8004410:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004412:	f8d0 42bc 	ldr.w	r4, [r0, #700]	@ 0x2bc
{
 8004416:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 8004418:	b16c      	cbz	r4, 8004436 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800441a:	f000 ff08 	bl	800522e <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800441e:	f8d5 32c0 	ldr.w	r3, [r5, #704]	@ 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004422:	f8c4 020c 	str.w	r0, [r4, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f8d4 0204 	ldr.w	r0, [r4, #516]	@ 0x204
 800442c:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8004430:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8004432:	2000      	movs	r0, #0
}
 8004434:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8004436:	2003      	movs	r0, #3
 8004438:	e7fc      	b.n	8004434 <USBD_CDC_DataOut+0x24>

0800443a <USBD_CDC_DataIn>:
{
 800443a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800443c:	f8d0 52bc 	ldr.w	r5, [r0, #700]	@ 0x2bc
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004440:	f8d0 72c4 	ldr.w	r7, [r0, #708]	@ 0x2c4
{
 8004444:	4604      	mov	r4, r0
 8004446:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 8004448:	b315      	cbz	r5, 8004490 <USBD_CDC_DataIn+0x56>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800444a:	2614      	movs	r6, #20
 800444c:	fb06 0601 	mla	r6, r6, r1, r0
 8004450:	69b3      	ldr	r3, [r6, #24]
 8004452:	b17b      	cbz	r3, 8004474 <USBD_CDC_DataIn+0x3a>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004454:	f04f 0c28 	mov.w	ip, #40	@ 0x28
 8004458:	fb0c 7701 	mla	r7, ip, r1, r7
 800445c:	6a3f      	ldr	r7, [r7, #32]
 800445e:	fbb3 fcf7 	udiv	ip, r3, r7
 8004462:	fb07 331c 	mls	r3, r7, ip, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004466:	b92b      	cbnz	r3, 8004474 <USBD_CDC_DataIn+0x3a>
    pdev->ep_in[epnum].total_length = 0U;
 8004468:	61b3      	str	r3, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800446a:	461a      	mov	r2, r3
 800446c:	f000 fecd 	bl	800520a <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8004470:	2000      	movs	r0, #0
}
 8004472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcdc->TxState = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800447a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f5      	beq.n	8004470 <USBD_CDC_DataIn+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004484:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
 8004488:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800448c:	4798      	blx	r3
 800448e:	e7ef      	b.n	8004470 <USBD_CDC_DataIn+0x36>
    return (uint8_t)USBD_FAIL;
 8004490:	2003      	movs	r0, #3
 8004492:	e7ee      	b.n	8004472 <USBD_CDC_DataIn+0x38>

08004494 <USBD_CDC_Setup>:
{
 8004494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004496:	f8d0 62bc 	ldr.w	r6, [r0, #700]	@ 0x2bc
  uint8_t ifalt = 0U;
 800449a:	2300      	movs	r3, #0
{
 800449c:	4604      	mov	r4, r0
 800449e:	460d      	mov	r5, r1
  uint8_t ifalt = 0U;
 80044a0:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 80044a4:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 80044a8:	2e00      	cmp	r6, #0
 80044aa:	d05f      	beq.n	800456c <USBD_CDC_Setup+0xd8>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044ac:	780f      	ldrb	r7, [r1, #0]
 80044ae:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
 80044b2:	d025      	beq.n	8004500 <USBD_CDC_Setup+0x6c>
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	d155      	bne.n	8004564 <USBD_CDC_Setup+0xd0>
      if (req->wLength != 0U)
 80044b8:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80044ba:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength != 0U)
 80044bc:	b1d2      	cbz	r2, 80044f4 <USBD_CDC_Setup+0x60>
        if ((req->bmRequest & 0x80U) != 0U)
 80044be:	0639      	lsls	r1, r7, #24
 80044c0:	d50e      	bpl.n	80044e0 <USBD_CDC_Setup+0x4c>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80044c2:	f8d0 12c0 	ldr.w	r1, [r0, #704]	@ 0x2c0
 80044c6:	4618      	mov	r0, r3
 80044c8:	688f      	ldr	r7, [r1, #8]
 80044ca:	4631      	mov	r1, r6
 80044cc:	47b8      	blx	r7
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80044ce:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80044d0:	2a07      	cmp	r2, #7
 80044d2:	bf28      	it	cs
 80044d4:	2207      	movcs	r2, #7
 80044d6:	4631      	mov	r1, r6
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80044d8:	4620      	mov	r0, r4
 80044da:	f000 fc66 	bl	8004daa <USBD_CtlSendData>
 80044de:	e006      	b.n	80044ee <USBD_CDC_Setup+0x5a>
          hcdc->CmdOpCode = req->bRequest;
 80044e0:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80044e4:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80044e8:	4631      	mov	r1, r6
 80044ea:	f000 fc73 	bl	8004dd4 <USBD_CtlPrepareRx>
    return (uint8_t)USBD_FAIL;
 80044ee:	2000      	movs	r0, #0
}
 80044f0:	b003      	add	sp, #12
 80044f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80044f4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80044f8:	6884      	ldr	r4, [r0, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	47a0      	blx	r4
 80044fe:	e7f6      	b.n	80044ee <USBD_CDC_Setup+0x5a>
      switch (req->bRequest)
 8004500:	784b      	ldrb	r3, [r1, #1]
 8004502:	2b0b      	cmp	r3, #11
 8004504:	d82e      	bhi.n	8004564 <USBD_CDC_Setup+0xd0>
 8004506:	a201      	add	r2, pc, #4	@ (adr r2, 800450c <USBD_CDC_Setup+0x78>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	0800453d 	.word	0x0800453d
 8004510:	080044ef 	.word	0x080044ef
 8004514:	08004565 	.word	0x08004565
 8004518:	08004565 	.word	0x08004565
 800451c:	08004565 	.word	0x08004565
 8004520:	08004565 	.word	0x08004565
 8004524:	08004565 	.word	0x08004565
 8004528:	08004565 	.word	0x08004565
 800452c:	08004565 	.word	0x08004565
 8004530:	08004565 	.word	0x08004565
 8004534:	0800454d 	.word	0x0800454d
 8004538:	0800455d 	.word	0x0800455d
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800453c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004540:	2b03      	cmp	r3, #3
 8004542:	d10f      	bne.n	8004564 <USBD_CDC_Setup+0xd0>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004544:	2202      	movs	r2, #2
 8004546:	f10d 0106 	add.w	r1, sp, #6
 800454a:	e7c5      	b.n	80044d8 <USBD_CDC_Setup+0x44>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800454c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004550:	2b03      	cmp	r3, #3
 8004552:	d107      	bne.n	8004564 <USBD_CDC_Setup+0xd0>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004554:	2201      	movs	r2, #1
 8004556:	f10d 0105 	add.w	r1, sp, #5
 800455a:	e7bd      	b.n	80044d8 <USBD_CDC_Setup+0x44>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800455c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004560:	2b03      	cmp	r3, #3
 8004562:	d0c4      	beq.n	80044ee <USBD_CDC_Setup+0x5a>
          USBD_CtlError(pdev, req);
 8004564:	4629      	mov	r1, r5
 8004566:	4620      	mov	r0, r4
 8004568:	f000 fbf8 	bl	8004d5c <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800456c:	2003      	movs	r0, #3
 800456e:	e7bf      	b.n	80044f0 <USBD_CDC_Setup+0x5c>

08004570 <USBD_CDC_DeInit>:
{
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004574:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004576:	2181      	movs	r1, #129	@ 0x81
 8004578:	f000 fe11 	bl	800519e <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800457c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800457e:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004580:	4620      	mov	r0, r4
 8004582:	f000 fe0c 	bl	800519e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004586:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800458a:	2182      	movs	r1, #130	@ 0x82
 800458c:	4620      	mov	r0, r4
 800458e:	f000 fe06 	bl	800519e <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004592:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004596:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (pdev->pClassData != NULL)
 8004598:	b14b      	cbz	r3, 80045ae <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800459a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80045a2:	f8d4 02bc 	ldr.w	r0, [r4, #700]	@ 0x2bc
 80045a6:	f000 fe6f 	bl	8005288 <USBD_static_free>
    pdev->pClassData = NULL;
 80045aa:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 80045ae:	2000      	movs	r0, #0
 80045b0:	bd38      	pop	{r3, r4, r5, pc}

080045b2 <USBD_CDC_Init>:
{
 80045b2:	b570      	push	{r4, r5, r6, lr}
 80045b4:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80045b6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80045ba:	f000 fe61 	bl	8005280 <USBD_static_malloc>
  if (hcdc == NULL)
 80045be:	4605      	mov	r5, r0
    pdev->pClassData = NULL;
 80045c0:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (hcdc == NULL)
 80045c4:	b908      	cbnz	r0, 80045ca <USBD_CDC_Init+0x18>
    return (uint8_t)USBD_EMEM;
 80045c6:	2002      	movs	r0, #2
}
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045ca:	7c23      	ldrb	r3, [r4, #16]
 80045cc:	bb8b      	cbnz	r3, 8004632 <USBD_CDC_Init+0x80>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80045ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045d2:	2181      	movs	r1, #129	@ 0x81
 80045d4:	2202      	movs	r2, #2
 80045d6:	4620      	mov	r0, r4
 80045d8:	f000 fdd5 	bl	8005186 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80045dc:	2101      	movs	r1, #1
 80045de:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80045e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80045e4:	2202      	movs	r2, #2
 80045e6:	4620      	mov	r0, r4
 80045e8:	f000 fdcd 	bl	8005186 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80045ec:	2601      	movs	r6, #1
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80045ee:	2310      	movs	r3, #16
 80045f0:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80045f4:	2203      	movs	r2, #3
 80045f6:	2308      	movs	r3, #8
 80045f8:	2182      	movs	r1, #130	@ 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80045fa:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80045fe:	4620      	mov	r0, r4
 8004600:	f000 fdc1 	bl	8005186 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004604:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004608:	f8a4 604c 	strh.w	r6, [r4, #76]	@ 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4798      	blx	r3
  hcdc->TxState = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004616:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800461a:	7c23      	ldrb	r3, [r4, #16]
 800461c:	b99b      	cbnz	r3, 8004646 <USBD_CDC_Init+0x94>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800461e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004622:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8004626:	4631      	mov	r1, r6
 8004628:	4620      	mov	r0, r4
 800462a:	f000 fdf7 	bl	800521c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800462e:	2000      	movs	r0, #0
 8004630:	e7ca      	b.n	80045c8 <USBD_CDC_Init+0x16>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004632:	2340      	movs	r3, #64	@ 0x40
 8004634:	2181      	movs	r1, #129	@ 0x81
 8004636:	2202      	movs	r2, #2
 8004638:	4620      	mov	r0, r4
 800463a:	f000 fda4 	bl	8005186 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800463e:	2101      	movs	r1, #1
 8004640:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004642:	2340      	movs	r3, #64	@ 0x40
 8004644:	e7ce      	b.n	80045e4 <USBD_CDC_Init+0x32>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004646:	2340      	movs	r3, #64	@ 0x40
 8004648:	e7eb      	b.n	8004622 <USBD_CDC_Init+0x70>

0800464a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800464a:	b119      	cbz	r1, 8004654 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800464c:	f8c0 12c0 	str.w	r1, [r0, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8004650:	2000      	movs	r0, #0
 8004652:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004654:	2003      	movs	r0, #3
}
 8004656:	4770      	bx	lr

08004658 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004658:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 800465c:	b12b      	cbz	r3, 800466a <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800465e:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004662:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004666:	2000      	movs	r0, #0
 8004668:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800466a:	2003      	movs	r0, #3
}
 800466c:	4770      	bx	lr

0800466e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800466e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 8004672:	b11b      	cbz	r3, 800467c <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8004674:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004678:	2000      	movs	r0, #0
 800467a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800467c:	2003      	movs	r0, #3
}
 800467e:	4770      	bx	lr

08004680 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004680:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
{
 8004684:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8004686:	b17a      	cbz	r2, 80046a8 <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8004688:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 800468c:	2301      	movs	r3, #1
 800468e:	b96c      	cbnz	r4, 80046ac <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004690:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004694:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8004698:	62c3      	str	r3, [r0, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800469a:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 800469e:	2181      	movs	r1, #129	@ 0x81
 80046a0:	f000 fdb3 	bl	800520a <USBD_LL_Transmit>

    ret = USBD_OK;
 80046a4:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 80046a6:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80046a8:	2003      	movs	r0, #3
 80046aa:	e7fc      	b.n	80046a6 <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 80046ac:	4618      	mov	r0, r3
 80046ae:	e7fa      	b.n	80046a6 <USBD_CDC_TransmitPacket+0x26>

080046b0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046b0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
{
 80046b4:	b508      	push	{r3, lr}

  if (pdev->pClassData == NULL)
 80046b6:	b162      	cbz	r2, 80046d2 <USBD_CDC_ReceivePacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046b8:	7c03      	ldrb	r3, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046ba:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046be:	b933      	cbnz	r3, 80046ce <USBD_CDC_ReceivePacket+0x1e>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046c4:	2101      	movs	r1, #1
 80046c6:	f000 fda9 	bl	800521c <USBD_LL_PrepareReceive>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046ca:	2000      	movs	r0, #0
}
 80046cc:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046ce:	2340      	movs	r3, #64	@ 0x40
 80046d0:	e7f8      	b.n	80046c4 <USBD_CDC_ReceivePacket+0x14>
    return (uint8_t)USBD_FAIL;
 80046d2:	2003      	movs	r0, #3
 80046d4:	e7fa      	b.n	80046cc <USBD_CDC_ReceivePacket+0x1c>

080046d6 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80046d6:	b178      	cbz	r0, 80046f8 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80046de:	f8c0 32c0 	str.w	r3, [r0, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80046e2:	f8c0 32cc 	str.w	r3, [r0, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80046e6:	b109      	cbz	r1, 80046ec <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80046e8:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 80046f2:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80046f4:	f000 bcfe 	b.w	80050f4 <USBD_LL_Init>

  return ret;
}
 80046f8:	2003      	movs	r0, #3
 80046fa:	4770      	bx	lr

080046fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80046fc:	b513      	push	{r0, r1, r4, lr}
  uint16_t len = 0U;
 80046fe:	2300      	movs	r3, #0
{
 8004700:	4604      	mov	r4, r0
  uint16_t len = 0U;
 8004702:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8004706:	b161      	cbz	r1, 8004722 <USBD_RegisterClass+0x26>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004708:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass = pclass;
 800470a:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800470e:	b913      	cbnz	r3, 8004716 <USBD_RegisterClass+0x1a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004710:	2000      	movs	r0, #0
}
 8004712:	b002      	add	sp, #8
 8004714:	bd10      	pop	{r4, pc}
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004716:	f10d 0006 	add.w	r0, sp, #6
 800471a:	4798      	blx	r3
 800471c:	f8c4 02cc 	str.w	r0, [r4, #716]	@ 0x2cc
 8004720:	e7f6      	b.n	8004710 <USBD_RegisterClass+0x14>
    return USBD_FAIL;
 8004722:	2003      	movs	r0, #3
 8004724:	e7f5      	b.n	8004712 <USBD_RegisterClass+0x16>

08004726 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004726:	f000 bd25 	b.w	8005174 <USBD_LL_Start>

0800472a <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800472a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800472e:	b10b      	cbz	r3, 8004734 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4718      	bx	r3
  }

  return ret;
}
 8004734:	2003      	movs	r0, #3
 8004736:	4770      	bx	lr

08004738 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004738:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800473a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800473e:	b10b      	cbz	r3, 8004744 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004744:	2000      	movs	r0, #0
 8004746:	bd08      	pop	{r3, pc}

08004748 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800474c:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8004750:	4628      	mov	r0, r5
 8004752:	f000 faf8 	bl	8004d46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004756:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004758:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800475c:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004760:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8004764:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004768:	f001 031f 	and.w	r3, r1, #31
 800476c:	2b01      	cmp	r3, #1
 800476e:	d008      	beq.n	8004782 <USBD_LL_SetupStage+0x3a>
 8004770:	2b02      	cmp	r3, #2
 8004772:	d00c      	beq.n	800478e <USBD_LL_SetupStage+0x46>
 8004774:	b98b      	cbnz	r3, 800479a <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004776:	4629      	mov	r1, r5
 8004778:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800477a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800477e:	f000 b8ef 	b.w	8004960 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004782:	4629      	mov	r1, r5
 8004784:	4620      	mov	r0, r4
}
 8004786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800478a:	f000 ba29 	b.w	8004be0 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800478e:	4629      	mov	r1, r5
 8004790:	4620      	mov	r0, r4
}
 8004792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004796:	f000 ba47 	b.w	8004c28 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800479a:	4620      	mov	r0, r4
 800479c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
}
 80047a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80047a4:	f000 bd04 	b.w	80051b0 <USBD_LL_StallEP>

080047a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	4604      	mov	r4, r0
 80047ac:	4615      	mov	r5, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80047ae:	b9f9      	cbnz	r1, 80047f0 <USBD_LL_DataOutStage+0x48>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80047b0:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d10c      	bne.n	80047d2 <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 80047b8:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	@ 0x15c
 80047bc:	4293      	cmp	r3, r2
 80047be:	d90a      	bls.n	80047d6 <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 80047c0:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80047c2:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80047c4:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80047c8:	bf28      	it	cs
 80047ca:	461a      	movcs	r2, r3
 80047cc:	4629      	mov	r1, r5
 80047ce:	f000 fb0e 	bl	8004dee <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 80047d2:	2000      	movs	r0, #0
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047d6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d104      	bne.n	80047e8 <USBD_LL_DataOutStage+0x40>
          if (pdev->pClass->EP0_RxReady != NULL)
 80047de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	b103      	cbz	r3, 80047e8 <USBD_LL_DataOutStage+0x40>
            pdev->pClass->EP0_RxReady(pdev);
 80047e6:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80047e8:	4620      	mov	r0, r4
 80047ea:	f000 fb08 	bl	8004dfe <USBD_CtlSendStatus>
 80047ee:	e7f0      	b.n	80047d2 <USBD_LL_DataOutStage+0x2a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047f0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d1ec      	bne.n	80047d2 <USBD_LL_DataOutStage+0x2a>
      if (pdev->pClass->DataOut != NULL)
 80047f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0e7      	beq.n	80047d2 <USBD_LL_DataOutStage+0x2a>
}
 8004802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004806:	4718      	bx	r3

08004808 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4604      	mov	r4, r0
 800480c:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800480e:	460d      	mov	r5, r1
 8004810:	bbd9      	cbnz	r1, 800488a <USBD_LL_DataInStage+0x82>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004812:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 8004816:	2b02      	cmp	r3, #2
 8004818:	d10e      	bne.n	8004838 <USBD_LL_DataInStage+0x30>
    {
      if (pep->rem_length > pep->maxpacket)
 800481a:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
 800481e:	4293      	cmp	r3, r2
 8004820:	d913      	bls.n	800484a <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 8004822:	1a9a      	subs	r2, r3, r2
 8004824:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004826:	4631      	mov	r1, r6
 8004828:	f000 facc 	bl	8004dc4 <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800482c:	462b      	mov	r3, r5
 800482e:	462a      	mov	r2, r5
 8004830:	4629      	mov	r1, r5
 8004832:	4620      	mov	r0, r4
 8004834:	f000 fcf2 	bl	800521c <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004838:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d102      	bne.n	8004846 <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8004846:	2000      	movs	r0, #0
 8004848:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800484a:	d10c      	bne.n	8004866 <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 800484c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800484e:	4293      	cmp	r3, r2
 8004850:	d809      	bhi.n	8004866 <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 8004852:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
 8004856:	429a      	cmp	r2, r3
 8004858:	d205      	bcs.n	8004866 <USBD_LL_DataInStage+0x5e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800485a:	460a      	mov	r2, r1
 800485c:	f000 fab2 	bl	8004dc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004860:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 8004864:	e7e2      	b.n	800482c <USBD_LL_DataInStage+0x24>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004866:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800486a:	2b03      	cmp	r3, #3
 800486c:	d105      	bne.n	800487a <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800486e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	b10b      	cbz	r3, 800487a <USBD_LL_DataInStage+0x72>
              pdev->pClass->EP0_TxSent(pdev);
 8004876:	4620      	mov	r0, r4
 8004878:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800487a:	2180      	movs	r1, #128	@ 0x80
 800487c:	4620      	mov	r0, r4
 800487e:	f000 fc97 	bl	80051b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004882:	4620      	mov	r0, r4
 8004884:	f000 fac6 	bl	8004e14 <USBD_CtlReceiveStatus>
 8004888:	e7d6      	b.n	8004838 <USBD_LL_DataInStage+0x30>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800488a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800488e:	2b03      	cmp	r3, #3
 8004890:	d1d9      	bne.n	8004846 <USBD_LL_DataInStage+0x3e>
      if (pdev->pClass->DataIn != NULL)
 8004892:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0d4      	beq.n	8004846 <USBD_LL_DataInStage+0x3e>
}
 800489c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80048a0:	4718      	bx	r3

080048a2 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048a2:	2301      	movs	r3, #1
{
 80048a4:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048a6:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 80048aa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 80048ae:	2100      	movs	r1, #0
{
 80048b0:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 80048b2:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 80048b6:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80048b8:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  if (pdev->pClass == NULL)
 80048bc:	b1db      	cbz	r3, 80048f6 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 80048be:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
 80048c2:	b112      	cbz	r2, 80048ca <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	b103      	cbz	r3, 80048ca <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80048c8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80048ca:	2200      	movs	r2, #0
 80048cc:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80048ce:	2540      	movs	r5, #64	@ 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80048d0:	2340      	movs	r3, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80048d2:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80048d4:	4620      	mov	r0, r4
 80048d6:	f000 fc56 	bl	8005186 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80048da:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80048de:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80048e2:	462b      	mov	r3, r5
 80048e4:	2200      	movs	r2, #0
 80048e6:	2180      	movs	r1, #128	@ 0x80
 80048e8:	4620      	mov	r0, r4
 80048ea:	f000 fc4c 	bl	8005186 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80048ee:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80048f0:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 80048f2:	2000      	movs	r0, #0
}
 80048f4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80048f6:	2003      	movs	r0, #3
 80048f8:	e7fc      	b.n	80048f4 <USBD_LL_Reset+0x52>

080048fa <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80048fa:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80048fc:	2000      	movs	r0, #0
 80048fe:	4770      	bx	lr

08004900 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8004900:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800490a:	2304      	movs	r3, #4
 800490c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8004910:	2000      	movs	r0, #0
 8004912:	4770      	bx	lr

08004914 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004914:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004918:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800491a:	bf02      	ittt	eq
 800491c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8004920:	b2db      	uxtbeq	r3, r3
 8004922:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8004926:	2000      	movs	r0, #0
 8004928:	4770      	bx	lr

0800492a <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800492a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 800492e:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8004930:	b14a      	cbz	r2, 8004946 <USBD_LL_SOF+0x1c>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004932:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004936:	2b03      	cmp	r3, #3
 8004938:	d101      	bne.n	800493e <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800493a:	69d3      	ldr	r3, [r2, #28]
 800493c:	b90b      	cbnz	r3, 8004942 <USBD_LL_SOF+0x18>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800493e:	2000      	movs	r0, #0
}
 8004940:	bd08      	pop	{r3, pc}
      (void)pdev->pClass->SOF(pdev);
 8004942:	4798      	blx	r3
 8004944:	e7fb      	b.n	800493e <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 8004946:	2003      	movs	r0, #3
 8004948:	e7fa      	b.n	8004940 <USBD_LL_SOF+0x16>

0800494a <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800494a:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800494c:	2180      	movs	r1, #128	@ 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800494e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004950:	f000 fc2e 	bl	80051b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004954:	4620      	mov	r0, r4
 8004956:	2100      	movs	r1, #0
}
 8004958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800495c:	f000 bc28 	b.w	80051b0 <USBD_LL_StallEP>

08004960 <USBD_StdDevReq>:
{
 8004960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004962:	780b      	ldrb	r3, [r1, #0]
 8004964:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004968:	2b20      	cmp	r3, #32
{
 800496a:	4604      	mov	r4, r0
 800496c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800496e:	d011      	beq.n	8004994 <USBD_StdDevReq+0x34>
 8004970:	2b40      	cmp	r3, #64	@ 0x40
 8004972:	d00f      	beq.n	8004994 <USBD_StdDevReq+0x34>
 8004974:	bb6b      	cbnz	r3, 80049d2 <USBD_StdDevReq+0x72>
      switch (req->bRequest)
 8004976:	784b      	ldrb	r3, [r1, #1]
 8004978:	2b09      	cmp	r3, #9
 800497a:	d82a      	bhi.n	80049d2 <USBD_StdDevReq+0x72>
 800497c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004980:	01210107 	.word	0x01210107
 8004984:	011b0029 	.word	0x011b0029
 8004988:	00880029 	.word	0x00880029
 800498c:	00290013 	.word	0x00290013
 8004990:	00a700f1 	.word	0x00a700f1
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004994:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	4629      	mov	r1, r5
 800499c:	4620      	mov	r0, r4
}
 800499e:	b003      	add	sp, #12
 80049a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80049a4:	4718      	bx	r3
  uint16_t len = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80049ac:	884b      	ldrh	r3, [r1, #2]
 80049ae:	0a1a      	lsrs	r2, r3, #8
 80049b0:	3a01      	subs	r2, #1
 80049b2:	2a0e      	cmp	r2, #14
 80049b4:	d80d      	bhi.n	80049d2 <USBD_StdDevReq+0x72>
 80049b6:	e8df f002 	tbb	[pc, r2]
 80049ba:	2910      	.short	0x2910
 80049bc:	560c0c36 	.word	0x560c0c36
 80049c0:	0c0c0c60 	.word	0x0c0c0c60
 80049c4:	0c0c0c0c 	.word	0x0c0c0c0c
 80049c8:	08          	.byte	0x08
 80049c9:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80049ca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80049ce:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80049d0:	b933      	cbnz	r3, 80049e0 <USBD_StdDevReq+0x80>
        USBD_CtlError(pdev, req);
 80049d2:	4620      	mov	r0, r4
 80049d4:	f7ff ffb9 	bl	800494a <USBD_CtlError.constprop.0>
        break;
 80049d8:	e073      	b.n	8004ac2 <USBD_StdDevReq+0x162>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80049da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	7c20      	ldrb	r0, [r4, #16]
 80049e2:	f10d 0106 	add.w	r1, sp, #6
 80049e6:	4798      	blx	r3
  if (req->wLength != 0U)
 80049e8:	88ea      	ldrh	r2, [r5, #6]
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	f000 809c 	beq.w	8004b28 <USBD_StdDevReq+0x1c8>
    if (len != 0U)
 80049f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ec      	beq.n	80049d2 <USBD_StdDevReq+0x72>
      len = MIN(len, req->wLength);
 80049f8:	429a      	cmp	r2, r3
 80049fa:	bf28      	it	cs
 80049fc:	461a      	movcs	r2, r3
 80049fe:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004a02:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004a04:	4620      	mov	r0, r4
 8004a06:	f000 f9d0 	bl	8004daa <USBD_CtlSendData>
        break;
 8004a0a:	e05a      	b.n	8004ac2 <USBD_StdDevReq+0x162>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a0c:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004a0e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a12:	b932      	cbnz	r2, 8004a22 <USBD_StdDevReq+0xc2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004a16:	f10d 0006 	add.w	r0, sp, #6
 8004a1a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004a1c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004a1e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004a20:	e7e2      	b.n	80049e8 <USBD_StdDevReq+0x88>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	e7f7      	b.n	8004a16 <USBD_StdDevReq+0xb6>
      switch ((uint8_t)(req->wValue))
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	d8d2      	bhi.n	80049d2 <USBD_StdDevReq+0x72>
 8004a2c:	e8df f003 	tbb	[pc, r3]
 8004a30:	0f0b0703 	.word	0x0f0b0703
 8004a34:	1713      	.short	0x1713
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004a36:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	e7c8      	b.n	80049d0 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004a3e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	e7c4      	b.n	80049d0 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004a46:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	e7c0      	b.n	80049d0 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004a4e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	e7bc      	b.n	80049d0 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004a56:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	e7b8      	b.n	80049d0 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004a5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	e7b4      	b.n	80049d0 <USBD_StdDevReq+0x70>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a66:	7c03      	ldrb	r3, [r0, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1b2      	bne.n	80049d2 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004a6c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004a70:	f10d 0006 	add.w	r0, sp, #6
 8004a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a76:	4798      	blx	r3
  if (err != 0U)
 8004a78:	e7b6      	b.n	80049e8 <USBD_StdDevReq+0x88>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a7a:	7c03      	ldrb	r3, [r0, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1a8      	bne.n	80049d2 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004a80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004a84:	f10d 0006 	add.w	r0, sp, #6
 8004a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004a8c:	2307      	movs	r3, #7
 8004a8e:	e7c6      	b.n	8004a1e <USBD_StdDevReq+0xbe>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004a90:	888b      	ldrh	r3, [r1, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d19d      	bne.n	80049d2 <USBD_StdDevReq+0x72>
 8004a96:	88cb      	ldrh	r3, [r1, #6]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d19a      	bne.n	80049d2 <USBD_StdDevReq+0x72>
 8004a9c:	884d      	ldrh	r5, [r1, #2]
 8004a9e:	2d7f      	cmp	r5, #127	@ 0x7f
 8004aa0:	d897      	bhi.n	80049d2 <USBD_StdDevReq+0x72>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004aa2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d093      	beq.n	80049d2 <USBD_StdDevReq+0x72>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004aaa:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8004aac:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004ab0:	f000 fba2 	bl	80051f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f000 f9a2 	bl	8004dfe <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004aba:	b135      	cbz	r5, 8004aca <USBD_StdDevReq+0x16a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004abc:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004abe:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 8004ac2:	2500      	movs	r5, #0
}
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	b003      	add	sp, #12
 8004ac8:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e7f7      	b.n	8004abe <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8004ace:	7889      	ldrb	r1, [r1, #2]
 8004ad0:	4d42      	ldr	r5, [pc, #264]	@ (8004bdc <USBD_StdDevReq+0x27c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004ad2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004ad4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004ad6:	d903      	bls.n	8004ae0 <USBD_StdDevReq+0x180>
    USBD_CtlError(pdev, req);
 8004ad8:	f7ff ff37 	bl	800494a <USBD_CtlError.constprop.0>
    return USBD_FAIL;
 8004adc:	2503      	movs	r5, #3
 8004ade:	e7f1      	b.n	8004ac4 <USBD_StdDevReq+0x164>
  switch (pdev->dev_state)
 8004ae0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	d008      	beq.n	8004afc <USBD_StdDevReq+0x19c>
 8004aea:	2a03      	cmp	r2, #3
 8004aec:	d015      	beq.n	8004b1a <USBD_StdDevReq+0x1ba>
      USBD_CtlError(pdev, req);
 8004aee:	f7ff ff2c 	bl	800494a <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004af2:	7829      	ldrb	r1, [r5, #0]
 8004af4:	4620      	mov	r0, r4
 8004af6:	f7ff fe1f 	bl	8004738 <USBD_ClrClassConfig>
      break;
 8004afa:	e7ef      	b.n	8004adc <USBD_StdDevReq+0x17c>
      if (cfgidx != 0U)
 8004afc:	b1a1      	cbz	r1, 8004b28 <USBD_StdDevReq+0x1c8>
        pdev->dev_config = cfgidx;
 8004afe:	2101      	movs	r1, #1
 8004b00:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004b02:	f7ff fe12 	bl	800472a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004b06:	4605      	mov	r5, r0
          USBD_CtlError(pdev, req);
 8004b08:	4620      	mov	r0, r4
        if (ret != USBD_OK)
 8004b0a:	b115      	cbz	r5, 8004b12 <USBD_StdDevReq+0x1b2>
          USBD_CtlError(pdev, req);
 8004b0c:	f7ff ff1d 	bl	800494a <USBD_CtlError.constprop.0>
 8004b10:	e7d8      	b.n	8004ac4 <USBD_StdDevReq+0x164>
          (void)USBD_CtlSendStatus(pdev);
 8004b12:	f000 f974 	bl	8004dfe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e7d1      	b.n	8004abe <USBD_StdDevReq+0x15e>
      if (cfgidx == 0U)
 8004b1a:	b949      	cbnz	r1, 8004b30 <USBD_StdDevReq+0x1d0>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8004b22:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004b24:	f7ff fe08 	bl	8004738 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 f968 	bl	8004dfe <USBD_CtlSendStatus>
 8004b2e:	e7c8      	b.n	8004ac2 <USBD_StdDevReq+0x162>
      else if (cfgidx != pdev->dev_config)
 8004b30:	6841      	ldr	r1, [r0, #4]
 8004b32:	2901      	cmp	r1, #1
 8004b34:	d0f8      	beq.n	8004b28 <USBD_StdDevReq+0x1c8>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004b36:	b2c9      	uxtb	r1, r1
 8004b38:	f7ff fdfe 	bl	8004738 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004b3c:	7829      	ldrb	r1, [r5, #0]
 8004b3e:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004b40:	4620      	mov	r0, r4
 8004b42:	f7ff fdf2 	bl	800472a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004b46:	4605      	mov	r5, r0
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d0ed      	beq.n	8004b28 <USBD_StdDevReq+0x1c8>
          USBD_CtlError(pdev, req);
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7ff fefc 	bl	800494a <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004b52:	7921      	ldrb	r1, [r4, #4]
 8004b54:	4620      	mov	r0, r4
 8004b56:	f7ff fdef 	bl	8004738 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004b60:	e7b0      	b.n	8004ac4 <USBD_StdDevReq+0x164>
  if (req->wLength != 1U)
 8004b62:	88ca      	ldrh	r2, [r1, #6]
 8004b64:	2a01      	cmp	r2, #1
 8004b66:	f47f af34 	bne.w	80049d2 <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 8004b6a:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 8004b6e:	2902      	cmp	r1, #2
 8004b70:	b2cb      	uxtb	r3, r1
 8004b72:	d807      	bhi.n	8004b84 <USBD_StdDevReq+0x224>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f43f af2c 	beq.w	80049d2 <USBD_StdDevReq+0x72>
        pdev->dev_default_config = 0U;
 8004b7a:	4601      	mov	r1, r0
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f841 3f08 	str.w	r3, [r1, #8]!
 8004b82:	e73f      	b.n	8004a04 <USBD_StdDevReq+0xa4>
    switch (pdev->dev_state)
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	f47f af24 	bne.w	80049d2 <USBD_StdDevReq+0x72>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004b8a:	1d01      	adds	r1, r0, #4
 8004b8c:	e73a      	b.n	8004a04 <USBD_StdDevReq+0xa4>
  switch (pdev->dev_state)
 8004b8e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004b92:	3b01      	subs	r3, #1
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	f63f af1c 	bhi.w	80049d2 <USBD_StdDevReq+0x72>
      if (req->wLength != 0x2U)
 8004b9a:	88ca      	ldrh	r2, [r1, #6]
 8004b9c:	2a02      	cmp	r2, #2
 8004b9e:	f47f af18 	bne.w	80049d2 <USBD_StdDevReq+0x72>
      if (pdev->dev_remote_wakeup != 0U)
 8004ba2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8004ba6:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf0c      	ite	eq
 8004bac:	2301      	moveq	r3, #1
 8004bae:	2303      	movne	r3, #3
 8004bb0:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004bb4:	e726      	b.n	8004a04 <USBD_StdDevReq+0xa4>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004bb6:	884b      	ldrh	r3, [r1, #2]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d182      	bne.n	8004ac2 <USBD_StdDevReq+0x162>
        pdev->dev_remote_wakeup = 0U;
 8004bbc:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8004bc0:	e7b2      	b.n	8004b28 <USBD_StdDevReq+0x1c8>
  switch (pdev->dev_state)
 8004bc2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	f63f af02 	bhi.w	80049d2 <USBD_StdDevReq+0x72>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004bce:	884b      	ldrh	r3, [r1, #2]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	f47f af76 	bne.w	8004ac2 <USBD_StdDevReq+0x162>
        pdev->dev_remote_wakeup = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e7f0      	b.n	8004bbc <USBD_StdDevReq+0x25c>
 8004bda:	bf00      	nop
 8004bdc:	20004480 	.word	0x20004480

08004be0 <USBD_StdItfReq>:
{
 8004be0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004be2:	780b      	ldrb	r3, [r1, #0]
 8004be4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004be8:	065b      	lsls	r3, r3, #25
{
 8004bea:	4604      	mov	r4, r0
 8004bec:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bee:	d501      	bpl.n	8004bf4 <USBD_StdItfReq+0x14>
 8004bf0:	2a40      	cmp	r2, #64	@ 0x40
 8004bf2:	d115      	bne.n	8004c20 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8004bf4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d810      	bhi.n	8004c20 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004bfe:	792b      	ldrb	r3, [r5, #4]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d80d      	bhi.n	8004c20 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c04:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004c08:	4629      	mov	r1, r5
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004c10:	88ea      	ldrh	r2, [r5, #6]
 8004c12:	b922      	cbnz	r2, 8004c1e <USBD_StdItfReq+0x3e>
 8004c14:	b918      	cbnz	r0, 8004c1e <USBD_StdItfReq+0x3e>
              (void)USBD_CtlSendStatus(pdev);
 8004c16:	4620      	mov	r0, r4
 8004c18:	f000 f8f1 	bl	8004dfe <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c1c:	2000      	movs	r0, #0
}
 8004c1e:	bd38      	pop	{r3, r4, r5, pc}
            USBD_CtlError(pdev, req);
 8004c20:	4620      	mov	r0, r4
 8004c22:	f7ff fe92 	bl	800494a <USBD_CtlError.constprop.0>
 8004c26:	e7f9      	b.n	8004c1c <USBD_StdItfReq+0x3c>

08004c28 <USBD_StdEPReq>:
{
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 8004c2c:	888a      	ldrh	r2, [r1, #4]
 8004c2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c32:	2b20      	cmp	r3, #32
{
 8004c34:	4604      	mov	r4, r0
 8004c36:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c38:	d052      	beq.n	8004ce0 <USBD_StdEPReq+0xb8>
 8004c3a:	2b40      	cmp	r3, #64	@ 0x40
 8004c3c:	d050      	beq.n	8004ce0 <USBD_StdEPReq+0xb8>
 8004c3e:	bb6b      	cbnz	r3, 8004c9c <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 8004c40:	786b      	ldrb	r3, [r5, #1]
 8004c42:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8004c44:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8004c46:	d03a      	beq.n	8004cbe <USBD_StdEPReq+0x96>
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d020      	beq.n	8004c8e <USBD_StdEPReq+0x66>
 8004c4c:	bb33      	cbnz	r3, 8004c9c <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 8004c4e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	b2d8      	uxtb	r0, r3
 8004c56:	d054      	beq.n	8004d02 <USBD_StdEPReq+0xda>
 8004c58:	2803      	cmp	r0, #3
 8004c5a:	d11f      	bne.n	8004c9c <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c5c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8004c60:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004c64:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c68:	fb02 4303 	mla	r3, r2, r3, r4
              if ((ep_addr & 0x80U) == 0x80U)
 8004c6c:	d058      	beq.n	8004d20 <USBD_StdEPReq+0xf8>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004c70:	b1a3      	cbz	r3, 8004c9c <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c72:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
 8004c76:	3501      	adds	r5, #1
 8004c78:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004c7c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004c80:	064b      	lsls	r3, r1, #25
 8004c82:	d159      	bne.n	8004d38 <USBD_StdEPReq+0x110>
{
 8004c84:	2300      	movs	r3, #0
                pep->status = 0x0000U;
 8004c86:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004c88:	2202      	movs	r2, #2
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	e044      	b.n	8004d18 <USBD_StdEPReq+0xf0>
          switch (pdev->dev_state)
 8004c8e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	d02b      	beq.n	8004cf0 <USBD_StdEPReq+0xc8>
 8004c98:	2a03      	cmp	r2, #3
 8004c9a:	d003      	beq.n	8004ca4 <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f7ff fe54 	bl	800494a <USBD_CtlError.constprop.0>
              break;
 8004ca2:	e00a      	b.n	8004cba <USBD_StdEPReq+0x92>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004ca4:	886b      	ldrh	r3, [r5, #2]
 8004ca6:	b92b      	cbnz	r3, 8004cb4 <USBD_StdEPReq+0x8c>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004ca8:	064a      	lsls	r2, r1, #25
 8004caa:	d003      	beq.n	8004cb4 <USBD_StdEPReq+0x8c>
 8004cac:	88eb      	ldrh	r3, [r5, #6]
 8004cae:	b90b      	cbnz	r3, 8004cb4 <USBD_StdEPReq+0x8c>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004cb0:	f000 fa7e 	bl	80051b0 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f000 f8a2 	bl	8004dfe <USBD_CtlSendStatus>
}
 8004cba:	2000      	movs	r0, #0
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8004cbe:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	d013      	beq.n	8004cf0 <USBD_StdEPReq+0xc8>
 8004cc8:	2a03      	cmp	r2, #3
 8004cca:	d1e7      	bne.n	8004c9c <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004ccc:	886b      	ldrh	r3, [r5, #2]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f3      	bne.n	8004cba <USBD_StdEPReq+0x92>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004cd2:	064e      	lsls	r6, r1, #25
 8004cd4:	d001      	beq.n	8004cda <USBD_StdEPReq+0xb2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004cd6:	f000 fa74 	bl	80051c2 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f000 f88f 	bl	8004dfe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ce0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	689b      	ldr	r3, [r3, #8]
}
 8004cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004cee:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004cf0:	064b      	lsls	r3, r1, #25
 8004cf2:	d0d3      	beq.n	8004c9c <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004cf4:	f000 fa5c 	bl	80051b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cf8:	2180      	movs	r1, #128	@ 0x80
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f000 fa58 	bl	80051b0 <USBD_LL_StallEP>
 8004d00:	e7db      	b.n	8004cba <USBD_StdEPReq+0x92>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d02:	0649      	lsls	r1, r1, #25
 8004d04:	d1ca      	bne.n	8004c9c <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d06:	0612      	lsls	r2, r2, #24
 8004d08:	bf4c      	ite	mi
 8004d0a:	f104 0114 	addmi.w	r1, r4, #20
 8004d0e:	f504 71aa 	addpl.w	r1, r4, #340	@ 0x154
              pep->status = 0x0000U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004d16:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f000 f846 	bl	8004daa <USBD_CtlSendData>
              break;
 8004d1e:	e7cc      	b.n	8004cba <USBD_StdEPReq+0x92>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004d20:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0b9      	beq.n	8004c9c <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d28:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
 8004d2c:	2314      	movs	r3, #20
 8004d2e:	fb03 4505 	mla	r5, r3, r5, r4
 8004d32:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 8004d36:	e7a3      	b.n	8004c80 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 fa4b 	bl	80051d4 <USBD_LL_IsStallEP>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d0a0      	beq.n	8004c84 <USBD_StdEPReq+0x5c>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e79f      	b.n	8004c86 <USBD_StdEPReq+0x5e>

08004d46 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004d46:	780b      	ldrb	r3, [r1, #0]
 8004d48:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004d4a:	784b      	ldrb	r3, [r1, #1]
 8004d4c:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8004d4e:	884b      	ldrh	r3, [r1, #2]
 8004d50:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8004d52:	888b      	ldrh	r3, [r1, #4]
 8004d54:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8004d56:	88cb      	ldrh	r3, [r1, #6]
 8004d58:	80c3      	strh	r3, [r0, #6]
}
 8004d5a:	4770      	bx	lr

08004d5c <USBD_CtlError>:
{
 8004d5c:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d5e:	2180      	movs	r1, #128	@ 0x80
{
 8004d60:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d62:	f000 fa25 	bl	80051b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004d66:	4620      	mov	r0, r4
 8004d68:	2100      	movs	r1, #0
}
 8004d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8004d6e:	f000 ba1f 	b.w	80051b0 <USBD_LL_StallEP>

08004d72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004d72:	b570      	push	{r4, r5, r6, lr}
 8004d74:	460d      	mov	r5, r1
 8004d76:	4616      	mov	r6, r2
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8004d78:	4604      	mov	r4, r0
 8004d7a:	b170      	cbz	r0, 8004d9a <USBD_GetString+0x28>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004d7c:	f7fb fa50 	bl	8000220 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004d80:	b2c3      	uxtb	r3, r0
 8004d82:	3301      	adds	r3, #1
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004d88:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	706b      	strb	r3, [r5, #1]
  while (*pdesc != (uint8_t)'\0')
 8004d8e:	3c01      	subs	r4, #1
  idx++;
 8004d90:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8004d92:	2100      	movs	r1, #0
  while (*pdesc != (uint8_t)'\0')
 8004d94:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8004d98:	b902      	cbnz	r2, 8004d9c <USBD_GetString+0x2a>
}
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
    unicode[idx] = *pdesc;
 8004d9c:	54ea      	strb	r2, [r5, r3]
    idx++;
 8004d9e:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8004da0:	b2d2      	uxtb	r2, r2
    idx++;
 8004da2:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8004da4:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e7f4      	b.n	8004d94 <USBD_GetString+0x22>

08004daa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004daa:	b510      	push	{r4, lr}
 8004dac:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004dae:	2202      	movs	r2, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004db0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004db4:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004db8:	460a      	mov	r2, r1
 8004dba:	2100      	movs	r1, #0
 8004dbc:	f000 fa25 	bl	800520a <USBD_LL_Transmit>

  return USBD_OK;
}
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	bd10      	pop	{r4, pc}

08004dc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004dc4:	b508      	push	{r3, lr}
 8004dc6:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004dc8:	460a      	mov	r2, r1
 8004dca:	2100      	movs	r1, #0
 8004dcc:	f000 fa1d 	bl	800520a <USBD_LL_Transmit>

  return USBD_OK;
}
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	bd08      	pop	{r3, pc}

08004dd4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004dd4:	b510      	push	{r4, lr}
 8004dd6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004dd8:	2203      	movs	r2, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004dda:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004dde:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004de2:	460a      	mov	r2, r1
 8004de4:	2100      	movs	r1, #0
 8004de6:	f000 fa19 	bl	800521c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004dea:	2000      	movs	r0, #0
 8004dec:	bd10      	pop	{r4, pc}

08004dee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004dee:	b508      	push	{r3, lr}
 8004df0:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004df2:	460a      	mov	r2, r1
 8004df4:	2100      	movs	r1, #0
 8004df6:	f000 fa11 	bl	800521c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	bd08      	pop	{r3, pc}

08004dfe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004dfe:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004e00:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004e02:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004e04:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004e08:	4619      	mov	r1, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f000 f9fd 	bl	800520a <USBD_LL_Transmit>

  return USBD_OK;
}
 8004e10:	2000      	movs	r0, #0
 8004e12:	bd08      	pop	{r3, pc}

08004e14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004e14:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004e16:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e18:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004e1a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e1e:	4619      	mov	r1, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	f000 f9fb 	bl	800521c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e26:	2000      	movs	r0, #0
 8004e28:	bd08      	pop	{r3, pc}
	...

08004e2c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8004e2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8004e2e:	490f      	ldr	r1, [pc, #60]	@ (8004e6c <MX_USB_Device_Init+0x40>)
 8004e30:	480f      	ldr	r0, [pc, #60]	@ (8004e70 <MX_USB_Device_Init+0x44>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	f7ff fc4f 	bl	80046d6 <USBD_Init>
 8004e38:	b108      	cbz	r0, 8004e3e <MX_USB_Device_Init+0x12>
    Error_Handler();
 8004e3a:	f7fb fcb3 	bl	80007a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8004e3e:	490d      	ldr	r1, [pc, #52]	@ (8004e74 <MX_USB_Device_Init+0x48>)
 8004e40:	480b      	ldr	r0, [pc, #44]	@ (8004e70 <MX_USB_Device_Init+0x44>)
 8004e42:	f7ff fc5b 	bl	80046fc <USBD_RegisterClass>
 8004e46:	b108      	cbz	r0, 8004e4c <MX_USB_Device_Init+0x20>
    Error_Handler();
 8004e48:	f7fb fcac 	bl	80007a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8004e4c:	490a      	ldr	r1, [pc, #40]	@ (8004e78 <MX_USB_Device_Init+0x4c>)
 8004e4e:	4808      	ldr	r0, [pc, #32]	@ (8004e70 <MX_USB_Device_Init+0x44>)
 8004e50:	f7ff fbfb 	bl	800464a <USBD_CDC_RegisterInterface>
 8004e54:	b108      	cbz	r0, 8004e5a <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8004e56:	f7fb fca5 	bl	80007a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8004e5a:	4805      	ldr	r0, [pc, #20]	@ (8004e70 <MX_USB_Device_Init+0x44>)
 8004e5c:	f7ff fc63 	bl	8004726 <USBD_Start>
 8004e60:	b118      	cbz	r0, 8004e6a <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8004e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004e66:	f7fb bc9d 	b.w	80007a4 <Error_Handler>
}
 8004e6a:	bd08      	pop	{r3, pc}
 8004e6c:	20000164 	.word	0x20000164
 8004e70:	20004484 	.word	0x20004484
 8004e74:	200000d8 	.word	0x200000d8
 8004e78:	2000011c 	.word	0x2000011c

08004e7c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	4770      	bx	lr

08004e80 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004e80:	2000      	movs	r0, #0
 8004e82:	4770      	bx	lr

08004e84 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8004e84:	2000      	movs	r0, #0
 8004e86:	4770      	bx	lr

08004e88 <CDC_Receive_FS>:
{
 8004e88:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004e8a:	4c05      	ldr	r4, [pc, #20]	@ (8004ea0 <CDC_Receive_FS+0x18>)
{
 8004e8c:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff fbed 	bl	800466e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7ff fc0b 	bl	80046b0 <USBD_CDC_ReceivePacket>
}
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	bd10      	pop	{r4, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20004484 	.word	0x20004484

08004ea4 <CDC_Init_FS>:
{
 8004ea4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004ea6:	4c06      	ldr	r4, [pc, #24]	@ (8004ec0 <CDC_Init_FS+0x1c>)
 8004ea8:	4906      	ldr	r1, [pc, #24]	@ (8004ec4 <CDC_Init_FS+0x20>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	4620      	mov	r0, r4
 8004eae:	f7ff fbd3 	bl	8004658 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004eb2:	4905      	ldr	r1, [pc, #20]	@ (8004ec8 <CDC_Init_FS+0x24>)
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7ff fbda 	bl	800466e <USBD_CDC_SetRxBuffer>
}
 8004eba:	2000      	movs	r0, #0
 8004ebc:	bd10      	pop	{r4, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20004484 	.word	0x20004484
 8004ec4:	20004754 	.word	0x20004754
 8004ec8:	20004b54 	.word	0x20004b54

08004ecc <CDC_Transmit_FS>:
{
 8004ecc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004ece:	4c09      	ldr	r4, [pc, #36]	@ (8004ef4 <CDC_Transmit_FS+0x28>)
 8004ed0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 8004ed4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
{
 8004ed8:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8004eda:	b943      	cbnz	r3, 8004eee <CDC_Transmit_FS+0x22>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004edc:	4601      	mov	r1, r0
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f7ff fbba 	bl	8004658 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004ee4:	4620      	mov	r0, r4
}
 8004ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004eea:	f7ff bbc9 	b.w	8004680 <USBD_CDC_TransmitPacket>
}
 8004eee:	2001      	movs	r0, #1
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20004484 	.word	0x20004484

08004ef8 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8004ef8:	2312      	movs	r3, #18
  return USBD_CDC_DeviceDesc;
}
 8004efa:	4801      	ldr	r0, [pc, #4]	@ (8004f00 <USBD_CDC_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_CDC_DeviceDesc);
 8004efc:	800b      	strh	r3, [r1, #0]
}
 8004efe:	4770      	bx	lr
 8004f00:	20000150 	.word	0x20000150

08004f04 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004f04:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004f06:	4801      	ldr	r0, [pc, #4]	@ (8004f0c <USBD_CDC_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004f08:	800b      	strh	r3, [r1, #0]
}
 8004f0a:	4770      	bx	lr
 8004f0c:	2000014c 	.word	0x2000014c

08004f10 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004f10:	2300      	movs	r3, #0
{
 8004f12:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004f14:	1c4d      	adds	r5, r1, #1
 8004f16:	461e      	mov	r6, r3
  for (idx = 0; idx < len; idx++)
 8004f18:	b2dc      	uxtb	r4, r3
 8004f1a:	42a2      	cmp	r2, r4
 8004f1c:	d800      	bhi.n	8004f20 <IntToUnicode+0x10>
  }
}
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[2 * idx] = (value >> 28) + '0';
 8004f20:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8004f22:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8004f26:	bf34      	ite	cc
 8004f28:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004f2a:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004f2c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    value = value << 4;
 8004f30:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8004f32:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8004f36:	3301      	adds	r3, #1
 8004f38:	e7ee      	b.n	8004f18 <IntToUnicode+0x8>
	...

08004f3c <USBD_CDC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004f3c:	231a      	movs	r3, #26
{
 8004f3e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004f40:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004f42:	4b0a      	ldr	r3, [pc, #40]	@ (8004f6c <USBD_CDC_SerialStrDescriptor+0x30>)
 8004f44:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
  deviceserial0 += deviceserial2;
 8004f48:	f8d3 2598 	ldr.w	r2, [r3, #1432]	@ 0x598
  if (deviceserial0 != 0)
 8004f4c:	1880      	adds	r0, r0, r2
 8004f4e:	d00a      	beq.n	8004f66 <USBD_CDC_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004f50:	f8d3 4594 	ldr.w	r4, [r3, #1428]	@ 0x594
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004f54:	4906      	ldr	r1, [pc, #24]	@ (8004f70 <USBD_CDC_SerialStrDescriptor+0x34>)
 8004f56:	2208      	movs	r2, #8
 8004f58:	f7ff ffda 	bl	8004f10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	3110      	adds	r1, #16
 8004f60:	4620      	mov	r0, r4
 8004f62:	f7ff ffd5 	bl	8004f10 <IntToUnicode>
}
 8004f66:	4803      	ldr	r0, [pc, #12]	@ (8004f74 <USBD_CDC_SerialStrDescriptor+0x38>)
 8004f68:	bd10      	pop	{r4, pc}
 8004f6a:	bf00      	nop
 8004f6c:	1fff7000 	.word	0x1fff7000
 8004f70:	20000132 	.word	0x20000132
 8004f74:	20000130 	.word	0x20000130

08004f78 <USBD_CDC_ManufacturerStrDescriptor>:
{
 8004f78:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004f7a:	4c04      	ldr	r4, [pc, #16]	@ (8004f8c <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8004f7c:	4804      	ldr	r0, [pc, #16]	@ (8004f90 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
{
 8004f7e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004f80:	4621      	mov	r1, r4
 8004f82:	f7ff fef6 	bl	8004d72 <USBD_GetString>
}
 8004f86:	4620      	mov	r0, r4
 8004f88:	bd10      	pop	{r4, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20004f54 	.word	0x20004f54
 8004f90:	08007714 	.word	0x08007714

08004f94 <USBD_CDC_ProductStrDescriptor>:
{
 8004f94:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004f96:	4c04      	ldr	r4, [pc, #16]	@ (8004fa8 <USBD_CDC_ProductStrDescriptor+0x14>)
 8004f98:	4804      	ldr	r0, [pc, #16]	@ (8004fac <USBD_CDC_ProductStrDescriptor+0x18>)
{
 8004f9a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	f7ff fee8 	bl	8004d72 <USBD_GetString>
}
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20004f54 	.word	0x20004f54
 8004fac:	08007727 	.word	0x08007727

08004fb0 <USBD_CDC_ConfigStrDescriptor>:
{
 8004fb0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004fb2:	4c04      	ldr	r4, [pc, #16]	@ (8004fc4 <USBD_CDC_ConfigStrDescriptor+0x14>)
 8004fb4:	4804      	ldr	r0, [pc, #16]	@ (8004fc8 <USBD_CDC_ConfigStrDescriptor+0x18>)
{
 8004fb6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004fb8:	4621      	mov	r1, r4
 8004fba:	f7ff feda 	bl	8004d72 <USBD_GetString>
}
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	bd10      	pop	{r4, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20004f54 	.word	0x20004f54
 8004fc8:	0800773d 	.word	0x0800773d

08004fcc <USBD_CDC_InterfaceStrDescriptor>:
{
 8004fcc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004fce:	4c04      	ldr	r4, [pc, #16]	@ (8004fe0 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 8004fd0:	4804      	ldr	r0, [pc, #16]	@ (8004fe4 <USBD_CDC_InterfaceStrDescriptor+0x18>)
{
 8004fd2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	f7ff fecc 	bl	8004d72 <USBD_GetString>
}
 8004fda:	4620      	mov	r0, r4
 8004fdc:	bd10      	pop	{r4, pc}
 8004fde:	bf00      	nop
 8004fe0:	20004f54 	.word	0x20004f54
 8004fe4:	08007748 	.word	0x08007748

08004fe8 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004fe8:	b118      	cbz	r0, 8004ff2 <USBD_Get_USB_Status+0xa>
 8004fea:	2802      	cmp	r0, #2
 8004fec:	bf0c      	ite	eq
 8004fee:	2001      	moveq	r0, #1
 8004ff0:	2003      	movne	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_PCD_MspInit>:
{
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	b092      	sub	sp, #72	@ 0x48
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ffa:	2244      	movs	r2, #68	@ 0x44
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	a801      	add	r0, sp, #4
 8005000:	f001 f9ae 	bl	8006360 <memset>
  if(pcdHandle->Instance==USB)
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	4b10      	ldr	r3, [pc, #64]	@ (8005048 <HAL_PCD_MspInit+0x54>)
 8005008:	429a      	cmp	r2, r3
 800500a:	d11a      	bne.n	8005042 <HAL_PCD_MspInit+0x4e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800500c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005010:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005012:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005014:	f7fe fa34 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 8005018:	b108      	cbz	r0, 800501e <HAL_PCD_MspInit+0x2a>
      Error_Handler();
 800501a:	f7fb fbc3 	bl	80007a4 <Error_Handler>
    __HAL_RCC_USB_CLK_ENABLE();
 800501e:	4b0b      	ldr	r3, [pc, #44]	@ (800504c <HAL_PCD_MspInit+0x58>)
 8005020:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005022:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005026:	659a      	str	r2, [r3, #88]	@ 0x58
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800502a:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800502c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005030:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8005032:	2014      	movs	r0, #20
 8005034:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8005036:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8005038:	f7fc fb18 	bl	800166c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800503c:	2014      	movs	r0, #20
 800503e:	f7fc fb47 	bl	80016d0 <HAL_NVIC_EnableIRQ>
}
 8005042:	b012      	add	sp, #72	@ 0x48
 8005044:	bd10      	pop	{r4, pc}
 8005046:	bf00      	nop
 8005048:	40005c00 	.word	0x40005c00
 800504c:	40021000 	.word	0x40021000

08005050 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005050:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 8005054:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 8005058:	f7ff bb76 	b.w	8004748 <USBD_LL_SetupStage>

0800505c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800505c:	2328      	movs	r3, #40	@ 0x28
 800505e:	fb03 0301 	mla	r3, r3, r1, r0
 8005062:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 8005066:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800506a:	f7ff bb9d 	b.w	80047a8 <USBD_LL_DataOutStage>

0800506e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800506e:	2328      	movs	r3, #40	@ 0x28
 8005070:	fb03 0301 	mla	r3, r3, r1, r0
 8005074:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 8005078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800507a:	f7ff bbc5 	b.w	8004808 <USBD_LL_DataInStage>

0800507e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800507e:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 8005082:	f7ff bc52 	b.w	800492a <USBD_LL_SOF>

08005086 <HAL_PCD_ResetCallback>:
{
 8005086:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005088:	7943      	ldrb	r3, [r0, #5]
 800508a:	2b02      	cmp	r3, #2
{
 800508c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800508e:	d001      	beq.n	8005094 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8005090:	f7fb fb88 	bl	80007a4 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005094:	f8d4 02d8 	ldr.w	r0, [r4, #728]	@ 0x2d8
 8005098:	2101      	movs	r1, #1
 800509a:	f7ff fc2e 	bl	80048fa <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800509e:	f8d4 02d8 	ldr.w	r0, [r4, #728]	@ 0x2d8
}
 80050a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80050a6:	f7ff bbfc 	b.w	80048a2 <USBD_LL_Reset>
	...

080050ac <HAL_PCD_SuspendCallback>:
{
 80050ac:	b510      	push	{r4, lr}
 80050ae:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80050b0:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 80050b4:	f7ff fc24 	bl	8004900 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80050b8:	7a63      	ldrb	r3, [r4, #9]
 80050ba:	b123      	cbz	r3, 80050c6 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80050bc:	4a02      	ldr	r2, [pc, #8]	@ (80050c8 <HAL_PCD_SuspendCallback+0x1c>)
 80050be:	6913      	ldr	r3, [r2, #16]
 80050c0:	f043 0306 	orr.w	r3, r3, #6
 80050c4:	6113      	str	r3, [r2, #16]
}
 80050c6:	bd10      	pop	{r4, pc}
 80050c8:	e000ed00 	.word	0xe000ed00

080050cc <HAL_PCD_ResumeCallback>:
{
 80050cc:	b510      	push	{r4, lr}
  if (hpcd->Init.low_power_enable)
 80050ce:	7a43      	ldrb	r3, [r0, #9]
{
 80050d0:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80050d2:	b133      	cbz	r3, 80050e2 <HAL_PCD_ResumeCallback+0x16>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80050d4:	4a06      	ldr	r2, [pc, #24]	@ (80050f0 <HAL_PCD_ResumeCallback+0x24>)
 80050d6:	6913      	ldr	r3, [r2, #16]
 80050d8:	f023 0306 	bic.w	r3, r3, #6
 80050dc:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 80050de:	f7fb f959 	bl	8000394 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80050e2:	f8d4 02d8 	ldr.w	r0, [r4, #728]	@ 0x2d8
}
 80050e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80050ea:	f7ff bc13 	b.w	8004914 <USBD_LL_Resume>
 80050ee:	bf00      	nop
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <USBD_LL_Init>:
{
 80050f4:	b510      	push	{r4, lr}
 80050f6:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80050f8:	481c      	ldr	r0, [pc, #112]	@ (800516c <USBD_LL_Init+0x78>)
  hpcd_USB_FS.Instance = USB;
 80050fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005170 <USBD_LL_Init+0x7c>)
 80050fc:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80050fe:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005102:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005104:	2302      	movs	r3, #2
  hpcd_USB_FS.pData = pdev;
 8005106:	f8c0 42d8 	str.w	r4, [r0, #728]	@ 0x2d8
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800510a:	71c3      	strb	r3, [r0, #7]
  pdev->pData = &hpcd_USB_FS;
 800510c:	f8c4 02c4 	str.w	r0, [r4, #708]	@ 0x2c4
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8005110:	2300      	movs	r3, #0
 8005112:	6083      	str	r3, [r0, #8]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005114:	f7fc ff87 	bl	8002026 <HAL_PCD_Init>
 8005118:	b108      	cbz	r0, 800511e <USBD_LL_Init+0x2a>
    Error_Handler( );
 800511a:	f7fb fb43 	bl	80007a4 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800511e:	2200      	movs	r2, #0
 8005120:	4611      	mov	r1, r2
 8005122:	f8d4 02c4 	ldr.w	r0, [r4, #708]	@ 0x2c4
 8005126:	2318      	movs	r3, #24
 8005128:	f7fd fdde 	bl	8002ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800512c:	f8d4 02c4 	ldr.w	r0, [r4, #708]	@ 0x2c4
 8005130:	2358      	movs	r3, #88	@ 0x58
 8005132:	2200      	movs	r2, #0
 8005134:	2180      	movs	r1, #128	@ 0x80
 8005136:	f7fd fdd7 	bl	8002ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800513a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	@ 0x2c4
 800513e:	23c0      	movs	r3, #192	@ 0xc0
 8005140:	2200      	movs	r2, #0
 8005142:	2181      	movs	r1, #129	@ 0x81
 8005144:	f7fd fdd0 	bl	8002ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005148:	f8d4 02c4 	ldr.w	r0, [r4, #708]	@ 0x2c4
 800514c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8005150:	2200      	movs	r2, #0
 8005152:	2101      	movs	r1, #1
 8005154:	f7fd fdc8 	bl	8002ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005158:	f8d4 02c4 	ldr.w	r0, [r4, #708]	@ 0x2c4
 800515c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005160:	2200      	movs	r2, #0
 8005162:	2182      	movs	r1, #130	@ 0x82
 8005164:	f7fd fdc0 	bl	8002ce8 <HAL_PCDEx_PMAConfig>
}
 8005168:	2000      	movs	r0, #0
 800516a:	bd10      	pop	{r4, pc}
 800516c:	20005374 	.word	0x20005374
 8005170:	40005c00 	.word	0x40005c00

08005174 <USBD_LL_Start>:
{
 8005174:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005176:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 800517a:	f7fc ffa8 	bl	80020ce <HAL_PCD_Start>
}
 800517e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005182:	f7ff bf31 	b.w	8004fe8 <USBD_Get_USB_Status>

08005186 <USBD_LL_OpenEP>:
{
 8005186:	b510      	push	{r4, lr}
 8005188:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800518a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
{
 800518e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005190:	4623      	mov	r3, r4
 8005192:	f7fd fca7 	bl	8002ae4 <HAL_PCD_EP_Open>
}
 8005196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800519a:	f7ff bf25 	b.w	8004fe8 <USBD_Get_USB_Status>

0800519e <USBD_LL_CloseEP>:
{
 800519e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80051a0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80051a4:	f7fd fcd2 	bl	8002b4c <HAL_PCD_EP_Close>
}
 80051a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80051ac:	f7ff bf1c 	b.w	8004fe8 <USBD_Get_USB_Status>

080051b0 <USBD_LL_StallEP>:
{
 80051b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80051b2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80051b6:	f7fd fd30 	bl	8002c1a <HAL_PCD_EP_SetStall>
}
 80051ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80051be:	f7ff bf13 	b.w	8004fe8 <USBD_Get_USB_Status>

080051c2 <USBD_LL_ClearStallEP>:
{
 80051c2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80051c4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80051c8:	f7fd fd57 	bl	8002c7a <HAL_PCD_EP_ClrStall>
}
 80051cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80051d0:	f7ff bf0a 	b.w	8004fe8 <USBD_Get_USB_Status>

080051d4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80051d4:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80051d8:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80051dc:	f04f 0228 	mov.w	r2, #40	@ 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80051e0:	bf1b      	ittet	ne
 80051e2:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 80051e6:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80051ea:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80051ee:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80051f0:	bf08      	it	eq
 80051f2:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 80051f6:	4770      	bx	lr

080051f8 <USBD_LL_SetUSBAddress>:
{
 80051f8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80051fa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80051fe:	f7fc ff7b 	bl	80020f8 <HAL_PCD_SetAddress>
}
 8005202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005206:	f7ff beef 	b.w	8004fe8 <USBD_Get_USB_Status>

0800520a <USBD_LL_Transmit>:
{
 800520a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800520c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8005210:	f7fd fce8 	bl	8002be4 <HAL_PCD_EP_Transmit>
}
 8005214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005218:	f7ff bee6 	b.w	8004fe8 <USBD_Get_USB_Status>

0800521c <USBD_LL_PrepareReceive>:
{
 800521c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800521e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8005222:	f7fd fcc1 	bl	8002ba8 <HAL_PCD_EP_Receive>
}
 8005226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800522a:	f7ff bedd 	b.w	8004fe8 <USBD_Get_USB_Status>

0800522e <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800522e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8005232:	f7fd bccf 	b.w	8002bd4 <HAL_PCD_EP_GetRxCount>
	...

08005238 <HAL_PCDEx_LPM_Callback>:
{
 8005238:	b510      	push	{r4, lr}
 800523a:	4604      	mov	r4, r0
  switch (msg)
 800523c:	b111      	cbz	r1, 8005244 <HAL_PCDEx_LPM_Callback+0xc>
 800523e:	2901      	cmp	r1, #1
 8005240:	d00f      	beq.n	8005262 <HAL_PCDEx_LPM_Callback+0x2a>
}
 8005242:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8005244:	7a43      	ldrb	r3, [r0, #9]
 8005246:	b133      	cbz	r3, 8005256 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 8005248:	f7fb f8a4 	bl	8000394 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800524c:	4a0b      	ldr	r2, [pc, #44]	@ (800527c <HAL_PCDEx_LPM_Callback+0x44>)
 800524e:	6913      	ldr	r3, [r2, #16]
 8005250:	f023 0306 	bic.w	r3, r3, #6
 8005254:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8005256:	f8d4 02d8 	ldr.w	r0, [r4, #728]	@ 0x2d8
}
 800525a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 800525e:	f7ff bb59 	b.w	8004914 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8005262:	f8d0 02d8 	ldr.w	r0, [r0, #728]	@ 0x2d8
 8005266:	f7ff fb4b 	bl	8004900 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800526a:	7a63      	ldrb	r3, [r4, #9]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0e8      	beq.n	8005242 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005270:	4a02      	ldr	r2, [pc, #8]	@ (800527c <HAL_PCDEx_LPM_Callback+0x44>)
 8005272:	6913      	ldr	r3, [r2, #16]
 8005274:	f043 0306 	orr.w	r3, r3, #6
 8005278:	6113      	str	r3, [r2, #16]
}
 800527a:	e7e2      	b.n	8005242 <HAL_PCDEx_LPM_Callback+0xa>
 800527c:	e000ed00 	.word	0xe000ed00

08005280 <USBD_static_malloc>:
}
 8005280:	4800      	ldr	r0, [pc, #0]	@ (8005284 <USBD_static_malloc+0x4>)
 8005282:	4770      	bx	lr
 8005284:	20005154 	.word	0x20005154

08005288 <USBD_static_free>:
}
 8005288:	4770      	bx	lr
	...

0800528c <arm_rfft_32_fast_init_f32>:
 800528c:	b178      	cbz	r0, 80052ae <arm_rfft_32_fast_init_f32+0x22>
 800528e:	b430      	push	{r4, r5}
 8005290:	4908      	ldr	r1, [pc, #32]	@ (80052b4 <arm_rfft_32_fast_init_f32+0x28>)
 8005292:	4a09      	ldr	r2, [pc, #36]	@ (80052b8 <arm_rfft_32_fast_init_f32+0x2c>)
 8005294:	2310      	movs	r3, #16
 8005296:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800529a:	8003      	strh	r3, [r0, #0]
 800529c:	2520      	movs	r5, #32
 800529e:	2414      	movs	r4, #20
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <arm_rfft_32_fast_init_f32+0x30>)
 80052a2:	8205      	strh	r5, [r0, #16]
 80052a4:	8184      	strh	r4, [r0, #12]
 80052a6:	6143      	str	r3, [r0, #20]
 80052a8:	bc30      	pop	{r4, r5}
 80052aa:	2000      	movs	r0, #0
 80052ac:	4770      	bx	lr
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295
 80052b2:	4770      	bx	lr
 80052b4:	08008708 	.word	0x08008708
 80052b8:	0800d040 	.word	0x0800d040
 80052bc:	08015dc0 	.word	0x08015dc0

080052c0 <arm_rfft_64_fast_init_f32>:
 80052c0:	b178      	cbz	r0, 80052e2 <arm_rfft_64_fast_init_f32+0x22>
 80052c2:	b430      	push	{r4, r5}
 80052c4:	4908      	ldr	r1, [pc, #32]	@ (80052e8 <arm_rfft_64_fast_init_f32+0x28>)
 80052c6:	4a09      	ldr	r2, [pc, #36]	@ (80052ec <arm_rfft_64_fast_init_f32+0x2c>)
 80052c8:	2320      	movs	r3, #32
 80052ca:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80052ce:	8003      	strh	r3, [r0, #0]
 80052d0:	2540      	movs	r5, #64	@ 0x40
 80052d2:	2430      	movs	r4, #48	@ 0x30
 80052d4:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <arm_rfft_64_fast_init_f32+0x30>)
 80052d6:	8205      	strh	r5, [r0, #16]
 80052d8:	8184      	strh	r4, [r0, #12]
 80052da:	6143      	str	r3, [r0, #20]
 80052dc:	bc30      	pop	{r4, r5}
 80052de:	2000      	movs	r0, #0
 80052e0:	4770      	bx	lr
 80052e2:	f04f 30ff 	mov.w	r0, #4294967295
 80052e6:	4770      	bx	lr
 80052e8:	0800a860 	.word	0x0800a860
 80052ec:	080118c0 	.word	0x080118c0
 80052f0:	0801a640 	.word	0x0801a640

080052f4 <arm_rfft_256_fast_init_f32>:
 80052f4:	b180      	cbz	r0, 8005318 <arm_rfft_256_fast_init_f32+0x24>
 80052f6:	b430      	push	{r4, r5}
 80052f8:	4909      	ldr	r1, [pc, #36]	@ (8005320 <arm_rfft_256_fast_init_f32+0x2c>)
 80052fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005324 <arm_rfft_256_fast_init_f32+0x30>)
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005302:	8003      	strh	r3, [r0, #0]
 8005304:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8005308:	24d0      	movs	r4, #208	@ 0xd0
 800530a:	4b07      	ldr	r3, [pc, #28]	@ (8005328 <arm_rfft_256_fast_init_f32+0x34>)
 800530c:	8205      	strh	r5, [r0, #16]
 800530e:	8184      	strh	r4, [r0, #12]
 8005310:	6143      	str	r3, [r0, #20]
 8005312:	bc30      	pop	{r4, r5}
 8005314:	2000      	movs	r0, #0
 8005316:	4770      	bx	lr
 8005318:	f04f 30ff 	mov.w	r0, #4294967295
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	08008568 	.word	0x08008568
 8005324:	0800cc40 	.word	0x0800cc40
 8005328:	080159c0 	.word	0x080159c0

0800532c <arm_rfft_512_fast_init_f32>:
 800532c:	b190      	cbz	r0, 8005354 <arm_rfft_512_fast_init_f32+0x28>
 800532e:	b430      	push	{r4, r5}
 8005330:	490a      	ldr	r1, [pc, #40]	@ (800535c <arm_rfft_512_fast_init_f32+0x30>)
 8005332:	4a0b      	ldr	r2, [pc, #44]	@ (8005360 <arm_rfft_512_fast_init_f32+0x34>)
 8005334:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005338:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800533c:	8003      	strh	r3, [r0, #0]
 800533e:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8005342:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8005346:	4b07      	ldr	r3, [pc, #28]	@ (8005364 <arm_rfft_512_fast_init_f32+0x38>)
 8005348:	8205      	strh	r5, [r0, #16]
 800534a:	8184      	strh	r4, [r0, #12]
 800534c:	6143      	str	r3, [r0, #20]
 800534e:	bc30      	pop	{r4, r5}
 8005350:	2000      	movs	r0, #0
 8005352:	4770      	bx	lr
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	0800a4f0 	.word	0x0800a4f0
 8005360:	080110c0 	.word	0x080110c0
 8005364:	08019e40 	.word	0x08019e40

08005368 <arm_rfft_1024_fast_init_f32>:
 8005368:	b190      	cbz	r0, 8005390 <arm_rfft_1024_fast_init_f32+0x28>
 800536a:	b430      	push	{r4, r5}
 800536c:	490a      	ldr	r1, [pc, #40]	@ (8005398 <arm_rfft_1024_fast_init_f32+0x30>)
 800536e:	4a0b      	ldr	r2, [pc, #44]	@ (800539c <arm_rfft_1024_fast_init_f32+0x34>)
 8005370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005374:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005378:	8003      	strh	r3, [r0, #0]
 800537a:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800537e:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8005382:	4b07      	ldr	r3, [pc, #28]	@ (80053a0 <arm_rfft_1024_fast_init_f32+0x38>)
 8005384:	8205      	strh	r5, [r0, #16]
 8005386:	8184      	strh	r4, [r0, #12]
 8005388:	6143      	str	r3, [r0, #20]
 800538a:	bc30      	pop	{r4, r5}
 800538c:	2000      	movs	r0, #0
 800538e:	4770      	bx	lr
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	0800a8c0 	.word	0x0800a8c0
 800539c:	080119c0 	.word	0x080119c0
 80053a0:	080129c0 	.word	0x080129c0

080053a4 <arm_rfft_2048_fast_init_f32>:
 80053a4:	b190      	cbz	r0, 80053cc <arm_rfft_2048_fast_init_f32+0x28>
 80053a6:	b430      	push	{r4, r5}
 80053a8:	490a      	ldr	r1, [pc, #40]	@ (80053d4 <arm_rfft_2048_fast_init_f32+0x30>)
 80053aa:	4a0b      	ldr	r2, [pc, #44]	@ (80053d8 <arm_rfft_2048_fast_init_f32+0x34>)
 80053ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053b0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80053b4:	8003      	strh	r3, [r0, #0]
 80053b6:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80053ba:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80053be:	4b07      	ldr	r3, [pc, #28]	@ (80053dc <arm_rfft_2048_fast_init_f32+0x38>)
 80053c0:	8205      	strh	r5, [r0, #16]
 80053c2:	8184      	strh	r4, [r0, #12]
 80053c4:	6143      	str	r3, [r0, #20]
 80053c6:	bc30      	pop	{r4, r5}
 80053c8:	2000      	movs	r0, #0
 80053ca:	4770      	bx	lr
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	08007758 	.word	0x08007758
 80053d8:	0800ac40 	.word	0x0800ac40
 80053dc:	080139c0 	.word	0x080139c0

080053e0 <arm_rfft_4096_fast_init_f32>:
 80053e0:	b190      	cbz	r0, 8005408 <arm_rfft_4096_fast_init_f32+0x28>
 80053e2:	b430      	push	{r4, r5}
 80053e4:	490a      	ldr	r1, [pc, #40]	@ (8005410 <arm_rfft_4096_fast_init_f32+0x30>)
 80053e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005414 <arm_rfft_4096_fast_init_f32+0x34>)
 80053e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80053ec:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80053f0:	8003      	strh	r3, [r0, #0]
 80053f2:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80053f6:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80053fa:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <arm_rfft_4096_fast_init_f32+0x38>)
 80053fc:	8205      	strh	r5, [r0, #16]
 80053fe:	8184      	strh	r4, [r0, #12]
 8005400:	6143      	str	r3, [r0, #20]
 8005402:	bc30      	pop	{r4, r5}
 8005404:	2000      	movs	r0, #0
 8005406:	4770      	bx	lr
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	08008730 	.word	0x08008730
 8005414:	0800d0c0 	.word	0x0800d0c0
 8005418:	08015e40 	.word	0x08015e40

0800541c <arm_rfft_fast_init_f32>:
 800541c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005420:	d01f      	beq.n	8005462 <arm_rfft_fast_init_f32+0x46>
 8005422:	d90b      	bls.n	800543c <arm_rfft_fast_init_f32+0x20>
 8005424:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005428:	d019      	beq.n	800545e <arm_rfft_fast_init_f32+0x42>
 800542a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800542e:	d012      	beq.n	8005456 <arm_rfft_fast_init_f32+0x3a>
 8005430:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005434:	d00d      	beq.n	8005452 <arm_rfft_fast_init_f32+0x36>
 8005436:	f04f 30ff 	mov.w	r0, #4294967295
 800543a:	4770      	bx	lr
 800543c:	2940      	cmp	r1, #64	@ 0x40
 800543e:	d00c      	beq.n	800545a <arm_rfft_fast_init_f32+0x3e>
 8005440:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005444:	d003      	beq.n	800544e <arm_rfft_fast_init_f32+0x32>
 8005446:	2920      	cmp	r1, #32
 8005448:	d1f5      	bne.n	8005436 <arm_rfft_fast_init_f32+0x1a>
 800544a:	4b07      	ldr	r3, [pc, #28]	@ (8005468 <arm_rfft_fast_init_f32+0x4c>)
 800544c:	4718      	bx	r3
 800544e:	4b07      	ldr	r3, [pc, #28]	@ (800546c <arm_rfft_fast_init_f32+0x50>)
 8005450:	4718      	bx	r3
 8005452:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <arm_rfft_fast_init_f32+0x54>)
 8005454:	4718      	bx	r3
 8005456:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <arm_rfft_fast_init_f32+0x58>)
 8005458:	4718      	bx	r3
 800545a:	4b07      	ldr	r3, [pc, #28]	@ (8005478 <arm_rfft_fast_init_f32+0x5c>)
 800545c:	e7f6      	b.n	800544c <arm_rfft_fast_init_f32+0x30>
 800545e:	4b07      	ldr	r3, [pc, #28]	@ (800547c <arm_rfft_fast_init_f32+0x60>)
 8005460:	e7f4      	b.n	800544c <arm_rfft_fast_init_f32+0x30>
 8005462:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <arm_rfft_fast_init_f32+0x64>)
 8005464:	e7f2      	b.n	800544c <arm_rfft_fast_init_f32+0x30>
 8005466:	bf00      	nop
 8005468:	0800528d 	.word	0x0800528d
 800546c:	080052f5 	.word	0x080052f5
 8005470:	08005369 	.word	0x08005369
 8005474:	080053e1 	.word	0x080053e1
 8005478:	080052c1 	.word	0x080052c1
 800547c:	080053a5 	.word	0x080053a5
 8005480:	0800532d 	.word	0x0800532d

08005484 <stage_rfft_f32>:
 8005484:	b410      	push	{r4}
 8005486:	edd1 7a00 	vldr	s15, [r1]
 800548a:	ed91 7a01 	vldr	s14, [r1, #4]
 800548e:	8804      	ldrh	r4, [r0, #0]
 8005490:	6940      	ldr	r0, [r0, #20]
 8005492:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005496:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800549a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800549e:	ee77 6a87 	vadd.f32	s13, s15, s14
 80054a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054a6:	3c01      	subs	r4, #1
 80054a8:	ee26 7a84 	vmul.f32	s14, s13, s8
 80054ac:	ee67 7a84 	vmul.f32	s15, s15, s8
 80054b0:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80054b4:	ed82 7a00 	vstr	s14, [r2]
 80054b8:	edc2 7a01 	vstr	s15, [r2, #4]
 80054bc:	3010      	adds	r0, #16
 80054be:	3210      	adds	r2, #16
 80054c0:	3b08      	subs	r3, #8
 80054c2:	3110      	adds	r1, #16
 80054c4:	ed11 5a02 	vldr	s10, [r1, #-8]
 80054c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80054cc:	ed50 6a02 	vldr	s13, [r0, #-8]
 80054d0:	edd3 4a03 	vldr	s9, [r3, #12]
 80054d4:	ed51 7a01 	vldr	s15, [r1, #-4]
 80054d8:	ed10 6a01 	vldr	s12, [r0, #-4]
 80054dc:	ee77 5a45 	vsub.f32	s11, s14, s10
 80054e0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80054e4:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80054e8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80054ec:	ee66 5a25 	vmul.f32	s11, s12, s11
 80054f0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80054f4:	ee37 7a23 	vadd.f32	s14, s14, s7
 80054f8:	ee66 6a85 	vmul.f32	s13, s13, s10
 80054fc:	ee26 6a05 	vmul.f32	s12, s12, s10
 8005500:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005504:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005508:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800550c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005510:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005514:	3c01      	subs	r4, #1
 8005516:	ed02 7a02 	vstr	s14, [r2, #-8]
 800551a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800551e:	f1a3 0308 	sub.w	r3, r3, #8
 8005522:	f101 0108 	add.w	r1, r1, #8
 8005526:	f100 0008 	add.w	r0, r0, #8
 800552a:	f102 0208 	add.w	r2, r2, #8
 800552e:	d1c9      	bne.n	80054c4 <stage_rfft_f32+0x40>
 8005530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop

08005538 <merge_rfft_f32>:
 8005538:	b410      	push	{r4}
 800553a:	edd1 7a00 	vldr	s15, [r1]
 800553e:	edd1 6a01 	vldr	s13, [r1, #4]
 8005542:	8804      	ldrh	r4, [r0, #0]
 8005544:	6940      	ldr	r0, [r0, #20]
 8005546:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800554a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800554e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8005552:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005556:	ee67 7a84 	vmul.f32	s15, s15, s8
 800555a:	3c01      	subs	r4, #1
 800555c:	ed82 7a00 	vstr	s14, [r2]
 8005560:	edc2 7a01 	vstr	s15, [r2, #4]
 8005564:	b3dc      	cbz	r4, 80055de <merge_rfft_f32+0xa6>
 8005566:	00e3      	lsls	r3, r4, #3
 8005568:	3b08      	subs	r3, #8
 800556a:	440b      	add	r3, r1
 800556c:	3010      	adds	r0, #16
 800556e:	3210      	adds	r2, #16
 8005570:	3110      	adds	r1, #16
 8005572:	ed11 5a02 	vldr	s10, [r1, #-8]
 8005576:	ed93 7a02 	vldr	s14, [r3, #8]
 800557a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800557e:	edd3 4a03 	vldr	s9, [r3, #12]
 8005582:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005586:	ed10 6a01 	vldr	s12, [r0, #-4]
 800558a:	ee75 5a47 	vsub.f32	s11, s10, s14
 800558e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005592:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8005596:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800559a:	ee66 5a25 	vmul.f32	s11, s12, s11
 800559e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80055a2:	ee37 7a63 	vsub.f32	s14, s14, s7
 80055a6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80055aa:	ee26 6a05 	vmul.f32	s12, s12, s10
 80055ae:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80055b2:	ee37 7a46 	vsub.f32	s14, s14, s12
 80055b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80055be:	ee67 7a84 	vmul.f32	s15, s15, s8
 80055c2:	3c01      	subs	r4, #1
 80055c4:	ed02 7a02 	vstr	s14, [r2, #-8]
 80055c8:	ed42 7a01 	vstr	s15, [r2, #-4]
 80055cc:	f1a3 0308 	sub.w	r3, r3, #8
 80055d0:	f101 0108 	add.w	r1, r1, #8
 80055d4:	f100 0008 	add.w	r0, r0, #8
 80055d8:	f102 0208 	add.w	r2, r2, #8
 80055dc:	d1c9      	bne.n	8005572 <merge_rfft_f32+0x3a>
 80055de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <arm_rfft_fast_f32>:
 80055e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	8a05      	ldrh	r5, [r0, #16]
 80055ea:	086d      	lsrs	r5, r5, #1
 80055ec:	8005      	strh	r5, [r0, #0]
 80055ee:	4604      	mov	r4, r0
 80055f0:	4616      	mov	r6, r2
 80055f2:	461d      	mov	r5, r3
 80055f4:	b14b      	cbz	r3, 800560a <arm_rfft_fast_f32+0x26>
 80055f6:	f7ff ff9f 	bl	8005538 <merge_rfft_f32>
 80055fa:	462a      	mov	r2, r5
 80055fc:	4631      	mov	r1, r6
 80055fe:	4620      	mov	r0, r4
 8005600:	2301      	movs	r3, #1
 8005602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005606:	f000 bb33 	b.w	8005c70 <arm_cfft_f32>
 800560a:	460f      	mov	r7, r1
 800560c:	461a      	mov	r2, r3
 800560e:	2301      	movs	r3, #1
 8005610:	f000 fb2e 	bl	8005c70 <arm_cfft_f32>
 8005614:	4632      	mov	r2, r6
 8005616:	4639      	mov	r1, r7
 8005618:	4620      	mov	r0, r4
 800561a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	f7ff bf31 	b.w	8005484 <stage_rfft_f32>
 8005622:	bf00      	nop

08005624 <arm_cfft_radix8by2_f32>:
 8005624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005628:	ed2d 8b08 	vpush	{d8-d11}
 800562c:	4607      	mov	r7, r0
 800562e:	4608      	mov	r0, r1
 8005630:	f8b7 c000 	ldrh.w	ip, [r7]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800563a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800563e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005642:	f000 80b0 	beq.w	80057a6 <arm_cfft_radix8by2_f32+0x182>
 8005646:	008c      	lsls	r4, r1, #2
 8005648:	3410      	adds	r4, #16
 800564a:	f100 0310 	add.w	r3, r0, #16
 800564e:	1906      	adds	r6, r0, r4
 8005650:	3210      	adds	r2, #16
 8005652:	4444      	add	r4, r8
 8005654:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8005658:	f108 0510 	add.w	r5, r8, #16
 800565c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8005660:	ed55 2a03 	vldr	s5, [r5, #-12]
 8005664:	ed54 4a04 	vldr	s9, [r4, #-16]
 8005668:	ed14 4a03 	vldr	s8, [r4, #-12]
 800566c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005670:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005674:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005678:	ed15 0a02 	vldr	s0, [r5, #-8]
 800567c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8005680:	ed56 6a04 	vldr	s13, [r6, #-16]
 8005684:	ed16 3a03 	vldr	s6, [r6, #-12]
 8005688:	ed13 7a03 	vldr	s14, [r3, #-12]
 800568c:	ed13 5a02 	vldr	s10, [r3, #-8]
 8005690:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005694:	ed16 1a02 	vldr	s2, [r6, #-8]
 8005698:	ed56 1a01 	vldr	s3, [r6, #-4]
 800569c:	ee73 ba82 	vadd.f32	s23, s7, s4
 80056a0:	ee37 ba22 	vadd.f32	s22, s14, s5
 80056a4:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80056a8:	ee33 9a04 	vadd.f32	s18, s6, s8
 80056ac:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80056b0:	ee75 aa00 	vadd.f32	s21, s10, s0
 80056b4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80056b8:	ee71 8a06 	vadd.f32	s17, s2, s12
 80056bc:	ed43 ba04 	vstr	s23, [r3, #-16]
 80056c0:	ed03 ba03 	vstr	s22, [r3, #-12]
 80056c4:	ed43 aa02 	vstr	s21, [r3, #-8]
 80056c8:	ed03 aa01 	vstr	s20, [r3, #-4]
 80056cc:	ed06 8a01 	vstr	s16, [r6, #-4]
 80056d0:	ed46 9a04 	vstr	s19, [r6, #-16]
 80056d4:	ed06 9a03 	vstr	s18, [r6, #-12]
 80056d8:	ed46 8a02 	vstr	s17, [r6, #-8]
 80056dc:	ee37 7a62 	vsub.f32	s14, s14, s5
 80056e0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80056e4:	ee34 4a43 	vsub.f32	s8, s8, s6
 80056e8:	ed52 6a03 	vldr	s13, [r2, #-12]
 80056ec:	ed12 3a04 	vldr	s6, [r2, #-16]
 80056f0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80056f4:	ee27 8a26 	vmul.f32	s16, s14, s13
 80056f8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80056fc:	ee23 2a83 	vmul.f32	s4, s7, s6
 8005700:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005704:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8005708:	ee27 7a03 	vmul.f32	s14, s14, s6
 800570c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8005710:	ee24 4a03 	vmul.f32	s8, s8, s6
 8005714:	ee37 7a63 	vsub.f32	s14, s14, s7
 8005718:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800571c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8005720:	ee32 3a08 	vadd.f32	s6, s4, s16
 8005724:	ed05 7a03 	vstr	s14, [r5, #-12]
 8005728:	ed05 3a04 	vstr	s6, [r5, #-16]
 800572c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8005730:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005734:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005738:	ee76 6a41 	vsub.f32	s13, s12, s2
 800573c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8005740:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8005744:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005748:	ed52 5a02 	vldr	s11, [r2, #-8]
 800574c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005750:	ee66 4a87 	vmul.f32	s9, s13, s14
 8005754:	ee25 4a25 	vmul.f32	s8, s10, s11
 8005758:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800575c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8005760:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005764:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005768:	ee26 6a25 	vmul.f32	s12, s12, s11
 800576c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005770:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005774:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8005778:	ee37 7a26 	vadd.f32	s14, s14, s13
 800577c:	3310      	adds	r3, #16
 800577e:	4563      	cmp	r3, ip
 8005780:	ed45 5a02 	vstr	s11, [r5, #-8]
 8005784:	f106 0610 	add.w	r6, r6, #16
 8005788:	ed45 7a01 	vstr	s15, [r5, #-4]
 800578c:	f102 0210 	add.w	r2, r2, #16
 8005790:	ed04 6a02 	vstr	s12, [r4, #-8]
 8005794:	ed04 7a01 	vstr	s14, [r4, #-4]
 8005798:	f105 0510 	add.w	r5, r5, #16
 800579c:	f104 0410 	add.w	r4, r4, #16
 80057a0:	f47f af5c 	bne.w	800565c <arm_cfft_radix8by2_f32+0x38>
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	b28c      	uxth	r4, r1
 80057a8:	4621      	mov	r1, r4
 80057aa:	2302      	movs	r3, #2
 80057ac:	f000 faf8 	bl	8005da0 <arm_radix8_butterfly_f32>
 80057b0:	ecbd 8b08 	vpop	{d8-d11}
 80057b4:	4621      	mov	r1, r4
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4640      	mov	r0, r8
 80057ba:	2302      	movs	r3, #2
 80057bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057c0:	f000 baee 	b.w	8005da0 <arm_radix8_butterfly_f32>

080057c4 <arm_cfft_radix8by4_f32>:
 80057c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c8:	ed2d 8b0a 	vpush	{d8-d12}
 80057cc:	b08d      	sub	sp, #52	@ 0x34
 80057ce:	460d      	mov	r5, r1
 80057d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80057d2:	8801      	ldrh	r1, [r0, #0]
 80057d4:	6842      	ldr	r2, [r0, #4]
 80057d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80057d8:	0849      	lsrs	r1, r1, #1
 80057da:	008b      	lsls	r3, r1, #2
 80057dc:	18ee      	adds	r6, r5, r3
 80057de:	18f0      	adds	r0, r6, r3
 80057e0:	edd0 5a00 	vldr	s11, [r0]
 80057e4:	edd5 7a00 	vldr	s15, [r5]
 80057e8:	ed96 7a00 	vldr	s14, [r6]
 80057ec:	edd0 3a01 	vldr	s7, [r0, #4]
 80057f0:	ed96 4a01 	vldr	s8, [r6, #4]
 80057f4:	ed95 5a01 	vldr	s10, [r5, #4]
 80057f8:	9008      	str	r0, [sp, #32]
 80057fa:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80057fe:	18c7      	adds	r7, r0, r3
 8005800:	edd7 4a00 	vldr	s9, [r7]
 8005804:	ed97 3a01 	vldr	s6, [r7, #4]
 8005808:	9701      	str	r7, [sp, #4]
 800580a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800580e:	462c      	mov	r4, r5
 8005810:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005814:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005818:	ee16 ca90 	vmov	ip, s13
 800581c:	f844 cb08 	str.w	ip, [r4], #8
 8005820:	ee75 6a23 	vadd.f32	s13, s10, s7
 8005824:	edd6 5a01 	vldr	s11, [r6, #4]
 8005828:	edd7 2a01 	vldr	s5, [r7, #4]
 800582c:	9404      	str	r4, [sp, #16]
 800582e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005832:	ee74 3a27 	vadd.f32	s7, s8, s15
 8005836:	ee36 6a47 	vsub.f32	s12, s12, s14
 800583a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800583e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005842:	0849      	lsrs	r1, r1, #1
 8005844:	f102 0e08 	add.w	lr, r2, #8
 8005848:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800584c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005850:	9109      	str	r1, [sp, #36]	@ 0x24
 8005852:	ee35 4a47 	vsub.f32	s8, s10, s14
 8005856:	f1a1 0902 	sub.w	r9, r1, #2
 800585a:	f8cd e00c 	str.w	lr, [sp, #12]
 800585e:	4631      	mov	r1, r6
 8005860:	ee13 ea90 	vmov	lr, s7
 8005864:	ee36 6a64 	vsub.f32	s12, s12, s9
 8005868:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800586c:	4604      	mov	r4, r0
 800586e:	edc5 5a01 	vstr	s11, [r5, #4]
 8005872:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005876:	f841 eb08 	str.w	lr, [r1], #8
 800587a:	ee34 5a24 	vadd.f32	s10, s8, s9
 800587e:	ee16 ea10 	vmov	lr, s12
 8005882:	ed86 5a01 	vstr	s10, [r6, #4]
 8005886:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800588a:	f844 eb08 	str.w	lr, [r4], #8
 800588e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005892:	edc0 6a01 	vstr	s13, [r0, #4]
 8005896:	9405      	str	r4, [sp, #20]
 8005898:	4604      	mov	r4, r0
 800589a:	ee17 0a90 	vmov	r0, s15
 800589e:	9106      	str	r1, [sp, #24]
 80058a0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80058a4:	f102 0110 	add.w	r1, r2, #16
 80058a8:	46bc      	mov	ip, r7
 80058aa:	9100      	str	r1, [sp, #0]
 80058ac:	f847 0b08 	str.w	r0, [r7], #8
 80058b0:	f102 0118 	add.w	r1, r2, #24
 80058b4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80058b8:	9102      	str	r1, [sp, #8]
 80058ba:	ed8c 7a01 	vstr	s14, [ip, #4]
 80058be:	9007      	str	r0, [sp, #28]
 80058c0:	f000 8134 	beq.w	8005b2c <arm_cfft_radix8by4_f32+0x368>
 80058c4:	f102 0920 	add.w	r9, r2, #32
 80058c8:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 80058cc:	9a01      	ldr	r2, [sp, #4]
 80058ce:	f8dd a000 	ldr.w	sl, [sp]
 80058d2:	3b0c      	subs	r3, #12
 80058d4:	4683      	mov	fp, r0
 80058d6:	4463      	add	r3, ip
 80058d8:	f105 0e10 	add.w	lr, r5, #16
 80058dc:	f1a4 010c 	sub.w	r1, r4, #12
 80058e0:	f104 0510 	add.w	r5, r4, #16
 80058e4:	f1a6 0c0c 	sub.w	ip, r6, #12
 80058e8:	f1a2 040c 	sub.w	r4, r2, #12
 80058ec:	f106 0010 	add.w	r0, r6, #16
 80058f0:	3210      	adds	r2, #16
 80058f2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80058f6:	ed55 5a02 	vldr	s11, [r5, #-8]
 80058fa:	ed50 7a02 	vldr	s15, [r0, #-8]
 80058fe:	ed52 1a02 	vldr	s3, [r2, #-8]
 8005902:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005906:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800590a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800590e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8005912:	ee35 4a25 	vadd.f32	s8, s10, s11
 8005916:	ee30 6a26 	vadd.f32	s12, s0, s13
 800591a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800591e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005922:	ee37 7a21 	vadd.f32	s14, s14, s3
 8005926:	ee75 5a65 	vsub.f32	s11, s10, s11
 800592a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800592e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8005932:	ed52 6a01 	vldr	s13, [r2, #-4]
 8005936:	ee36 7a07 	vadd.f32	s14, s12, s14
 800593a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800593e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005942:	ee70 3a67 	vsub.f32	s7, s0, s15
 8005946:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800594a:	ed94 7a02 	vldr	s14, [r4, #8]
 800594e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8005952:	ed91 ba02 	vldr	s22, [r1, #8]
 8005956:	edd3 9a02 	vldr	s19, [r3, #8]
 800595a:	edd4 2a01 	vldr	s5, [r4, #4]
 800595e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8005962:	ed93 5a01 	vldr	s10, [r3, #4]
 8005966:	edd1 0a01 	vldr	s1, [r1, #4]
 800596a:	ee72 6a07 	vadd.f32	s13, s4, s14
 800596e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8005972:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8005976:	ee79 4a22 	vadd.f32	s9, s18, s5
 800597a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800597e:	ee79 2a62 	vsub.f32	s5, s18, s5
 8005982:	ed8c 7a02 	vstr	s14, [ip, #8]
 8005986:	ed91 7a01 	vldr	s14, [r1, #4]
 800598a:	edd3 8a01 	vldr	s17, [r3, #4]
 800598e:	ee34 7a87 	vadd.f32	s14, s9, s14
 8005992:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8005996:	ee37 7a28 	vadd.f32	s14, s14, s17
 800599a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800599e:	ed8c 7a01 	vstr	s14, [ip, #4]
 80059a2:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80059a6:	ed1a aa02 	vldr	s20, [sl, #-8]
 80059aa:	ee73 8a22 	vadd.f32	s17, s6, s5
 80059ae:	ee39 9a05 	vadd.f32	s18, s18, s10
 80059b2:	ee7a aac1 	vsub.f32	s21, s21, s2
 80059b6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80059ba:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80059be:	ee69 ba07 	vmul.f32	s23, s18, s14
 80059c2:	ee6a aa87 	vmul.f32	s21, s21, s14
 80059c6:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80059ca:	ee63 ca87 	vmul.f32	s25, s7, s14
 80059ce:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80059d2:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80059d6:	ee68 8a87 	vmul.f32	s17, s17, s14
 80059da:	ee73 3aea 	vsub.f32	s7, s7, s21
 80059de:	ee78 8a89 	vadd.f32	s17, s17, s18
 80059e2:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80059e6:	ee3b aaca 	vsub.f32	s20, s23, s20
 80059ea:	ee34 4a67 	vsub.f32	s8, s8, s15
 80059ee:	ee76 6acb 	vsub.f32	s13, s13, s22
 80059f2:	ee36 6a48 	vsub.f32	s12, s12, s16
 80059f6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80059fa:	ed00 7a02 	vstr	s14, [r0, #-8]
 80059fe:	ed40 3a01 	vstr	s7, [r0, #-4]
 8005a02:	edc1 8a01 	vstr	s17, [r1, #4]
 8005a06:	ed81 aa02 	vstr	s20, [r1, #8]
 8005a0a:	ed59 3a04 	vldr	s7, [r9, #-16]
 8005a0e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8005a12:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8005a16:	ed59 6a03 	vldr	s13, [r9, #-12]
 8005a1a:	ee34 4a61 	vsub.f32	s8, s8, s3
 8005a1e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8005a22:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8005a26:	ee66 9a26 	vmul.f32	s19, s12, s13
 8005a2a:	ee24 9a23 	vmul.f32	s18, s8, s7
 8005a2e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005a32:	ee24 4a26 	vmul.f32	s8, s8, s13
 8005a36:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005a3a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005a3e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8005a42:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005a46:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005a4a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8005a4e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8005a52:	ee75 6a60 	vsub.f32	s13, s10, s1
 8005a56:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8005a5a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005a5e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8005a62:	ed05 6a01 	vstr	s12, [r5, #-4]
 8005a66:	ed84 7a01 	vstr	s14, [r4, #4]
 8005a6a:	ed84 4a02 	vstr	s8, [r4, #8]
 8005a6e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8005a72:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8005a76:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 8005a7a:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8005a7e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005a82:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8005a86:	ee67 2a26 	vmul.f32	s5, s14, s13
 8005a8a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8005a8e:	ee26 5a25 	vmul.f32	s10, s12, s11
 8005a92:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005a96:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005a9a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005a9e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8005aa2:	ee23 3a25 	vmul.f32	s6, s6, s11
 8005aa6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005aaa:	ee75 5a24 	vadd.f32	s11, s10, s9
 8005aae:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8005ab2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005ab6:	f1bb 0b01 	subs.w	fp, fp, #1
 8005aba:	ed42 5a02 	vstr	s11, [r2, #-8]
 8005abe:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005ac2:	f10e 0e08 	add.w	lr, lr, #8
 8005ac6:	ed83 3a02 	vstr	s6, [r3, #8]
 8005aca:	ed83 7a01 	vstr	s14, [r3, #4]
 8005ace:	f1ac 0c08 	sub.w	ip, ip, #8
 8005ad2:	f10a 0a08 	add.w	sl, sl, #8
 8005ad6:	f100 0008 	add.w	r0, r0, #8
 8005ada:	f1a1 0108 	sub.w	r1, r1, #8
 8005ade:	f109 0910 	add.w	r9, r9, #16
 8005ae2:	f105 0508 	add.w	r5, r5, #8
 8005ae6:	f1a4 0408 	sub.w	r4, r4, #8
 8005aea:	f108 0818 	add.w	r8, r8, #24
 8005aee:	f102 0208 	add.w	r2, r2, #8
 8005af2:	f1a3 0308 	sub.w	r3, r3, #8
 8005af6:	f47f aefc 	bne.w	80058f2 <arm_cfft_radix8by4_f32+0x12e>
 8005afa:	9907      	ldr	r1, [sp, #28]
 8005afc:	9800      	ldr	r0, [sp, #0]
 8005afe:	00cb      	lsls	r3, r1, #3
 8005b00:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005b04:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005b08:	9100      	str	r1, [sp, #0]
 8005b0a:	9904      	ldr	r1, [sp, #16]
 8005b0c:	4419      	add	r1, r3
 8005b0e:	9104      	str	r1, [sp, #16]
 8005b10:	9903      	ldr	r1, [sp, #12]
 8005b12:	4419      	add	r1, r3
 8005b14:	9103      	str	r1, [sp, #12]
 8005b16:	9906      	ldr	r1, [sp, #24]
 8005b18:	4419      	add	r1, r3
 8005b1a:	9106      	str	r1, [sp, #24]
 8005b1c:	9905      	ldr	r1, [sp, #20]
 8005b1e:	441f      	add	r7, r3
 8005b20:	4419      	add	r1, r3
 8005b22:	9b02      	ldr	r3, [sp, #8]
 8005b24:	9105      	str	r1, [sp, #20]
 8005b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b2a:	9302      	str	r3, [sp, #8]
 8005b2c:	9904      	ldr	r1, [sp, #16]
 8005b2e:	9805      	ldr	r0, [sp, #20]
 8005b30:	ed91 4a00 	vldr	s8, [r1]
 8005b34:	edd0 6a00 	vldr	s13, [r0]
 8005b38:	9b06      	ldr	r3, [sp, #24]
 8005b3a:	ed97 3a00 	vldr	s6, [r7]
 8005b3e:	edd3 7a00 	vldr	s15, [r3]
 8005b42:	edd0 4a01 	vldr	s9, [r0, #4]
 8005b46:	edd1 3a01 	vldr	s7, [r1, #4]
 8005b4a:	ed97 2a01 	vldr	s4, [r7, #4]
 8005b4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005b52:	9a03      	ldr	r2, [sp, #12]
 8005b54:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8005b58:	ee34 6a26 	vadd.f32	s12, s8, s13
 8005b5c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8005b60:	ee37 5a86 	vadd.f32	s10, s15, s12
 8005b64:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005b68:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005b6c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8005b70:	ed81 5a00 	vstr	s10, [r1]
 8005b74:	ed93 5a01 	vldr	s10, [r3, #4]
 8005b78:	edd7 4a01 	vldr	s9, [r7, #4]
 8005b7c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005b80:	ee37 4a26 	vadd.f32	s8, s14, s13
 8005b84:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005b88:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8005b8c:	ed81 5a01 	vstr	s10, [r1, #4]
 8005b90:	edd2 1a00 	vldr	s3, [r2]
 8005b94:	edd2 2a01 	vldr	s5, [r2, #4]
 8005b98:	ee34 5a83 	vadd.f32	s10, s9, s6
 8005b9c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005ba0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005ba4:	ee64 4a21 	vmul.f32	s9, s8, s3
 8005ba8:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005bac:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005bb0:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005bb4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005bb8:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005bbc:	edc3 2a00 	vstr	s5, [r3]
 8005bc0:	ed83 5a01 	vstr	s10, [r3, #4]
 8005bc4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8005bc8:	9b00      	ldr	r3, [sp, #0]
 8005bca:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005bce:	ed93 4a01 	vldr	s8, [r3, #4]
 8005bd2:	ed93 5a00 	vldr	s10, [r3]
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005bdc:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005be0:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005be4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005be8:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005bec:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005bf0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005bf4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005bf8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005bfc:	ed80 6a01 	vstr	s12, [r0, #4]
 8005c00:	edc0 5a00 	vstr	s11, [r0]
 8005c04:	edd3 5a01 	vldr	s11, [r3, #4]
 8005c08:	edd3 6a00 	vldr	s13, [r3]
 8005c0c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005c10:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8005c14:	ee27 6a26 	vmul.f32	s12, s14, s13
 8005c18:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005c1c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005c20:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005c24:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005c28:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005c2c:	ed87 7a01 	vstr	s14, [r7, #4]
 8005c30:	edc7 7a00 	vstr	s15, [r7]
 8005c34:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8005c38:	4621      	mov	r1, r4
 8005c3a:	686a      	ldr	r2, [r5, #4]
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	f000 f8af 	bl	8005da0 <arm_radix8_butterfly_f32>
 8005c42:	4630      	mov	r0, r6
 8005c44:	4621      	mov	r1, r4
 8005c46:	686a      	ldr	r2, [r5, #4]
 8005c48:	2304      	movs	r3, #4
 8005c4a:	f000 f8a9 	bl	8005da0 <arm_radix8_butterfly_f32>
 8005c4e:	9808      	ldr	r0, [sp, #32]
 8005c50:	686a      	ldr	r2, [r5, #4]
 8005c52:	4621      	mov	r1, r4
 8005c54:	2304      	movs	r3, #4
 8005c56:	f000 f8a3 	bl	8005da0 <arm_radix8_butterfly_f32>
 8005c5a:	686a      	ldr	r2, [r5, #4]
 8005c5c:	9801      	ldr	r0, [sp, #4]
 8005c5e:	4621      	mov	r1, r4
 8005c60:	2304      	movs	r3, #4
 8005c62:	b00d      	add	sp, #52	@ 0x34
 8005c64:	ecbd 8b0a 	vpop	{d8-d12}
 8005c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	f000 b898 	b.w	8005da0 <arm_radix8_butterfly_f32>

08005c70 <arm_cfft_f32>:
 8005c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c74:	2a01      	cmp	r2, #1
 8005c76:	4606      	mov	r6, r0
 8005c78:	4617      	mov	r7, r2
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	4698      	mov	r8, r3
 8005c7e:	8805      	ldrh	r5, [r0, #0]
 8005c80:	d056      	beq.n	8005d30 <arm_cfft_f32+0xc0>
 8005c82:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8005c86:	d063      	beq.n	8005d50 <arm_cfft_f32+0xe0>
 8005c88:	d916      	bls.n	8005cb8 <arm_cfft_f32+0x48>
 8005c8a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8005c8e:	d01a      	beq.n	8005cc6 <arm_cfft_f32+0x56>
 8005c90:	d947      	bls.n	8005d22 <arm_cfft_f32+0xb2>
 8005c92:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8005c96:	d05b      	beq.n	8005d50 <arm_cfft_f32+0xe0>
 8005c98:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005c9c:	d105      	bne.n	8005caa <arm_cfft_f32+0x3a>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	6872      	ldr	r2, [r6, #4]
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 f87b 	bl	8005da0 <arm_radix8_butterfly_f32>
 8005caa:	f1b8 0f00 	cmp.w	r8, #0
 8005cae:	d111      	bne.n	8005cd4 <arm_cfft_f32+0x64>
 8005cb0:	2f01      	cmp	r7, #1
 8005cb2:	d016      	beq.n	8005ce2 <arm_cfft_f32+0x72>
 8005cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb8:	2d20      	cmp	r5, #32
 8005cba:	d049      	beq.n	8005d50 <arm_cfft_f32+0xe0>
 8005cbc:	d935      	bls.n	8005d2a <arm_cfft_f32+0xba>
 8005cbe:	2d40      	cmp	r5, #64	@ 0x40
 8005cc0:	d0ed      	beq.n	8005c9e <arm_cfft_f32+0x2e>
 8005cc2:	2d80      	cmp	r5, #128	@ 0x80
 8005cc4:	d1f1      	bne.n	8005caa <arm_cfft_f32+0x3a>
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7ff fcab 	bl	8005624 <arm_cfft_radix8by2_f32>
 8005cce:	f1b8 0f00 	cmp.w	r8, #0
 8005cd2:	d0ed      	beq.n	8005cb0 <arm_cfft_f32+0x40>
 8005cd4:	68b2      	ldr	r2, [r6, #8]
 8005cd6:	89b1      	ldrh	r1, [r6, #12]
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f000 f841 	bl	8005d60 <arm_bitreversal_32>
 8005cde:	2f01      	cmp	r7, #1
 8005ce0:	d1e8      	bne.n	8005cb4 <arm_cfft_f32+0x44>
 8005ce2:	ee07 5a90 	vmov	s15, r5
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005cf2:	2d00      	cmp	r5, #0
 8005cf4:	d0de      	beq.n	8005cb4 <arm_cfft_f32+0x44>
 8005cf6:	f104 0108 	add.w	r1, r4, #8
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	429d      	cmp	r5, r3
 8005d00:	f101 0108 	add.w	r1, r1, #8
 8005d04:	ed11 7a04 	vldr	s14, [r1, #-16]
 8005d08:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005d0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005d10:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005d14:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005d18:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005d1c:	d1ee      	bne.n	8005cfc <arm_cfft_f32+0x8c>
 8005d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d22:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8005d26:	d0ba      	beq.n	8005c9e <arm_cfft_f32+0x2e>
 8005d28:	e7bf      	b.n	8005caa <arm_cfft_f32+0x3a>
 8005d2a:	2d10      	cmp	r5, #16
 8005d2c:	d0cb      	beq.n	8005cc6 <arm_cfft_f32+0x56>
 8005d2e:	e7bc      	b.n	8005caa <arm_cfft_f32+0x3a>
 8005d30:	b19d      	cbz	r5, 8005d5a <arm_cfft_f32+0xea>
 8005d32:	f101 030c 	add.w	r3, r1, #12
 8005d36:	2200      	movs	r2, #0
 8005d38:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005d3c:	3201      	adds	r2, #1
 8005d3e:	eef1 7a67 	vneg.f32	s15, s15
 8005d42:	4295      	cmp	r5, r2
 8005d44:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005d48:	f103 0308 	add.w	r3, r3, #8
 8005d4c:	d1f4      	bne.n	8005d38 <arm_cfft_f32+0xc8>
 8005d4e:	e798      	b.n	8005c82 <arm_cfft_f32+0x12>
 8005d50:	4621      	mov	r1, r4
 8005d52:	4630      	mov	r0, r6
 8005d54:	f7ff fd36 	bl	80057c4 <arm_cfft_radix8by4_f32>
 8005d58:	e7a7      	b.n	8005caa <arm_cfft_f32+0x3a>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0aa      	beq.n	8005cb4 <arm_cfft_f32+0x44>
 8005d5e:	e7b9      	b.n	8005cd4 <arm_cfft_f32+0x64>

08005d60 <arm_bitreversal_32>:
 8005d60:	b1e9      	cbz	r1, 8005d9e <arm_bitreversal_32+0x3e>
 8005d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d64:	2500      	movs	r5, #0
 8005d66:	f102 0e02 	add.w	lr, r2, #2
 8005d6a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8005d6e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8005d72:	08a4      	lsrs	r4, r4, #2
 8005d74:	089b      	lsrs	r3, r3, #2
 8005d76:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8005d7a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8005d7e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8005d82:	00a6      	lsls	r6, r4, #2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	1d34      	adds	r4, r6, #4
 8005d8e:	3502      	adds	r5, #2
 8005d90:	58c6      	ldr	r6, [r0, r3]
 8005d92:	5907      	ldr	r7, [r0, r4]
 8005d94:	50c7      	str	r7, [r0, r3]
 8005d96:	428d      	cmp	r5, r1
 8005d98:	5106      	str	r6, [r0, r4]
 8005d9a:	d3e6      	bcc.n	8005d6a <arm_bitreversal_32+0xa>
 8005d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d9e:	4770      	bx	lr

08005da0 <arm_radix8_butterfly_f32>:
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	ed2d 8b10 	vpush	{d8-d15}
 8005da8:	b095      	sub	sp, #84	@ 0x54
 8005daa:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8005dae:	4603      	mov	r3, r0
 8005db0:	3304      	adds	r3, #4
 8005db2:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8006098 <arm_radix8_butterfly_f32+0x2f8>
 8005db6:	9012      	str	r0, [sp, #72]	@ 0x48
 8005db8:	468b      	mov	fp, r1
 8005dba:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005dbc:	4689      	mov	r9, r1
 8005dbe:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8005dc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005dc4:	960f      	str	r6, [sp, #60]	@ 0x3c
 8005dc6:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8005dca:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8005dce:	eb03 0508 	add.w	r5, r3, r8
 8005dd2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8005dd6:	eb05 040e 	add.w	r4, r5, lr
 8005dda:	0137      	lsls	r7, r6, #4
 8005ddc:	eba6 030a 	sub.w	r3, r6, sl
 8005de0:	eb04 000e 	add.w	r0, r4, lr
 8005de4:	44b2      	add	sl, r6
 8005de6:	1d3a      	adds	r2, r7, #4
 8005de8:	9702      	str	r7, [sp, #8]
 8005dea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005dee:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8005df2:	ebae 0c06 	sub.w	ip, lr, r6
 8005df6:	9703      	str	r7, [sp, #12]
 8005df8:	eb03 0708 	add.w	r7, r3, r8
 8005dfc:	9701      	str	r7, [sp, #4]
 8005dfe:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8005e02:	9706      	str	r7, [sp, #24]
 8005e04:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8005e06:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8005e0a:	f10e 0104 	add.w	r1, lr, #4
 8005e0e:	4439      	add	r1, r7
 8005e10:	443a      	add	r2, r7
 8005e12:	0137      	lsls	r7, r6, #4
 8005e14:	00f6      	lsls	r6, r6, #3
 8005e16:	9704      	str	r7, [sp, #16]
 8005e18:	9605      	str	r6, [sp, #20]
 8005e1a:	9f01      	ldr	r7, [sp, #4]
 8005e1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005e1e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8005e22:	f04f 0c00 	mov.w	ip, #0
 8005e26:	edd4 6a00 	vldr	s13, [r4]
 8005e2a:	edd7 1a00 	vldr	s3, [r7]
 8005e2e:	ed16 aa01 	vldr	s20, [r6, #-4]
 8005e32:	edd5 5a00 	vldr	s11, [r5]
 8005e36:	ed52 9a01 	vldr	s19, [r2, #-4]
 8005e3a:	ed90 6a00 	vldr	s12, [r0]
 8005e3e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005e42:	ed93 3a00 	vldr	s6, [r3]
 8005e46:	ee39 0a86 	vadd.f32	s0, s19, s12
 8005e4a:	ee33 2a21 	vadd.f32	s4, s6, s3
 8005e4e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8005e52:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8005e56:	ee35 7a02 	vadd.f32	s14, s10, s4
 8005e5a:	ee34 4a80 	vadd.f32	s8, s9, s0
 8005e5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e62:	ee74 6a07 	vadd.f32	s13, s8, s14
 8005e66:	ee34 4a47 	vsub.f32	s8, s8, s14
 8005e6a:	ed46 6a01 	vstr	s13, [r6, #-4]
 8005e6e:	ed85 4a00 	vstr	s8, [r5]
 8005e72:	edd1 6a00 	vldr	s13, [r1]
 8005e76:	ed94 9a01 	vldr	s18, [r4, #4]
 8005e7a:	edd3 2a01 	vldr	s5, [r3, #4]
 8005e7e:	edd7 8a01 	vldr	s17, [r7, #4]
 8005e82:	edd6 0a00 	vldr	s1, [r6]
 8005e86:	edd5 3a01 	vldr	s7, [r5, #4]
 8005e8a:	ed90 8a01 	vldr	s16, [r0, #4]
 8005e8e:	ed92 7a00 	vldr	s14, [r2]
 8005e92:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005e96:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8005e9a:	ee72 aae8 	vsub.f32	s21, s5, s17
 8005e9e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8005ea2:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8005ea6:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005eaa:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8005eae:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8005eb2:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8005eb6:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8005eba:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8005ebe:	ee77 0a08 	vadd.f32	s1, s14, s16
 8005ec2:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8005ec6:	ee37 7a48 	vsub.f32	s14, s14, s16
 8005eca:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8005ece:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8005ed2:	ee76 6a89 	vadd.f32	s13, s13, s18
 8005ed6:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8005eda:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005ede:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005ee2:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005ee6:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8005eea:	ee33 2a20 	vadd.f32	s4, s6, s1
 8005eee:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005ef2:	ee33 3a60 	vsub.f32	s6, s6, s1
 8005ef6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8005efa:	ee77 0a01 	vadd.f32	s1, s14, s2
 8005efe:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8005f02:	ee37 7a41 	vsub.f32	s14, s14, s2
 8005f06:	ee73 1a84 	vadd.f32	s3, s7, s8
 8005f0a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005f0e:	ee76 3a27 	vadd.f32	s7, s12, s15
 8005f12:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f16:	ee32 8a00 	vadd.f32	s16, s4, s0
 8005f1a:	ee33 1a45 	vsub.f32	s2, s6, s10
 8005f1e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8005f22:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005f26:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8005f2a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8005f2e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8005f32:	ee34 6a67 	vsub.f32	s12, s8, s15
 8005f36:	ee75 4a87 	vadd.f32	s9, s11, s14
 8005f3a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8005f3e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8005f42:	ee77 7a84 	vadd.f32	s15, s15, s8
 8005f46:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8005f4a:	44dc      	add	ip, fp
 8005f4c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8005f50:	45e1      	cmp	r9, ip
 8005f52:	ed86 8a00 	vstr	s16, [r6]
 8005f56:	ed85 2a01 	vstr	s4, [r5, #4]
 8005f5a:	4456      	add	r6, sl
 8005f5c:	ed02 0a01 	vstr	s0, [r2, #-4]
 8005f60:	4455      	add	r5, sl
 8005f62:	edc0 6a00 	vstr	s13, [r0]
 8005f66:	ed82 1a00 	vstr	s2, [r2]
 8005f6a:	ed80 5a01 	vstr	s10, [r0, #4]
 8005f6e:	4452      	add	r2, sl
 8005f70:	ed01 3a01 	vstr	s6, [r1, #-4]
 8005f74:	4450      	add	r0, sl
 8005f76:	edc7 2a00 	vstr	s5, [r7]
 8005f7a:	edc4 4a00 	vstr	s9, [r4]
 8005f7e:	ed83 7a00 	vstr	s14, [r3]
 8005f82:	edc1 5a00 	vstr	s11, [r1]
 8005f86:	edc7 3a01 	vstr	s7, [r7, #4]
 8005f8a:	4451      	add	r1, sl
 8005f8c:	ed84 6a01 	vstr	s12, [r4, #4]
 8005f90:	4457      	add	r7, sl
 8005f92:	edc3 7a01 	vstr	s15, [r3, #4]
 8005f96:	4454      	add	r4, sl
 8005f98:	4453      	add	r3, sl
 8005f9a:	f63f af44 	bhi.w	8005e26 <arm_radix8_butterfly_f32+0x86>
 8005f9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fa0:	2b07      	cmp	r3, #7
 8005fa2:	f240 81b7 	bls.w	8006314 <arm_radix8_butterfly_f32+0x574>
 8005fa6:	9b06      	ldr	r3, [sp, #24]
 8005fa8:	9903      	ldr	r1, [sp, #12]
 8005faa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005fac:	9e05      	ldr	r6, [sp, #20]
 8005fae:	9a04      	ldr	r2, [sp, #16]
 8005fb0:	f103 0c08 	add.w	ip, r3, #8
 8005fb4:	9b02      	ldr	r3, [sp, #8]
 8005fb6:	3108      	adds	r1, #8
 8005fb8:	f108 0808 	add.w	r8, r8, #8
 8005fbc:	1841      	adds	r1, r0, r1
 8005fbe:	3608      	adds	r6, #8
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	4444      	add	r4, r8
 8005fc6:	18c3      	adds	r3, r0, r3
 8005fc8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fca:	1981      	adds	r1, r0, r6
 8005fcc:	f10e 0e08 	add.w	lr, lr, #8
 8005fd0:	3208      	adds	r2, #8
 8005fd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005fd4:	9107      	str	r1, [sp, #28]
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4601      	mov	r1, r0
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	f100 030c 	add.w	r3, r0, #12
 8005fe0:	4474      	add	r4, lr
 8005fe2:	f04f 0801 	mov.w	r8, #1
 8005fe6:	1882      	adds	r2, r0, r2
 8005fe8:	4461      	add	r1, ip
 8005fea:	9305      	str	r3, [sp, #20]
 8005fec:	464b      	mov	r3, r9
 8005fee:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ff0:	46c1      	mov	r9, r8
 8005ff2:	9208      	str	r2, [sp, #32]
 8005ff4:	46d8      	mov	r8, fp
 8005ff6:	9106      	str	r1, [sp, #24]
 8005ff8:	f04f 0e00 	mov.w	lr, #0
 8005ffc:	469b      	mov	fp, r3
 8005ffe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006000:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006002:	449e      	add	lr, r3
 8006004:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006008:	441a      	add	r2, r3
 800600a:	920e      	str	r2, [sp, #56]	@ 0x38
 800600c:	441a      	add	r2, r3
 800600e:	18d4      	adds	r4, r2, r3
 8006010:	18e5      	adds	r5, r4, r3
 8006012:	18ee      	adds	r6, r5, r3
 8006014:	18f7      	adds	r7, r6, r3
 8006016:	eb07 0c03 	add.w	ip, r7, r3
 800601a:	920d      	str	r2, [sp, #52]	@ 0x34
 800601c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8006020:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006024:	910c      	str	r1, [sp, #48]	@ 0x30
 8006026:	4419      	add	r1, r3
 8006028:	9103      	str	r1, [sp, #12]
 800602a:	4419      	add	r1, r3
 800602c:	18ca      	adds	r2, r1, r3
 800602e:	9202      	str	r2, [sp, #8]
 8006030:	441a      	add	r2, r3
 8006032:	18d0      	adds	r0, r2, r3
 8006034:	ed92 ea01 	vldr	s28, [r2, #4]
 8006038:	9a02      	ldr	r2, [sp, #8]
 800603a:	edd4 7a00 	vldr	s15, [r4]
 800603e:	edd2 da01 	vldr	s27, [r2, #4]
 8006042:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006044:	ed91 da01 	vldr	s26, [r1, #4]
 8006048:	ed92 ca01 	vldr	s24, [r2, #4]
 800604c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800604e:	9903      	ldr	r1, [sp, #12]
 8006050:	edcd 7a03 	vstr	s15, [sp, #12]
 8006054:	edd2 7a00 	vldr	s15, [r2]
 8006058:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800605a:	edcd 7a02 	vstr	s15, [sp, #8]
 800605e:	edd2 7a00 	vldr	s15, [r2]
 8006062:	edd0 ea01 	vldr	s29, [r0, #4]
 8006066:	edd1 ca01 	vldr	s25, [r1, #4]
 800606a:	eddc ba00 	vldr	s23, [ip]
 800606e:	edd7 aa00 	vldr	s21, [r7]
 8006072:	ed96 aa00 	vldr	s20, [r6]
 8006076:	edd5 9a00 	vldr	s19, [r5]
 800607a:	edcd 7a01 	vstr	s15, [sp, #4]
 800607e:	4403      	add	r3, r0
 8006080:	ed93 fa01 	vldr	s30, [r3, #4]
 8006084:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8006088:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800608c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006090:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8006094:	46cc      	mov	ip, r9
 8006096:	e001      	b.n	800609c <arm_radix8_butterfly_f32+0x2fc>
 8006098:	3f3504f3 	.word	0x3f3504f3
 800609c:	ed91 6a00 	vldr	s12, [r1]
 80060a0:	ed93 5a00 	vldr	s10, [r3]
 80060a4:	edd0 fa00 	vldr	s31, [r0]
 80060a8:	edd4 7a00 	vldr	s15, [r4]
 80060ac:	ed95 7a00 	vldr	s14, [r5]
 80060b0:	ed56 3a01 	vldr	s7, [r6, #-4]
 80060b4:	ed17 3a01 	vldr	s6, [r7, #-4]
 80060b8:	ed92 2a00 	vldr	s4, [r2]
 80060bc:	ed96 0a00 	vldr	s0, [r6]
 80060c0:	ee33 8a85 	vadd.f32	s16, s7, s10
 80060c4:	ee32 1a06 	vadd.f32	s2, s4, s12
 80060c8:	ee33 4a2f 	vadd.f32	s8, s6, s31
 80060cc:	ee77 4a87 	vadd.f32	s9, s15, s14
 80060d0:	ee78 1a04 	vadd.f32	s3, s16, s8
 80060d4:	ee71 6a24 	vadd.f32	s13, s2, s9
 80060d8:	ee32 2a46 	vsub.f32	s4, s4, s12
 80060dc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80060e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060e4:	ed06 6a01 	vstr	s12, [r6, #-4]
 80060e8:	edd4 8a01 	vldr	s17, [r4, #4]
 80060ec:	ed92 9a01 	vldr	s18, [r2, #4]
 80060f0:	edd7 0a00 	vldr	s1, [r7]
 80060f4:	edd1 2a01 	vldr	s5, [r1, #4]
 80060f8:	ed95 7a01 	vldr	s14, [r5, #4]
 80060fc:	ed93 6a01 	vldr	s12, [r3, #4]
 8006100:	edd0 5a01 	vldr	s11, [r0, #4]
 8006104:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006108:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800610c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006110:	ee78 fac7 	vsub.f32	s31, s17, s14
 8006114:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006118:	ee38 7a87 	vadd.f32	s14, s17, s14
 800611c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006120:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006124:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006128:	ee72 7a67 	vsub.f32	s15, s4, s15
 800612c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006130:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8006134:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006138:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800613c:	ee32 1a08 	vadd.f32	s2, s4, s16
 8006140:	ee72 fa87 	vadd.f32	s31, s5, s14
 8006144:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006148:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800614c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006150:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006154:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006158:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800615c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8006160:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8006164:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006168:	ee30 6a46 	vsub.f32	s12, s0, s12
 800616c:	ee74 0a22 	vadd.f32	s1, s8, s5
 8006170:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006174:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006178:	ee36 6a68 	vsub.f32	s12, s12, s17
 800617c:	ee32 4a64 	vsub.f32	s8, s4, s9
 8006180:	ee73 8a09 	vadd.f32	s17, s6, s18
 8006184:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006188:	ee33 9a49 	vsub.f32	s18, s6, s18
 800618c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8006190:	ee35 3a85 	vadd.f32	s6, s11, s10
 8006194:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006198:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800619c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80061a0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80061a4:	ee30 7a68 	vsub.f32	s14, s0, s17
 80061a8:	ee35 8a03 	vadd.f32	s16, s10, s6
 80061ac:	ee38 0a80 	vadd.f32	s0, s17, s0
 80061b0:	ee73 3a82 	vadd.f32	s7, s7, s4
 80061b4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80061b8:	ed9d 2a01 	vldr	s4, [sp, #4]
 80061bc:	eddd 1a02 	vldr	s3, [sp, #8]
 80061c0:	ee35 5a43 	vsub.f32	s10, s10, s6
 80061c4:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80061c8:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80061cc:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80061d0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80061d4:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80061d8:	ee76 5a49 	vsub.f32	s11, s12, s18
 80061dc:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80061e0:	ee39 6a06 	vadd.f32	s12, s18, s12
 80061e4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80061e8:	ee21 4a84 	vmul.f32	s8, s3, s8
 80061ec:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80061f0:	ee22 7a07 	vmul.f32	s14, s4, s14
 80061f4:	ee22 2a08 	vmul.f32	s4, s4, s16
 80061f8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80061fc:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8006200:	ee31 1a09 	vadd.f32	s2, s2, s18
 8006204:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8006208:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800620c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8006210:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006214:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8006218:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800621c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8006220:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8006224:	ee38 2a89 	vadd.f32	s4, s17, s18
 8006228:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800622c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8006230:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8006234:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8006238:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800623c:	eddd 5a03 	vldr	s11, [sp, #12]
 8006240:	edc6 fa00 	vstr	s31, [r6]
 8006244:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8006248:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800624c:	ee30 0a45 	vsub.f32	s0, s0, s10
 8006250:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8006254:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8006258:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800625c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8006260:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8006264:	ee25 6a86 	vmul.f32	s12, s11, s12
 8006268:	ee74 4a89 	vadd.f32	s9, s9, s18
 800626c:	ee34 3a43 	vsub.f32	s6, s8, s6
 8006270:	ee78 8a85 	vadd.f32	s17, s17, s10
 8006274:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006278:	44c4      	add	ip, r8
 800627a:	45e3      	cmp	fp, ip
 800627c:	edc3 3a00 	vstr	s7, [r3]
 8006280:	edc3 6a01 	vstr	s13, [r3, #4]
 8006284:	4456      	add	r6, sl
 8006286:	ed07 1a01 	vstr	s2, [r7, #-4]
 800628a:	edc7 0a00 	vstr	s1, [r7]
 800628e:	4453      	add	r3, sl
 8006290:	ed80 2a00 	vstr	s4, [r0]
 8006294:	edc0 2a01 	vstr	s5, [r0, #4]
 8006298:	4457      	add	r7, sl
 800629a:	edc2 1a00 	vstr	s3, [r2]
 800629e:	ed82 7a01 	vstr	s14, [r2, #4]
 80062a2:	4450      	add	r0, sl
 80062a4:	ed85 8a00 	vstr	s16, [r5]
 80062a8:	ed85 0a01 	vstr	s0, [r5, #4]
 80062ac:	4452      	add	r2, sl
 80062ae:	edc1 4a00 	vstr	s9, [r1]
 80062b2:	4455      	add	r5, sl
 80062b4:	ed81 3a01 	vstr	s6, [r1, #4]
 80062b8:	edc4 8a00 	vstr	s17, [r4]
 80062bc:	ed84 6a01 	vstr	s12, [r4, #4]
 80062c0:	4451      	add	r1, sl
 80062c2:	4454      	add	r4, sl
 80062c4:	f63f aeea 	bhi.w	800609c <arm_radix8_butterfly_f32+0x2fc>
 80062c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062ca:	3308      	adds	r3, #8
 80062cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062d0:	3308      	adds	r3, #8
 80062d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80062d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d6:	3308      	adds	r3, #8
 80062d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80062da:	9b08      	ldr	r3, [sp, #32]
 80062dc:	3308      	adds	r3, #8
 80062de:	9308      	str	r3, [sp, #32]
 80062e0:	9b07      	ldr	r3, [sp, #28]
 80062e2:	3308      	adds	r3, #8
 80062e4:	9307      	str	r3, [sp, #28]
 80062e6:	9b06      	ldr	r3, [sp, #24]
 80062e8:	3308      	adds	r3, #8
 80062ea:	9306      	str	r3, [sp, #24]
 80062ec:	9b05      	ldr	r3, [sp, #20]
 80062ee:	3308      	adds	r3, #8
 80062f0:	9305      	str	r3, [sp, #20]
 80062f2:	9b04      	ldr	r3, [sp, #16]
 80062f4:	3308      	adds	r3, #8
 80062f6:	9304      	str	r3, [sp, #16]
 80062f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062fa:	f109 0901 	add.w	r9, r9, #1
 80062fe:	454b      	cmp	r3, r9
 8006300:	f47f ae7d 	bne.w	8005ffe <arm_radix8_butterfly_f32+0x25e>
 8006304:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	b29b      	uxth	r3, r3
 800630a:	46d9      	mov	r9, fp
 800630c:	9310      	str	r3, [sp, #64]	@ 0x40
 800630e:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8006312:	e554      	b.n	8005dbe <arm_radix8_butterfly_f32+0x1e>
 8006314:	b015      	add	sp, #84	@ 0x54
 8006316:	ecbd 8b10 	vpop	{d8-d15}
 800631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631e:	bf00      	nop

08006320 <siprintf>:
 8006320:	b40e      	push	{r1, r2, r3}
 8006322:	b500      	push	{lr}
 8006324:	b09c      	sub	sp, #112	@ 0x70
 8006326:	ab1d      	add	r3, sp, #116	@ 0x74
 8006328:	9002      	str	r0, [sp, #8]
 800632a:	9006      	str	r0, [sp, #24]
 800632c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006330:	4809      	ldr	r0, [pc, #36]	@ (8006358 <siprintf+0x38>)
 8006332:	9107      	str	r1, [sp, #28]
 8006334:	9104      	str	r1, [sp, #16]
 8006336:	4909      	ldr	r1, [pc, #36]	@ (800635c <siprintf+0x3c>)
 8006338:	f853 2b04 	ldr.w	r2, [r3], #4
 800633c:	9105      	str	r1, [sp, #20]
 800633e:	6800      	ldr	r0, [r0, #0]
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	a902      	add	r1, sp, #8
 8006344:	f000 f9a2 	bl	800668c <_svfiprintf_r>
 8006348:	9b02      	ldr	r3, [sp, #8]
 800634a:	2200      	movs	r2, #0
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	b01c      	add	sp, #112	@ 0x70
 8006350:	f85d eb04 	ldr.w	lr, [sp], #4
 8006354:	b003      	add	sp, #12
 8006356:	4770      	bx	lr
 8006358:	20000184 	.word	0x20000184
 800635c:	ffff0208 	.word	0xffff0208

08006360 <memset>:
 8006360:	4402      	add	r2, r0
 8006362:	4603      	mov	r3, r0
 8006364:	4293      	cmp	r3, r2
 8006366:	d100      	bne.n	800636a <memset+0xa>
 8006368:	4770      	bx	lr
 800636a:	f803 1b01 	strb.w	r1, [r3], #1
 800636e:	e7f9      	b.n	8006364 <memset+0x4>

08006370 <__errno>:
 8006370:	4b01      	ldr	r3, [pc, #4]	@ (8006378 <__errno+0x8>)
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000184 	.word	0x20000184

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4d0d      	ldr	r5, [pc, #52]	@ (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	@ (80063b8 <__libc_init_array+0x3c>)
 8006382:	1b64      	subs	r4, r4, r5
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2600      	movs	r6, #0
 8006388:	42a6      	cmp	r6, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4d0b      	ldr	r5, [pc, #44]	@ (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	@ (80063c0 <__libc_init_array+0x44>)
 8006390:	f001 f99e 	bl	80076d0 <_init>
 8006394:	1b64      	subs	r4, r4, r5
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2600      	movs	r6, #0
 800639a:	42a6      	cmp	r6, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a4:	4798      	blx	r3
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ae:	4798      	blx	r3
 80063b0:	3601      	adds	r6, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	0801ab4c 	.word	0x0801ab4c
 80063b8:	0801ab4c 	.word	0x0801ab4c
 80063bc:	0801ab4c 	.word	0x0801ab4c
 80063c0:	0801ab50 	.word	0x0801ab50

080063c4 <__retarget_lock_acquire_recursive>:
 80063c4:	4770      	bx	lr

080063c6 <__retarget_lock_release_recursive>:
 80063c6:	4770      	bx	lr

080063c8 <memcpy>:
 80063c8:	440a      	add	r2, r1
 80063ca:	4291      	cmp	r1, r2
 80063cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80063d0:	d100      	bne.n	80063d4 <memcpy+0xc>
 80063d2:	4770      	bx	lr
 80063d4:	b510      	push	{r4, lr}
 80063d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063de:	4291      	cmp	r1, r2
 80063e0:	d1f9      	bne.n	80063d6 <memcpy+0xe>
 80063e2:	bd10      	pop	{r4, pc}

080063e4 <_free_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4605      	mov	r5, r0
 80063e8:	2900      	cmp	r1, #0
 80063ea:	d041      	beq.n	8006470 <_free_r+0x8c>
 80063ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f0:	1f0c      	subs	r4, r1, #4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bfb8      	it	lt
 80063f6:	18e4      	addlt	r4, r4, r3
 80063f8:	f000 f8e0 	bl	80065bc <__malloc_lock>
 80063fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006474 <_free_r+0x90>)
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	b933      	cbnz	r3, 8006410 <_free_r+0x2c>
 8006402:	6063      	str	r3, [r4, #4]
 8006404:	6014      	str	r4, [r2, #0]
 8006406:	4628      	mov	r0, r5
 8006408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800640c:	f000 b8dc 	b.w	80065c8 <__malloc_unlock>
 8006410:	42a3      	cmp	r3, r4
 8006412:	d908      	bls.n	8006426 <_free_r+0x42>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	1821      	adds	r1, r4, r0
 8006418:	428b      	cmp	r3, r1
 800641a:	bf01      	itttt	eq
 800641c:	6819      	ldreq	r1, [r3, #0]
 800641e:	685b      	ldreq	r3, [r3, #4]
 8006420:	1809      	addeq	r1, r1, r0
 8006422:	6021      	streq	r1, [r4, #0]
 8006424:	e7ed      	b.n	8006402 <_free_r+0x1e>
 8006426:	461a      	mov	r2, r3
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	b10b      	cbz	r3, 8006430 <_free_r+0x4c>
 800642c:	42a3      	cmp	r3, r4
 800642e:	d9fa      	bls.n	8006426 <_free_r+0x42>
 8006430:	6811      	ldr	r1, [r2, #0]
 8006432:	1850      	adds	r0, r2, r1
 8006434:	42a0      	cmp	r0, r4
 8006436:	d10b      	bne.n	8006450 <_free_r+0x6c>
 8006438:	6820      	ldr	r0, [r4, #0]
 800643a:	4401      	add	r1, r0
 800643c:	1850      	adds	r0, r2, r1
 800643e:	4283      	cmp	r3, r0
 8006440:	6011      	str	r1, [r2, #0]
 8006442:	d1e0      	bne.n	8006406 <_free_r+0x22>
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	6053      	str	r3, [r2, #4]
 800644a:	4408      	add	r0, r1
 800644c:	6010      	str	r0, [r2, #0]
 800644e:	e7da      	b.n	8006406 <_free_r+0x22>
 8006450:	d902      	bls.n	8006458 <_free_r+0x74>
 8006452:	230c      	movs	r3, #12
 8006454:	602b      	str	r3, [r5, #0]
 8006456:	e7d6      	b.n	8006406 <_free_r+0x22>
 8006458:	6820      	ldr	r0, [r4, #0]
 800645a:	1821      	adds	r1, r4, r0
 800645c:	428b      	cmp	r3, r1
 800645e:	bf04      	itt	eq
 8006460:	6819      	ldreq	r1, [r3, #0]
 8006462:	685b      	ldreq	r3, [r3, #4]
 8006464:	6063      	str	r3, [r4, #4]
 8006466:	bf04      	itt	eq
 8006468:	1809      	addeq	r1, r1, r0
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	6054      	str	r4, [r2, #4]
 800646e:	e7ca      	b.n	8006406 <_free_r+0x22>
 8006470:	bd38      	pop	{r3, r4, r5, pc}
 8006472:	bf00      	nop
 8006474:	20005794 	.word	0x20005794

08006478 <sbrk_aligned>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4e0f      	ldr	r6, [pc, #60]	@ (80064b8 <sbrk_aligned+0x40>)
 800647c:	460c      	mov	r4, r1
 800647e:	6831      	ldr	r1, [r6, #0]
 8006480:	4605      	mov	r5, r0
 8006482:	b911      	cbnz	r1, 800648a <sbrk_aligned+0x12>
 8006484:	f000 fba6 	bl	8006bd4 <_sbrk_r>
 8006488:	6030      	str	r0, [r6, #0]
 800648a:	4621      	mov	r1, r4
 800648c:	4628      	mov	r0, r5
 800648e:	f000 fba1 	bl	8006bd4 <_sbrk_r>
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	d103      	bne.n	800649e <sbrk_aligned+0x26>
 8006496:	f04f 34ff 	mov.w	r4, #4294967295
 800649a:	4620      	mov	r0, r4
 800649c:	bd70      	pop	{r4, r5, r6, pc}
 800649e:	1cc4      	adds	r4, r0, #3
 80064a0:	f024 0403 	bic.w	r4, r4, #3
 80064a4:	42a0      	cmp	r0, r4
 80064a6:	d0f8      	beq.n	800649a <sbrk_aligned+0x22>
 80064a8:	1a21      	subs	r1, r4, r0
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 fb92 	bl	8006bd4 <_sbrk_r>
 80064b0:	3001      	adds	r0, #1
 80064b2:	d1f2      	bne.n	800649a <sbrk_aligned+0x22>
 80064b4:	e7ef      	b.n	8006496 <sbrk_aligned+0x1e>
 80064b6:	bf00      	nop
 80064b8:	20005790 	.word	0x20005790

080064bc <_malloc_r>:
 80064bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c0:	1ccd      	adds	r5, r1, #3
 80064c2:	f025 0503 	bic.w	r5, r5, #3
 80064c6:	3508      	adds	r5, #8
 80064c8:	2d0c      	cmp	r5, #12
 80064ca:	bf38      	it	cc
 80064cc:	250c      	movcc	r5, #12
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	4606      	mov	r6, r0
 80064d2:	db01      	blt.n	80064d8 <_malloc_r+0x1c>
 80064d4:	42a9      	cmp	r1, r5
 80064d6:	d904      	bls.n	80064e2 <_malloc_r+0x26>
 80064d8:	230c      	movs	r3, #12
 80064da:	6033      	str	r3, [r6, #0]
 80064dc:	2000      	movs	r0, #0
 80064de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065b8 <_malloc_r+0xfc>
 80064e6:	f000 f869 	bl	80065bc <__malloc_lock>
 80064ea:	f8d8 3000 	ldr.w	r3, [r8]
 80064ee:	461c      	mov	r4, r3
 80064f0:	bb44      	cbnz	r4, 8006544 <_malloc_r+0x88>
 80064f2:	4629      	mov	r1, r5
 80064f4:	4630      	mov	r0, r6
 80064f6:	f7ff ffbf 	bl	8006478 <sbrk_aligned>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	4604      	mov	r4, r0
 80064fe:	d158      	bne.n	80065b2 <_malloc_r+0xf6>
 8006500:	f8d8 4000 	ldr.w	r4, [r8]
 8006504:	4627      	mov	r7, r4
 8006506:	2f00      	cmp	r7, #0
 8006508:	d143      	bne.n	8006592 <_malloc_r+0xd6>
 800650a:	2c00      	cmp	r4, #0
 800650c:	d04b      	beq.n	80065a6 <_malloc_r+0xea>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	4639      	mov	r1, r7
 8006512:	4630      	mov	r0, r6
 8006514:	eb04 0903 	add.w	r9, r4, r3
 8006518:	f000 fb5c 	bl	8006bd4 <_sbrk_r>
 800651c:	4581      	cmp	r9, r0
 800651e:	d142      	bne.n	80065a6 <_malloc_r+0xea>
 8006520:	6821      	ldr	r1, [r4, #0]
 8006522:	1a6d      	subs	r5, r5, r1
 8006524:	4629      	mov	r1, r5
 8006526:	4630      	mov	r0, r6
 8006528:	f7ff ffa6 	bl	8006478 <sbrk_aligned>
 800652c:	3001      	adds	r0, #1
 800652e:	d03a      	beq.n	80065a6 <_malloc_r+0xea>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	442b      	add	r3, r5
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	f8d8 3000 	ldr.w	r3, [r8]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	bb62      	cbnz	r2, 8006598 <_malloc_r+0xdc>
 800653e:	f8c8 7000 	str.w	r7, [r8]
 8006542:	e00f      	b.n	8006564 <_malloc_r+0xa8>
 8006544:	6822      	ldr	r2, [r4, #0]
 8006546:	1b52      	subs	r2, r2, r5
 8006548:	d420      	bmi.n	800658c <_malloc_r+0xd0>
 800654a:	2a0b      	cmp	r2, #11
 800654c:	d917      	bls.n	800657e <_malloc_r+0xc2>
 800654e:	1961      	adds	r1, r4, r5
 8006550:	42a3      	cmp	r3, r4
 8006552:	6025      	str	r5, [r4, #0]
 8006554:	bf18      	it	ne
 8006556:	6059      	strne	r1, [r3, #4]
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	bf08      	it	eq
 800655c:	f8c8 1000 	streq.w	r1, [r8]
 8006560:	5162      	str	r2, [r4, r5]
 8006562:	604b      	str	r3, [r1, #4]
 8006564:	4630      	mov	r0, r6
 8006566:	f000 f82f 	bl	80065c8 <__malloc_unlock>
 800656a:	f104 000b 	add.w	r0, r4, #11
 800656e:	1d23      	adds	r3, r4, #4
 8006570:	f020 0007 	bic.w	r0, r0, #7
 8006574:	1ac2      	subs	r2, r0, r3
 8006576:	bf1c      	itt	ne
 8006578:	1a1b      	subne	r3, r3, r0
 800657a:	50a3      	strne	r3, [r4, r2]
 800657c:	e7af      	b.n	80064de <_malloc_r+0x22>
 800657e:	6862      	ldr	r2, [r4, #4]
 8006580:	42a3      	cmp	r3, r4
 8006582:	bf0c      	ite	eq
 8006584:	f8c8 2000 	streq.w	r2, [r8]
 8006588:	605a      	strne	r2, [r3, #4]
 800658a:	e7eb      	b.n	8006564 <_malloc_r+0xa8>
 800658c:	4623      	mov	r3, r4
 800658e:	6864      	ldr	r4, [r4, #4]
 8006590:	e7ae      	b.n	80064f0 <_malloc_r+0x34>
 8006592:	463c      	mov	r4, r7
 8006594:	687f      	ldr	r7, [r7, #4]
 8006596:	e7b6      	b.n	8006506 <_malloc_r+0x4a>
 8006598:	461a      	mov	r2, r3
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	42a3      	cmp	r3, r4
 800659e:	d1fb      	bne.n	8006598 <_malloc_r+0xdc>
 80065a0:	2300      	movs	r3, #0
 80065a2:	6053      	str	r3, [r2, #4]
 80065a4:	e7de      	b.n	8006564 <_malloc_r+0xa8>
 80065a6:	230c      	movs	r3, #12
 80065a8:	6033      	str	r3, [r6, #0]
 80065aa:	4630      	mov	r0, r6
 80065ac:	f000 f80c 	bl	80065c8 <__malloc_unlock>
 80065b0:	e794      	b.n	80064dc <_malloc_r+0x20>
 80065b2:	6005      	str	r5, [r0, #0]
 80065b4:	e7d6      	b.n	8006564 <_malloc_r+0xa8>
 80065b6:	bf00      	nop
 80065b8:	20005794 	.word	0x20005794

080065bc <__malloc_lock>:
 80065bc:	4801      	ldr	r0, [pc, #4]	@ (80065c4 <__malloc_lock+0x8>)
 80065be:	f7ff bf01 	b.w	80063c4 <__retarget_lock_acquire_recursive>
 80065c2:	bf00      	nop
 80065c4:	2000578c 	.word	0x2000578c

080065c8 <__malloc_unlock>:
 80065c8:	4801      	ldr	r0, [pc, #4]	@ (80065d0 <__malloc_unlock+0x8>)
 80065ca:	f7ff befc 	b.w	80063c6 <__retarget_lock_release_recursive>
 80065ce:	bf00      	nop
 80065d0:	2000578c 	.word	0x2000578c

080065d4 <__ssputs_r>:
 80065d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	688e      	ldr	r6, [r1, #8]
 80065da:	461f      	mov	r7, r3
 80065dc:	42be      	cmp	r6, r7
 80065de:	680b      	ldr	r3, [r1, #0]
 80065e0:	4682      	mov	sl, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	4690      	mov	r8, r2
 80065e6:	d82d      	bhi.n	8006644 <__ssputs_r+0x70>
 80065e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065f0:	d026      	beq.n	8006640 <__ssputs_r+0x6c>
 80065f2:	6965      	ldr	r5, [r4, #20]
 80065f4:	6909      	ldr	r1, [r1, #16]
 80065f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065fa:	eba3 0901 	sub.w	r9, r3, r1
 80065fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006602:	1c7b      	adds	r3, r7, #1
 8006604:	444b      	add	r3, r9
 8006606:	106d      	asrs	r5, r5, #1
 8006608:	429d      	cmp	r5, r3
 800660a:	bf38      	it	cc
 800660c:	461d      	movcc	r5, r3
 800660e:	0553      	lsls	r3, r2, #21
 8006610:	d527      	bpl.n	8006662 <__ssputs_r+0x8e>
 8006612:	4629      	mov	r1, r5
 8006614:	f7ff ff52 	bl	80064bc <_malloc_r>
 8006618:	4606      	mov	r6, r0
 800661a:	b360      	cbz	r0, 8006676 <__ssputs_r+0xa2>
 800661c:	6921      	ldr	r1, [r4, #16]
 800661e:	464a      	mov	r2, r9
 8006620:	f7ff fed2 	bl	80063c8 <memcpy>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800662a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800662e:	81a3      	strh	r3, [r4, #12]
 8006630:	6126      	str	r6, [r4, #16]
 8006632:	6165      	str	r5, [r4, #20]
 8006634:	444e      	add	r6, r9
 8006636:	eba5 0509 	sub.w	r5, r5, r9
 800663a:	6026      	str	r6, [r4, #0]
 800663c:	60a5      	str	r5, [r4, #8]
 800663e:	463e      	mov	r6, r7
 8006640:	42be      	cmp	r6, r7
 8006642:	d900      	bls.n	8006646 <__ssputs_r+0x72>
 8006644:	463e      	mov	r6, r7
 8006646:	6820      	ldr	r0, [r4, #0]
 8006648:	4632      	mov	r2, r6
 800664a:	4641      	mov	r1, r8
 800664c:	f000 faa8 	bl	8006ba0 <memmove>
 8006650:	68a3      	ldr	r3, [r4, #8]
 8006652:	1b9b      	subs	r3, r3, r6
 8006654:	60a3      	str	r3, [r4, #8]
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	4433      	add	r3, r6
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	2000      	movs	r0, #0
 800665e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006662:	462a      	mov	r2, r5
 8006664:	f000 fac6 	bl	8006bf4 <_realloc_r>
 8006668:	4606      	mov	r6, r0
 800666a:	2800      	cmp	r0, #0
 800666c:	d1e0      	bne.n	8006630 <__ssputs_r+0x5c>
 800666e:	6921      	ldr	r1, [r4, #16]
 8006670:	4650      	mov	r0, sl
 8006672:	f7ff feb7 	bl	80063e4 <_free_r>
 8006676:	230c      	movs	r3, #12
 8006678:	f8ca 3000 	str.w	r3, [sl]
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006682:	81a3      	strh	r3, [r4, #12]
 8006684:	f04f 30ff 	mov.w	r0, #4294967295
 8006688:	e7e9      	b.n	800665e <__ssputs_r+0x8a>
	...

0800668c <_svfiprintf_r>:
 800668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006690:	4698      	mov	r8, r3
 8006692:	898b      	ldrh	r3, [r1, #12]
 8006694:	061b      	lsls	r3, r3, #24
 8006696:	b09d      	sub	sp, #116	@ 0x74
 8006698:	4607      	mov	r7, r0
 800669a:	460d      	mov	r5, r1
 800669c:	4614      	mov	r4, r2
 800669e:	d510      	bpl.n	80066c2 <_svfiprintf_r+0x36>
 80066a0:	690b      	ldr	r3, [r1, #16]
 80066a2:	b973      	cbnz	r3, 80066c2 <_svfiprintf_r+0x36>
 80066a4:	2140      	movs	r1, #64	@ 0x40
 80066a6:	f7ff ff09 	bl	80064bc <_malloc_r>
 80066aa:	6028      	str	r0, [r5, #0]
 80066ac:	6128      	str	r0, [r5, #16]
 80066ae:	b930      	cbnz	r0, 80066be <_svfiprintf_r+0x32>
 80066b0:	230c      	movs	r3, #12
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	b01d      	add	sp, #116	@ 0x74
 80066ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066be:	2340      	movs	r3, #64	@ 0x40
 80066c0:	616b      	str	r3, [r5, #20]
 80066c2:	2300      	movs	r3, #0
 80066c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066c6:	2320      	movs	r3, #32
 80066c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80066d0:	2330      	movs	r3, #48	@ 0x30
 80066d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006870 <_svfiprintf_r+0x1e4>
 80066d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066da:	f04f 0901 	mov.w	r9, #1
 80066de:	4623      	mov	r3, r4
 80066e0:	469a      	mov	sl, r3
 80066e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e6:	b10a      	cbz	r2, 80066ec <_svfiprintf_r+0x60>
 80066e8:	2a25      	cmp	r2, #37	@ 0x25
 80066ea:	d1f9      	bne.n	80066e0 <_svfiprintf_r+0x54>
 80066ec:	ebba 0b04 	subs.w	fp, sl, r4
 80066f0:	d00b      	beq.n	800670a <_svfiprintf_r+0x7e>
 80066f2:	465b      	mov	r3, fp
 80066f4:	4622      	mov	r2, r4
 80066f6:	4629      	mov	r1, r5
 80066f8:	4638      	mov	r0, r7
 80066fa:	f7ff ff6b 	bl	80065d4 <__ssputs_r>
 80066fe:	3001      	adds	r0, #1
 8006700:	f000 80a7 	beq.w	8006852 <_svfiprintf_r+0x1c6>
 8006704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006706:	445a      	add	r2, fp
 8006708:	9209      	str	r2, [sp, #36]	@ 0x24
 800670a:	f89a 3000 	ldrb.w	r3, [sl]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 809f 	beq.w	8006852 <_svfiprintf_r+0x1c6>
 8006714:	2300      	movs	r3, #0
 8006716:	f04f 32ff 	mov.w	r2, #4294967295
 800671a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800671e:	f10a 0a01 	add.w	sl, sl, #1
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	9307      	str	r3, [sp, #28]
 8006726:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800672a:	931a      	str	r3, [sp, #104]	@ 0x68
 800672c:	4654      	mov	r4, sl
 800672e:	2205      	movs	r2, #5
 8006730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006734:	484e      	ldr	r0, [pc, #312]	@ (8006870 <_svfiprintf_r+0x1e4>)
 8006736:	f7f9 fd7b 	bl	8000230 <memchr>
 800673a:	9a04      	ldr	r2, [sp, #16]
 800673c:	b9d8      	cbnz	r0, 8006776 <_svfiprintf_r+0xea>
 800673e:	06d0      	lsls	r0, r2, #27
 8006740:	bf44      	itt	mi
 8006742:	2320      	movmi	r3, #32
 8006744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006748:	0711      	lsls	r1, r2, #28
 800674a:	bf44      	itt	mi
 800674c:	232b      	movmi	r3, #43	@ 0x2b
 800674e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006752:	f89a 3000 	ldrb.w	r3, [sl]
 8006756:	2b2a      	cmp	r3, #42	@ 0x2a
 8006758:	d015      	beq.n	8006786 <_svfiprintf_r+0xfa>
 800675a:	9a07      	ldr	r2, [sp, #28]
 800675c:	4654      	mov	r4, sl
 800675e:	2000      	movs	r0, #0
 8006760:	f04f 0c0a 	mov.w	ip, #10
 8006764:	4621      	mov	r1, r4
 8006766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800676a:	3b30      	subs	r3, #48	@ 0x30
 800676c:	2b09      	cmp	r3, #9
 800676e:	d94b      	bls.n	8006808 <_svfiprintf_r+0x17c>
 8006770:	b1b0      	cbz	r0, 80067a0 <_svfiprintf_r+0x114>
 8006772:	9207      	str	r2, [sp, #28]
 8006774:	e014      	b.n	80067a0 <_svfiprintf_r+0x114>
 8006776:	eba0 0308 	sub.w	r3, r0, r8
 800677a:	fa09 f303 	lsl.w	r3, r9, r3
 800677e:	4313      	orrs	r3, r2
 8006780:	9304      	str	r3, [sp, #16]
 8006782:	46a2      	mov	sl, r4
 8006784:	e7d2      	b.n	800672c <_svfiprintf_r+0xa0>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	1d19      	adds	r1, r3, #4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	9103      	str	r1, [sp, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	bfbb      	ittet	lt
 8006792:	425b      	neglt	r3, r3
 8006794:	f042 0202 	orrlt.w	r2, r2, #2
 8006798:	9307      	strge	r3, [sp, #28]
 800679a:	9307      	strlt	r3, [sp, #28]
 800679c:	bfb8      	it	lt
 800679e:	9204      	strlt	r2, [sp, #16]
 80067a0:	7823      	ldrb	r3, [r4, #0]
 80067a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80067a4:	d10a      	bne.n	80067bc <_svfiprintf_r+0x130>
 80067a6:	7863      	ldrb	r3, [r4, #1]
 80067a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80067aa:	d132      	bne.n	8006812 <_svfiprintf_r+0x186>
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	1d1a      	adds	r2, r3, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	9203      	str	r2, [sp, #12]
 80067b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067b8:	3402      	adds	r4, #2
 80067ba:	9305      	str	r3, [sp, #20]
 80067bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006880 <_svfiprintf_r+0x1f4>
 80067c0:	7821      	ldrb	r1, [r4, #0]
 80067c2:	2203      	movs	r2, #3
 80067c4:	4650      	mov	r0, sl
 80067c6:	f7f9 fd33 	bl	8000230 <memchr>
 80067ca:	b138      	cbz	r0, 80067dc <_svfiprintf_r+0x150>
 80067cc:	9b04      	ldr	r3, [sp, #16]
 80067ce:	eba0 000a 	sub.w	r0, r0, sl
 80067d2:	2240      	movs	r2, #64	@ 0x40
 80067d4:	4082      	lsls	r2, r0
 80067d6:	4313      	orrs	r3, r2
 80067d8:	3401      	adds	r4, #1
 80067da:	9304      	str	r3, [sp, #16]
 80067dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e0:	4824      	ldr	r0, [pc, #144]	@ (8006874 <_svfiprintf_r+0x1e8>)
 80067e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067e6:	2206      	movs	r2, #6
 80067e8:	f7f9 fd22 	bl	8000230 <memchr>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d036      	beq.n	800685e <_svfiprintf_r+0x1d2>
 80067f0:	4b21      	ldr	r3, [pc, #132]	@ (8006878 <_svfiprintf_r+0x1ec>)
 80067f2:	bb1b      	cbnz	r3, 800683c <_svfiprintf_r+0x1b0>
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	3307      	adds	r3, #7
 80067f8:	f023 0307 	bic.w	r3, r3, #7
 80067fc:	3308      	adds	r3, #8
 80067fe:	9303      	str	r3, [sp, #12]
 8006800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006802:	4433      	add	r3, r6
 8006804:	9309      	str	r3, [sp, #36]	@ 0x24
 8006806:	e76a      	b.n	80066de <_svfiprintf_r+0x52>
 8006808:	fb0c 3202 	mla	r2, ip, r2, r3
 800680c:	460c      	mov	r4, r1
 800680e:	2001      	movs	r0, #1
 8006810:	e7a8      	b.n	8006764 <_svfiprintf_r+0xd8>
 8006812:	2300      	movs	r3, #0
 8006814:	3401      	adds	r4, #1
 8006816:	9305      	str	r3, [sp, #20]
 8006818:	4619      	mov	r1, r3
 800681a:	f04f 0c0a 	mov.w	ip, #10
 800681e:	4620      	mov	r0, r4
 8006820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006824:	3a30      	subs	r2, #48	@ 0x30
 8006826:	2a09      	cmp	r2, #9
 8006828:	d903      	bls.n	8006832 <_svfiprintf_r+0x1a6>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0c6      	beq.n	80067bc <_svfiprintf_r+0x130>
 800682e:	9105      	str	r1, [sp, #20]
 8006830:	e7c4      	b.n	80067bc <_svfiprintf_r+0x130>
 8006832:	fb0c 2101 	mla	r1, ip, r1, r2
 8006836:	4604      	mov	r4, r0
 8006838:	2301      	movs	r3, #1
 800683a:	e7f0      	b.n	800681e <_svfiprintf_r+0x192>
 800683c:	ab03      	add	r3, sp, #12
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	462a      	mov	r2, r5
 8006842:	4b0e      	ldr	r3, [pc, #56]	@ (800687c <_svfiprintf_r+0x1f0>)
 8006844:	a904      	add	r1, sp, #16
 8006846:	4638      	mov	r0, r7
 8006848:	f3af 8000 	nop.w
 800684c:	1c42      	adds	r2, r0, #1
 800684e:	4606      	mov	r6, r0
 8006850:	d1d6      	bne.n	8006800 <_svfiprintf_r+0x174>
 8006852:	89ab      	ldrh	r3, [r5, #12]
 8006854:	065b      	lsls	r3, r3, #25
 8006856:	f53f af2d 	bmi.w	80066b4 <_svfiprintf_r+0x28>
 800685a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800685c:	e72c      	b.n	80066b8 <_svfiprintf_r+0x2c>
 800685e:	ab03      	add	r3, sp, #12
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	462a      	mov	r2, r5
 8006864:	4b05      	ldr	r3, [pc, #20]	@ (800687c <_svfiprintf_r+0x1f0>)
 8006866:	a904      	add	r1, sp, #16
 8006868:	4638      	mov	r0, r7
 800686a:	f000 f879 	bl	8006960 <_printf_i>
 800686e:	e7ed      	b.n	800684c <_svfiprintf_r+0x1c0>
 8006870:	0801a740 	.word	0x0801a740
 8006874:	0801a74a 	.word	0x0801a74a
 8006878:	00000000 	.word	0x00000000
 800687c:	080065d5 	.word	0x080065d5
 8006880:	0801a746 	.word	0x0801a746

08006884 <_printf_common>:
 8006884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	4616      	mov	r6, r2
 800688a:	4698      	mov	r8, r3
 800688c:	688a      	ldr	r2, [r1, #8]
 800688e:	690b      	ldr	r3, [r1, #16]
 8006890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006894:	4293      	cmp	r3, r2
 8006896:	bfb8      	it	lt
 8006898:	4613      	movlt	r3, r2
 800689a:	6033      	str	r3, [r6, #0]
 800689c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068a0:	4607      	mov	r7, r0
 80068a2:	460c      	mov	r4, r1
 80068a4:	b10a      	cbz	r2, 80068aa <_printf_common+0x26>
 80068a6:	3301      	adds	r3, #1
 80068a8:	6033      	str	r3, [r6, #0]
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	0699      	lsls	r1, r3, #26
 80068ae:	bf42      	ittt	mi
 80068b0:	6833      	ldrmi	r3, [r6, #0]
 80068b2:	3302      	addmi	r3, #2
 80068b4:	6033      	strmi	r3, [r6, #0]
 80068b6:	6825      	ldr	r5, [r4, #0]
 80068b8:	f015 0506 	ands.w	r5, r5, #6
 80068bc:	d106      	bne.n	80068cc <_printf_common+0x48>
 80068be:	f104 0a19 	add.w	sl, r4, #25
 80068c2:	68e3      	ldr	r3, [r4, #12]
 80068c4:	6832      	ldr	r2, [r6, #0]
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	dc26      	bgt.n	800691a <_printf_common+0x96>
 80068cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	3b00      	subs	r3, #0
 80068d4:	bf18      	it	ne
 80068d6:	2301      	movne	r3, #1
 80068d8:	0692      	lsls	r2, r2, #26
 80068da:	d42b      	bmi.n	8006934 <_printf_common+0xb0>
 80068dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068e0:	4641      	mov	r1, r8
 80068e2:	4638      	mov	r0, r7
 80068e4:	47c8      	blx	r9
 80068e6:	3001      	adds	r0, #1
 80068e8:	d01e      	beq.n	8006928 <_printf_common+0xa4>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	6922      	ldr	r2, [r4, #16]
 80068ee:	f003 0306 	and.w	r3, r3, #6
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	bf02      	ittt	eq
 80068f6:	68e5      	ldreq	r5, [r4, #12]
 80068f8:	6833      	ldreq	r3, [r6, #0]
 80068fa:	1aed      	subeq	r5, r5, r3
 80068fc:	68a3      	ldr	r3, [r4, #8]
 80068fe:	bf0c      	ite	eq
 8006900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006904:	2500      	movne	r5, #0
 8006906:	4293      	cmp	r3, r2
 8006908:	bfc4      	itt	gt
 800690a:	1a9b      	subgt	r3, r3, r2
 800690c:	18ed      	addgt	r5, r5, r3
 800690e:	2600      	movs	r6, #0
 8006910:	341a      	adds	r4, #26
 8006912:	42b5      	cmp	r5, r6
 8006914:	d11a      	bne.n	800694c <_printf_common+0xc8>
 8006916:	2000      	movs	r0, #0
 8006918:	e008      	b.n	800692c <_printf_common+0xa8>
 800691a:	2301      	movs	r3, #1
 800691c:	4652      	mov	r2, sl
 800691e:	4641      	mov	r1, r8
 8006920:	4638      	mov	r0, r7
 8006922:	47c8      	blx	r9
 8006924:	3001      	adds	r0, #1
 8006926:	d103      	bne.n	8006930 <_printf_common+0xac>
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006930:	3501      	adds	r5, #1
 8006932:	e7c6      	b.n	80068c2 <_printf_common+0x3e>
 8006934:	18e1      	adds	r1, r4, r3
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	2030      	movs	r0, #48	@ 0x30
 800693a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800693e:	4422      	add	r2, r4
 8006940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006948:	3302      	adds	r3, #2
 800694a:	e7c7      	b.n	80068dc <_printf_common+0x58>
 800694c:	2301      	movs	r3, #1
 800694e:	4622      	mov	r2, r4
 8006950:	4641      	mov	r1, r8
 8006952:	4638      	mov	r0, r7
 8006954:	47c8      	blx	r9
 8006956:	3001      	adds	r0, #1
 8006958:	d0e6      	beq.n	8006928 <_printf_common+0xa4>
 800695a:	3601      	adds	r6, #1
 800695c:	e7d9      	b.n	8006912 <_printf_common+0x8e>
	...

08006960 <_printf_i>:
 8006960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	7e0f      	ldrb	r7, [r1, #24]
 8006966:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006968:	2f78      	cmp	r7, #120	@ 0x78
 800696a:	4691      	mov	r9, r2
 800696c:	4680      	mov	r8, r0
 800696e:	460c      	mov	r4, r1
 8006970:	469a      	mov	sl, r3
 8006972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006976:	d807      	bhi.n	8006988 <_printf_i+0x28>
 8006978:	2f62      	cmp	r7, #98	@ 0x62
 800697a:	d80a      	bhi.n	8006992 <_printf_i+0x32>
 800697c:	2f00      	cmp	r7, #0
 800697e:	f000 80d2 	beq.w	8006b26 <_printf_i+0x1c6>
 8006982:	2f58      	cmp	r7, #88	@ 0x58
 8006984:	f000 80b9 	beq.w	8006afa <_printf_i+0x19a>
 8006988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800698c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006990:	e03a      	b.n	8006a08 <_printf_i+0xa8>
 8006992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006996:	2b15      	cmp	r3, #21
 8006998:	d8f6      	bhi.n	8006988 <_printf_i+0x28>
 800699a:	a101      	add	r1, pc, #4	@ (adr r1, 80069a0 <_printf_i+0x40>)
 800699c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a0:	080069f9 	.word	0x080069f9
 80069a4:	08006a0d 	.word	0x08006a0d
 80069a8:	08006989 	.word	0x08006989
 80069ac:	08006989 	.word	0x08006989
 80069b0:	08006989 	.word	0x08006989
 80069b4:	08006989 	.word	0x08006989
 80069b8:	08006a0d 	.word	0x08006a0d
 80069bc:	08006989 	.word	0x08006989
 80069c0:	08006989 	.word	0x08006989
 80069c4:	08006989 	.word	0x08006989
 80069c8:	08006989 	.word	0x08006989
 80069cc:	08006b0d 	.word	0x08006b0d
 80069d0:	08006a37 	.word	0x08006a37
 80069d4:	08006ac7 	.word	0x08006ac7
 80069d8:	08006989 	.word	0x08006989
 80069dc:	08006989 	.word	0x08006989
 80069e0:	08006b2f 	.word	0x08006b2f
 80069e4:	08006989 	.word	0x08006989
 80069e8:	08006a37 	.word	0x08006a37
 80069ec:	08006989 	.word	0x08006989
 80069f0:	08006989 	.word	0x08006989
 80069f4:	08006acf 	.word	0x08006acf
 80069f8:	6833      	ldr	r3, [r6, #0]
 80069fa:	1d1a      	adds	r2, r3, #4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6032      	str	r2, [r6, #0]
 8006a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e09d      	b.n	8006b48 <_printf_i+0x1e8>
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	6820      	ldr	r0, [r4, #0]
 8006a10:	1d19      	adds	r1, r3, #4
 8006a12:	6031      	str	r1, [r6, #0]
 8006a14:	0606      	lsls	r6, r0, #24
 8006a16:	d501      	bpl.n	8006a1c <_printf_i+0xbc>
 8006a18:	681d      	ldr	r5, [r3, #0]
 8006a1a:	e003      	b.n	8006a24 <_printf_i+0xc4>
 8006a1c:	0645      	lsls	r5, r0, #25
 8006a1e:	d5fb      	bpl.n	8006a18 <_printf_i+0xb8>
 8006a20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	da03      	bge.n	8006a30 <_printf_i+0xd0>
 8006a28:	232d      	movs	r3, #45	@ 0x2d
 8006a2a:	426d      	negs	r5, r5
 8006a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a30:	4859      	ldr	r0, [pc, #356]	@ (8006b98 <_printf_i+0x238>)
 8006a32:	230a      	movs	r3, #10
 8006a34:	e011      	b.n	8006a5a <_printf_i+0xfa>
 8006a36:	6821      	ldr	r1, [r4, #0]
 8006a38:	6833      	ldr	r3, [r6, #0]
 8006a3a:	0608      	lsls	r0, r1, #24
 8006a3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a40:	d402      	bmi.n	8006a48 <_printf_i+0xe8>
 8006a42:	0649      	lsls	r1, r1, #25
 8006a44:	bf48      	it	mi
 8006a46:	b2ad      	uxthmi	r5, r5
 8006a48:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a4a:	4853      	ldr	r0, [pc, #332]	@ (8006b98 <_printf_i+0x238>)
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	bf14      	ite	ne
 8006a50:	230a      	movne	r3, #10
 8006a52:	2308      	moveq	r3, #8
 8006a54:	2100      	movs	r1, #0
 8006a56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a5a:	6866      	ldr	r6, [r4, #4]
 8006a5c:	60a6      	str	r6, [r4, #8]
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	bfa2      	ittt	ge
 8006a62:	6821      	ldrge	r1, [r4, #0]
 8006a64:	f021 0104 	bicge.w	r1, r1, #4
 8006a68:	6021      	strge	r1, [r4, #0]
 8006a6a:	b90d      	cbnz	r5, 8006a70 <_printf_i+0x110>
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	d04b      	beq.n	8006b08 <_printf_i+0x1a8>
 8006a70:	4616      	mov	r6, r2
 8006a72:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a76:	fb03 5711 	mls	r7, r3, r1, r5
 8006a7a:	5dc7      	ldrb	r7, [r0, r7]
 8006a7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a80:	462f      	mov	r7, r5
 8006a82:	42bb      	cmp	r3, r7
 8006a84:	460d      	mov	r5, r1
 8006a86:	d9f4      	bls.n	8006a72 <_printf_i+0x112>
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d10b      	bne.n	8006aa4 <_printf_i+0x144>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	07df      	lsls	r7, r3, #31
 8006a90:	d508      	bpl.n	8006aa4 <_printf_i+0x144>
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	6861      	ldr	r1, [r4, #4]
 8006a96:	4299      	cmp	r1, r3
 8006a98:	bfde      	ittt	le
 8006a9a:	2330      	movle	r3, #48	@ 0x30
 8006a9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006aa4:	1b92      	subs	r2, r2, r6
 8006aa6:	6122      	str	r2, [r4, #16]
 8006aa8:	f8cd a000 	str.w	sl, [sp]
 8006aac:	464b      	mov	r3, r9
 8006aae:	aa03      	add	r2, sp, #12
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	f7ff fee6 	bl	8006884 <_printf_common>
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d14a      	bne.n	8006b52 <_printf_i+0x1f2>
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	b004      	add	sp, #16
 8006ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	f043 0320 	orr.w	r3, r3, #32
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	4833      	ldr	r0, [pc, #204]	@ (8006b9c <_printf_i+0x23c>)
 8006ad0:	2778      	movs	r7, #120	@ 0x78
 8006ad2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	6831      	ldr	r1, [r6, #0]
 8006ada:	061f      	lsls	r7, r3, #24
 8006adc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ae0:	d402      	bmi.n	8006ae8 <_printf_i+0x188>
 8006ae2:	065f      	lsls	r7, r3, #25
 8006ae4:	bf48      	it	mi
 8006ae6:	b2ad      	uxthmi	r5, r5
 8006ae8:	6031      	str	r1, [r6, #0]
 8006aea:	07d9      	lsls	r1, r3, #31
 8006aec:	bf44      	itt	mi
 8006aee:	f043 0320 	orrmi.w	r3, r3, #32
 8006af2:	6023      	strmi	r3, [r4, #0]
 8006af4:	b11d      	cbz	r5, 8006afe <_printf_i+0x19e>
 8006af6:	2310      	movs	r3, #16
 8006af8:	e7ac      	b.n	8006a54 <_printf_i+0xf4>
 8006afa:	4827      	ldr	r0, [pc, #156]	@ (8006b98 <_printf_i+0x238>)
 8006afc:	e7e9      	b.n	8006ad2 <_printf_i+0x172>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	f023 0320 	bic.w	r3, r3, #32
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	e7f6      	b.n	8006af6 <_printf_i+0x196>
 8006b08:	4616      	mov	r6, r2
 8006b0a:	e7bd      	b.n	8006a88 <_printf_i+0x128>
 8006b0c:	6833      	ldr	r3, [r6, #0]
 8006b0e:	6825      	ldr	r5, [r4, #0]
 8006b10:	6961      	ldr	r1, [r4, #20]
 8006b12:	1d18      	adds	r0, r3, #4
 8006b14:	6030      	str	r0, [r6, #0]
 8006b16:	062e      	lsls	r6, r5, #24
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	d501      	bpl.n	8006b20 <_printf_i+0x1c0>
 8006b1c:	6019      	str	r1, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <_printf_i+0x1c6>
 8006b20:	0668      	lsls	r0, r5, #25
 8006b22:	d5fb      	bpl.n	8006b1c <_printf_i+0x1bc>
 8006b24:	8019      	strh	r1, [r3, #0]
 8006b26:	2300      	movs	r3, #0
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	4616      	mov	r6, r2
 8006b2c:	e7bc      	b.n	8006aa8 <_printf_i+0x148>
 8006b2e:	6833      	ldr	r3, [r6, #0]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	6032      	str	r2, [r6, #0]
 8006b34:	681e      	ldr	r6, [r3, #0]
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f7f9 fb78 	bl	8000230 <memchr>
 8006b40:	b108      	cbz	r0, 8006b46 <_printf_i+0x1e6>
 8006b42:	1b80      	subs	r0, r0, r6
 8006b44:	6060      	str	r0, [r4, #4]
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b50:	e7aa      	b.n	8006aa8 <_printf_i+0x148>
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	4632      	mov	r2, r6
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d0ad      	beq.n	8006abc <_printf_i+0x15c>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	079b      	lsls	r3, r3, #30
 8006b64:	d413      	bmi.n	8006b8e <_printf_i+0x22e>
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	bfb8      	it	lt
 8006b6e:	4618      	movlt	r0, r3
 8006b70:	e7a6      	b.n	8006ac0 <_printf_i+0x160>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d09d      	beq.n	8006abc <_printf_i+0x15c>
 8006b80:	3501      	adds	r5, #1
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	9903      	ldr	r1, [sp, #12]
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dcf2      	bgt.n	8006b72 <_printf_i+0x212>
 8006b8c:	e7eb      	b.n	8006b66 <_printf_i+0x206>
 8006b8e:	2500      	movs	r5, #0
 8006b90:	f104 0619 	add.w	r6, r4, #25
 8006b94:	e7f5      	b.n	8006b82 <_printf_i+0x222>
 8006b96:	bf00      	nop
 8006b98:	0801a751 	.word	0x0801a751
 8006b9c:	0801a762 	.word	0x0801a762

08006ba0 <memmove>:
 8006ba0:	4288      	cmp	r0, r1
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	eb01 0402 	add.w	r4, r1, r2
 8006ba8:	d902      	bls.n	8006bb0 <memmove+0x10>
 8006baa:	4284      	cmp	r4, r0
 8006bac:	4623      	mov	r3, r4
 8006bae:	d807      	bhi.n	8006bc0 <memmove+0x20>
 8006bb0:	1e43      	subs	r3, r0, #1
 8006bb2:	42a1      	cmp	r1, r4
 8006bb4:	d008      	beq.n	8006bc8 <memmove+0x28>
 8006bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bbe:	e7f8      	b.n	8006bb2 <memmove+0x12>
 8006bc0:	4402      	add	r2, r0
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	428a      	cmp	r2, r1
 8006bc6:	d100      	bne.n	8006bca <memmove+0x2a>
 8006bc8:	bd10      	pop	{r4, pc}
 8006bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bd2:	e7f7      	b.n	8006bc4 <memmove+0x24>

08006bd4 <_sbrk_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4d06      	ldr	r5, [pc, #24]	@ (8006bf0 <_sbrk_r+0x1c>)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4604      	mov	r4, r0
 8006bdc:	4608      	mov	r0, r1
 8006bde:	602b      	str	r3, [r5, #0]
 8006be0:	f7f9 ff26 	bl	8000a30 <_sbrk>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_sbrk_r+0x1a>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_sbrk_r+0x1a>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	20005788 	.word	0x20005788

08006bf4 <_realloc_r>:
 8006bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	4615      	mov	r5, r2
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	b921      	cbnz	r1, 8006c0a <_realloc_r+0x16>
 8006c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	4611      	mov	r1, r2
 8006c06:	f7ff bc59 	b.w	80064bc <_malloc_r>
 8006c0a:	b92a      	cbnz	r2, 8006c18 <_realloc_r+0x24>
 8006c0c:	f7ff fbea 	bl	80063e4 <_free_r>
 8006c10:	2400      	movs	r4, #0
 8006c12:	4620      	mov	r0, r4
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c18:	f000 f81a 	bl	8006c50 <_malloc_usable_size_r>
 8006c1c:	4285      	cmp	r5, r0
 8006c1e:	4606      	mov	r6, r0
 8006c20:	d802      	bhi.n	8006c28 <_realloc_r+0x34>
 8006c22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c26:	d8f4      	bhi.n	8006c12 <_realloc_r+0x1e>
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	f7ff fc46 	bl	80064bc <_malloc_r>
 8006c30:	4607      	mov	r7, r0
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d0ec      	beq.n	8006c10 <_realloc_r+0x1c>
 8006c36:	42b5      	cmp	r5, r6
 8006c38:	462a      	mov	r2, r5
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	bf28      	it	cs
 8006c3e:	4632      	movcs	r2, r6
 8006c40:	f7ff fbc2 	bl	80063c8 <memcpy>
 8006c44:	4621      	mov	r1, r4
 8006c46:	4640      	mov	r0, r8
 8006c48:	f7ff fbcc 	bl	80063e4 <_free_r>
 8006c4c:	463c      	mov	r4, r7
 8006c4e:	e7e0      	b.n	8006c12 <_realloc_r+0x1e>

08006c50 <_malloc_usable_size_r>:
 8006c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c54:	1f18      	subs	r0, r3, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfbc      	itt	lt
 8006c5a:	580b      	ldrlt	r3, [r1, r0]
 8006c5c:	18c0      	addlt	r0, r0, r3
 8006c5e:	4770      	bx	lr

08006c60 <cosf>:
 8006c60:	ee10 3a10 	vmov	r3, s0
 8006c64:	b507      	push	{r0, r1, r2, lr}
 8006c66:	4a1e      	ldr	r2, [pc, #120]	@ (8006ce0 <cosf+0x80>)
 8006c68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d806      	bhi.n	8006c7e <cosf+0x1e>
 8006c70:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8006ce4 <cosf+0x84>
 8006c74:	b003      	add	sp, #12
 8006c76:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c7a:	f000 b835 	b.w	8006ce8 <__kernel_cosf>
 8006c7e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006c82:	d304      	bcc.n	8006c8e <cosf+0x2e>
 8006c84:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006c88:	b003      	add	sp, #12
 8006c8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c8e:	4668      	mov	r0, sp
 8006c90:	f000 f8ca 	bl	8006e28 <__ieee754_rem_pio2f>
 8006c94:	f000 0003 	and.w	r0, r0, #3
 8006c98:	2801      	cmp	r0, #1
 8006c9a:	d009      	beq.n	8006cb0 <cosf+0x50>
 8006c9c:	2802      	cmp	r0, #2
 8006c9e:	d010      	beq.n	8006cc2 <cosf+0x62>
 8006ca0:	b9b0      	cbnz	r0, 8006cd0 <cosf+0x70>
 8006ca2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ca6:	ed9d 0a00 	vldr	s0, [sp]
 8006caa:	f000 f81d 	bl	8006ce8 <__kernel_cosf>
 8006cae:	e7eb      	b.n	8006c88 <cosf+0x28>
 8006cb0:	eddd 0a01 	vldr	s1, [sp, #4]
 8006cb4:	ed9d 0a00 	vldr	s0, [sp]
 8006cb8:	f000 f86e 	bl	8006d98 <__kernel_sinf>
 8006cbc:	eeb1 0a40 	vneg.f32	s0, s0
 8006cc0:	e7e2      	b.n	8006c88 <cosf+0x28>
 8006cc2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006cc6:	ed9d 0a00 	vldr	s0, [sp]
 8006cca:	f000 f80d 	bl	8006ce8 <__kernel_cosf>
 8006cce:	e7f5      	b.n	8006cbc <cosf+0x5c>
 8006cd0:	eddd 0a01 	vldr	s1, [sp, #4]
 8006cd4:	ed9d 0a00 	vldr	s0, [sp]
 8006cd8:	2001      	movs	r0, #1
 8006cda:	f000 f85d 	bl	8006d98 <__kernel_sinf>
 8006cde:	e7d3      	b.n	8006c88 <cosf+0x28>
 8006ce0:	3f490fd8 	.word	0x3f490fd8
 8006ce4:	00000000 	.word	0x00000000

08006ce8 <__kernel_cosf>:
 8006ce8:	ee10 3a10 	vmov	r3, s0
 8006cec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cf0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8006cf4:	eef0 6a40 	vmov.f32	s13, s0
 8006cf8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006cfc:	d204      	bcs.n	8006d08 <__kernel_cosf+0x20>
 8006cfe:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8006d02:	ee17 2a90 	vmov	r2, s15
 8006d06:	b342      	cbz	r2, 8006d5a <__kernel_cosf+0x72>
 8006d08:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8006d0c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8006d78 <__kernel_cosf+0x90>
 8006d10:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8006d7c <__kernel_cosf+0x94>
 8006d14:	4a1a      	ldr	r2, [pc, #104]	@ (8006d80 <__kernel_cosf+0x98>)
 8006d16:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006d84 <__kernel_cosf+0x9c>
 8006d20:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006d24:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8006d88 <__kernel_cosf+0xa0>
 8006d28:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006d2c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8006d8c <__kernel_cosf+0xa4>
 8006d30:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006d34:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8006d90 <__kernel_cosf+0xa8>
 8006d38:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006d3c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8006d40:	ee26 6a07 	vmul.f32	s12, s12, s14
 8006d44:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006d48:	eee7 0a06 	vfma.f32	s1, s14, s12
 8006d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d50:	d804      	bhi.n	8006d5c <__kernel_cosf+0x74>
 8006d52:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006d56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006d5a:	4770      	bx	lr
 8006d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006d94 <__kernel_cosf+0xac>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	bf9a      	itte	ls
 8006d62:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8006d66:	ee07 3a10 	vmovls	s14, r3
 8006d6a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8006d6e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006d72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d76:	e7ec      	b.n	8006d52 <__kernel_cosf+0x6a>
 8006d78:	ad47d74e 	.word	0xad47d74e
 8006d7c:	310f74f6 	.word	0x310f74f6
 8006d80:	3e999999 	.word	0x3e999999
 8006d84:	b493f27c 	.word	0xb493f27c
 8006d88:	37d00d01 	.word	0x37d00d01
 8006d8c:	bab60b61 	.word	0xbab60b61
 8006d90:	3d2aaaab 	.word	0x3d2aaaab
 8006d94:	3f480000 	.word	0x3f480000

08006d98 <__kernel_sinf>:
 8006d98:	ee10 3a10 	vmov	r3, s0
 8006d9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006da0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8006da4:	d204      	bcs.n	8006db0 <__kernel_sinf+0x18>
 8006da6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006daa:	ee17 3a90 	vmov	r3, s15
 8006dae:	b35b      	cbz	r3, 8006e08 <__kernel_sinf+0x70>
 8006db0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006db4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8006e0c <__kernel_sinf+0x74>
 8006db8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8006e10 <__kernel_sinf+0x78>
 8006dbc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006dc0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8006e14 <__kernel_sinf+0x7c>
 8006dc4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006dc8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8006e18 <__kernel_sinf+0x80>
 8006dcc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006dd0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8006e1c <__kernel_sinf+0x84>
 8006dd4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006dd8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006ddc:	b930      	cbnz	r0, 8006dec <__kernel_sinf+0x54>
 8006dde:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8006e20 <__kernel_sinf+0x88>
 8006de2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006de6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8006dea:	4770      	bx	lr
 8006dec:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006df0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8006df4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006df8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006dfc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8006e24 <__kernel_sinf+0x8c>
 8006e00:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006e04:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	2f2ec9d3 	.word	0x2f2ec9d3
 8006e10:	b2d72f34 	.word	0xb2d72f34
 8006e14:	3638ef1b 	.word	0x3638ef1b
 8006e18:	b9500d01 	.word	0xb9500d01
 8006e1c:	3c088889 	.word	0x3c088889
 8006e20:	be2aaaab 	.word	0xbe2aaaab
 8006e24:	3e2aaaab 	.word	0x3e2aaaab

08006e28 <__ieee754_rem_pio2f>:
 8006e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e2a:	ee10 6a10 	vmov	r6, s0
 8006e2e:	4b88      	ldr	r3, [pc, #544]	@ (8007050 <__ieee754_rem_pio2f+0x228>)
 8006e30:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8006e34:	429d      	cmp	r5, r3
 8006e36:	b087      	sub	sp, #28
 8006e38:	4604      	mov	r4, r0
 8006e3a:	d805      	bhi.n	8006e48 <__ieee754_rem_pio2f+0x20>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	ed80 0a00 	vstr	s0, [r0]
 8006e42:	6043      	str	r3, [r0, #4]
 8006e44:	2000      	movs	r0, #0
 8006e46:	e022      	b.n	8006e8e <__ieee754_rem_pio2f+0x66>
 8006e48:	4b82      	ldr	r3, [pc, #520]	@ (8007054 <__ieee754_rem_pio2f+0x22c>)
 8006e4a:	429d      	cmp	r5, r3
 8006e4c:	d83a      	bhi.n	8006ec4 <__ieee754_rem_pio2f+0x9c>
 8006e4e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007058 <__ieee754_rem_pio2f+0x230>
 8006e58:	4a80      	ldr	r2, [pc, #512]	@ (800705c <__ieee754_rem_pio2f+0x234>)
 8006e5a:	f023 030f 	bic.w	r3, r3, #15
 8006e5e:	dd18      	ble.n	8006e92 <__ieee754_rem_pio2f+0x6a>
 8006e60:	4293      	cmp	r3, r2
 8006e62:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006e66:	bf09      	itett	eq
 8006e68:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8007060 <__ieee754_rem_pio2f+0x238>
 8006e6c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8007064 <__ieee754_rem_pio2f+0x23c>
 8006e70:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8007068 <__ieee754_rem_pio2f+0x240>
 8006e74:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8006e78:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8006e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e80:	ed80 7a00 	vstr	s14, [r0]
 8006e84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e88:	edc0 7a01 	vstr	s15, [r0, #4]
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	b007      	add	sp, #28
 8006e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e92:	4293      	cmp	r3, r2
 8006e94:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006e98:	bf09      	itett	eq
 8006e9a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8007060 <__ieee754_rem_pio2f+0x238>
 8006e9e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8007064 <__ieee754_rem_pio2f+0x23c>
 8006ea2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8007068 <__ieee754_rem_pio2f+0x240>
 8006ea6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8006eaa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006eae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006eb2:	ed80 7a00 	vstr	s14, [r0]
 8006eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eba:	edc0 7a01 	vstr	s15, [r0, #4]
 8006ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec2:	e7e4      	b.n	8006e8e <__ieee754_rem_pio2f+0x66>
 8006ec4:	4b69      	ldr	r3, [pc, #420]	@ (800706c <__ieee754_rem_pio2f+0x244>)
 8006ec6:	429d      	cmp	r5, r3
 8006ec8:	d873      	bhi.n	8006fb2 <__ieee754_rem_pio2f+0x18a>
 8006eca:	f000 f8dd 	bl	8007088 <fabsf>
 8006ece:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8007070 <__ieee754_rem_pio2f+0x248>
 8006ed2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006ed6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ee2:	ee17 0a90 	vmov	r0, s15
 8006ee6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007058 <__ieee754_rem_pio2f+0x230>
 8006eea:	eea7 0a67 	vfms.f32	s0, s14, s15
 8006eee:	281f      	cmp	r0, #31
 8006ef0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007064 <__ieee754_rem_pio2f+0x23c>
 8006ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef8:	eeb1 6a47 	vneg.f32	s12, s14
 8006efc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006f00:	ee16 1a90 	vmov	r1, s13
 8006f04:	dc09      	bgt.n	8006f1a <__ieee754_rem_pio2f+0xf2>
 8006f06:	4a5b      	ldr	r2, [pc, #364]	@ (8007074 <__ieee754_rem_pio2f+0x24c>)
 8006f08:	1e47      	subs	r7, r0, #1
 8006f0a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006f0e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8006f12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d107      	bne.n	8006f2a <__ieee754_rem_pio2f+0x102>
 8006f1a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8006f1e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8006f22:	2a08      	cmp	r2, #8
 8006f24:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006f28:	dc14      	bgt.n	8006f54 <__ieee754_rem_pio2f+0x12c>
 8006f2a:	6021      	str	r1, [r4, #0]
 8006f2c:	ed94 7a00 	vldr	s14, [r4]
 8006f30:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006f34:	2e00      	cmp	r6, #0
 8006f36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006f3a:	ed84 0a01 	vstr	s0, [r4, #4]
 8006f3e:	daa6      	bge.n	8006e8e <__ieee754_rem_pio2f+0x66>
 8006f40:	eeb1 7a47 	vneg.f32	s14, s14
 8006f44:	eeb1 0a40 	vneg.f32	s0, s0
 8006f48:	ed84 7a00 	vstr	s14, [r4]
 8006f4c:	ed84 0a01 	vstr	s0, [r4, #4]
 8006f50:	4240      	negs	r0, r0
 8006f52:	e79c      	b.n	8006e8e <__ieee754_rem_pio2f+0x66>
 8006f54:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8007060 <__ieee754_rem_pio2f+0x238>
 8006f58:	eef0 6a40 	vmov.f32	s13, s0
 8006f5c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006f60:	ee70 7a66 	vsub.f32	s15, s0, s13
 8006f64:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006f68:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007068 <__ieee754_rem_pio2f+0x240>
 8006f6c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8006f70:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006f74:	ee15 2a90 	vmov	r2, s11
 8006f78:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006f7c:	1a5b      	subs	r3, r3, r1
 8006f7e:	2b19      	cmp	r3, #25
 8006f80:	dc04      	bgt.n	8006f8c <__ieee754_rem_pio2f+0x164>
 8006f82:	edc4 5a00 	vstr	s11, [r4]
 8006f86:	eeb0 0a66 	vmov.f32	s0, s13
 8006f8a:	e7cf      	b.n	8006f2c <__ieee754_rem_pio2f+0x104>
 8006f8c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8007078 <__ieee754_rem_pio2f+0x250>
 8006f90:	eeb0 0a66 	vmov.f32	s0, s13
 8006f94:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006f98:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006f9c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800707c <__ieee754_rem_pio2f+0x254>
 8006fa0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006fa4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006fa8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006fac:	ed84 7a00 	vstr	s14, [r4]
 8006fb0:	e7bc      	b.n	8006f2c <__ieee754_rem_pio2f+0x104>
 8006fb2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8006fb6:	d306      	bcc.n	8006fc6 <__ieee754_rem_pio2f+0x19e>
 8006fb8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006fbc:	edc0 7a01 	vstr	s15, [r0, #4]
 8006fc0:	edc0 7a00 	vstr	s15, [r0]
 8006fc4:	e73e      	b.n	8006e44 <__ieee754_rem_pio2f+0x1c>
 8006fc6:	15ea      	asrs	r2, r5, #23
 8006fc8:	3a86      	subs	r2, #134	@ 0x86
 8006fca:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fd6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8007080 <__ieee754_rem_pio2f+0x258>
 8006fda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fe2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006fe6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006fea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ff6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006ffa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ffe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007006:	edcd 7a05 	vstr	s15, [sp, #20]
 800700a:	d11e      	bne.n	800704a <__ieee754_rem_pio2f+0x222>
 800700c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007014:	bf0c      	ite	eq
 8007016:	2301      	moveq	r3, #1
 8007018:	2302      	movne	r3, #2
 800701a:	491a      	ldr	r1, [pc, #104]	@ (8007084 <__ieee754_rem_pio2f+0x25c>)
 800701c:	9101      	str	r1, [sp, #4]
 800701e:	2102      	movs	r1, #2
 8007020:	9100      	str	r1, [sp, #0]
 8007022:	a803      	add	r0, sp, #12
 8007024:	4621      	mov	r1, r4
 8007026:	f000 f837 	bl	8007098 <__kernel_rem_pio2f>
 800702a:	2e00      	cmp	r6, #0
 800702c:	f6bf af2f 	bge.w	8006e8e <__ieee754_rem_pio2f+0x66>
 8007030:	edd4 7a00 	vldr	s15, [r4]
 8007034:	eef1 7a67 	vneg.f32	s15, s15
 8007038:	edc4 7a00 	vstr	s15, [r4]
 800703c:	edd4 7a01 	vldr	s15, [r4, #4]
 8007040:	eef1 7a67 	vneg.f32	s15, s15
 8007044:	edc4 7a01 	vstr	s15, [r4, #4]
 8007048:	e782      	b.n	8006f50 <__ieee754_rem_pio2f+0x128>
 800704a:	2303      	movs	r3, #3
 800704c:	e7e5      	b.n	800701a <__ieee754_rem_pio2f+0x1f2>
 800704e:	bf00      	nop
 8007050:	3f490fd8 	.word	0x3f490fd8
 8007054:	4016cbe3 	.word	0x4016cbe3
 8007058:	3fc90f80 	.word	0x3fc90f80
 800705c:	3fc90fd0 	.word	0x3fc90fd0
 8007060:	37354400 	.word	0x37354400
 8007064:	37354443 	.word	0x37354443
 8007068:	2e85a308 	.word	0x2e85a308
 800706c:	43490f80 	.word	0x43490f80
 8007070:	3f22f984 	.word	0x3f22f984
 8007074:	0801a774 	.word	0x0801a774
 8007078:	2e85a300 	.word	0x2e85a300
 800707c:	248d3132 	.word	0x248d3132
 8007080:	43800000 	.word	0x43800000
 8007084:	0801a7f4 	.word	0x0801a7f4

08007088 <fabsf>:
 8007088:	ee10 3a10 	vmov	r3, s0
 800708c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007090:	ee00 3a10 	vmov	s0, r3
 8007094:	4770      	bx	lr
	...

08007098 <__kernel_rem_pio2f>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	ed2d 8b04 	vpush	{d8-d9}
 80070a0:	b0d9      	sub	sp, #356	@ 0x164
 80070a2:	4690      	mov	r8, r2
 80070a4:	9001      	str	r0, [sp, #4]
 80070a6:	4ab9      	ldr	r2, [pc, #740]	@ (800738c <__kernel_rem_pio2f+0x2f4>)
 80070a8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80070aa:	f118 0f04 	cmn.w	r8, #4
 80070ae:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80070b2:	460f      	mov	r7, r1
 80070b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80070b8:	db27      	blt.n	800710a <__kernel_rem_pio2f+0x72>
 80070ba:	f1b8 0203 	subs.w	r2, r8, #3
 80070be:	bf48      	it	mi
 80070c0:	f108 0204 	addmi.w	r2, r8, #4
 80070c4:	10d2      	asrs	r2, r2, #3
 80070c6:	1c55      	adds	r5, r2, #1
 80070c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80070ca:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800739c <__kernel_rem_pio2f+0x304>
 80070ce:	00e8      	lsls	r0, r5, #3
 80070d0:	eba2 060b 	sub.w	r6, r2, fp
 80070d4:	9002      	str	r0, [sp, #8]
 80070d6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80070da:	eb0a 0c0b 	add.w	ip, sl, fp
 80070de:	ac1c      	add	r4, sp, #112	@ 0x70
 80070e0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80070e4:	2000      	movs	r0, #0
 80070e6:	4560      	cmp	r0, ip
 80070e8:	dd11      	ble.n	800710e <__kernel_rem_pio2f+0x76>
 80070ea:	a91c      	add	r1, sp, #112	@ 0x70
 80070ec:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80070f0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80070f4:	f04f 0c00 	mov.w	ip, #0
 80070f8:	45d4      	cmp	ip, sl
 80070fa:	dc27      	bgt.n	800714c <__kernel_rem_pio2f+0xb4>
 80070fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007100:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800739c <__kernel_rem_pio2f+0x304>
 8007104:	4606      	mov	r6, r0
 8007106:	2400      	movs	r4, #0
 8007108:	e016      	b.n	8007138 <__kernel_rem_pio2f+0xa0>
 800710a:	2200      	movs	r2, #0
 800710c:	e7db      	b.n	80070c6 <__kernel_rem_pio2f+0x2e>
 800710e:	42c6      	cmn	r6, r0
 8007110:	bf5d      	ittte	pl
 8007112:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8007116:	ee07 1a90 	vmovpl	s15, r1
 800711a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800711e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007122:	ece4 7a01 	vstmia	r4!, {s15}
 8007126:	3001      	adds	r0, #1
 8007128:	e7dd      	b.n	80070e6 <__kernel_rem_pio2f+0x4e>
 800712a:	ecfe 6a01 	vldmia	lr!, {s13}
 800712e:	ed96 7a00 	vldr	s14, [r6]
 8007132:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007136:	3401      	adds	r4, #1
 8007138:	455c      	cmp	r4, fp
 800713a:	f1a6 0604 	sub.w	r6, r6, #4
 800713e:	ddf4      	ble.n	800712a <__kernel_rem_pio2f+0x92>
 8007140:	ece9 7a01 	vstmia	r9!, {s15}
 8007144:	f10c 0c01 	add.w	ip, ip, #1
 8007148:	3004      	adds	r0, #4
 800714a:	e7d5      	b.n	80070f8 <__kernel_rem_pio2f+0x60>
 800714c:	a908      	add	r1, sp, #32
 800714e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007152:	9104      	str	r1, [sp, #16]
 8007154:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007156:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8007398 <__kernel_rem_pio2f+0x300>
 800715a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8007394 <__kernel_rem_pio2f+0x2fc>
 800715e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007162:	9203      	str	r2, [sp, #12]
 8007164:	4654      	mov	r4, sl
 8007166:	00a2      	lsls	r2, r4, #2
 8007168:	9205      	str	r2, [sp, #20]
 800716a:	aa58      	add	r2, sp, #352	@ 0x160
 800716c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007170:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8007174:	a944      	add	r1, sp, #272	@ 0x110
 8007176:	aa08      	add	r2, sp, #32
 8007178:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800717c:	4694      	mov	ip, r2
 800717e:	4626      	mov	r6, r4
 8007180:	2e00      	cmp	r6, #0
 8007182:	f1a0 0004 	sub.w	r0, r0, #4
 8007186:	dc4c      	bgt.n	8007222 <__kernel_rem_pio2f+0x18a>
 8007188:	4628      	mov	r0, r5
 800718a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800718e:	f000 f9f5 	bl	800757c <scalbnf>
 8007192:	eeb0 8a40 	vmov.f32	s16, s0
 8007196:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800719a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800719e:	f000 fa53 	bl	8007648 <floorf>
 80071a2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80071a6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80071aa:	2d00      	cmp	r5, #0
 80071ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071b0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80071b4:	ee17 9a90 	vmov	r9, s15
 80071b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071bc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80071c0:	dd41      	ble.n	8007246 <__kernel_rem_pio2f+0x1ae>
 80071c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80071c6:	a908      	add	r1, sp, #32
 80071c8:	f1c5 0e08 	rsb	lr, r5, #8
 80071cc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80071d0:	fa46 f00e 	asr.w	r0, r6, lr
 80071d4:	4481      	add	r9, r0
 80071d6:	fa00 f00e 	lsl.w	r0, r0, lr
 80071da:	1a36      	subs	r6, r6, r0
 80071dc:	f1c5 0007 	rsb	r0, r5, #7
 80071e0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80071e4:	4106      	asrs	r6, r0
 80071e6:	2e00      	cmp	r6, #0
 80071e8:	dd3c      	ble.n	8007264 <__kernel_rem_pio2f+0x1cc>
 80071ea:	f04f 0e00 	mov.w	lr, #0
 80071ee:	f109 0901 	add.w	r9, r9, #1
 80071f2:	4670      	mov	r0, lr
 80071f4:	4574      	cmp	r4, lr
 80071f6:	dc68      	bgt.n	80072ca <__kernel_rem_pio2f+0x232>
 80071f8:	2d00      	cmp	r5, #0
 80071fa:	dd03      	ble.n	8007204 <__kernel_rem_pio2f+0x16c>
 80071fc:	2d01      	cmp	r5, #1
 80071fe:	d074      	beq.n	80072ea <__kernel_rem_pio2f+0x252>
 8007200:	2d02      	cmp	r5, #2
 8007202:	d07d      	beq.n	8007300 <__kernel_rem_pio2f+0x268>
 8007204:	2e02      	cmp	r6, #2
 8007206:	d12d      	bne.n	8007264 <__kernel_rem_pio2f+0x1cc>
 8007208:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800720c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007210:	b340      	cbz	r0, 8007264 <__kernel_rem_pio2f+0x1cc>
 8007212:	4628      	mov	r0, r5
 8007214:	9306      	str	r3, [sp, #24]
 8007216:	f000 f9b1 	bl	800757c <scalbnf>
 800721a:	9b06      	ldr	r3, [sp, #24]
 800721c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007220:	e020      	b.n	8007264 <__kernel_rem_pio2f+0x1cc>
 8007222:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007226:	3e01      	subs	r6, #1
 8007228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800722c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007230:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007234:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007238:	ecac 0a01 	vstmia	ip!, {s0}
 800723c:	ed90 0a00 	vldr	s0, [r0]
 8007240:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007244:	e79c      	b.n	8007180 <__kernel_rem_pio2f+0xe8>
 8007246:	d105      	bne.n	8007254 <__kernel_rem_pio2f+0x1bc>
 8007248:	1e60      	subs	r0, r4, #1
 800724a:	a908      	add	r1, sp, #32
 800724c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007250:	11f6      	asrs	r6, r6, #7
 8007252:	e7c8      	b.n	80071e6 <__kernel_rem_pio2f+0x14e>
 8007254:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007258:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800725c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007260:	da31      	bge.n	80072c6 <__kernel_rem_pio2f+0x22e>
 8007262:	2600      	movs	r6, #0
 8007264:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726c:	f040 8098 	bne.w	80073a0 <__kernel_rem_pio2f+0x308>
 8007270:	1e60      	subs	r0, r4, #1
 8007272:	2200      	movs	r2, #0
 8007274:	4550      	cmp	r0, sl
 8007276:	da4b      	bge.n	8007310 <__kernel_rem_pio2f+0x278>
 8007278:	2a00      	cmp	r2, #0
 800727a:	d065      	beq.n	8007348 <__kernel_rem_pio2f+0x2b0>
 800727c:	3c01      	subs	r4, #1
 800727e:	ab08      	add	r3, sp, #32
 8007280:	3d08      	subs	r5, #8
 8007282:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f8      	beq.n	800727c <__kernel_rem_pio2f+0x1e4>
 800728a:	4628      	mov	r0, r5
 800728c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007290:	f000 f974 	bl	800757c <scalbnf>
 8007294:	1c63      	adds	r3, r4, #1
 8007296:	aa44      	add	r2, sp, #272	@ 0x110
 8007298:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007398 <__kernel_rem_pio2f+0x300>
 800729c:	0099      	lsls	r1, r3, #2
 800729e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80072a2:	4623      	mov	r3, r4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f280 80a9 	bge.w	80073fc <__kernel_rem_pio2f+0x364>
 80072aa:	4623      	mov	r3, r4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f2c0 80c7 	blt.w	8007440 <__kernel_rem_pio2f+0x3a8>
 80072b2:	aa44      	add	r2, sp, #272	@ 0x110
 80072b4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80072b8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8007390 <__kernel_rem_pio2f+0x2f8>
 80072bc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800739c <__kernel_rem_pio2f+0x304>
 80072c0:	2000      	movs	r0, #0
 80072c2:	1ae2      	subs	r2, r4, r3
 80072c4:	e0b1      	b.n	800742a <__kernel_rem_pio2f+0x392>
 80072c6:	2602      	movs	r6, #2
 80072c8:	e78f      	b.n	80071ea <__kernel_rem_pio2f+0x152>
 80072ca:	f852 1b04 	ldr.w	r1, [r2], #4
 80072ce:	b948      	cbnz	r0, 80072e4 <__kernel_rem_pio2f+0x24c>
 80072d0:	b121      	cbz	r1, 80072dc <__kernel_rem_pio2f+0x244>
 80072d2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80072d6:	f842 1c04 	str.w	r1, [r2, #-4]
 80072da:	2101      	movs	r1, #1
 80072dc:	f10e 0e01 	add.w	lr, lr, #1
 80072e0:	4608      	mov	r0, r1
 80072e2:	e787      	b.n	80071f4 <__kernel_rem_pio2f+0x15c>
 80072e4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80072e8:	e7f5      	b.n	80072d6 <__kernel_rem_pio2f+0x23e>
 80072ea:	f104 3cff 	add.w	ip, r4, #4294967295
 80072ee:	aa08      	add	r2, sp, #32
 80072f0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80072f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072f8:	a908      	add	r1, sp, #32
 80072fa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80072fe:	e781      	b.n	8007204 <__kernel_rem_pio2f+0x16c>
 8007300:	f104 3cff 	add.w	ip, r4, #4294967295
 8007304:	aa08      	add	r2, sp, #32
 8007306:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800730a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800730e:	e7f3      	b.n	80072f8 <__kernel_rem_pio2f+0x260>
 8007310:	a908      	add	r1, sp, #32
 8007312:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007316:	3801      	subs	r0, #1
 8007318:	430a      	orrs	r2, r1
 800731a:	e7ab      	b.n	8007274 <__kernel_rem_pio2f+0x1dc>
 800731c:	3201      	adds	r2, #1
 800731e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8007322:	2e00      	cmp	r6, #0
 8007324:	d0fa      	beq.n	800731c <__kernel_rem_pio2f+0x284>
 8007326:	9905      	ldr	r1, [sp, #20]
 8007328:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800732c:	eb0d 0001 	add.w	r0, sp, r1
 8007330:	18e6      	adds	r6, r4, r3
 8007332:	a91c      	add	r1, sp, #112	@ 0x70
 8007334:	f104 0c01 	add.w	ip, r4, #1
 8007338:	384c      	subs	r0, #76	@ 0x4c
 800733a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800733e:	4422      	add	r2, r4
 8007340:	4562      	cmp	r2, ip
 8007342:	da04      	bge.n	800734e <__kernel_rem_pio2f+0x2b6>
 8007344:	4614      	mov	r4, r2
 8007346:	e70e      	b.n	8007166 <__kernel_rem_pio2f+0xce>
 8007348:	9804      	ldr	r0, [sp, #16]
 800734a:	2201      	movs	r2, #1
 800734c:	e7e7      	b.n	800731e <__kernel_rem_pio2f+0x286>
 800734e:	9903      	ldr	r1, [sp, #12]
 8007350:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007354:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007358:	9105      	str	r1, [sp, #20]
 800735a:	ee07 1a90 	vmov	s15, r1
 800735e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007362:	2400      	movs	r4, #0
 8007364:	ece6 7a01 	vstmia	r6!, {s15}
 8007368:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800739c <__kernel_rem_pio2f+0x304>
 800736c:	46b1      	mov	r9, r6
 800736e:	455c      	cmp	r4, fp
 8007370:	dd04      	ble.n	800737c <__kernel_rem_pio2f+0x2e4>
 8007372:	ece0 7a01 	vstmia	r0!, {s15}
 8007376:	f10c 0c01 	add.w	ip, ip, #1
 800737a:	e7e1      	b.n	8007340 <__kernel_rem_pio2f+0x2a8>
 800737c:	ecfe 6a01 	vldmia	lr!, {s13}
 8007380:	ed39 7a01 	vldmdb	r9!, {s14}
 8007384:	3401      	adds	r4, #1
 8007386:	eee6 7a87 	vfma.f32	s15, s13, s14
 800738a:	e7f0      	b.n	800736e <__kernel_rem_pio2f+0x2d6>
 800738c:	0801ab38 	.word	0x0801ab38
 8007390:	0801ab0c 	.word	0x0801ab0c
 8007394:	43800000 	.word	0x43800000
 8007398:	3b800000 	.word	0x3b800000
 800739c:	00000000 	.word	0x00000000
 80073a0:	9b02      	ldr	r3, [sp, #8]
 80073a2:	eeb0 0a48 	vmov.f32	s0, s16
 80073a6:	eba3 0008 	sub.w	r0, r3, r8
 80073aa:	f000 f8e7 	bl	800757c <scalbnf>
 80073ae:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8007394 <__kernel_rem_pio2f+0x2fc>
 80073b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80073b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ba:	db19      	blt.n	80073f0 <__kernel_rem_pio2f+0x358>
 80073bc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8007398 <__kernel_rem_pio2f+0x300>
 80073c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80073c4:	aa08      	add	r2, sp, #32
 80073c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073ca:	3508      	adds	r5, #8
 80073cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073d0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80073d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80073dc:	ee10 3a10 	vmov	r3, s0
 80073e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80073e4:	ee17 3a90 	vmov	r3, s15
 80073e8:	3401      	adds	r4, #1
 80073ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80073ee:	e74c      	b.n	800728a <__kernel_rem_pio2f+0x1f2>
 80073f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80073f4:	aa08      	add	r2, sp, #32
 80073f6:	ee10 3a10 	vmov	r3, s0
 80073fa:	e7f6      	b.n	80073ea <__kernel_rem_pio2f+0x352>
 80073fc:	a808      	add	r0, sp, #32
 80073fe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007402:	9001      	str	r0, [sp, #4]
 8007404:	ee07 0a90 	vmov	s15, r0
 8007408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800740c:	3b01      	subs	r3, #1
 800740e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007412:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007416:	ed62 7a01 	vstmdb	r2!, {s15}
 800741a:	e743      	b.n	80072a4 <__kernel_rem_pio2f+0x20c>
 800741c:	ecfc 6a01 	vldmia	ip!, {s13}
 8007420:	ecb5 7a01 	vldmia	r5!, {s14}
 8007424:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007428:	3001      	adds	r0, #1
 800742a:	4550      	cmp	r0, sl
 800742c:	dc01      	bgt.n	8007432 <__kernel_rem_pio2f+0x39a>
 800742e:	4282      	cmp	r2, r0
 8007430:	daf4      	bge.n	800741c <__kernel_rem_pio2f+0x384>
 8007432:	a858      	add	r0, sp, #352	@ 0x160
 8007434:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007438:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800743c:	3b01      	subs	r3, #1
 800743e:	e735      	b.n	80072ac <__kernel_rem_pio2f+0x214>
 8007440:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007442:	2b02      	cmp	r3, #2
 8007444:	dc09      	bgt.n	800745a <__kernel_rem_pio2f+0x3c2>
 8007446:	2b00      	cmp	r3, #0
 8007448:	dc2b      	bgt.n	80074a2 <__kernel_rem_pio2f+0x40a>
 800744a:	d044      	beq.n	80074d6 <__kernel_rem_pio2f+0x43e>
 800744c:	f009 0007 	and.w	r0, r9, #7
 8007450:	b059      	add	sp, #356	@ 0x164
 8007452:	ecbd 8b04 	vpop	{d8-d9}
 8007456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800745c:	2b03      	cmp	r3, #3
 800745e:	d1f5      	bne.n	800744c <__kernel_rem_pio2f+0x3b4>
 8007460:	aa30      	add	r2, sp, #192	@ 0xc0
 8007462:	1f0b      	subs	r3, r1, #4
 8007464:	4413      	add	r3, r2
 8007466:	461a      	mov	r2, r3
 8007468:	4620      	mov	r0, r4
 800746a:	2800      	cmp	r0, #0
 800746c:	f1a2 0204 	sub.w	r2, r2, #4
 8007470:	dc52      	bgt.n	8007518 <__kernel_rem_pio2f+0x480>
 8007472:	4622      	mov	r2, r4
 8007474:	2a01      	cmp	r2, #1
 8007476:	f1a3 0304 	sub.w	r3, r3, #4
 800747a:	dc5d      	bgt.n	8007538 <__kernel_rem_pio2f+0x4a0>
 800747c:	ab30      	add	r3, sp, #192	@ 0xc0
 800747e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800739c <__kernel_rem_pio2f+0x304>
 8007482:	440b      	add	r3, r1
 8007484:	2c01      	cmp	r4, #1
 8007486:	dc67      	bgt.n	8007558 <__kernel_rem_pio2f+0x4c0>
 8007488:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800748c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8007490:	2e00      	cmp	r6, #0
 8007492:	d167      	bne.n	8007564 <__kernel_rem_pio2f+0x4cc>
 8007494:	edc7 6a00 	vstr	s13, [r7]
 8007498:	ed87 7a01 	vstr	s14, [r7, #4]
 800749c:	edc7 7a02 	vstr	s15, [r7, #8]
 80074a0:	e7d4      	b.n	800744c <__kernel_rem_pio2f+0x3b4>
 80074a2:	ab30      	add	r3, sp, #192	@ 0xc0
 80074a4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800739c <__kernel_rem_pio2f+0x304>
 80074a8:	440b      	add	r3, r1
 80074aa:	4622      	mov	r2, r4
 80074ac:	2a00      	cmp	r2, #0
 80074ae:	da24      	bge.n	80074fa <__kernel_rem_pio2f+0x462>
 80074b0:	b34e      	cbz	r6, 8007506 <__kernel_rem_pio2f+0x46e>
 80074b2:	eef1 7a47 	vneg.f32	s15, s14
 80074b6:	edc7 7a00 	vstr	s15, [r7]
 80074ba:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80074be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074c2:	aa31      	add	r2, sp, #196	@ 0xc4
 80074c4:	2301      	movs	r3, #1
 80074c6:	429c      	cmp	r4, r3
 80074c8:	da20      	bge.n	800750c <__kernel_rem_pio2f+0x474>
 80074ca:	b10e      	cbz	r6, 80074d0 <__kernel_rem_pio2f+0x438>
 80074cc:	eef1 7a67 	vneg.f32	s15, s15
 80074d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80074d4:	e7ba      	b.n	800744c <__kernel_rem_pio2f+0x3b4>
 80074d6:	ab30      	add	r3, sp, #192	@ 0xc0
 80074d8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800739c <__kernel_rem_pio2f+0x304>
 80074dc:	440b      	add	r3, r1
 80074de:	2c00      	cmp	r4, #0
 80074e0:	da05      	bge.n	80074ee <__kernel_rem_pio2f+0x456>
 80074e2:	b10e      	cbz	r6, 80074e8 <__kernel_rem_pio2f+0x450>
 80074e4:	eef1 7a67 	vneg.f32	s15, s15
 80074e8:	edc7 7a00 	vstr	s15, [r7]
 80074ec:	e7ae      	b.n	800744c <__kernel_rem_pio2f+0x3b4>
 80074ee:	ed33 7a01 	vldmdb	r3!, {s14}
 80074f2:	3c01      	subs	r4, #1
 80074f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074f8:	e7f1      	b.n	80074de <__kernel_rem_pio2f+0x446>
 80074fa:	ed73 7a01 	vldmdb	r3!, {s15}
 80074fe:	3a01      	subs	r2, #1
 8007500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007504:	e7d2      	b.n	80074ac <__kernel_rem_pio2f+0x414>
 8007506:	eef0 7a47 	vmov.f32	s15, s14
 800750a:	e7d4      	b.n	80074b6 <__kernel_rem_pio2f+0x41e>
 800750c:	ecb2 7a01 	vldmia	r2!, {s14}
 8007510:	3301      	adds	r3, #1
 8007512:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007516:	e7d6      	b.n	80074c6 <__kernel_rem_pio2f+0x42e>
 8007518:	edd2 7a00 	vldr	s15, [r2]
 800751c:	edd2 6a01 	vldr	s13, [r2, #4]
 8007520:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007524:	3801      	subs	r0, #1
 8007526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800752a:	ed82 7a00 	vstr	s14, [r2]
 800752e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007532:	edc2 7a01 	vstr	s15, [r2, #4]
 8007536:	e798      	b.n	800746a <__kernel_rem_pio2f+0x3d2>
 8007538:	edd3 7a00 	vldr	s15, [r3]
 800753c:	edd3 6a01 	vldr	s13, [r3, #4]
 8007540:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007544:	3a01      	subs	r2, #1
 8007546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800754a:	ed83 7a00 	vstr	s14, [r3]
 800754e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007552:	edc3 7a01 	vstr	s15, [r3, #4]
 8007556:	e78d      	b.n	8007474 <__kernel_rem_pio2f+0x3dc>
 8007558:	ed33 7a01 	vldmdb	r3!, {s14}
 800755c:	3c01      	subs	r4, #1
 800755e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007562:	e78f      	b.n	8007484 <__kernel_rem_pio2f+0x3ec>
 8007564:	eef1 6a66 	vneg.f32	s13, s13
 8007568:	eeb1 7a47 	vneg.f32	s14, s14
 800756c:	edc7 6a00 	vstr	s13, [r7]
 8007570:	ed87 7a01 	vstr	s14, [r7, #4]
 8007574:	eef1 7a67 	vneg.f32	s15, s15
 8007578:	e790      	b.n	800749c <__kernel_rem_pio2f+0x404>
 800757a:	bf00      	nop

0800757c <scalbnf>:
 800757c:	ee10 3a10 	vmov	r3, s0
 8007580:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007584:	d02b      	beq.n	80075de <scalbnf+0x62>
 8007586:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800758a:	d302      	bcc.n	8007592 <scalbnf+0x16>
 800758c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007590:	4770      	bx	lr
 8007592:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007596:	d123      	bne.n	80075e0 <scalbnf+0x64>
 8007598:	4b24      	ldr	r3, [pc, #144]	@ (800762c <scalbnf+0xb0>)
 800759a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007630 <scalbnf+0xb4>
 800759e:	4298      	cmp	r0, r3
 80075a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80075a4:	db17      	blt.n	80075d6 <scalbnf+0x5a>
 80075a6:	ee10 3a10 	vmov	r3, s0
 80075aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80075ae:	3a19      	subs	r2, #25
 80075b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80075b4:	4288      	cmp	r0, r1
 80075b6:	dd15      	ble.n	80075e4 <scalbnf+0x68>
 80075b8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007634 <scalbnf+0xb8>
 80075bc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007638 <scalbnf+0xbc>
 80075c0:	ee10 3a10 	vmov	r3, s0
 80075c4:	eeb0 7a67 	vmov.f32	s14, s15
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bfb8      	it	lt
 80075cc:	eef0 7a66 	vmovlt.f32	s15, s13
 80075d0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80075d4:	4770      	bx	lr
 80075d6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800763c <scalbnf+0xc0>
 80075da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80075de:	4770      	bx	lr
 80075e0:	0dd2      	lsrs	r2, r2, #23
 80075e2:	e7e5      	b.n	80075b0 <scalbnf+0x34>
 80075e4:	4410      	add	r0, r2
 80075e6:	28fe      	cmp	r0, #254	@ 0xfe
 80075e8:	dce6      	bgt.n	80075b8 <scalbnf+0x3c>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	dd06      	ble.n	80075fc <scalbnf+0x80>
 80075ee:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80075f2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80075f6:	ee00 3a10 	vmov	s0, r3
 80075fa:	4770      	bx	lr
 80075fc:	f110 0f16 	cmn.w	r0, #22
 8007600:	da09      	bge.n	8007616 <scalbnf+0x9a>
 8007602:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800763c <scalbnf+0xc0>
 8007606:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007640 <scalbnf+0xc4>
 800760a:	ee10 3a10 	vmov	r3, s0
 800760e:	eeb0 7a67 	vmov.f32	s14, s15
 8007612:	2b00      	cmp	r3, #0
 8007614:	e7d9      	b.n	80075ca <scalbnf+0x4e>
 8007616:	3019      	adds	r0, #25
 8007618:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800761c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007620:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007644 <scalbnf+0xc8>
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	e7d7      	b.n	80075da <scalbnf+0x5e>
 800762a:	bf00      	nop
 800762c:	ffff3cb0 	.word	0xffff3cb0
 8007630:	4c000000 	.word	0x4c000000
 8007634:	7149f2ca 	.word	0x7149f2ca
 8007638:	f149f2ca 	.word	0xf149f2ca
 800763c:	0da24260 	.word	0x0da24260
 8007640:	8da24260 	.word	0x8da24260
 8007644:	33000000 	.word	0x33000000

08007648 <floorf>:
 8007648:	ee10 3a10 	vmov	r3, s0
 800764c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007650:	3a7f      	subs	r2, #127	@ 0x7f
 8007652:	2a16      	cmp	r2, #22
 8007654:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007658:	dc2b      	bgt.n	80076b2 <floorf+0x6a>
 800765a:	2a00      	cmp	r2, #0
 800765c:	da12      	bge.n	8007684 <floorf+0x3c>
 800765e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80076c4 <floorf+0x7c>
 8007662:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007666:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800766a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766e:	dd06      	ble.n	800767e <floorf+0x36>
 8007670:	2b00      	cmp	r3, #0
 8007672:	da24      	bge.n	80076be <floorf+0x76>
 8007674:	2900      	cmp	r1, #0
 8007676:	4b14      	ldr	r3, [pc, #80]	@ (80076c8 <floorf+0x80>)
 8007678:	bf08      	it	eq
 800767a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800767e:	ee00 3a10 	vmov	s0, r3
 8007682:	4770      	bx	lr
 8007684:	4911      	ldr	r1, [pc, #68]	@ (80076cc <floorf+0x84>)
 8007686:	4111      	asrs	r1, r2
 8007688:	420b      	tst	r3, r1
 800768a:	d0fa      	beq.n	8007682 <floorf+0x3a>
 800768c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80076c4 <floorf+0x7c>
 8007690:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007694:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769c:	ddef      	ble.n	800767e <floorf+0x36>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bfbe      	ittt	lt
 80076a2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80076a6:	fa40 f202 	asrlt.w	r2, r0, r2
 80076aa:	189b      	addlt	r3, r3, r2
 80076ac:	ea23 0301 	bic.w	r3, r3, r1
 80076b0:	e7e5      	b.n	800767e <floorf+0x36>
 80076b2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80076b6:	d3e4      	bcc.n	8007682 <floorf+0x3a>
 80076b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80076bc:	4770      	bx	lr
 80076be:	2300      	movs	r3, #0
 80076c0:	e7dd      	b.n	800767e <floorf+0x36>
 80076c2:	bf00      	nop
 80076c4:	7149f2ca 	.word	0x7149f2ca
 80076c8:	bf800000 	.word	0xbf800000
 80076cc:	007fffff 	.word	0x007fffff

080076d0 <_init>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	bf00      	nop
 80076d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d6:	bc08      	pop	{r3}
 80076d8:	469e      	mov	lr, r3
 80076da:	4770      	bx	lr

080076dc <_fini>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	bf00      	nop
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr
