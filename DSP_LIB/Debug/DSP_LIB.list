
DSP_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800bcc8  0800bcc8  0000ccc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd60  0800bd60  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd60  0800bd60  0000cd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd68  0800bd68  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd68  0800bd68  0000cd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd6c  0800bd6c  0000cd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bd70  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007614  200001d4  0800bf44  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200077e8  0800bf44  0000d7e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f722  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ea  00000000  00000000  0002c926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  00031310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000159a  00000000  00000000  00032f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024909  00000000  00000000  0003450a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ee5  00000000  00000000  00058e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3016  00000000  00000000  0007acf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dd0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d28  00000000  00000000  0015dd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00165a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bcb0 	.word	0x0800bcb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800bcb0 	.word	0x0800bcb0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 fdc8 	bl	8000e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f86b 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 fa33 	bl	8000738 <MX_GPIO_Init>
  MX_DMA_Init();
 80002d2:	f000 f9ff 	bl	80006d4 <MX_DMA_Init>
  MX_ADC2_Init();
 80002d6:	f000 f8b1 	bl	800043c <MX_ADC2_Init>
  MX_TIM6_Init();
 80002da:	f000 f9c5 	bl	8000668 <MX_TIM6_Init>
  MX_DAC3_Init();
 80002de:	f000 f929 	bl	8000534 <MX_DAC3_Init>
  MX_OPAMP1_Init();
 80002e2:	f000 f975 	bl	80005d0 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80002e6:	f000 f999 	bl	800061c <MX_OPAMP3_Init>
  MX_CORDIC_Init();
 80002ea:	f000 f90f 	bl	800050c <MX_CORDIC_Init>
  MX_FMAC_Init();
 80002ee:	f000 f95b 	bl	80005a8 <MX_FMAC_Init>
  MX_USB_Device_Init();
 80002f2:	f00a fb33 	bl	800a95c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

HAL_OPAMP_Start(&hopamp1);
 80002f6:	4820      	ldr	r0, [pc, #128]	@ (8000378 <main+0xb8>)
 80002f8:	f003 fc90 	bl	8003c1c <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp3);
 80002fc:	481f      	ldr	r0, [pc, #124]	@ (800037c <main+0xbc>)
 80002fe:	f003 fc8d 	bl	8003c1c <HAL_OPAMP_Start>

HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 8000302:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000306:	491e      	ldr	r1, [pc, #120]	@ (8000380 <main+0xc0>)
 8000308:	481e      	ldr	r0, [pc, #120]	@ (8000384 <main+0xc4>)
 800030a:	f001 fa49 	bl	80017a0 <HAL_ADC_Start_DMA>
//HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, DAC_BUFFER, BUFFER_SIZE, DAC_ALIGN_12B_R);
HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, DAC_BUFFER, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800030e:	2300      	movs	r3, #0
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000316:	4a1c      	ldr	r2, [pc, #112]	@ (8000388 <main+0xc8>)
 8000318:	2100      	movs	r1, #0
 800031a:	481c      	ldr	r0, [pc, #112]	@ (800038c <main+0xcc>)
 800031c:	f002 fbc2 	bl	8002aa4 <HAL_DAC_Start_DMA>
HAL_TIM_Base_Start(&htim6);
 8000320:	481b      	ldr	r0, [pc, #108]	@ (8000390 <main+0xd0>)
 8000322:	f006 f9dd 	bl	80066e0 <HAL_TIM_Base_Start>


HAL_Delay(100);
 8000326:	2064      	movs	r0, #100	@ 0x64
 8000328:	f000 fe08 	bl	8000f3c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		if (WHILE_FLAG==2) {
 800032c:	4b19      	ldr	r3, [pc, #100]	@ (8000394 <main+0xd4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b02      	cmp	r3, #2
 8000332:	d1fb      	bne.n	800032c <main+0x6c>





			for (int i = 0; i < BUFFER_SIZE; ++i) {
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	e012      	b.n	8000360 <main+0xa0>
			HAL_Delay(1);
 800033a:	2001      	movs	r0, #1
 800033c:	f000 fdfe 	bl	8000f3c <HAL_Delay>
			  sprintf(CDC_BUFFER,"V:%d,%d\r\n",WHILE_BUFFER[i],i);
 8000340:	4a15      	ldr	r2, [pc, #84]	@ (8000398 <main+0xd8>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4914      	ldr	r1, [pc, #80]	@ (800039c <main+0xdc>)
 800034c:	4814      	ldr	r0, [pc, #80]	@ (80003a0 <main+0xe0>)
 800034e:	f00b f80f 	bl	800b370 <siprintf>
			  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 8000352:	211e      	movs	r1, #30
 8000354:	4812      	ldr	r0, [pc, #72]	@ (80003a0 <main+0xe0>)
 8000356:	f00a fbbf 	bl	800aad8 <CDC_Transmit_FS>
			for (int i = 0; i < BUFFER_SIZE; ++i) {
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3301      	adds	r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000366:	dbe8      	blt.n	800033a <main+0x7a>
			}
			HAL_Delay(10);
 8000368:	200a      	movs	r0, #10
 800036a:	f000 fde7 	bl	8000f3c <HAL_Delay>
			  WHILE_FLAG=0;
 800036e:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <main+0xd4>)
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
		if (WHILE_FLAG==2) {
 8000374:	e7da      	b.n	800032c <main+0x6c>
 8000376:	bf00      	nop
 8000378:	20000390 	.word	0x20000390
 800037c:	200003cc 	.word	0x200003cc
 8000380:	20000454 	.word	0x20000454
 8000384:	200001f0 	.word	0x200001f0
 8000388:	20002454 	.word	0x20002454
 800038c:	200002e4 	.word	0x200002e4
 8000390:	20000408 	.word	0x20000408
 8000394:	200064c4 	.word	0x200064c4
 8000398:	20004454 	.word	0x20004454
 800039c:	0800bcc8 	.word	0x0800bcc8
 80003a0:	20006454 	.word	0x20006454

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b094      	sub	sp, #80	@ 0x50
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2238      	movs	r2, #56	@ 0x38
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f00a fffc 	bl	800b3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003c6:	2000      	movs	r0, #0
 80003c8:	f005 f98c 	bl	80056e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003cc:	2321      	movs	r3, #33	@ 0x21
 80003ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003d6:	2301      	movs	r3, #1
 80003d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003da:	2302      	movs	r3, #2
 80003dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003de:	2303      	movs	r3, #3
 80003e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80003e2:	2302      	movs	r3, #2
 80003e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003e6:	2355      	movs	r3, #85	@ 0x55
 80003e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003ea:	2302      	movs	r3, #2
 80003ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003ee:	2302      	movs	r3, #2
 80003f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f6:	f107 0318 	add.w	r3, r7, #24
 80003fa:	4618      	mov	r0, r3
 80003fc:	f005 fa26 	bl	800584c <HAL_RCC_OscConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000406:	f000 fabf 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	230f      	movs	r3, #15
 800040c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040e:	2303      	movs	r3, #3
 8000410:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2104      	movs	r1, #4
 8000422:	4618      	mov	r0, r3
 8000424:	f005 fd24 	bl	8005e70 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800042e:	f000 faab 	bl	8000988 <Error_Handler>
  }
}
 8000432:	bf00      	nop
 8000434:	3750      	adds	r7, #80	@ 0x50
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000442:	463b      	mov	r3, r7
 8000444:	2220      	movs	r2, #32
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f00a ffb1 	bl	800b3b0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800044e:	4b2c      	ldr	r3, [pc, #176]	@ (8000500 <MX_ADC2_Init+0xc4>)
 8000450:	4a2c      	ldr	r2, [pc, #176]	@ (8000504 <MX_ADC2_Init+0xc8>)
 8000452:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000454:	4b2a      	ldr	r3, [pc, #168]	@ (8000500 <MX_ADC2_Init+0xc4>)
 8000456:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800045a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800045c:	4b28      	ldr	r3, [pc, #160]	@ (8000500 <MX_ADC2_Init+0xc4>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000462:	4b27      	ldr	r3, [pc, #156]	@ (8000500 <MX_ADC2_Init+0xc4>)
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000468:	4b25      	ldr	r3, [pc, #148]	@ (8000500 <MX_ADC2_Init+0xc4>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <MX_ADC2_Init+0xc4>)
 8000470:	2200      	movs	r2, #0
 8000472:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000474:	4b22      	ldr	r3, [pc, #136]	@ (8000500 <MX_ADC2_Init+0xc4>)
 8000476:	2204      	movs	r2, #4
 8000478:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800047a:	4b21      	ldr	r3, [pc, #132]	@ (8000500 <MX_ADC2_Init+0xc4>)
 800047c:	2200      	movs	r2, #0
 800047e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000480:	4b1f      	ldr	r3, [pc, #124]	@ (8000500 <MX_ADC2_Init+0xc4>)
 8000482:	2200      	movs	r2, #0
 8000484:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000486:	4b1e      	ldr	r3, [pc, #120]	@ (8000500 <MX_ADC2_Init+0xc4>)
 8000488:	2201      	movs	r2, #1
 800048a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800048c:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <MX_ADC2_Init+0xc4>)
 800048e:	2200      	movs	r2, #0
 8000490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000494:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <MX_ADC2_Init+0xc4>)
 8000496:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800049a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800049c:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <MX_ADC2_Init+0xc4>)
 800049e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80004a4:	4b16      	ldr	r3, [pc, #88]	@ (8000500 <MX_ADC2_Init+0xc4>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004ac:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <MX_ADC2_Init+0xc4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <MX_ADC2_Init+0xc4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004ba:	4811      	ldr	r0, [pc, #68]	@ (8000500 <MX_ADC2_Init+0xc4>)
 80004bc:	f000 ffec 	bl	8001498 <HAL_ADC_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80004c6:	f000 fa5f 	bl	8000988 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80004ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_ADC2_Init+0xcc>)
 80004cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ce:	2306      	movs	r3, #6
 80004d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004d6:	237f      	movs	r3, #127	@ 0x7f
 80004d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004da:	2304      	movs	r3, #4
 80004dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004e2:	463b      	mov	r3, r7
 80004e4:	4619      	mov	r1, r3
 80004e6:	4806      	ldr	r0, [pc, #24]	@ (8000500 <MX_ADC2_Init+0xc4>)
 80004e8:	f001 fc3c 	bl	8001d64 <HAL_ADC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80004f2:	f000 fa49 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	3720      	adds	r7, #32
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200001f0 	.word	0x200001f0
 8000504:	50000100 	.word	0x50000100
 8000508:	cb8c0000 	.word	0xcb8c0000

0800050c <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <MX_CORDIC_Init+0x20>)
 8000512:	4a07      	ldr	r2, [pc, #28]	@ (8000530 <MX_CORDIC_Init+0x24>)
 8000514:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <MX_CORDIC_Init+0x20>)
 8000518:	f002 f960 	bl	80027dc <HAL_CORDIC_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000522:	f000 fa31 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200002bc 	.word	0x200002bc
 8000530:	40020c00 	.word	0x40020c00

08000534 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08c      	sub	sp, #48	@ 0x30
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800053a:	463b      	mov	r3, r7
 800053c:	2230      	movs	r2, #48	@ 0x30
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f00a ff35 	bl	800b3b0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000546:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <MX_DAC3_Init+0x6c>)
 8000548:	4a16      	ldr	r2, [pc, #88]	@ (80005a4 <MX_DAC3_Init+0x70>)
 800054a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 800054c:	4814      	ldr	r0, [pc, #80]	@ (80005a0 <MX_DAC3_Init+0x6c>)
 800054e:	f002 fa86 	bl	8002a5e <HAL_DAC_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000558:	f000 fa16 	bl	8000988 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800055c:	2302      	movs	r3, #2
 800055e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800056c:	231e      	movs	r3, #30
 800056e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000578:	2302      	movs	r3, #2
 800057a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	4806      	ldr	r0, [pc, #24]	@ (80005a0 <MX_DAC3_Init+0x6c>)
 8000588:	f002 fb7e 	bl	8002c88 <HAL_DAC_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000592:	f000 f9f9 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	3730      	adds	r7, #48	@ 0x30
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200002e4 	.word	0x200002e4
 80005a4:	50001000 	.word	0x50001000

080005a8 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <MX_FMAC_Init+0x20>)
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <MX_FMAC_Init+0x24>)
 80005b0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_FMAC_Init+0x20>)
 80005b4:	f003 f81c 	bl	80035f0 <HAL_FMAC_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80005be:	f000 f9e3 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000358 	.word	0x20000358
 80005cc:	40021400 	.word	0x40021400

080005d0 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_OPAMP1_Init+0x44>)
 80005d6:	4a10      	ldr	r2, [pc, #64]	@ (8000618 <MX_OPAMP1_Init+0x48>)
 80005d8:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_OPAMP1_Init+0x44>)
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_OPAMP1_Init+0x44>)
 80005e2:	2260      	movs	r2, #96	@ 0x60
 80005e4:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <MX_OPAMP1_Init+0x44>)
 80005e8:	220c      	movs	r2, #12
 80005ea:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_OPAMP1_Init+0x44>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <MX_OPAMP1_Init+0x44>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_OPAMP1_Init+0x44>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_OPAMP1_Init+0x44>)
 8000600:	f003 fa3c 	bl	8003a7c <HAL_OPAMP_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 800060a:	f000 f9bd 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000390 	.word	0x20000390
 8000618:	40010300 	.word	0x40010300

0800061c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_OPAMP3_Init+0x44>)
 8000622:	4a10      	ldr	r2, [pc, #64]	@ (8000664 <MX_OPAMP3_Init+0x48>)
 8000624:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_OPAMP3_Init+0x44>)
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_OPAMP3_Init+0x44>)
 800062e:	2260      	movs	r2, #96	@ 0x60
 8000630:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <MX_OPAMP3_Init+0x44>)
 8000634:	2208      	movs	r2, #8
 8000636:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_OPAMP3_Init+0x44>)
 800063a:	2201      	movs	r2, #1
 800063c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <MX_OPAMP3_Init+0x44>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_OPAMP3_Init+0x44>)
 8000646:	2200      	movs	r2, #0
 8000648:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_OPAMP3_Init+0x44>)
 800064c:	f003 fa16 	bl	8003a7c <HAL_OPAMP_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000656:	f000 f997 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200003cc 	.word	0x200003cc
 8000664:	40010308 	.word	0x40010308

08000668 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_TIM6_Init+0x64>)
 800067a:	4a15      	ldr	r2, [pc, #84]	@ (80006d0 <MX_TIM6_Init+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17-1;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_TIM6_Init+0x64>)
 8000680:	2210      	movs	r2, #16
 8000682:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_TIM6_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <MX_TIM6_Init+0x64>)
 800068c:	2204      	movs	r2, #4
 800068e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000690:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_TIM6_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000696:	480d      	ldr	r0, [pc, #52]	@ (80006cc <MX_TIM6_Init+0x64>)
 8000698:	f005 ffca 	bl	8006630 <HAL_TIM_Base_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80006a2:	f000 f971 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006a6:	2320      	movs	r3, #32
 80006a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	@ (80006cc <MX_TIM6_Init+0x64>)
 80006b4:	f006 f912 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80006be:	f000 f963 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000408 	.word	0x20000408
 80006d0:	40001000 	.word	0x40001000

080006d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_DMA_Init+0x60>)
 80006dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006de:	4a15      	ldr	r2, [pc, #84]	@ (8000734 <MX_DMA_Init+0x60>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80006e6:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <MX_DMA_Init+0x60>)
 80006e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <MX_DMA_Init+0x60>)
 80006f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000734 <MX_DMA_Init+0x60>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <MX_DMA_Init+0x60>)
 8000700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	200b      	movs	r0, #11
 8000710:	f002 f971 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000714:	200b      	movs	r0, #11
 8000716:	f002 f988 	bl	8002a2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	200c      	movs	r0, #12
 8000720:	f002 f969 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000724:	200c      	movs	r0, #12
 8000726:	f002 f980 	bl	8002a2a <HAL_NVIC_EnableIRQ>

}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_GPIO_Init+0x8c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a1c      	ldr	r2, [pc, #112]	@ (80007c4 <MX_GPIO_Init+0x8c>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_GPIO_Init+0x8c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_GPIO_Init+0x8c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a16      	ldr	r2, [pc, #88]	@ (80007c4 <MX_GPIO_Init+0x8c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_GPIO_Init+0x8c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_GPIO_Init+0x8c>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <MX_GPIO_Init+0x8c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_GPIO_Init+0x8c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2101      	movs	r1, #1
 800079a:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <MX_GPIO_Init+0x90>)
 800079c:	f003 f956 	bl	8003a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <MX_GPIO_Init+0x90>)
 80007b8:	f002 ffc6 	bl	8003748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	48000400 	.word	0x48000400

080007cc <HAL_ADC_ConvHalfCpltCallback>:
//}


//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b087      	sub	sp, #28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	for (size_t i = 0; i < BUFFER_DELAY; i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e00a      	b.n	80007f0 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		DAC_BUFFER[i] = DELAY_BUFFER_1[i];
 80007da:	4a2c      	ldr	r2, [pc, #176]	@ (800088c <HAL_ADC_ConvHalfCpltCallback+0xc0>)
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e2:	492b      	ldr	r1, [pc, #172]	@ (8000890 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < BUFFER_DELAY; i++)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3301      	adds	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	2b09      	cmp	r3, #9
 80007f4:	d9f1      	bls.n	80007da <HAL_ADC_ConvHalfCpltCallback+0xe>
	}

	for (size_t i = BUFFER_DELAY; i < BUFFER_SIZE_HALF; i++)
 80007f6:	230a      	movs	r3, #10
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	e00b      	b.n	8000814 <HAL_ADC_ConvHalfCpltCallback+0x48>
	{
		DAC_BUFFER[i] = ADC_BUFFER[i-BUFFER_DELAY];
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	3b0a      	subs	r3, #10
 8000800:	4a24      	ldr	r2, [pc, #144]	@ (8000894 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8000802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000806:	4922      	ldr	r1, [pc, #136]	@ (8000890 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = BUFFER_DELAY; i < BUFFER_SIZE_HALF; i++)
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	3301      	adds	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800081a:	d3ef      	bcc.n	80007fc <HAL_ADC_ConvHalfCpltCallback+0x30>
	}

	for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE_HALF+BUFFER_DELAY; i++)
 800081c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e00e      	b.n	8000842 <HAL_ADC_ConvHalfCpltCallback+0x76>
	{
		DELAY_BUFFER_0[i-BUFFER_SIZE_HALF] = ADC_BUFFER[i-BUFFER_DELAY];
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f1a3 020a 	sub.w	r2, r3, #10
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8000830:	4918      	ldr	r1, [pc, #96]	@ (8000894 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8000832:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000836:	4918      	ldr	r1, [pc, #96]	@ (8000898 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8000838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE_HALF+BUFFER_DELAY; i++)
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3301      	adds	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f240 4209 	movw	r2, #1033	@ 0x409
 8000848:	4293      	cmp	r3, r2
 800084a:	d9eb      	bls.n	8000824 <HAL_ADC_ConvHalfCpltCallback+0x58>
	}


	//抓数据进while
	if (WHILE_FLAG==0) {
 800084c:	4b13      	ldr	r3, [pc, #76]	@ (800089c <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d114      	bne.n	800087e <HAL_ADC_ConvHalfCpltCallback+0xb2>
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	e00a      	b.n	8000870 <HAL_ADC_ConvHalfCpltCallback+0xa4>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 800085a:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000862:	490f      	ldr	r1, [pc, #60]	@ (80008a0 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	3301      	adds	r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000876:	d3f0      	bcc.n	800085a <HAL_ADC_ConvHalfCpltCallback+0x8e>
		WHILE_FLAG=1;
 8000878:	4b08      	ldr	r3, [pc, #32]	@ (800089c <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
	}



}
 800087e:	bf00      	nop
 8000880:	371c      	adds	r7, #28
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2000649c 	.word	0x2000649c
 8000890:	20002454 	.word	0x20002454
 8000894:	20000454 	.word	0x20000454
 8000898:	20006474 	.word	0x20006474
 800089c:	200064c4 	.word	0x200064c4
 80008a0:	20004454 	.word	0x20004454

080008a4 <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	for (size_t i = 0; i < BUFFER_DELAY; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	e00c      	b.n	80008cc <HAL_ADC_ConvCpltCallback+0x28>
	{
		DAC_BUFFER[i+BUFFER_SIZE_HALF] = DELAY_BUFFER_0[i];
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80008b8:	492d      	ldr	r1, [pc, #180]	@ (8000970 <HAL_ADC_ConvCpltCallback+0xcc>)
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008c0:	492c      	ldr	r1, [pc, #176]	@ (8000974 <HAL_ADC_ConvCpltCallback+0xd0>)
 80008c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < BUFFER_DELAY; i++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	2b09      	cmp	r3, #9
 80008d0:	d9ef      	bls.n	80008b2 <HAL_ADC_ConvCpltCallback+0xe>
	}

	for (size_t i = BUFFER_DELAY; i < BUFFER_SIZE_HALF; i++)
 80008d2:	230a      	movs	r3, #10
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	e00e      	b.n	80008f6 <HAL_ADC_ConvCpltCallback+0x52>
	{
		DAC_BUFFER[i+BUFFER_SIZE_HALF] = ADC_BUFFER[i+BUFFER_SIZE_HALF-BUFFER_DELAY];
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	f203 32f6 	addw	r2, r3, #1014	@ 0x3f6
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80008e4:	4924      	ldr	r1, [pc, #144]	@ (8000978 <HAL_ADC_ConvCpltCallback+0xd4>)
 80008e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008ea:	4922      	ldr	r1, [pc, #136]	@ (8000974 <HAL_ADC_ConvCpltCallback+0xd0>)
 80008ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = BUFFER_DELAY; i < BUFFER_SIZE_HALF; i++)
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	3301      	adds	r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008fc:	d3ec      	bcc.n	80008d8 <HAL_ADC_ConvCpltCallback+0x34>
	}

	for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE_HALF+BUFFER_DELAY; i++)
 80008fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e00e      	b.n	8000924 <HAL_ADC_ConvCpltCallback+0x80>
	{
		DELAY_BUFFER_1[i-BUFFER_SIZE_HALF] = ADC_BUFFER[i+BUFFER_SIZE_HALF-BUFFER_DELAY];
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f203 32f6 	addw	r2, r3, #1014	@ 0x3f6
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8000912:	4919      	ldr	r1, [pc, #100]	@ (8000978 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000914:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000918:	4918      	ldr	r1, [pc, #96]	@ (800097c <HAL_ADC_ConvCpltCallback+0xd8>)
 800091a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE_HALF+BUFFER_DELAY; i++)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3301      	adds	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f240 4209 	movw	r2, #1033	@ 0x409
 800092a:	4293      	cmp	r3, r2
 800092c:	d9eb      	bls.n	8000906 <HAL_ADC_ConvCpltCallback+0x62>
	}


//	抓数据进while
	if (WHILE_FLAG==1) {
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d115      	bne.n	8000962 <HAL_ADC_ConvCpltCallback+0xbe>
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8000936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	e00a      	b.n	8000954 <HAL_ADC_ConvCpltCallback+0xb0>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 800093e:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000946:	490f      	ldr	r1, [pc, #60]	@ (8000984 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3301      	adds	r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800095a:	d3f0      	bcc.n	800093e <HAL_ADC_ConvCpltCallback+0x9a>
		WHILE_FLAG=2;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <HAL_ADC_ConvCpltCallback+0xdc>)
 800095e:	2202      	movs	r2, #2
 8000960:	601a      	str	r2, [r3, #0]
	}
}
 8000962:	bf00      	nop
 8000964:	371c      	adds	r7, #28
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20006474 	.word	0x20006474
 8000974:	20002454 	.word	0x20002454
 8000978:	20000454 	.word	0x20000454
 800097c:	2000649c 	.word	0x2000649c
 8000980:	200064c4 	.word	0x200064c4
 8000984:	20004454 	.word	0x20004454

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <HAL_MspInit+0x54>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <HAL_MspInit+0x54>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_MspInit+0x54>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_MspInit+0x54>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b6:	4a0c      	ldr	r2, [pc, #48]	@ (80009e8 <HAL_MspInit+0x54>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <HAL_MspInit+0x54>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 fad8 	bl	8000f80 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80009d0:	f000 fafe 	bl	8000fd0 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 fae7 	bl	8000fa8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009da:	f004 ff27 	bl	800582c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	@ 0x50
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2244      	movs	r2, #68	@ 0x44
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f00a fcd7 	bl	800b3b0 <memset>
  if(hadc->Instance==ADC2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab4 <HAL_ADC_MspInit+0xc8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d14e      	bne.n	8000aaa <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a10:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a12:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a16:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f005 fc17 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000a28:	f7ff ffae 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a2c:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <HAL_ADC_MspInit+0xcc>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a30:	4a21      	ldr	r2, [pc, #132]	@ (8000ab8 <HAL_ADC_MspInit+0xcc>)
 8000a32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <HAL_ADC_MspInit+0xcc>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a46:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac0 <HAL_ADC_MspInit+0xd4>)
 8000a48:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a4c:	2224      	movs	r2, #36	@ 0x24
 8000a4e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a5e:	2280      	movs	r2, #128	@ 0x80
 8000a60:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a68:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a70:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a74:	2220      	movs	r2, #32
 8000a76:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a78:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a7e:	480f      	ldr	r0, [pc, #60]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a80:	f002 fb44 	bl	800310c <HAL_DMA_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 8000a8a:	f7ff ff7d 	bl	8000988 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a92:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a94:	4a09      	ldr	r2, [pc, #36]	@ (8000abc <HAL_ADC_MspInit+0xd0>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2012      	movs	r0, #18
 8000aa0:	f001 ffa9 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000aa4:	2012      	movs	r0, #18
 8000aa6:	f001 ffc0 	bl	8002a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3750      	adds	r7, #80	@ 0x50
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	50000100 	.word	0x50000100
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	2000025c 	.word	0x2000025c
 8000ac0:	40020008 	.word	0x40020008

08000ac4 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <HAL_CORDIC_MspInit+0x38>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10b      	bne.n	8000aee <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_CORDIC_MspInit+0x3c>)
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ada:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <HAL_CORDIC_MspInit+0x3c>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <HAL_CORDIC_MspInit+0x3c>)
 8000ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1f      	ldr	r2, [pc, #124]	@ (8000b90 <HAL_DAC_MspInit+0x8c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d137      	bne.n	8000b86 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8000b16:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <HAL_DAC_MspInit+0x90>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b94 <HAL_DAC_MspInit+0x90>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <HAL_DAC_MspInit+0x90>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel2;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b30:	4a1a      	ldr	r2, [pc, #104]	@ (8000b9c <HAL_DAC_MspInit+0x98>)
 8000b32:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8000b34:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b36:	2266      	movs	r2, #102	@ 0x66
 8000b38:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b48:	2280      	movs	r2, #128	@ 0x80
 8000b4a:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b52:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b54:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b5a:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b5e:	2220      	movs	r2, #32
 8000b60:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b64:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000b68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8000b6a:	480b      	ldr	r0, [pc, #44]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b6c:	f002 face 	bl	800310c <HAL_DMA_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_DAC_MspInit+0x76>
    {
      Error_Handler();
 8000b76:	f7ff ff07 	bl	8000988 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <HAL_DAC_MspInit+0x94>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	50001000 	.word	0x50001000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	200002f8 	.word	0x200002f8
 8000b9c:	4002001c 	.word	0x4002001c

08000ba0 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_FMAC_MspInit+0x38>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10b      	bne.n	8000bca <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <HAL_FMAC_MspInit+0x3c>)
 8000bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bb6:	4a09      	ldr	r2, [pc, #36]	@ (8000bdc <HAL_FMAC_MspInit+0x3c>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <HAL_FMAC_MspInit+0x3c>)
 8000bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021400 	.word	0x40021400
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	@ 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8000c7c <HAL_OPAMP_MspInit+0x9c>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d119      	bne.n	8000c36 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <HAL_OPAMP_MspInit+0xa0>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4a1e      	ldr	r2, [pc, #120]	@ (8000c80 <HAL_OPAMP_MspInit+0xa0>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <HAL_OPAMP_MspInit+0xa0>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f002 fd8a 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8000c34:	e01d      	b.n	8000c72 <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <HAL_OPAMP_MspInit+0xa4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d118      	bne.n	8000c72 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <HAL_OPAMP_MspInit+0xa0>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c44:	4a0e      	ldr	r2, [pc, #56]	@ (8000c80 <HAL_OPAMP_MspInit+0xa0>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <HAL_OPAMP_MspInit+0xa0>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6e:	f002 fd6b 	bl	8003748 <HAL_GPIO_Init>
}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	@ 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40010300 	.word	0x40010300
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010308 	.word	0x40010308

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_TIM_Base_MspInit+0x38>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d10b      	bne.n	8000cb2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9e:	4a09      	ldr	r2, [pc, #36]	@ (8000cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ca6:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40001000 	.word	0x40001000
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <NMI_Handler+0x4>

08000cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <UsageFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1e:	f000 f8ef 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <DMA1_Channel1_IRQHandler+0x10>)
 8000d2e:	f002 fb10 	bl	8003352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000025c 	.word	0x2000025c

08000d3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <DMA1_Channel2_IRQHandler+0x10>)
 8000d42:	f002 fb06 	bl	8003352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200002f8 	.word	0x200002f8

08000d50 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <ADC1_2_IRQHandler+0x10>)
 8000d56:	f000 fdd7 	bl	8001908 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001f0 	.word	0x200001f0

08000d64 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <USB_LP_IRQHandler+0x10>)
 8000d6a:	f003 f878 	bl	8003e5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200071a4 	.word	0x200071a4

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f00a fb0a 	bl	800b3c0 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20008000 	.word	0x20008000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	200064c8 	.word	0x200064c8
 8000de0:	200077e8 	.word	0x200077e8

08000de4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:
 8000e08:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <LoopForever+0x2>)
 8000e0a:	4685      	mov	sp, r0
 8000e0c:	f7ff ffea 	bl	8000de4 <SystemInit>
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <LoopForever+0x6>)
 8000e12:	490d      	ldr	r1, [pc, #52]	@ (8000e48 <LoopForever+0xa>)
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <LoopForever+0xe>)
 8000e16:	2300      	movs	r3, #0
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:
 8000e1a:	58d4      	ldr	r4, [r2, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:
 8000e20:	18c4      	adds	r4, r0, r3
 8000e22:	428c      	cmp	r4, r1
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <LoopForever+0x12>)
 8000e28:	4c0a      	ldr	r4, [pc, #40]	@ (8000e54 <LoopForever+0x16>)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:
 8000e32:	42a2      	cmp	r2, r4
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>
 8000e36:	f00a fac9 	bl	800b3cc <__libc_init_array>
 8000e3a:	f7ff fa41 	bl	80002c0 <main>

08000e3e <LoopForever>:
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
 8000e40:	20008000 	.word	0x20008000
 8000e44:	20000000 	.word	0x20000000
 8000e48:	200001d4 	.word	0x200001d4
 8000e4c:	0800bd70 	.word	0x0800bd70
 8000e50:	200001d4 	.word	0x200001d4
 8000e54:	200077e8 	.word	0x200077e8

08000e58 <COMP1_2_3_IRQHandler>:
 8000e58:	e7fe      	b.n	8000e58 <COMP1_2_3_IRQHandler>

08000e5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f001 fdbb 	bl	80029e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f000 f80e 	bl	8000e8c <HAL_InitTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	e001      	b.n	8000e80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e7c:	f7ff fd8a 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e80:	79fb      	ldrb	r3, [r7, #7]

}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <HAL_InitTick+0x68>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d022      	beq.n	8000ee6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_InitTick+0x6c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <HAL_InitTick+0x68>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fdc6 	bl	8002a46 <HAL_SYSTICK_Config>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10f      	bne.n	8000ee0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	d809      	bhi.n	8000eda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	f04f 30ff 	mov.w	r0, #4294967295
 8000ece:	f001 fd92 	bl	80029f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_InitTick+0x70>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e007      	b.n	8000eea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e004      	b.n	8000eea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e001      	b.n	8000eea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a03      	ldr	r2, [pc, #12]	@ (8000f1c <HAL_IncTick+0x1c>)
 8000f10:	6013      	str	r3, [r2, #0]
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	200064cc 	.word	0x200064cc
 8000f20:	20000008 	.word	0x20000008

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200064cc 	.word	0x200064cc

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d004      	beq.n	8000f60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <HAL_Delay+0x40>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f60:	bf00      	nop
 8000f62:	f7ff ffdf 	bl	8000f24 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d8f7      	bhi.n	8000f62 <HAL_Delay+0x26>
  {
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000008 	.word	0x20000008

08000f80 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000f90:	4904      	ldr	r1, [pc, #16]	@ (8000fa4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	600b      	str	r3, [r1, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40010030 	.word	0x40010030

08000fa8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 0202 	bic.w	r2, r3, #2
 8000fb8:	4904      	ldr	r1, [pc, #16]	@ (8000fcc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	600b      	str	r3, [r1, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40010030 	.word	0x40010030

08000fd0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000fe2:	f7ff ff9f 	bl	8000f24 <HAL_GetTick>
 8000fe6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000fe8:	e008      	b.n	8000ffc <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000fea:	f7ff ff9b 	bl	8000f24 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b0a      	cmp	r3, #10
 8000ff6:	d901      	bls.n	8000ffc <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e006      	b.n	800100a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010030 	.word	0x40010030

08001018 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	431a      	orrs	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	609a      	str	r2, [r3, #8]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	609a      	str	r2, [r3, #8]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3360      	adds	r3, #96	@ 0x60
 8001092:	461a      	mov	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <LL_ADC_SetOffset+0x44>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	4313      	orrs	r3, r2
 80010b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	03fff000 	.word	0x03fff000

080010c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3360      	adds	r3, #96	@ 0x60
 80010d6:	461a      	mov	r2, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3360      	adds	r3, #96	@ 0x60
 8001104:	461a      	mov	r2, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	431a      	orrs	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800112a:	b480      	push	{r7}
 800112c:	b087      	sub	sp, #28
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3360      	adds	r3, #96	@ 0x60
 800113a:	461a      	mov	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	431a      	orrs	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001154:	bf00      	nop
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3360      	adds	r3, #96	@ 0x60
 8001170:	461a      	mov	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	431a      	orrs	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	615a      	str	r2, [r3, #20]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b087      	sub	sp, #28
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3330      	adds	r3, #48	@ 0x30
 80011f2:	461a      	mov	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	211f      	movs	r1, #31
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	401a      	ands	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	0e9b      	lsrs	r3, r3, #26
 800121a:	f003 011f 	and.w	r1, r3, #31
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	431a      	orrs	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800122e:	bf00      	nop
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3314      	adds	r3, #20
 8001270:	461a      	mov	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	0e5b      	lsrs	r3, r3, #25
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	4413      	add	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	0d1b      	lsrs	r3, r3, #20
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2107      	movs	r1, #7
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	401a      	ands	r2, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	0d1b      	lsrs	r3, r3, #20
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	431a      	orrs	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012aa:	bf00      	nop
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0318 	and.w	r3, r3, #24
 80012da:	4908      	ldr	r1, [pc, #32]	@ (80012fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80012dc:	40d9      	lsrs	r1, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	400b      	ands	r3, r1
 80012e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012e6:	431a      	orrs	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	0007ffff 	.word	0x0007ffff

08001300 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 031f 	and.w	r3, r3, #31
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001348:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6093      	str	r3, [r2, #8]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800136c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001370:	d101      	bne.n	8001376 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001394:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001398:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80013c0:	d101      	bne.n	80013c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <LL_ADC_IsEnabled+0x18>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <LL_ADC_IsEnabled+0x1a>
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001432:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001436:	f043 0204 	orr.w	r2, r3, #4
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b04      	cmp	r3, #4
 800145c:	d101      	bne.n	8001462 <LL_ADC_REG_IsConversionOngoing+0x18>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b08      	cmp	r3, #8
 8001482:	d101      	bne.n	8001488 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b089      	sub	sp, #36	@ 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e167      	b.n	8001782 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d109      	bne.n	80014d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fa93 	bl	80009ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff3f 	bl	800135c <LL_ADC_IsDeepPowerDownEnabled>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff25 	bl	8001338 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff5a 	bl	80013ac <LL_ADC_IsInternalRegulatorEnabled>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d115      	bne.n	800152a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff3e 	bl	8001384 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001508:	4ba0      	ldr	r3, [pc, #640]	@ (800178c <HAL_ADC_Init+0x2f4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	099b      	lsrs	r3, r3, #6
 800150e:	4aa0      	ldr	r2, [pc, #640]	@ (8001790 <HAL_ADC_Init+0x2f8>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	099b      	lsrs	r3, r3, #6
 8001516:	3301      	adds	r3, #1
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800151c:	e002      	b.n	8001524 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3b01      	subs	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f9      	bne.n	800151e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff3c 	bl	80013ac <LL_ADC_IsInternalRegulatorEnabled>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10d      	bne.n	8001556 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153e:	f043 0210 	orr.w	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154a:	f043 0201 	orr.w	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff75 	bl	800144a <LL_ADC_REG_IsConversionOngoing>
 8001560:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 8100 	bne.w	8001770 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 80fc 	bne.w	8001770 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800157c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001580:	f043 0202 	orr.w	r2, r3, #2
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff35 	bl	80013fc <LL_ADC_IsEnabled>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d111      	bne.n	80015bc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001598:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800159c:	f7ff ff2e 	bl	80013fc <LL_ADC_IsEnabled>
 80015a0:	4604      	mov	r4, r0
 80015a2:	487c      	ldr	r0, [pc, #496]	@ (8001794 <HAL_ADC_Init+0x2fc>)
 80015a4:	f7ff ff2a 	bl	80013fc <LL_ADC_IsEnabled>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4323      	orrs	r3, r4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d105      	bne.n	80015bc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4878      	ldr	r0, [pc, #480]	@ (8001798 <HAL_ADC_Init+0x300>)
 80015b8:	f7ff fd2e 	bl	8001018 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7f5b      	ldrb	r3, [r3, #29]
 80015c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80015cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80015d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d106      	bne.n	80015f8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ee:	3b01      	subs	r3, #1
 80015f0:	045b      	lsls	r3, r3, #17
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001604:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	4b60      	ldr	r3, [pc, #384]	@ (800179c <HAL_ADC_Init+0x304>)
 800161c:	4013      	ands	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	69b9      	ldr	r1, [r7, #24]
 8001624:	430b      	orrs	r3, r1
 8001626:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff14 	bl	8001470 <LL_ADC_INJ_IsConversionOngoing>
 8001648:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d16d      	bne.n	800172c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d16a      	bne.n	800172c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800165a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001662:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001672:	f023 0302 	bic.w	r3, r3, #2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	430b      	orrs	r3, r1
 800167e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d017      	beq.n	80016b8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001696:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6911      	ldr	r1, [r2, #16]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80016b6:	e013      	b.n	80016e0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80016c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d118      	bne.n	800171c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001700:	4311      	orrs	r1, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001706:	4311      	orrs	r1, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800170c:	430a      	orrs	r2, r1
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0201 	orr.w	r2, r2, #1
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	e007      	b.n	800172c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0201 	bic.w	r2, r2, #1
 800172a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10c      	bne.n	800174e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f023 010f 	bic.w	r1, r3, #15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	1e5a      	subs	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	631a      	str	r2, [r3, #48]	@ 0x30
 800174c:	e007      	b.n	800175e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 020f 	bic.w	r2, r2, #15
 800175c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001762:	f023 0303 	bic.w	r3, r3, #3
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800176e:	e007      	b.n	8001780 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001774:	f043 0210 	orr.w	r2, r3, #16
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001780:	7ffb      	ldrb	r3, [r7, #31]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	bf00      	nop
 800178c:	20000000 	.word	0x20000000
 8001790:	053e2d63 	.word	0x053e2d63
 8001794:	50000100 	.word	0x50000100
 8001798:	50000300 	.word	0x50000300
 800179c:	fff04007 	.word	0xfff04007

080017a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017ac:	4851      	ldr	r0, [pc, #324]	@ (80018f4 <HAL_ADC_Start_DMA+0x154>)
 80017ae:	f7ff fda7 	bl	8001300 <LL_ADC_GetMultimode>
 80017b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fe46 	bl	800144a <LL_ADC_REG_IsConversionOngoing>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f040 808f 	bne.w	80018e4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_ADC_Start_DMA+0x34>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e08a      	b.n	80018ea <HAL_ADC_Start_DMA+0x14a>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d002      	beq.n	80017ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b09      	cmp	r3, #9
 80017ec:	d173      	bne.n	80018d6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 fea8 	bl	8002544 <ADC_Enable>
 80017f4:	4603      	mov	r3, r0
 80017f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d166      	bne.n	80018cc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001802:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a38      	ldr	r2, [pc, #224]	@ (80018f8 <HAL_ADC_Start_DMA+0x158>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d002      	beq.n	8001822 <HAL_ADC_Start_DMA+0x82>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	e001      	b.n	8001826 <HAL_ADC_Start_DMA+0x86>
 8001822:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	4293      	cmp	r3, r2
 800182c:	d002      	beq.n	8001834 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001838:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001844:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001850:	f023 0206 	bic.w	r2, r3, #6
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	661a      	str	r2, [r3, #96]	@ 0x60
 8001858:	e002      	b.n	8001860 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001864:	4a25      	ldr	r2, [pc, #148]	@ (80018fc <HAL_ADC_Start_DMA+0x15c>)
 8001866:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800186c:	4a24      	ldr	r2, [pc, #144]	@ (8001900 <HAL_ADC_Start_DMA+0x160>)
 800186e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001874:	4a23      	ldr	r2, [pc, #140]	@ (8001904 <HAL_ADC_Start_DMA+0x164>)
 8001876:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	221c      	movs	r2, #28
 800187e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0210 	orr.w	r2, r2, #16
 8001896:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3340      	adds	r3, #64	@ 0x40
 80018b2:	4619      	mov	r1, r3
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f001 fcd0 	bl	800325c <HAL_DMA_Start_IT>
 80018bc:	4603      	mov	r3, r0
 80018be:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fdac 	bl	8001422 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80018ca:	e00d      	b.n	80018e8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80018d4:	e008      	b.n	80018e8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80018e2:	e001      	b.n	80018e8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018e4:	2302      	movs	r3, #2
 80018e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	50000300 	.word	0x50000300
 80018f8:	50000100 	.word	0x50000100
 80018fc:	08002651 	.word	0x08002651
 8001900:	08002729 	.word	0x08002729
 8001904:	08002745 	.word	0x08002745

08001908 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001924:	4883      	ldr	r0, [pc, #524]	@ (8001b34 <HAL_ADC_IRQHandler+0x22c>)
 8001926:	f7ff fceb 	bl	8001300 <LL_ADC_GetMultimode>
 800192a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d017      	beq.n	8001966 <HAL_ADC_IRQHandler+0x5e>
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d012      	beq.n	8001966 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001950:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 ff35 	bl	80027c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <HAL_ADC_IRQHandler+0x72>
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10a      	bne.n	8001990 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8085 	beq.w	8001a90 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d07f      	beq.n	8001a90 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fc05 	bl	80011bc <LL_ADC_REG_IsTriggerSourceSWStart>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d064      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5e      	ldr	r2, [pc, #376]	@ (8001b38 <HAL_ADC_IRQHandler+0x230>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d002      	beq.n	80019c8 <HAL_ADC_IRQHandler+0xc0>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	e001      	b.n	80019cc <HAL_ADC_IRQHandler+0xc4>
 80019c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d008      	beq.n	80019e6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d002      	beq.n	80019e6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b09      	cmp	r3, #9
 80019e4:	d104      	bne.n	80019f0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	e00d      	b.n	8001a0c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a50      	ldr	r2, [pc, #320]	@ (8001b38 <HAL_ADC_IRQHandler+0x230>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d002      	beq.n	8001a00 <HAL_ADC_IRQHandler+0xf8>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	e001      	b.n	8001a04 <HAL_ADC_IRQHandler+0xfc>
 8001a00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a04:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d135      	bne.n	8001a82 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d12e      	bne.n	8001a82 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fd0e 	bl	800144a <LL_ADC_REG_IsConversionOngoing>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d11a      	bne.n	8001a6a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 020c 	bic.w	r2, r2, #12
 8001a42:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d112      	bne.n	8001a82 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a68:	e00b      	b.n	8001a82 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6e:	f043 0210 	orr.w	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7fe ff0e 	bl	80008a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	220c      	movs	r2, #12
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x19c>
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10b      	bne.n	8001abc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 809e 	beq.w	8001bec <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8098 	beq.w	8001bec <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001acc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fbae 	bl	800123a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ade:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fb69 	bl	80011bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001aea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a11      	ldr	r2, [pc, #68]	@ (8001b38 <HAL_ADC_IRQHandler+0x230>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d002      	beq.n	8001afc <HAL_ADC_IRQHandler+0x1f4>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	e001      	b.n	8001b00 <HAL_ADC_IRQHandler+0x1f8>
 8001afc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d008      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d002      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b07      	cmp	r3, #7
 8001b18:	d104      	bne.n	8001b24 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	623b      	str	r3, [r7, #32]
 8001b22:	e011      	b.n	8001b48 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a03      	ldr	r2, [pc, #12]	@ (8001b38 <HAL_ADC_IRQHandler+0x230>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d006      	beq.n	8001b3c <HAL_ADC_IRQHandler+0x234>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	e005      	b.n	8001b40 <HAL_ADC_IRQHandler+0x238>
 8001b34:	50000300 	.word	0x50000300
 8001b38:	50000100 	.word	0x50000100
 8001b3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b40:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d047      	beq.n	8001bde <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x260>
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d03f      	beq.n	8001bde <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d13a      	bne.n	8001bde <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b72:	2b40      	cmp	r3, #64	@ 0x40
 8001b74:	d133      	bne.n	8001bde <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d12e      	bne.n	8001bde <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fc73 	bl	8001470 <LL_ADC_INJ_IsConversionOngoing>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d11a      	bne.n	8001bc6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001b9e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d112      	bne.n	8001bde <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bc4:	e00b      	b.n	8001bde <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bca:	f043 0210 	orr.w	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fdca 	bl	8002778 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2260      	movs	r2, #96	@ 0x60
 8001bea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d011      	beq.n	8001c1a <HAL_ADC_IRQHandler+0x312>
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f895 	bl	8001d3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2280      	movs	r2, #128	@ 0x80
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d012      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x342>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00d      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fdb0 	bl	80027a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d012      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x372>
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00d      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fda2 	bl	80027b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d036      	beq.n	8001cf2 <HAL_ADC_IRQHandler+0x3ea>
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d031      	beq.n	8001cf2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8001c96:	2301      	movs	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9a:	e014      	b.n	8001cc6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ca2:	4825      	ldr	r0, [pc, #148]	@ (8001d38 <HAL_ADC_IRQHandler+0x430>)
 8001ca4:	f7ff fb3a 	bl	800131c <LL_ADC_GetMultiDMATransfer>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb2:	e008      	b.n	8001cc6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d10e      	bne.n	8001cea <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cdc:	f043 0202 	orr.w	r2, r3, #2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f833 	bl	8001d50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2210      	movs	r2, #16
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d018      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x426>
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d013      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d16:	f043 0208 	orr.w	r2, r3, #8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d26:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fd2f 	bl	800278c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	@ 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	50000300 	.word	0x50000300

08001d3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0b6      	sub	sp, #216	@ 0xd8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x22>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e3c8      	b.n	8002518 <HAL_ADC_ConfigChannel+0x7b4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fb59 	bl	800144a <LL_ADC_REG_IsConversionOngoing>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 83ad 	bne.w	80024fa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	f7ff fa18 	bl	80011e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fb47 	bl	800144a <LL_ADC_REG_IsConversionOngoing>
 8001dbc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fb53 	bl	8001470 <LL_ADC_INJ_IsConversionOngoing>
 8001dca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 81d9 	bne.w	800218a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 81d4 	bne.w	800218a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001dea:	d10f      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7ff fa32 	bl	8001260 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff f9c6 	bl	8001196 <LL_ADC_SetSamplingTimeCommonConfig>
 8001e0a:	e00e      	b.n	8001e2a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f7ff fa21 	bl	8001260 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f9b6 	bl	8001196 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d022      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6919      	ldr	r1, [r3, #16]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e5c:	f7ff f910 	bl	8001080 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6919      	ldr	r1, [r3, #16]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f7ff f95c 	bl	800112a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x124>
 8001e82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e86:	e000      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x126>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f7ff f968 	bl	8001160 <LL_ADC_SetOffsetSaturation>
 8001e90:	e17b      	b.n	800218a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f915 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x15a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f90a 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	0e9b      	lsrs	r3, r3, #26
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	e01e      	b.n	8001efc <HAL_ADC_ConfigChannel+0x198>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f8ff 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001edc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ee4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001eec:	2320      	movs	r3, #32
 8001eee:	e004      	b.n	8001efa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001ef0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1b0>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	e018      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x1e2>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001f28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001f38:	2320      	movs	r3, #32
 8001f3a:	e004      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d106      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f8ce 	bl	80010f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f8b2 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10a      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x220>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2101      	movs	r1, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff f8a7 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	0e9b      	lsrs	r3, r3, #26
 8001f7e:	f003 021f 	and.w	r2, r3, #31
 8001f82:	e01e      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x25e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f89c 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	e004      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001fb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x276>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0e9b      	lsrs	r3, r3, #26
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	e018      	b.n	800200c <HAL_ADC_ConfigChannel+0x2a8>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001fee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ff2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001ffe:	2320      	movs	r3, #32
 8002000:	e004      	b.n	800200c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002002:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800200c:	429a      	cmp	r2, r3
 800200e:	d106      	bne.n	800201e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2200      	movs	r2, #0
 8002016:	2101      	movs	r1, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f86b 	bl	80010f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2102      	movs	r1, #2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f84f 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <HAL_ADC_ConfigChannel+0x2e6>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2102      	movs	r1, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f844 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	0e9b      	lsrs	r3, r3, #26
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	e01e      	b.n	8002088 <HAL_ADC_ConfigChannel+0x324>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2102      	movs	r1, #2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f839 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002068:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800206c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002070:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002078:	2320      	movs	r3, #32
 800207a:	e004      	b.n	8002086 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800207c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x33c>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0e9b      	lsrs	r3, r3, #26
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	e016      	b.n	80020ce <HAL_ADC_ConfigChannel+0x36a>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80020b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80020b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e004      	b.n	80020ce <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80020c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d106      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2102      	movs	r1, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f80a 	bl	80010f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2103      	movs	r1, #3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe ffee 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10a      	bne.n	800210c <HAL_ADC_ConfigChannel+0x3a8>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2103      	movs	r1, #3
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe ffe3 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	e017      	b.n	800213c <HAL_ADC_ConfigChannel+0x3d8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2103      	movs	r1, #3
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe ffd8 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002124:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002126:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800212e:	2320      	movs	r3, #32
 8002130:	e003      	b.n	800213a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x3f0>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0e9b      	lsrs	r3, r3, #26
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	e011      	b.n	8002178 <HAL_ADC_ConfigChannel+0x414>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002164:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800216c:	2320      	movs	r3, #32
 800216e:	e003      	b.n	8002178 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002178:	429a      	cmp	r2, r3
 800217a:	d106      	bne.n	800218a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2200      	movs	r2, #0
 8002182:	2103      	movs	r1, #3
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe ffb5 	bl	80010f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f934 	bl	80013fc <LL_ADC_IsEnabled>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 8140 	bne.w	800241c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	461a      	mov	r2, r3
 80021aa:	f7ff f885 	bl	80012b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4a8f      	ldr	r2, [pc, #572]	@ (80023f0 <HAL_ADC_ConfigChannel+0x68c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	f040 8131 	bne.w	800241c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10b      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x47e>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	0e9b      	lsrs	r3, r3, #26
 80021d0:	3301      	adds	r3, #1
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2b09      	cmp	r3, #9
 80021d8:	bf94      	ite	ls
 80021da:	2301      	movls	r3, #1
 80021dc:	2300      	movhi	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	e019      	b.n	8002216 <HAL_ADC_ConfigChannel+0x4b2>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80021f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021f2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80021f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e003      	b.n	8002206 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80021fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	3301      	adds	r3, #1
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	2b09      	cmp	r3, #9
 800220e:	bf94      	ite	ls
 8002210:	2301      	movls	r3, #1
 8002212:	2300      	movhi	r3, #0
 8002214:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002216:	2b00      	cmp	r3, #0
 8002218:	d079      	beq.n	800230e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	2b00      	cmp	r3, #0
 8002224:	d107      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x4d2>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	3301      	adds	r3, #1
 800222e:	069b      	lsls	r3, r3, #26
 8002230:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002234:	e015      	b.n	8002262 <HAL_ADC_ConfigChannel+0x4fe>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002246:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800224e:	2320      	movs	r3, #32
 8002250:	e003      	b.n	800225a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3301      	adds	r3, #1
 800225c:	069b      	lsls	r3, r3, #26
 800225e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x51e>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	3301      	adds	r3, #1
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2101      	movs	r1, #1
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	e017      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x54e>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002292:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800229a:	2320      	movs	r3, #32
 800229c:	e003      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800229e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	ea42 0103 	orr.w	r1, r2, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10a      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x574>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	3301      	adds	r3, #1
 80022ca:	f003 021f 	and.w	r2, r3, #31
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	051b      	lsls	r3, r3, #20
 80022d6:	e018      	b.n	800230a <HAL_ADC_ConfigChannel+0x5a6>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80022ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e003      	b.n	80022fc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80022f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	f003 021f 	and.w	r2, r3, #31
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800230a:	430b      	orrs	r3, r1
 800230c:	e081      	b.n	8002412 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <HAL_ADC_ConfigChannel+0x5c6>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0e9b      	lsrs	r3, r3, #26
 8002320:	3301      	adds	r3, #1
 8002322:	069b      	lsls	r3, r3, #26
 8002324:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002328:	e015      	b.n	8002356 <HAL_ADC_ConfigChannel+0x5f2>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002342:	2320      	movs	r3, #32
 8002344:	e003      	b.n	800234e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3301      	adds	r3, #1
 8002350:	069b      	lsls	r3, r3, #26
 8002352:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x612>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	3301      	adds	r3, #1
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	e017      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x642>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	61fb      	str	r3, [r7, #28]
  return result;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e003      	b.n	800239a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	ea42 0103 	orr.w	r1, r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10d      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x66e>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1e      	subs	r3, #30
 80023ca:	051b      	lsls	r3, r3, #20
 80023cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023d0:	e01e      	b.n	8002410 <HAL_ADC_ConfigChannel+0x6ac>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	613b      	str	r3, [r7, #16]
  return result;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e006      	b.n	80023fc <HAL_ADC_ConfigChannel+0x698>
 80023ee:	bf00      	nop
 80023f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	f003 021f 	and.w	r2, r3, #31
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	3b1e      	subs	r3, #30
 800240a:	051b      	lsls	r3, r3, #20
 800240c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002410:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002416:	4619      	mov	r1, r3
 8002418:	f7fe ff22 	bl	8001260 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b3f      	ldr	r3, [pc, #252]	@ (8002520 <HAL_ADC_ConfigChannel+0x7bc>)
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d071      	beq.n	800250c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002428:	483e      	ldr	r0, [pc, #248]	@ (8002524 <HAL_ADC_ConfigChannel+0x7c0>)
 800242a:	f7fe fe1b 	bl	8001064 <LL_ADC_GetCommonPathInternalCh>
 800242e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a3c      	ldr	r2, [pc, #240]	@ (8002528 <HAL_ADC_ConfigChannel+0x7c4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d004      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x6e2>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3a      	ldr	r2, [pc, #232]	@ (800252c <HAL_ADC_ConfigChannel+0x7c8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d127      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800244a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d121      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800245a:	d157      	bne.n	800250c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800245c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002460:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002464:	4619      	mov	r1, r3
 8002466:	482f      	ldr	r0, [pc, #188]	@ (8002524 <HAL_ADC_ConfigChannel+0x7c0>)
 8002468:	f7fe fde9 	bl	800103e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800246c:	4b30      	ldr	r3, [pc, #192]	@ (8002530 <HAL_ADC_ConfigChannel+0x7cc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	4a30      	ldr	r2, [pc, #192]	@ (8002534 <HAL_ADC_ConfigChannel+0x7d0>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002486:	e002      	b.n	800248e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3b01      	subs	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f9      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002494:	e03a      	b.n	800250c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a27      	ldr	r2, [pc, #156]	@ (8002538 <HAL_ADC_ConfigChannel+0x7d4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d113      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a22      	ldr	r2, [pc, #136]	@ (800253c <HAL_ADC_ConfigChannel+0x7d8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02a      	beq.n	800250c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024be:	4619      	mov	r1, r3
 80024c0:	4818      	ldr	r0, [pc, #96]	@ (8002524 <HAL_ADC_ConfigChannel+0x7c0>)
 80024c2:	f7fe fdbc 	bl	800103e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c6:	e021      	b.n	800250c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002540 <HAL_ADC_ConfigChannel+0x7dc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d11c      	bne.n	800250c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d116      	bne.n	800250c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a16      	ldr	r2, [pc, #88]	@ (800253c <HAL_ADC_ConfigChannel+0x7d8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d011      	beq.n	800250c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024f0:	4619      	mov	r1, r3
 80024f2:	480c      	ldr	r0, [pc, #48]	@ (8002524 <HAL_ADC_ConfigChannel+0x7c0>)
 80024f4:	f7fe fda3 	bl	800103e <LL_ADC_SetCommonPathInternalCh>
 80024f8:	e008      	b.n	800250c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fe:	f043 0220 	orr.w	r2, r3, #32
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002514:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002518:	4618      	mov	r0, r3
 800251a:	37d8      	adds	r7, #216	@ 0xd8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	80080000 	.word	0x80080000
 8002524:	50000300 	.word	0x50000300
 8002528:	c3210000 	.word	0xc3210000
 800252c:	90c00010 	.word	0x90c00010
 8002530:	20000000 	.word	0x20000000
 8002534:	053e2d63 	.word	0x053e2d63
 8002538:	c7520000 	.word	0xc7520000
 800253c:	50000100 	.word	0x50000100
 8002540:	cb840000 	.word	0xcb840000

08002544 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800254c:	2300      	movs	r3, #0
 800254e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe ff51 	bl	80013fc <LL_ADC_IsEnabled>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d169      	bne.n	8002634 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	4b36      	ldr	r3, [pc, #216]	@ (8002640 <ADC_Enable+0xfc>)
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002572:	f043 0210 	orr.w	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e055      	b.n	8002636 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe ff20 	bl	80013d4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002594:	482b      	ldr	r0, [pc, #172]	@ (8002644 <ADC_Enable+0x100>)
 8002596:	f7fe fd65 	bl	8001064 <LL_ADC_GetCommonPathInternalCh>
 800259a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800259c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025a4:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <ADC_Enable+0x104>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	4a28      	ldr	r2, [pc, #160]	@ (800264c <ADC_Enable+0x108>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	099b      	lsrs	r3, r3, #6
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025be:	e002      	b.n	80025c6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f9      	bne.n	80025c0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fcaa 	bl	8000f24 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025d2:	e028      	b.n	8002626 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe ff0f 	bl	80013fc <LL_ADC_IsEnabled>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fef3 	bl	80013d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025ee:	f7fe fc99 	bl	8000f24 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d914      	bls.n	8002626 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d00d      	beq.n	8002626 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260e:	f043 0210 	orr.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e007      	b.n	8002636 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d1cf      	bne.n	80025d4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	8000003f 	.word	0x8000003f
 8002644:	50000300 	.word	0x50000300
 8002648:	20000000 	.word	0x20000000
 800264c:	053e2d63 	.word	0x053e2d63

08002650 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002666:	2b00      	cmp	r3, #0
 8002668:	d14b      	bne.n	8002702 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d021      	beq.n	80026c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fd97 	bl	80011bc <LL_ADC_REG_IsTriggerSourceSWStart>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d032      	beq.n	80026fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d12b      	bne.n	80026fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d11f      	bne.n	80026fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026c6:	e018      	b.n	80026fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d111      	bne.n	80026fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d105      	bne.n	80026fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7fe f8d2 	bl	80008a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002700:	e00e      	b.n	8002720 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff fb1e 	bl	8001d50 <HAL_ADC_ErrorCallback>
}
 8002714:	e004      	b.n	8002720 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f7fe f848 	bl	80007cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002756:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002762:	f043 0204 	orr.w	r2, r3, #4
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f7ff faf0 	bl	8001d50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e023      	b.n	8002836 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe f95e 	bl	8000ac4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002850:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800286c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	@ (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800288c:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <__NVIC_GetPriorityGrouping+0x18>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 0307 	and.w	r3, r3, #7
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	db0b      	blt.n	80028ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	4907      	ldr	r1, [pc, #28]	@ (80028dc <__NVIC_EnableIRQ+0x38>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2001      	movs	r0, #1
 80028c6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	db0a      	blt.n	800290a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	490c      	ldr	r1, [pc, #48]	@ (800292c <__NVIC_SetPriority+0x4c>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	0112      	lsls	r2, r2, #4
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	440b      	add	r3, r1
 8002904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002908:	e00a      	b.n	8002920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4908      	ldr	r1, [pc, #32]	@ (8002930 <__NVIC_SetPriority+0x50>)
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3b04      	subs	r3, #4
 8002918:	0112      	lsls	r2, r2, #4
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	440b      	add	r3, r1
 800291e:	761a      	strb	r2, [r3, #24]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000e100 	.word	0xe000e100
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	@ 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f1c3 0307 	rsb	r3, r3, #7
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf28      	it	cs
 8002952:	2304      	movcs	r3, #4
 8002954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3304      	adds	r3, #4
 800295a:	2b06      	cmp	r3, #6
 800295c:	d902      	bls.n	8002964 <NVIC_EncodePriority+0x30>
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3b03      	subs	r3, #3
 8002962:	e000      	b.n	8002966 <NVIC_EncodePriority+0x32>
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	401a      	ands	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800297c:	f04f 31ff 	mov.w	r1, #4294967295
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43d9      	mvns	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	4313      	orrs	r3, r2
         );
}
 800298e:	4618      	mov	r0, r3
 8002990:	3724      	adds	r7, #36	@ 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029ac:	d301      	bcc.n	80029b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00f      	b.n	80029d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b2:	4a0a      	ldr	r2, [pc, #40]	@ (80029dc <SysTick_Config+0x40>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ba:	210f      	movs	r1, #15
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	f7ff ff8e 	bl	80028e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <SysTick_Config+0x40>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ca:	4b04      	ldr	r3, [pc, #16]	@ (80029dc <SysTick_Config+0x40>)
 80029cc:	2207      	movs	r2, #7
 80029ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000e010 	.word	0xe000e010

080029e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff29 	bl	8002840 <__NVIC_SetPriorityGrouping>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b086      	sub	sp, #24
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a04:	f7ff ff40 	bl	8002888 <__NVIC_GetPriorityGrouping>
 8002a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f7ff ff90 	bl	8002934 <NVIC_EncodePriority>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff5f 	bl	80028e0 <__NVIC_SetPriority>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff33 	bl	80028a4 <__NVIC_EnableIRQ>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ffa4 	bl	800299c <SysTick_Config>
 8002a54:	4603      	mov	r3, r0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e014      	b.n	8002a9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	791b      	ldrb	r3, [r3, #4]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d105      	bne.n	8002a86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7fe f83f 	bl	8000b04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b2      	b.n	8002c22 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	795b      	ldrb	r3, [r3, #5]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_DAC_Start_DMA+0x24>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e0ac      	b.n	8002c22 <HAL_DAC_Start_DMA+0x17e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d129      	bne.n	8002b2e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4a53      	ldr	r2, [pc, #332]	@ (8002c2c <HAL_DAC_Start_DMA+0x188>)
 8002ae0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4a52      	ldr	r2, [pc, #328]	@ (8002c30 <HAL_DAC_Start_DMA+0x18c>)
 8002ae8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4a51      	ldr	r2, [pc, #324]	@ (8002c34 <HAL_DAC_Start_DMA+0x190>)
 8002af0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b00:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_DAC_Start_DMA+0x6c>
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d005      	beq.n	8002b1a <HAL_DAC_Start_DMA+0x76>
 8002b0e:	e009      	b.n	8002b24 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3308      	adds	r3, #8
 8002b16:	61bb      	str	r3, [r7, #24]
        break;
 8002b18:	e033      	b.n	8002b82 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	61bb      	str	r3, [r7, #24]
        break;
 8002b22:	e02e      	b.n	8002b82 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3310      	adds	r3, #16
 8002b2a:	61bb      	str	r3, [r7, #24]
        break;
 8002b2c:	e029      	b.n	8002b82 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a41      	ldr	r2, [pc, #260]	@ (8002c38 <HAL_DAC_Start_DMA+0x194>)
 8002b34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4a40      	ldr	r2, [pc, #256]	@ (8002c3c <HAL_DAC_Start_DMA+0x198>)
 8002b3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4a3f      	ldr	r2, [pc, #252]	@ (8002c40 <HAL_DAC_Start_DMA+0x19c>)
 8002b44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002b54:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_DAC_Start_DMA+0xc0>
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d005      	beq.n	8002b6e <HAL_DAC_Start_DMA+0xca>
 8002b62:	e009      	b.n	8002b78 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3314      	adds	r3, #20
 8002b6a:	61bb      	str	r3, [r7, #24]
        break;
 8002b6c:	e009      	b.n	8002b82 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3318      	adds	r3, #24
 8002b74:	61bb      	str	r3, [r7, #24]
        break;
 8002b76:	e004      	b.n	8002b82 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	331c      	adds	r3, #28
 8002b7e:	61bb      	str	r3, [r7, #24]
        break;
 8002b80:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d111      	bne.n	8002bac <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6898      	ldr	r0, [r3, #8]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	f000 fb5b 	bl	800325c <HAL_DMA_Start_IT>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e010      	b.n	8002bce <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002bba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68d8      	ldr	r0, [r3, #12]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	f000 fb49 	bl	800325c <HAL_DMA_Start_IT>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002bd4:	7ffb      	ldrb	r3, [r7, #31]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11c      	bne.n	8002c14 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2201      	movs	r2, #1
 8002be8:	409a      	lsls	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bf2:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <HAL_DAC_Start_DMA+0x1a0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	4a13      	ldr	r2, [pc, #76]	@ (8002c48 <HAL_DAC_Start_DMA+0x1a4>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	099b      	lsrs	r3, r3, #6
 8002c00:	3301      	adds	r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002c04:	e002      	b.n	8002c0c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f9      	bne.n	8002c06 <HAL_DAC_Start_DMA+0x162>
 8002c12:	e005      	b.n	8002c20 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	08002ff9 	.word	0x08002ff9
 8002c30:	0800301b 	.word	0x0800301b
 8002c34:	08003037 	.word	0x08003037
 8002c38:	080030a1 	.word	0x080030a1
 8002c3c:	080030c3 	.word	0x080030c3
 8002c40:	080030df 	.word	0x080030df
 8002c44:	20000000 	.word	0x20000000
 8002c48:	053e2d63 	.word	0x053e2d63

08002c4c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	@ 0x28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_DAC_ConfigChannel+0x1c>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e19e      	b.n	8002fe6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	795b      	ldrb	r3, [r3, #5]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_DAC_ConfigChannel+0x2c>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e198      	b.n	8002fe6 <HAL_DAC_ConfigChannel+0x35e>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d17a      	bne.n	8002dbe <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002cc8:	f7fe f92c 	bl	8000f24 <HAL_GetTick>
 8002ccc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d13d      	bne.n	8002d50 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cd4:	e018      	b.n	8002d08 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cd6:	f7fe f925 	bl	8000f24 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d911      	bls.n	8002d08 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f043 0208 	orr.w	r2, r3, #8
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2203      	movs	r2, #3
 8002d02:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e16e      	b.n	8002fe6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1df      	bne.n	8002cd6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d20:	e020      	b.n	8002d64 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d22:	f7fe f8ff 	bl	8000f24 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d90f      	bls.n	8002d50 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	da0a      	bge.n	8002d50 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f043 0208 	orr.w	r2, r3, #8
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e14a      	b.n	8002fe6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	dbe3      	blt.n	8002d22 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d62:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	ea02 0103 	and.w	r1, r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	21ff      	movs	r1, #255	@ 0xff
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	ea02 0103 	and.w	r1, r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	409a      	lsls	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d11d      	bne.n	8002e02 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	221f      	movs	r2, #31
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dde:	4013      	ands	r3, r2
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df6:	4313      	orrs	r3, r2
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2207      	movs	r2, #7
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d102      	bne.n	8002e2c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	623b      	str	r3, [r7, #32]
 8002e2a:	e00f      	b.n	8002e4c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d102      	bne.n	8002e3a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002e34:	2301      	movs	r3, #1
 8002e36:	623b      	str	r3, [r7, #32]
 8002e38:	e008      	b.n	8002e4c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002e42:	2301      	movs	r3, #1
 8002e44:	623b      	str	r3, [r7, #32]
 8002e46:	e001      	b.n	8002e4c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	6a3a      	ldr	r2, [r7, #32]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6e:	4013      	ands	r3, r2
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	791b      	ldrb	r3, [r3, #4]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_DAC_ConfigChannel+0x1f8>
 8002e7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e7e:	e000      	b.n	8002e82 <HAL_DAC_ConfigChannel+0x1fa>
 8002e80:	2300      	movs	r3, #0
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	795b      	ldrb	r3, [r3, #5]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_DAC_ConfigChannel+0x224>
 8002ea6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eaa:	e000      	b.n	8002eae <HAL_DAC_ConfigChannel+0x226>
 8002eac:	2300      	movs	r3, #0
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d114      	bne.n	8002eee <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002ec4:	f003 f972 	bl	80061ac <HAL_RCC_GetHCLKFreq>
 8002ec8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4a48      	ldr	r2, [pc, #288]	@ (8002ff0 <HAL_DAC_ConfigChannel+0x368>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d904      	bls.n	8002edc <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eda:	e00f      	b.n	8002efc <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4a45      	ldr	r2, [pc, #276]	@ (8002ff4 <HAL_DAC_ConfigChannel+0x36c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d90a      	bls.n	8002efa <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eec:	e006      	b.n	8002efc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef8:	e000      	b.n	8002efc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002efa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6819      	ldr	r1, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	400a      	ands	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4e:	4013      	ands	r3, r2
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f66:	4313      	orrs	r3, r2
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6819      	ldr	r1, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	22c0      	movs	r2, #192	@ 0xc0
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43da      	mvns	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	ea02 0103 	and.w	r1, r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3728      	adds	r7, #40	@ 0x28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	09896800 	.word	0x09896800
 8002ff4:	04c4b400 	.word	0x04c4b400

08002ff8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff fe20 	bl	8002c4c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	711a      	strb	r2, [r3, #4]
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff fe19 	bl	8002c60 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f043 0204 	orr.w	r2, r3, #4
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff fe0f 	bl	8002c74 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	711a      	strb	r2, [r3, #4]
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f7ff ffd8 	bl	8003064 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	711a      	strb	r2, [r3, #4]
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff ffd1 	bl	8003078 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f043 0204 	orr.w	r2, r3, #4
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ffc7 	bl	800308c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	711a      	strb	r2, [r3, #4]
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e08d      	b.n	800323a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_DMA_Init+0x138>)
 8003126:	429a      	cmp	r2, r3
 8003128:	d80f      	bhi.n	800314a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	4b45      	ldr	r3, [pc, #276]	@ (8003248 <HAL_DMA_Init+0x13c>)
 8003132:	4413      	add	r3, r2
 8003134:	4a45      	ldr	r2, [pc, #276]	@ (800324c <HAL_DMA_Init+0x140>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	009a      	lsls	r2, r3, #2
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a42      	ldr	r2, [pc, #264]	@ (8003250 <HAL_DMA_Init+0x144>)
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40
 8003148:	e00e      	b.n	8003168 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	4b40      	ldr	r3, [pc, #256]	@ (8003254 <HAL_DMA_Init+0x148>)
 8003152:	4413      	add	r3, r2
 8003154:	4a3d      	ldr	r2, [pc, #244]	@ (800324c <HAL_DMA_Init+0x140>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	009a      	lsls	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a3c      	ldr	r2, [pc, #240]	@ (8003258 <HAL_DMA_Init+0x14c>)
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800317e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003182:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800318c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9b6 	bl	800352c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031c8:	d102      	bne.n	80031d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d010      	beq.n	8003210 <HAL_DMA_Init+0x104>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d80c      	bhi.n	8003210 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f9d6 	bl	80035a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	e008      	b.n	8003222 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40020407 	.word	0x40020407
 8003248:	bffdfff8 	.word	0xbffdfff8
 800324c:	cccccccd 	.word	0xcccccccd
 8003250:	40020000 	.word	0x40020000
 8003254:	bffdfbf8 	.word	0xbffdfbf8
 8003258:	40020400 	.word	0x40020400

0800325c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_DMA_Start_IT+0x20>
 8003278:	2302      	movs	r3, #2
 800327a:	e066      	b.n	800334a <HAL_DMA_Start_IT+0xee>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d155      	bne.n	800333c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f8fb 	bl	80034b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 020e 	orr.w	r2, r2, #14
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e00f      	b.n	80032f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0204 	bic.w	r2, r2, #4
 80032e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 020a 	orr.w	r2, r2, #10
 80032f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800330c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003310:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003324:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003328:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e005      	b.n	8003348 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003344:	2302      	movs	r3, #2
 8003346:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003348:	7dfb      	ldrb	r3, [r7, #23]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	2204      	movs	r2, #4
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d026      	beq.n	80033cc <HAL_DMA_IRQHandler+0x7a>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d021      	beq.n	80033cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0204 	bic.w	r2, r2, #4
 80033a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f003 021f 	and.w	r2, r3, #31
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	2104      	movs	r1, #4
 80033b4:	fa01 f202 	lsl.w	r2, r1, r2
 80033b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d071      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80033ca:	e06c      	b.n	80034a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2202      	movs	r2, #2
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d02e      	beq.n	800343e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d029      	beq.n	800343e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 020a 	bic.w	r2, r2, #10
 8003406:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	2102      	movs	r1, #2
 800341e:	fa01 f202 	lsl.w	r2, r1, r2
 8003422:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d038      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800343c:	e033      	b.n	80034a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2208      	movs	r2, #8
 8003448:	409a      	lsls	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02a      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d025      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 020e 	bic.w	r2, r2, #14
 800346a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f202 	lsl.w	r2, r1, r2
 800347e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034a6:	bf00      	nop
 80034a8:	bf00      	nop
}
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d004      	beq.n	80034da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f003 021f 	and.w	r2, r3, #31
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	2101      	movs	r1, #1
 80034e8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b10      	cmp	r3, #16
 80034fc:	d108      	bne.n	8003510 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800350e:	e007      	b.n	8003520 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800353c:	429a      	cmp	r2, r3
 800353e:	d802      	bhi.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003540:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e001      	b.n	800354a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003546:	4b15      	ldr	r3, [pc, #84]	@ (800359c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003548:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	3b08      	subs	r3, #8
 8003556:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	009a      	lsls	r2, r3, #2
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4413      	add	r3, r2
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a0b      	ldr	r2, [pc, #44]	@ (80035a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003576:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	2201      	movs	r2, #1
 8003580:	409a      	lsls	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40020407 	.word	0x40020407
 8003598:	40020800 	.word	0x40020800
 800359c:	40020820 	.word	0x40020820
 80035a0:	cccccccd 	.word	0xcccccccd
 80035a4:	40020880 	.word	0x40020880

080035a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	461a      	mov	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a08      	ldr	r2, [pc, #32]	@ (80035ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035ca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2201      	movs	r2, #1
 80035d6:	409a      	lsls	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	1000823f 	.word	0x1000823f
 80035ec:	40020940 	.word	0x40020940

080035f0 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e033      	b.n	800366a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fac2 	bl	8000ba0 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f854 	bl	80036d0 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f822 	bl	8003672 <FMAC_Reset>
 800362e:	4603      	mov	r3, r0
 8003630:	2b01      	cmp	r3, #1
 8003632:	d10c      	bne.n	800364e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003638:	f043 0210 	orr.w	r2, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	22a0      	movs	r2, #160	@ 0xa0
 8003644:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	e008      	b.n	8003660 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800367a:	f7fd fc53 	bl	8000f24 <HAL_GetTick>
 800367e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800368e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8003690:	e00f      	b.n	80036b2 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8003692:	f7fd fc47 	bl	8000f24 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80036a0:	d907      	bls.n	80036b2 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00a      	b.n	80036c8 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e8      	bne.n	8003692 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f807 	bl	80036ec <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f81b 	bl	800371a <FMAC_ResetOutputStateAndDataPointers>
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003756:	e15a      	b.n	8003a0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	4013      	ands	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 814c 	beq.w	8003a08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d005      	beq.n	8003788 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003784:	2b02      	cmp	r3, #2
 8003786:	d130      	bne.n	80037ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037be:	2201      	movs	r2, #1
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	f003 0201 	and.w	r2, r3, #1
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d017      	beq.n	8003826 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	2203      	movs	r2, #3
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4013      	ands	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d123      	bne.n	800387a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	08da      	lsrs	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3208      	adds	r2, #8
 800383a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	08da      	lsrs	r2, r3, #3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3208      	adds	r2, #8
 8003874:	6939      	ldr	r1, [r7, #16]
 8003876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0203 	and.w	r2, r3, #3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80a6 	beq.w	8003a08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038bc:	4b5b      	ldr	r3, [pc, #364]	@ (8003a2c <HAL_GPIO_Init+0x2e4>)
 80038be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c0:	4a5a      	ldr	r2, [pc, #360]	@ (8003a2c <HAL_GPIO_Init+0x2e4>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80038c8:	4b58      	ldr	r3, [pc, #352]	@ (8003a2c <HAL_GPIO_Init+0x2e4>)
 80038ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038d4:	4a56      	ldr	r2, [pc, #344]	@ (8003a30 <HAL_GPIO_Init+0x2e8>)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	3302      	adds	r3, #2
 80038dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	220f      	movs	r2, #15
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038fe:	d01f      	beq.n	8003940 <HAL_GPIO_Init+0x1f8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a4c      	ldr	r2, [pc, #304]	@ (8003a34 <HAL_GPIO_Init+0x2ec>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d019      	beq.n	800393c <HAL_GPIO_Init+0x1f4>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a4b      	ldr	r2, [pc, #300]	@ (8003a38 <HAL_GPIO_Init+0x2f0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <HAL_GPIO_Init+0x1f0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a4a      	ldr	r2, [pc, #296]	@ (8003a3c <HAL_GPIO_Init+0x2f4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00d      	beq.n	8003934 <HAL_GPIO_Init+0x1ec>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a49      	ldr	r2, [pc, #292]	@ (8003a40 <HAL_GPIO_Init+0x2f8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <HAL_GPIO_Init+0x1e8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a48      	ldr	r2, [pc, #288]	@ (8003a44 <HAL_GPIO_Init+0x2fc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d101      	bne.n	800392c <HAL_GPIO_Init+0x1e4>
 8003928:	2305      	movs	r3, #5
 800392a:	e00a      	b.n	8003942 <HAL_GPIO_Init+0x1fa>
 800392c:	2306      	movs	r3, #6
 800392e:	e008      	b.n	8003942 <HAL_GPIO_Init+0x1fa>
 8003930:	2304      	movs	r3, #4
 8003932:	e006      	b.n	8003942 <HAL_GPIO_Init+0x1fa>
 8003934:	2303      	movs	r3, #3
 8003936:	e004      	b.n	8003942 <HAL_GPIO_Init+0x1fa>
 8003938:	2302      	movs	r3, #2
 800393a:	e002      	b.n	8003942 <HAL_GPIO_Init+0x1fa>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <HAL_GPIO_Init+0x1fa>
 8003940:	2300      	movs	r3, #0
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	f002 0203 	and.w	r2, r2, #3
 8003948:	0092      	lsls	r2, r2, #2
 800394a:	4093      	lsls	r3, r2
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003952:	4937      	ldr	r1, [pc, #220]	@ (8003a30 <HAL_GPIO_Init+0x2e8>)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3302      	adds	r3, #2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003960:	4b39      	ldr	r3, [pc, #228]	@ (8003a48 <HAL_GPIO_Init+0x300>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003984:	4a30      	ldr	r2, [pc, #192]	@ (8003a48 <HAL_GPIO_Init+0x300>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800398a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a48 <HAL_GPIO_Init+0x300>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ae:	4a26      	ldr	r2, [pc, #152]	@ (8003a48 <HAL_GPIO_Init+0x300>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80039b4:	4b24      	ldr	r3, [pc, #144]	@ (8003a48 <HAL_GPIO_Init+0x300>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a48 <HAL_GPIO_Init+0x300>)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039de:	4b1a      	ldr	r3, [pc, #104]	@ (8003a48 <HAL_GPIO_Init+0x300>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a02:	4a11      	ldr	r2, [pc, #68]	@ (8003a48 <HAL_GPIO_Init+0x300>)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f47f ae9d 	bne.w	8003758 <HAL_GPIO_Init+0x10>
  }
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40010000 	.word	0x40010000
 8003a34:	48000400 	.word	0x48000400
 8003a38:	48000800 	.word	0x48000800
 8003a3c:	48000c00 	.word	0x48000c00
 8003a40:	48001000 	.word	0x48001000
 8003a44:	48001400 	.word	0x48001400
 8003a48:	40010400 	.word	0x40010400

08003a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a5c:	787b      	ldrb	r3, [r7, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a68:	e002      	b.n	8003a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0bb      	b.n	8003c0a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d101      	bne.n	8003aa2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e0b3      	b.n	8003c0a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d101      	bne.n	8003ab2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0ab      	b.n	8003c0a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab2:	4b58      	ldr	r3, [pc, #352]	@ (8003c14 <HAL_OPAMP_Init+0x198>)
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab6:	4a57      	ldr	r2, [pc, #348]	@ (8003c14 <HAL_OPAMP_Init+0x198>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003abe:	4b55      	ldr	r3, [pc, #340]	@ (8003c14 <HAL_OPAMP_Init+0x198>)
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd f87e 	bl	8000be0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b40      	cmp	r3, #64	@ 0x40
 8003aea:	d003      	beq.n	8003af4 <HAL_OPAMP_Init+0x78>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b60      	cmp	r3, #96	@ 0x60
 8003af2:	d133      	bne.n	8003b5c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 0110 	bic.w	r1, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b41      	ldr	r3, [pc, #260]	@ (8003c18 <HAL_OPAMP_Init+0x19c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6851      	ldr	r1, [r2, #4]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6892      	ldr	r2, [r2, #8]
 8003b1c:	4311      	orrs	r1, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6912      	ldr	r2, [r2, #16]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	7d09      	ldrb	r1, [r1, #20]
 8003b28:	2901      	cmp	r1, #1
 8003b2a:	d102      	bne.n	8003b32 <HAL_OPAMP_Init+0xb6>
 8003b2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b30:	e000      	b.n	8003b34 <HAL_OPAMP_Init+0xb8>
 8003b32:	2100      	movs	r1, #0
 8003b34:	4311      	orrs	r1, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b3a:	4311      	orrs	r1, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b40:	4311      	orrs	r1, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b46:	04d2      	lsls	r2, r2, #19
 8003b48:	4311      	orrs	r1, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b4e:	0612      	lsls	r2, r2, #24
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	430b      	orrs	r3, r1
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e035      	b.n	8003bc8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 0110 	bic.w	r1, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b27      	ldr	r3, [pc, #156]	@ (8003c18 <HAL_OPAMP_Init+0x19c>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6851      	ldr	r1, [r2, #4]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6892      	ldr	r2, [r2, #8]
 8003b84:	4311      	orrs	r1, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68d2      	ldr	r2, [r2, #12]
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6912      	ldr	r2, [r2, #16]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	7d09      	ldrb	r1, [r1, #20]
 8003b96:	2901      	cmp	r1, #1
 8003b98:	d102      	bne.n	8003ba0 <HAL_OPAMP_Init+0x124>
 8003b9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b9e:	e000      	b.n	8003ba2 <HAL_OPAMP_Init+0x126>
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ba8:	4311      	orrs	r1, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bb4:	04d2      	lsls	r2, r2, #19
 8003bb6:	4311      	orrs	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bbc:	0612      	lsls	r2, r2, #24
 8003bbe:	4311      	orrs	r1, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db10      	blt.n	8003bf4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	e0003e11 	.word	0xe0003e11

08003c1c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	e01d      	b.n	8003c70 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d102      	bne.n	8003c46 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
 8003c44:	e014      	b.n	8003c70 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d10c      	bne.n	8003c6c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2204      	movs	r2, #4
 8003c66:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003c6a:	e001      	b.n	8003c70 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0c0      	b.n	8003e12 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f007 f85f 	bl	800ad68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2203      	movs	r2, #3
 8003cae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f002 fea9 	bl	8006a0e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	e03e      	b.n	8003d40 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cc2:	7bfa      	ldrb	r2, [r7, #15]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	440b      	add	r3, r1
 8003cd0:	3311      	adds	r3, #17
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cd6:	7bfa      	ldrb	r2, [r7, #15]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cea:	7bfa      	ldrb	r2, [r7, #15]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3313      	adds	r3, #19
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3320      	adds	r3, #32
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	3324      	adds	r3, #36	@ 0x24
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	440b      	add	r3, r1
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	791b      	ldrb	r3, [r3, #4]
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d3bb      	bcc.n	8003cc2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
 8003d4e:	e044      	b.n	8003dda <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003d62:	2200      	movs	r2, #0
 8003d64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	440b      	add	r3, r1
 8003d74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	440b      	add	r3, r1
 8003d8a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d92:	7bfa      	ldrb	r2, [r7, #15]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003da8:	7bfa      	ldrb	r2, [r7, #15]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	440b      	add	r3, r1
 8003db6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	440b      	add	r3, r1
 8003dcc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	791b      	ldrb	r3, [r3, #4]
 8003dde:	7bfa      	ldrb	r2, [r7, #15]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d3b5      	bcc.n	8003d50 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003df0:	f002 fe28 	bl	8006a44 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	7a9b      	ldrb	r3, [r3, #10]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d102      	bne.n	8003e10 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f001 fc40 	bl	8005690 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_PCD_Start+0x16>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e012      	b.n	8003e56 <HAL_PCD_Start+0x3c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f002 fdcf 	bl	80069e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f005 f88f 	bl	8008f6a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f005 f894 	bl	8008f98 <USB_ReadInterrupts>
 8003e70:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fb04 	bl	800448a <PCD_EP_ISR_Handler>

    return;
 8003e82:	e110      	b.n	80040a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f006 ffef 	bl	800ae8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003eac:	2100      	movs	r1, #0
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8fc 	bl	80040ac <HAL_PCD_SetAddress>

    return;
 8003eb4:	e0f7      	b.n	80040a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00c      	beq.n	8003eda <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003ed8:	e0e5      	b.n	80040a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00c      	beq.n	8003efe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ef6:	b292      	uxth	r2, r2
 8003ef8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003efc:	e0d3      	b.n	80040a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d034      	beq.n	8003f72 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0204 	bic.w	r2, r2, #4
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0208 	bic.w	r2, r2, #8
 8003f32:	b292      	uxth	r2, r2
 8003f34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f007 f98f 	bl	800b270 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f006 ffd2 	bl	800aefc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f6a:	b292      	uxth	r2, r2
 8003f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003f70:	e099      	b.n	80040a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d027      	beq.n	8003fcc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0208 	orr.w	r2, r2, #8
 8003f8e:	b292      	uxth	r2, r2
 8003f90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0204 	orr.w	r2, r2, #4
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f006 ff7f 	bl	800aec8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003fca:	e06c      	b.n	80040a6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d040      	beq.n	8004058 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fe8:	b292      	uxth	r2, r2
 8003fea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d12b      	bne.n	8004050 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004000:	b29a      	uxth	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0204 	orr.w	r2, r2, #4
 800400a:	b292      	uxth	r2, r2
 800400c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0208 	orr.w	r2, r2, #8
 8004022:	b292      	uxth	r2, r2
 8004024:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004038:	b29b      	uxth	r3, r3
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004046:	2101      	movs	r1, #1
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f007 f911 	bl	800b270 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800404e:	e02a      	b.n	80040a6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f006 ff39 	bl	800aec8 <HAL_PCD_SuspendCallback>
    return;
 8004056:	e026      	b.n	80040a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00f      	beq.n	8004082 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004074:	b292      	uxth	r2, r2
 8004076:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f006 fef7 	bl	800ae6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004080:	e011      	b.n	80040a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00c      	beq.n	80040a6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800409e:	b292      	uxth	r2, r2
 80040a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80040a4:	bf00      	nop
  }
}
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_PCD_SetAddress+0x1a>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e012      	b.n	80040ec <HAL_PCD_SetAddress+0x40>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f004 ff30 	bl	8008f42 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	70fb      	strb	r3, [r7, #3]
 8004106:	460b      	mov	r3, r1
 8004108:	803b      	strh	r3, [r7, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004116:	2b00      	cmp	r3, #0
 8004118:	da0e      	bge.n	8004138 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 0207 	and.w	r2, r3, #7
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	3310      	adds	r3, #16
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	705a      	strb	r2, [r3, #1]
 8004136:	e00e      	b.n	8004156 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 0207 	and.w	r2, r3, #7
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004162:	883a      	ldrh	r2, [r7, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	78ba      	ldrb	r2, [r7, #2]
 800416c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800416e:	78bb      	ldrb	r3, [r7, #2]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d102      	bne.n	800417a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_PCD_EP_Open+0x94>
 8004184:	2302      	movs	r3, #2
 8004186:	e00e      	b.n	80041a6 <HAL_PCD_EP_Open+0xb2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68f9      	ldr	r1, [r7, #12]
 8004196:	4618      	mov	r0, r3
 8004198:	f002 fc72 	bl	8006a80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80041a4:	7afb      	ldrb	r3, [r7, #11]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	da0e      	bge.n	80041e0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	f003 0207 	and.w	r2, r3, #7
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	3310      	adds	r3, #16
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	705a      	strb	r2, [r3, #1]
 80041de:	e00e      	b.n	80041fe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 0207 	and.w	r2, r3, #7
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_PCD_EP_Close+0x6a>
 8004214:	2302      	movs	r3, #2
 8004216:	e00e      	b.n	8004236 <HAL_PCD_EP_Close+0x88>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68f9      	ldr	r1, [r7, #12]
 8004226:	4618      	mov	r0, r3
 8004228:	f002 ffee 	bl	8007208 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	460b      	mov	r3, r1
 800424c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800424e:	7afb      	ldrb	r3, [r7, #11]
 8004250:	f003 0207 	and.w	r2, r3, #7
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2200      	movs	r2, #0
 800427c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800427e:	7afb      	ldrb	r3, [r7, #11]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	b2da      	uxtb	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6979      	ldr	r1, [r7, #20]
 8004290:	4618      	mov	r0, r3
 8004292:	f003 f9a6 	bl	80075e2 <USB_EPStartXfer>

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	f003 0207 	and.w	r2, r3, #7
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	440b      	add	r3, r1
 80042be:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	460b      	mov	r3, r1
 80042de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e0:	7afb      	ldrb	r3, [r7, #11]
 80042e2:	f003 0207 	and.w	r2, r3, #7
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	3310      	adds	r3, #16
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2200      	movs	r2, #0
 8004314:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2201      	movs	r2, #1
 800431a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800431c:	7afb      	ldrb	r3, [r7, #11]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	b2da      	uxtb	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6979      	ldr	r1, [r7, #20]
 800432e:	4618      	mov	r0, r3
 8004330:	f003 f957 	bl	80075e2 <USB_EPStartXfer>

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	7912      	ldrb	r2, [r2, #4]
 8004354:	4293      	cmp	r3, r2
 8004356:	d901      	bls.n	800435c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e03e      	b.n	80043da <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800435c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004360:	2b00      	cmp	r3, #0
 8004362:	da0e      	bge.n	8004382 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	f003 0207 	and.w	r2, r3, #7
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	3310      	adds	r3, #16
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	4413      	add	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	705a      	strb	r2, [r3, #1]
 8004380:	e00c      	b.n	800439c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_PCD_EP_SetStall+0x7e>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e00e      	b.n	80043da <HAL_PCD_EP_SetStall+0x9c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f004 fcba 	bl	8008d44 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	7912      	ldrb	r2, [r2, #4]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e040      	b.n	8004482 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004404:	2b00      	cmp	r3, #0
 8004406:	da0e      	bge.n	8004426 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	f003 0207 	and.w	r2, r3, #7
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	3310      	adds	r3, #16
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	4413      	add	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	705a      	strb	r2, [r3, #1]
 8004424:	e00e      	b.n	8004444 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	f003 0207 	and.w	r2, r3, #7
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	b2da      	uxtb	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_PCD_EP_ClrStall+0x82>
 8004460:	2302      	movs	r3, #2
 8004462:	e00e      	b.n	8004482 <HAL_PCD_EP_ClrStall+0xa0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68f9      	ldr	r1, [r7, #12]
 8004472:	4618      	mov	r0, r3
 8004474:	f004 fcb7 	bl	8008de6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b096      	sub	sp, #88	@ 0x58
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004492:	e3ad      	b.n	8004bf0 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800449c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80044a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80044ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f040 816f 	bne.w	8004796 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80044b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d14c      	bne.n	800455e <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80044d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d4:	81fb      	strh	r3, [r7, #14]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	89fb      	ldrh	r3, [r7, #14]
 80044dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3310      	adds	r3, #16
 80044ec:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4413      	add	r3, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	4413      	add	r3, r2
 8004508:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004514:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	441a      	add	r2, r3
 8004520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004522:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004524:	2100      	movs	r1, #0
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f006 fc87 	bl	800ae3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	7b1b      	ldrb	r3, [r3, #12]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 835c 	beq.w	8004bf0 <PCD_EP_ISR_Handler+0x766>
 8004538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 8357 	bne.w	8004bf0 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	7b1b      	ldrb	r3, [r3, #12]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800454c:	b2da      	uxtb	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	731a      	strb	r2, [r3, #12]
 800455c:	e348      	b.n	8004bf0 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004564:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004570:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004578:	2b00      	cmp	r3, #0
 800457a:	d032      	beq.n	80045e2 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004584:	b29b      	uxth	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	4413      	add	r3, r2
 8004596:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80045ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80045b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f004 fd40 	bl	800903c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80045c8:	4013      	ands	r3, r2
 80045ca:	823b      	strh	r3, [r7, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	8a3a      	ldrh	r2, [r7, #16]
 80045d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045d6:	b292      	uxth	r2, r2
 80045d8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f006 fc00 	bl	800ade0 <HAL_PCD_SetupStageCallback>
 80045e0:	e306      	b.n	8004bf0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80045e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f280 8302 	bge.w	8004bf0 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80045f8:	4013      	ands	r3, r2
 80045fa:	83fb      	strh	r3, [r7, #30]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	8bfa      	ldrh	r2, [r7, #30]
 8004602:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004606:	b292      	uxth	r2, r2
 8004608:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004612:	b29b      	uxth	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	4413      	add	r3, r2
 8004624:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800462e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004630:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d019      	beq.n	800466e <PCD_EP_ISR_Handler+0x1e4>
 800463a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d015      	beq.n	800466e <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004648:	6959      	ldr	r1, [r3, #20]
 800464a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800464e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004650:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004652:	b29b      	uxth	r3, r3
 8004654:	f004 fcf2 	bl	800903c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	441a      	add	r2, r3
 8004662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004664:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004666:	2100      	movs	r1, #0
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f006 fbcb 	bl	800ae04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004678:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800467c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004680:	2b00      	cmp	r3, #0
 8004682:	f040 82b5 	bne.w	8004bf0 <PCD_EP_ISR_Handler+0x766>
 8004686:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800468a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800468e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004692:	f000 82ad 	beq.w	8004bf0 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	4413      	add	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80046cc:	d91d      	bls.n	800470a <PCD_EP_ISR_Handler+0x280>
 80046ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d102      	bne.n	80046e8 <PCD_EP_ISR_Handler+0x25e>
 80046e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046e4:	3b01      	subs	r3, #1
 80046e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	029b      	lsls	r3, r3, #10
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	4313      	orrs	r3, r2
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004702:	b29a      	uxth	r2, r3
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	801a      	strh	r2, [r3, #0]
 8004708:	e026      	b.n	8004758 <PCD_EP_ISR_Handler+0x2ce>
 800470a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <PCD_EP_ISR_Handler+0x29e>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800471c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004720:	b29a      	uxth	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	801a      	strh	r2, [r3, #0]
 8004726:	e017      	b.n	8004758 <PCD_EP_ISR_Handler+0x2ce>
 8004728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <PCD_EP_ISR_Handler+0x2b8>
 800473c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800473e:	3301      	adds	r3, #1
 8004740:	647b      	str	r3, [r7, #68]	@ 0x44
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29a      	uxth	r2, r3
 8004748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800474a:	b29b      	uxth	r3, r3
 800474c:	029b      	lsls	r3, r3, #10
 800474e:	b29b      	uxth	r3, r3
 8004750:	4313      	orrs	r3, r2
 8004752:	b29a      	uxth	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004768:	827b      	strh	r3, [r7, #18]
 800476a:	8a7b      	ldrh	r3, [r7, #18]
 800476c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004770:	827b      	strh	r3, [r7, #18]
 8004772:	8a7b      	ldrh	r3, [r7, #18]
 8004774:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004778:	827b      	strh	r3, [r7, #18]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	8a7b      	ldrh	r3, [r7, #18]
 8004780:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004784:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004788:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800478c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004790:	b29b      	uxth	r3, r3
 8004792:	8013      	strh	r3, [r2, #0]
 8004794:	e22c      	b.n	8004bf0 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047aa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f280 80f6 	bge.w	80049a0 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80047ca:	4013      	ands	r3, r2
 80047cc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80047e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80047e6:	b292      	uxth	r2, r2
 80047e8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80047ea:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004802:	7b1b      	ldrb	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d123      	bne.n	8004850 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004810:	b29b      	uxth	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	4413      	add	r3, r2
 8004822:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004830:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 808e 	beq.w	8004956 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004840:	6959      	ldr	r1, [r3, #20]
 8004842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004844:	88da      	ldrh	r2, [r3, #6]
 8004846:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800484a:	f004 fbf7 	bl	800903c <USB_ReadPMA>
 800484e:	e082      	b.n	8004956 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004852:	78db      	ldrb	r3, [r3, #3]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d10a      	bne.n	800486e <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004858:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800485c:	461a      	mov	r2, r3
 800485e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f9d3 	bl	8004c0c <HAL_PCD_EP_DB_Receive>
 8004866:	4603      	mov	r3, r0
 8004868:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800486c:	e073      	b.n	8004956 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004888:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	441a      	add	r2, r3
 800489a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800489e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d022      	beq.n	8004912 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80048f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d02c      	beq.n	8004956 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004902:	6959      	ldr	r1, [r3, #20]
 8004904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004906:	891a      	ldrh	r2, [r3, #8]
 8004908:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800490c:	f004 fb96 	bl	800903c <USB_ReadPMA>
 8004910:	e021      	b.n	8004956 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800491a:	b29b      	uxth	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4413      	add	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	4413      	add	r3, r2
 800492c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004936:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800493a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004948:	6959      	ldr	r1, [r3, #20]
 800494a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494c:	895a      	ldrh	r2, [r3, #10]
 800494e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004952:	f004 fb73 	bl	800903c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800495e:	441a      	add	r2, r3
 8004960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004962:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800496c:	441a      	add	r2, r3
 800496e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004970:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <PCD_EP_ISR_Handler+0x4fc>
 800497a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800497e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	429a      	cmp	r2, r3
 8004984:	d206      	bcs.n	8004994 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f006 fa39 	bl	800ae04 <HAL_PCD_DataOutStageCallback>
 8004992:	e005      	b.n	80049a0 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800499a:	4618      	mov	r0, r3
 800499c:	f002 fe21 	bl	80075e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80049a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80049a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8121 	beq.w	8004bf0 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80049ae:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	3310      	adds	r3, #16
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4413      	add	r3, r2
 80049c0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80049d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049dc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	441a      	add	r2, r3
 80049ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80049f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80049fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a00:	78db      	ldrb	r3, [r3, #3]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	f040 80a2 	bne.w	8004b4c <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8004a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a10:	7b1b      	ldrb	r3, [r3, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8093 	beq.w	8004b3e <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d046      	beq.n	8004ab2 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d126      	bne.n	8004a7a <PCD_EP_ISR_Handler+0x5f0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	4413      	add	r3, r2
 8004a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	00da      	lsls	r2, r3, #3
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	801a      	strh	r2, [r3, #0]
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	801a      	strh	r2, [r3, #0]
 8004a78:	e061      	b.n	8004b3e <PCD_EP_ISR_Handler+0x6b4>
 8004a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d15d      	bne.n	8004b3e <PCD_EP_ISR_Handler+0x6b4>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a96:	4413      	add	r3, r2
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	00da      	lsls	r2, r3, #3
 8004aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aac:	2200      	movs	r2, #0
 8004aae:	801a      	strh	r2, [r3, #0]
 8004ab0:	e045      	b.n	8004b3e <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d126      	bne.n	8004b0e <PCD_EP_ISR_Handler+0x684>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad4:	4413      	add	r3, r2
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	00da      	lsls	r2, r3, #3
 8004ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af6:	801a      	strh	r2, [r3, #0]
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	e017      	b.n	8004b3e <PCD_EP_ISR_Handler+0x6b4>
 8004b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b10:	785b      	ldrb	r3, [r3, #1]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d113      	bne.n	8004b3e <PCD_EP_ISR_Handler+0x6b4>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b24:	4413      	add	r3, r2
 8004b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	00da      	lsls	r2, r3, #3
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b30:	4413      	add	r3, r2
 8004b32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f006 f978 	bl	800ae3a <HAL_PCD_DataInStageCallback>
 8004b4a:	e051      	b.n	8004bf0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004b4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d144      	bne.n	8004be2 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b7c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d907      	bls.n	8004b9c <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8004b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b94:	1ad2      	subs	r2, r2, r3
 8004b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b98:	619a      	str	r2, [r3, #24]
 8004b9a:	e002      	b.n	8004ba2 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f006 f942 	bl	800ae3a <HAL_PCD_DataInStageCallback>
 8004bb6:	e01b      	b.n	8004bf0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004bc0:	441a      	add	r2, r3
 8004bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc8:	69da      	ldr	r2, [r3, #28]
 8004bca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004bce:	441a      	add	r2, r3
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f002 fd01 	bl	80075e2 <USB_EPStartXfer>
 8004be0:	e006      	b.n	8004bf0 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004be2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004be6:	461a      	mov	r2, r3
 8004be8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f917 	bl	8004e1e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	b21b      	sxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f6ff ac49 	blt.w	8004494 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3758      	adds	r7, #88	@ 0x58
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d07c      	beq.n	8004d1e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4413      	add	r3, r2
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	8b7b      	ldrh	r3, [r7, #26]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d306      	bcc.n	8004c62 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	699a      	ldr	r2, [r3, #24]
 8004c58:	8b7b      	ldrh	r3, [r7, #26]
 8004c5a:	1ad2      	subs	r2, r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	619a      	str	r2, [r3, #24]
 8004c60:	e002      	b.n	8004c68 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2200      	movs	r2, #0
 8004c66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d123      	bne.n	8004cb8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8a:	833b      	strh	r3, [r7, #24]
 8004c8c:	8b3b      	ldrh	r3, [r7, #24]
 8004c8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c92:	833b      	strh	r3, [r7, #24]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	8b3b      	ldrh	r3, [r7, #24]
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01f      	beq.n	8004d02 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cdc:	82fb      	strh	r3, [r7, #22]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	8afb      	ldrh	r3, [r7, #22]
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d02:	8b7b      	ldrh	r3, [r7, #26]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8085 	beq.w	8004e14 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6959      	ldr	r1, [r3, #20]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	891a      	ldrh	r2, [r3, #8]
 8004d16:	8b7b      	ldrh	r3, [r7, #26]
 8004d18:	f004 f990 	bl	800903c <USB_ReadPMA>
 8004d1c:	e07a      	b.n	8004e14 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4413      	add	r3, r2
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	4413      	add	r3, r2
 8004d38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d42:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	699a      	ldr	r2, [r3, #24]
 8004d48:	8b7b      	ldrh	r3, [r7, #26]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d306      	bcc.n	8004d5c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	8b7b      	ldrh	r3, [r7, #26]
 8004d54:	1ad2      	subs	r2, r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	619a      	str	r2, [r3, #24]
 8004d5a:	e002      	b.n	8004d62 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d123      	bne.n	8004db2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d84:	83fb      	strh	r3, [r7, #30]
 8004d86:	8bfb      	ldrh	r3, [r7, #30]
 8004d88:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d8c:	83fb      	strh	r3, [r7, #30]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	441a      	add	r2, r3
 8004d9c:	8bfb      	ldrh	r3, [r7, #30]
 8004d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d11f      	bne.n	8004dfc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd6:	83bb      	strh	r3, [r7, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	8bbb      	ldrh	r3, [r7, #28]
 8004de8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004df0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004dfc:	8b7b      	ldrh	r3, [r7, #26]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6959      	ldr	r1, [r3, #20]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	895a      	ldrh	r2, [r3, #10]
 8004e0e:	8b7b      	ldrh	r3, [r7, #26]
 8004e10:	f004 f914 	bl	800903c <USB_ReadPMA>
    }
  }

  return count;
 8004e14:	8b7b      	ldrh	r3, [r7, #26]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b0a4      	sub	sp, #144	@ 0x90
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 81db 	beq.w	80051ee <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	4413      	add	r3, r2
 8004e52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e5c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d907      	bls.n	8004e7c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e74:	1ad2      	subs	r2, r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	619a      	str	r2, [r3, #24]
 8004e7a:	e002      	b.n	8004e82 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f040 80b9 	bne.w	8004ffe <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d126      	bne.n	8004ee2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea8:	4413      	add	r3, r2
 8004eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	00da      	lsls	r2, r3, #3
 8004eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	801a      	strh	r2, [r3, #0]
 8004ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ede:	801a      	strh	r2, [r3, #0]
 8004ee0:	e01a      	b.n	8004f18 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d116      	bne.n	8004f18 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efe:	4413      	add	r3, r2
 8004f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	00da      	lsls	r2, r3, #3
 8004f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	2200      	movs	r2, #0
 8004f16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d126      	bne.n	8004f74 <HAL_PCD_EP_DB_Transmit+0x156>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	00da      	lsls	r2, r3, #3
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	801a      	strh	r2, [r3, #0]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	e017      	b.n	8004fa4 <HAL_PCD_EP_DB_Transmit+0x186>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d113      	bne.n	8004fa4 <HAL_PCD_EP_DB_Transmit+0x186>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	4413      	add	r3, r2
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	00da      	lsls	r2, r3, #3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	4413      	add	r3, r2
 8004f98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f005 ff45 	bl	800ae3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 82fa 	beq.w	80055b0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd6:	82fb      	strh	r3, [r7, #22]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	8afb      	ldrh	r3, [r7, #22]
 8004fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	8013      	strh	r3, [r2, #0]
 8004ffc:	e2d8      	b.n	80055b0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d021      	beq.n	800504c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800501e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005022:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	441a      	add	r2, r3
 8005034:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800503c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005040:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005048:	b29b      	uxth	r3, r3
 800504a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005052:	2b01      	cmp	r3, #1
 8005054:	f040 82ac 	bne.w	80055b0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005060:	441a      	add	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800506e:	441a      	add	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	429a      	cmp	r2, r3
 800507e:	d30b      	bcc.n	8005098 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	6a1a      	ldr	r2, [r3, #32]
 800508c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005090:	1ad2      	subs	r2, r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	621a      	str	r2, [r3, #32]
 8005096:	e017      	b.n	80050c8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d108      	bne.n	80050b2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80050a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80050a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80050b0:	e00a      	b.n	80050c8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2200      	movs	r2, #0
 80050c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d165      	bne.n	800519c <HAL_PCD_EP_DB_Transmit+0x37e>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050de:	b29b      	uxth	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e4:	4413      	add	r3, r2
 80050e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	00da      	lsls	r2, r3, #3
 80050ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f0:	4413      	add	r3, r2
 80050f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005102:	b29a      	uxth	r2, r3
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800510c:	2b3e      	cmp	r3, #62	@ 0x3e
 800510e:	d91d      	bls.n	800514c <HAL_PCD_EP_DB_Transmit+0x32e>
 8005110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <HAL_PCD_EP_DB_Transmit+0x30c>
 8005124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005126:	3b01      	subs	r3, #1
 8005128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29a      	uxth	r2, r3
 8005130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005132:	b29b      	uxth	r3, r3
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	b29b      	uxth	r3, r3
 8005138:	4313      	orrs	r3, r2
 800513a:	b29b      	uxth	r3, r3
 800513c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005144:	b29a      	uxth	r2, r3
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	e044      	b.n	80051d6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800514c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <HAL_PCD_EP_DB_Transmit+0x34c>
 8005154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005162:	b29a      	uxth	r2, r3
 8005164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	e035      	b.n	80051d6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800516a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <HAL_PCD_EP_DB_Transmit+0x366>
 800517e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005180:	3301      	adds	r3, #1
 8005182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29a      	uxth	r2, r3
 800518a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800518c:	b29b      	uxth	r3, r3
 800518e:	029b      	lsls	r3, r3, #10
 8005190:	b29b      	uxth	r3, r3
 8005192:	4313      	orrs	r3, r2
 8005194:	b29a      	uxth	r2, r3
 8005196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005198:	801a      	strh	r2, [r3, #0]
 800519a:	e01c      	b.n	80051d6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d118      	bne.n	80051d6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051b8:	4413      	add	r3, r2
 80051ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	00da      	lsls	r2, r3, #3
 80051c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c4:	4413      	add	r3, r2
 80051c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80051cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6959      	ldr	r1, [r3, #20]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	891a      	ldrh	r2, [r3, #8]
 80051e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f003 fee6 	bl	8008fb8 <USB_WritePMA>
 80051ec:	e1e0      	b.n	80055b0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4413      	add	r3, r2
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	4413      	add	r3, r2
 8005208:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005212:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800521e:	429a      	cmp	r2, r3
 8005220:	d307      	bcc.n	8005232 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800522a:	1ad2      	subs	r2, r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	619a      	str	r2, [r3, #24]
 8005230:	e002      	b.n	8005238 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2200      	movs	r2, #0
 8005236:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 80c0 	bne.w	80053c2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d126      	bne.n	8005298 <HAL_PCD_EP_DB_Transmit+0x47a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005258:	b29b      	uxth	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800525e:	4413      	add	r3, r2
 8005260:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	00da      	lsls	r2, r3, #3
 8005268:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800526a:	4413      	add	r3, r2
 800526c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005270:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005272:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800527c:	b29a      	uxth	r2, r3
 800527e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005290:	b29a      	uxth	r2, r3
 8005292:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005294:	801a      	strh	r2, [r3, #0]
 8005296:	e01a      	b.n	80052ce <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d116      	bne.n	80052ce <HAL_PCD_EP_DB_Transmit+0x4b0>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052b4:	4413      	add	r3, r2
 80052b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	00da      	lsls	r2, r3, #3
 80052be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052c0:	4413      	add	r3, r2
 80052c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80052c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ca:	2200      	movs	r2, #0
 80052cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d12b      	bne.n	8005334 <HAL_PCD_EP_DB_Transmit+0x516>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f0:	4413      	add	r3, r2
 80052f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	00da      	lsls	r2, r3, #3
 80052fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052fc:	4413      	add	r3, r2
 80052fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005302:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005306:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005312:	b29a      	uxth	r2, r3
 8005314:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29a      	uxth	r2, r3
 800532c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e017      	b.n	8005364 <HAL_PCD_EP_DB_Transmit+0x546>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d113      	bne.n	8005364 <HAL_PCD_EP_DB_Transmit+0x546>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005344:	b29b      	uxth	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800534a:	4413      	add	r3, r2
 800534c:	677b      	str	r3, [r7, #116]	@ 0x74
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	00da      	lsls	r2, r3, #3
 8005354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005356:	4413      	add	r3, r2
 8005358:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800535c:	673b      	str	r3, [r7, #112]	@ 0x70
 800535e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005360:	2200      	movs	r2, #0
 8005362:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	4619      	mov	r1, r3
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f005 fd65 	bl	800ae3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 811a 	bne.w	80055b0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005396:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	441a      	add	r2, r3
 80053a8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80053ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053bc:	b29b      	uxth	r3, r3
 80053be:	8013      	strh	r3, [r2, #0]
 80053c0:	e0f6      	b.n	80055b0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d121      	bne.n	8005410 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80053fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005404:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800540c:	b29b      	uxth	r3, r3
 800540e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005416:	2b01      	cmp	r3, #1
 8005418:	f040 80ca 	bne.w	80055b0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005424:	441a      	add	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005432:	441a      	add	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	429a      	cmp	r2, r3
 8005442:	d30b      	bcc.n	800545c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6a1a      	ldr	r2, [r3, #32]
 8005450:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005454:	1ad2      	subs	r2, r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	621a      	str	r2, [r3, #32]
 800545a:	e017      	b.n	800548c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d108      	bne.n	8005476 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005464:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005474:	e00a      	b.n	800548c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	657b      	str	r3, [r7, #84]	@ 0x54
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d165      	bne.n	8005566 <HAL_PCD_EP_DB_Transmit+0x748>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054ae:	4413      	add	r3, r2
 80054b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	00da      	lsls	r2, r3, #3
 80054b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054ba:	4413      	add	r3, r2
 80054bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80054c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80054d8:	d91d      	bls.n	8005516 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80054da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80054ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054f0:	3b01      	subs	r3, #1
 80054f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	029b      	lsls	r3, r3, #10
 8005500:	b29b      	uxth	r3, r3
 8005502:	4313      	orrs	r3, r2
 8005504:	b29b      	uxth	r3, r3
 8005506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550e:	b29a      	uxth	r2, r3
 8005510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	e041      	b.n	800559a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <HAL_PCD_EP_DB_Transmit+0x716>
 800551e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552c:	b29a      	uxth	r2, r3
 800552e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e032      	b.n	800559a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800553c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <HAL_PCD_EP_DB_Transmit+0x730>
 8005548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800554a:	3301      	adds	r3, #1
 800554c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800554e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29a      	uxth	r2, r3
 8005554:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005556:	b29b      	uxth	r3, r3
 8005558:	029b      	lsls	r3, r3, #10
 800555a:	b29b      	uxth	r3, r3
 800555c:	4313      	orrs	r3, r2
 800555e:	b29a      	uxth	r2, r3
 8005560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005562:	801a      	strh	r2, [r3, #0]
 8005564:	e019      	b.n	800559a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	785b      	ldrb	r3, [r3, #1]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d115      	bne.n	800559a <HAL_PCD_EP_DB_Transmit+0x77c>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005576:	b29b      	uxth	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800557c:	4413      	add	r3, r2
 800557e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	00da      	lsls	r2, r3, #3
 8005586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005588:	4413      	add	r3, r2
 800558a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800558e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005594:	b29a      	uxth	r2, r3
 8005596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005598:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	6959      	ldr	r1, [r3, #20]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	895a      	ldrh	r2, [r3, #10]
 80055a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f003 fd04 	bl	8008fb8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ca:	82bb      	strh	r3, [r7, #20]
 80055cc:	8abb      	ldrh	r3, [r7, #20]
 80055ce:	f083 0310 	eor.w	r3, r3, #16
 80055d2:	82bb      	strh	r3, [r7, #20]
 80055d4:	8abb      	ldrh	r3, [r7, #20]
 80055d6:	f083 0320 	eor.w	r3, r3, #32
 80055da:	82bb      	strh	r3, [r7, #20]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	441a      	add	r2, r3
 80055ea:	8abb      	ldrh	r3, [r7, #20]
 80055ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3790      	adds	r7, #144	@ 0x90
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800560a:	b480      	push	{r7}
 800560c:	b087      	sub	sp, #28
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	817b      	strh	r3, [r7, #10]
 8005618:	4613      	mov	r3, r2
 800561a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800561c:	897b      	ldrh	r3, [r7, #10]
 800561e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005628:	897b      	ldrh	r3, [r7, #10]
 800562a:	f003 0207 	and.w	r2, r3, #7
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	3310      	adds	r3, #16
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	e009      	b.n	8005654 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005640:	897a      	ldrh	r2, [r7, #10]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005654:	893b      	ldrh	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d107      	bne.n	800566a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	b29a      	uxth	r2, r3
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	80da      	strh	r2, [r3, #6]
 8005668:	e00b      	b.n	8005682 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2201      	movs	r2, #1
 800566e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	b29a      	uxth	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	0c1b      	lsrs	r3, r3, #16
 800567c:	b29a      	uxth	r2, r3
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f043 0302 	orr.w	r3, r3, #2
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d141      	bne.n	8005776 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fe:	d131      	bne.n	8005764 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005700:	4b47      	ldr	r3, [pc, #284]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005706:	4a46      	ldr	r2, [pc, #280]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800570c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005710:	4b43      	ldr	r3, [pc, #268]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005718:	4a41      	ldr	r2, [pc, #260]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800571a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800571e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005720:	4b40      	ldr	r3, [pc, #256]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2232      	movs	r2, #50	@ 0x32
 8005726:	fb02 f303 	mul.w	r3, r2, r3
 800572a:	4a3f      	ldr	r2, [pc, #252]	@ (8005828 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800572c:	fba2 2303 	umull	r2, r3, r2, r3
 8005730:	0c9b      	lsrs	r3, r3, #18
 8005732:	3301      	adds	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005736:	e002      	b.n	800573e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3b01      	subs	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800573e:	4b38      	ldr	r3, [pc, #224]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800574a:	d102      	bne.n	8005752 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f2      	bne.n	8005738 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005752:	4b33      	ldr	r3, [pc, #204]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800575a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800575e:	d158      	bne.n	8005812 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e057      	b.n	8005814 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005764:	4b2e      	ldr	r3, [pc, #184]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800576a:	4a2d      	ldr	r2, [pc, #180]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800576c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005770:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005774:	e04d      	b.n	8005812 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800577c:	d141      	bne.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800577e:	4b28      	ldr	r3, [pc, #160]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800578a:	d131      	bne.n	80057f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800578c:	4b24      	ldr	r3, [pc, #144]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005792:	4a23      	ldr	r2, [pc, #140]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005798:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800579c:	4b20      	ldr	r3, [pc, #128]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2232      	movs	r2, #50	@ 0x32
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005828 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057b8:	fba2 2303 	umull	r2, r3, r2, r3
 80057bc:	0c9b      	lsrs	r3, r3, #18
 80057be:	3301      	adds	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057c2:	e002      	b.n	80057ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ca:	4b15      	ldr	r3, [pc, #84]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d6:	d102      	bne.n	80057de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f2      	bne.n	80057c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057de:	4b10      	ldr	r3, [pc, #64]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ea:	d112      	bne.n	8005812 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e011      	b.n	8005814 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005800:	e007      	b.n	8005812 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005802:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800580a:	4a05      	ldr	r2, [pc, #20]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800580c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005810:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	40007000 	.word	0x40007000
 8005824:	20000000 	.word	0x20000000
 8005828:	431bde83 	.word	0x431bde83

0800582c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005830:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4a04      	ldr	r2, [pc, #16]	@ (8005848 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800583a:	6093      	str	r3, [r2, #8]
}
 800583c:	bf00      	nop
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40007000 	.word	0x40007000

0800584c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e2fe      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d075      	beq.n	8005956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800586a:	4b97      	ldr	r3, [pc, #604]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005874:	4b94      	ldr	r3, [pc, #592]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0303 	and.w	r3, r3, #3
 800587c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b0c      	cmp	r3, #12
 8005882:	d102      	bne.n	800588a <HAL_RCC_OscConfig+0x3e>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d002      	beq.n	8005890 <HAL_RCC_OscConfig+0x44>
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b08      	cmp	r3, #8
 800588e:	d10b      	bne.n	80058a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005890:	4b8d      	ldr	r3, [pc, #564]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d05b      	beq.n	8005954 <HAL_RCC_OscConfig+0x108>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d157      	bne.n	8005954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e2d9      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058b0:	d106      	bne.n	80058c0 <HAL_RCC_OscConfig+0x74>
 80058b2:	4b85      	ldr	r3, [pc, #532]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a84      	ldr	r2, [pc, #528]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80058b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	e01d      	b.n	80058fc <HAL_RCC_OscConfig+0xb0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCC_OscConfig+0x98>
 80058ca:	4b7f      	ldr	r3, [pc, #508]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a7e      	ldr	r2, [pc, #504]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80058d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	4b7c      	ldr	r3, [pc, #496]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a7b      	ldr	r2, [pc, #492]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80058dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	e00b      	b.n	80058fc <HAL_RCC_OscConfig+0xb0>
 80058e4:	4b78      	ldr	r3, [pc, #480]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a77      	ldr	r2, [pc, #476]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80058ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	4b75      	ldr	r3, [pc, #468]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a74      	ldr	r2, [pc, #464]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80058f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d013      	beq.n	800592c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005904:	f7fb fb0e 	bl	8000f24 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800590c:	f7fb fb0a 	bl	8000f24 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	@ 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e29e      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800591e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCC_OscConfig+0xc0>
 800592a:	e014      	b.n	8005956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fb fafa 	bl	8000f24 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005934:	f7fb faf6 	bl	8000f24 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	@ 0x64
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e28a      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005946:	4b60      	ldr	r3, [pc, #384]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0xe8>
 8005952:	e000      	b.n	8005956 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d075      	beq.n	8005a4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005962:	4b59      	ldr	r3, [pc, #356]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800596c:	4b56      	ldr	r3, [pc, #344]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b0c      	cmp	r3, #12
 800597a:	d102      	bne.n	8005982 <HAL_RCC_OscConfig+0x136>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d002      	beq.n	8005988 <HAL_RCC_OscConfig+0x13c>
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2b04      	cmp	r3, #4
 8005986:	d11f      	bne.n	80059c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005988:	4b4f      	ldr	r3, [pc, #316]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_RCC_OscConfig+0x154>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e25d      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a0:	4b49      	ldr	r3, [pc, #292]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	061b      	lsls	r3, r3, #24
 80059ae:	4946      	ldr	r1, [pc, #280]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059b4:	4b45      	ldr	r3, [pc, #276]	@ (8005acc <HAL_RCC_OscConfig+0x280>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fb fa67 	bl	8000e8c <HAL_InitTick>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d043      	beq.n	8005a4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e249      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d023      	beq.n	8005a18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059d0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80059d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fb faa2 	bl	8000f24 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059e4:	f7fb fa9e 	bl	8000f24 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e232      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059f6:	4b34      	ldr	r3, [pc, #208]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0f0      	beq.n	80059e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a02:	4b31      	ldr	r3, [pc, #196]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	492d      	ldr	r1, [pc, #180]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	604b      	str	r3, [r1, #4]
 8005a16:	e01a      	b.n	8005a4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a18:	4b2b      	ldr	r3, [pc, #172]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005a1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fb fa7e 	bl	8000f24 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a2c:	f7fb fa7a 	bl	8000f24 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e20e      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a3e:	4b22      	ldr	r3, [pc, #136]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f0      	bne.n	8005a2c <HAL_RCC_OscConfig+0x1e0>
 8005a4a:	e000      	b.n	8005a4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d041      	beq.n	8005ade <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d01c      	beq.n	8005a9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a62:	4b19      	ldr	r3, [pc, #100]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a68:	4a17      	ldr	r2, [pc, #92]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a72:	f7fb fa57 	bl	8000f24 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a7a:	f7fb fa53 	bl	8000f24 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e1e7      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0ef      	beq.n	8005a7a <HAL_RCC_OscConfig+0x22e>
 8005a9a:	e020      	b.n	8005ade <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aa2:	4a09      	ldr	r2, [pc, #36]	@ (8005ac8 <HAL_RCC_OscConfig+0x27c>)
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aac:	f7fb fa3a 	bl	8000f24 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ab2:	e00d      	b.n	8005ad0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ab4:	f7fb fa36 	bl	8000f24 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d906      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e1ca      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
 8005ac6:	bf00      	nop
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ad0:	4b8c      	ldr	r3, [pc, #560]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1ea      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 80a6 	beq.w	8005c38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aec:	2300      	movs	r3, #0
 8005aee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005af0:	4b84      	ldr	r3, [pc, #528]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_RCC_OscConfig+0x2b4>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_RCC_OscConfig+0x2b6>
 8005b00:	2300      	movs	r3, #0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00d      	beq.n	8005b22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b06:	4b7f      	ldr	r3, [pc, #508]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b12:	4b7c      	ldr	r3, [pc, #496]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b22:	4b79      	ldr	r3, [pc, #484]	@ (8005d08 <HAL_RCC_OscConfig+0x4bc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d118      	bne.n	8005b60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b2e:	4b76      	ldr	r3, [pc, #472]	@ (8005d08 <HAL_RCC_OscConfig+0x4bc>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a75      	ldr	r2, [pc, #468]	@ (8005d08 <HAL_RCC_OscConfig+0x4bc>)
 8005b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b3a:	f7fb f9f3 	bl	8000f24 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b42:	f7fb f9ef 	bl	8000f24 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e183      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b54:	4b6c      	ldr	r3, [pc, #432]	@ (8005d08 <HAL_RCC_OscConfig+0x4bc>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f0      	beq.n	8005b42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d108      	bne.n	8005b7a <HAL_RCC_OscConfig+0x32e>
 8005b68:	4b66      	ldr	r3, [pc, #408]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6e:	4a65      	ldr	r2, [pc, #404]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b78:	e024      	b.n	8005bc4 <HAL_RCC_OscConfig+0x378>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	d110      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x358>
 8005b82:	4b60      	ldr	r3, [pc, #384]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b88:	4a5e      	ldr	r2, [pc, #376]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005b8a:	f043 0304 	orr.w	r3, r3, #4
 8005b8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b92:	4b5c      	ldr	r3, [pc, #368]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b98:	4a5a      	ldr	r2, [pc, #360]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ba2:	e00f      	b.n	8005bc4 <HAL_RCC_OscConfig+0x378>
 8005ba4:	4b57      	ldr	r3, [pc, #348]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005baa:	4a56      	ldr	r2, [pc, #344]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bb4:	4b53      	ldr	r3, [pc, #332]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bba:	4a52      	ldr	r2, [pc, #328]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005bbc:	f023 0304 	bic.w	r3, r3, #4
 8005bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d016      	beq.n	8005bfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bcc:	f7fb f9aa 	bl	8000f24 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bd2:	e00a      	b.n	8005bea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd4:	f7fb f9a6 	bl	8000f24 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e138      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bea:	4b46      	ldr	r3, [pc, #280]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0ed      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x388>
 8005bf8:	e015      	b.n	8005c26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfa:	f7fb f993 	bl	8000f24 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c00:	e00a      	b.n	8005c18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c02:	f7fb f98f 	bl	8000f24 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e121      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c18:	4b3a      	ldr	r3, [pc, #232]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1ed      	bne.n	8005c02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c26:	7ffb      	ldrb	r3, [r7, #31]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d105      	bne.n	8005c38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c2c:	4b35      	ldr	r3, [pc, #212]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c30:	4a34      	ldr	r2, [pc, #208]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d03c      	beq.n	8005cbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01c      	beq.n	8005c86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c52:	4a2c      	ldr	r2, [pc, #176]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5c:	f7fb f962 	bl	8000f24 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c64:	f7fb f95e 	bl	8000f24 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e0f2      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c76:	4b23      	ldr	r3, [pc, #140]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0ef      	beq.n	8005c64 <HAL_RCC_OscConfig+0x418>
 8005c84:	e01b      	b.n	8005cbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c86:	4b1f      	ldr	r3, [pc, #124]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005c8e:	f023 0301 	bic.w	r3, r3, #1
 8005c92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c96:	f7fb f945 	bl	8000f24 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c9e:	f7fb f941 	bl	8000f24 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e0d5      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cb0:	4b14      	ldr	r3, [pc, #80]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1ef      	bne.n	8005c9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80c9 	beq.w	8005e5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 030c 	and.w	r3, r3, #12
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	f000 8083 	beq.w	8005ddc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d15e      	bne.n	8005d9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cde:	4b09      	ldr	r3, [pc, #36]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a08      	ldr	r2, [pc, #32]	@ (8005d04 <HAL_RCC_OscConfig+0x4b8>)
 8005ce4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cea:	f7fb f91b 	bl	8000f24 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf0:	e00c      	b.n	8005d0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf2:	f7fb f917 	bl	8000f24 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d905      	bls.n	8005d0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e0ab      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d0c:	4b55      	ldr	r3, [pc, #340]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1ec      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d18:	4b52      	ldr	r3, [pc, #328]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	4b52      	ldr	r3, [pc, #328]	@ (8005e68 <HAL_RCC_OscConfig+0x61c>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6a11      	ldr	r1, [r2, #32]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d28:	3a01      	subs	r2, #1
 8005d2a:	0112      	lsls	r2, r2, #4
 8005d2c:	4311      	orrs	r1, r2
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005d32:	0212      	lsls	r2, r2, #8
 8005d34:	4311      	orrs	r1, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d3a:	0852      	lsrs	r2, r2, #1
 8005d3c:	3a01      	subs	r2, #1
 8005d3e:	0552      	lsls	r2, r2, #21
 8005d40:	4311      	orrs	r1, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d46:	0852      	lsrs	r2, r2, #1
 8005d48:	3a01      	subs	r2, #1
 8005d4a:	0652      	lsls	r2, r2, #25
 8005d4c:	4311      	orrs	r1, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d52:	06d2      	lsls	r2, r2, #27
 8005d54:	430a      	orrs	r2, r1
 8005d56:	4943      	ldr	r1, [pc, #268]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d5c:	4b41      	ldr	r3, [pc, #260]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a40      	ldr	r2, [pc, #256]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d68:	4b3e      	ldr	r3, [pc, #248]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4a3d      	ldr	r2, [pc, #244]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d74:	f7fb f8d6 	bl	8000f24 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d7c:	f7fb f8d2 	bl	8000f24 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e066      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d8e:	4b35      	ldr	r3, [pc, #212]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0f0      	beq.n	8005d7c <HAL_RCC_OscConfig+0x530>
 8005d9a:	e05e      	b.n	8005e5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d9c:	4b31      	ldr	r3, [pc, #196]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a30      	ldr	r2, [pc, #192]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fb f8bc 	bl	8000f24 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db0:	f7fb f8b8 	bl	8000f24 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e04c      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc2:	4b28      	ldr	r3, [pc, #160]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f0      	bne.n	8005db0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005dce:	4b25      	ldr	r3, [pc, #148]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	4924      	ldr	r1, [pc, #144]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005dd4:	4b25      	ldr	r3, [pc, #148]	@ (8005e6c <HAL_RCC_OscConfig+0x620>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60cb      	str	r3, [r1, #12]
 8005dda:	e03e      	b.n	8005e5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e039      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005de8:	4b1e      	ldr	r3, [pc, #120]	@ (8005e64 <HAL_RCC_OscConfig+0x618>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f003 0203 	and.w	r2, r3, #3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d12c      	bne.n	8005e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	3b01      	subs	r3, #1
 8005e08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d123      	bne.n	8005e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d11b      	bne.n	8005e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d113      	bne.n	8005e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e38:	085b      	lsrs	r3, r3, #1
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d109      	bne.n	8005e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d001      	beq.n	8005e5a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3720      	adds	r7, #32
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40021000 	.word	0x40021000
 8005e68:	019f800c 	.word	0x019f800c
 8005e6c:	feeefffc 	.word	0xfeeefffc

08005e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e11e      	b.n	80060c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e88:	4b91      	ldr	r3, [pc, #580]	@ (80060d0 <HAL_RCC_ClockConfig+0x260>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d910      	bls.n	8005eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e96:	4b8e      	ldr	r3, [pc, #568]	@ (80060d0 <HAL_RCC_ClockConfig+0x260>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 020f 	bic.w	r2, r3, #15
 8005e9e:	498c      	ldr	r1, [pc, #560]	@ (80060d0 <HAL_RCC_ClockConfig+0x260>)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea6:	4b8a      	ldr	r3, [pc, #552]	@ (80060d0 <HAL_RCC_ClockConfig+0x260>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d001      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e106      	b.n	80060c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d073      	beq.n	8005fac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d129      	bne.n	8005f20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ecc:	4b81      	ldr	r3, [pc, #516]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0f4      	b.n	80060c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005edc:	f000 f972 	bl	80061c4 <RCC_GetSysClockFreqFromPLLSource>
 8005ee0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	4a7c      	ldr	r2, [pc, #496]	@ (80060d8 <HAL_RCC_ClockConfig+0x268>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d93f      	bls.n	8005f6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005eea:	4b7a      	ldr	r3, [pc, #488]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d033      	beq.n	8005f6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d12f      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f0a:	4b72      	ldr	r3, [pc, #456]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f12:	4a70      	ldr	r2, [pc, #448]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f1a:	2380      	movs	r3, #128	@ 0x80
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e024      	b.n	8005f6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d107      	bne.n	8005f38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f28:	4b6a      	ldr	r3, [pc, #424]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d109      	bne.n	8005f48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0c6      	b.n	80060c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f38:	4b66      	ldr	r3, [pc, #408]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0be      	b.n	80060c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f48:	f000 f8ce 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 8005f4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4a61      	ldr	r2, [pc, #388]	@ (80060d8 <HAL_RCC_ClockConfig+0x268>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d909      	bls.n	8005f6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f56:	4b5f      	ldr	r3, [pc, #380]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f66:	2380      	movs	r3, #128	@ 0x80
 8005f68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 0203 	bic.w	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4957      	ldr	r1, [pc, #348]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f7c:	f7fa ffd2 	bl	8000f24 <HAL_GetTick>
 8005f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f82:	e00a      	b.n	8005f9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f84:	f7fa ffce 	bl	8000f24 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e095      	b.n	80060c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 020c 	and.w	r2, r3, #12
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d1eb      	bne.n	8005f84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d023      	beq.n	8006000 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fc4:	4b43      	ldr	r3, [pc, #268]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	4a42      	ldr	r2, [pc, #264]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005fce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005fe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005fea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fec:	4b39      	ldr	r3, [pc, #228]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	4936      	ldr	r1, [pc, #216]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	608b      	str	r3, [r1, #8]
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b80      	cmp	r3, #128	@ 0x80
 8006004:	d105      	bne.n	8006012 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006006:	4b33      	ldr	r3, [pc, #204]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	4a32      	ldr	r2, [pc, #200]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 800600c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006010:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006012:	4b2f      	ldr	r3, [pc, #188]	@ (80060d0 <HAL_RCC_ClockConfig+0x260>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d21d      	bcs.n	800605c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006020:	4b2b      	ldr	r3, [pc, #172]	@ (80060d0 <HAL_RCC_ClockConfig+0x260>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f023 020f 	bic.w	r2, r3, #15
 8006028:	4929      	ldr	r1, [pc, #164]	@ (80060d0 <HAL_RCC_ClockConfig+0x260>)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	4313      	orrs	r3, r2
 800602e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006030:	f7fa ff78 	bl	8000f24 <HAL_GetTick>
 8006034:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006036:	e00a      	b.n	800604e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006038:	f7fa ff74 	bl	8000f24 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e03b      	b.n	80060c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800604e:	4b20      	ldr	r3, [pc, #128]	@ (80060d0 <HAL_RCC_ClockConfig+0x260>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d1ed      	bne.n	8006038 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006068:	4b1a      	ldr	r3, [pc, #104]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4917      	ldr	r1, [pc, #92]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8006076:	4313      	orrs	r3, r2
 8006078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006086:	4b13      	ldr	r3, [pc, #76]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	490f      	ldr	r1, [pc, #60]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 8006096:	4313      	orrs	r3, r2
 8006098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800609a:	f000 f825 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 800609e:	4602      	mov	r2, r0
 80060a0:	4b0c      	ldr	r3, [pc, #48]	@ (80060d4 <HAL_RCC_ClockConfig+0x264>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	490c      	ldr	r1, [pc, #48]	@ (80060dc <HAL_RCC_ClockConfig+0x26c>)
 80060ac:	5ccb      	ldrb	r3, [r1, r3]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	fa22 f303 	lsr.w	r3, r2, r3
 80060b6:	4a0a      	ldr	r2, [pc, #40]	@ (80060e0 <HAL_RCC_ClockConfig+0x270>)
 80060b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060ba:	4b0a      	ldr	r3, [pc, #40]	@ (80060e4 <HAL_RCC_ClockConfig+0x274>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fa fee4 	bl	8000e8c <HAL_InitTick>
 80060c4:	4603      	mov	r3, r0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40022000 	.word	0x40022000
 80060d4:	40021000 	.word	0x40021000
 80060d8:	04c4b400 	.word	0x04c4b400
 80060dc:	0800bd1c 	.word	0x0800bd1c
 80060e0:	20000000 	.word	0x20000000
 80060e4:	20000004 	.word	0x20000004

080060e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80060ee:	4b2c      	ldr	r3, [pc, #176]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 030c 	and.w	r3, r3, #12
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d102      	bne.n	8006100 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060fa:	4b2a      	ldr	r3, [pc, #168]	@ (80061a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	e047      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006100:	4b27      	ldr	r3, [pc, #156]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 030c 	and.w	r3, r3, #12
 8006108:	2b08      	cmp	r3, #8
 800610a:	d102      	bne.n	8006112 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800610c:	4b26      	ldr	r3, [pc, #152]	@ (80061a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	e03e      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006112:	4b23      	ldr	r3, [pc, #140]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b0c      	cmp	r3, #12
 800611c:	d136      	bne.n	800618c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800611e:	4b20      	ldr	r3, [pc, #128]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006128:	4b1d      	ldr	r3, [pc, #116]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	3301      	adds	r3, #1
 8006134:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b03      	cmp	r3, #3
 800613a:	d10c      	bne.n	8006156 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800613c:	4a1a      	ldr	r2, [pc, #104]	@ (80061a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	4a16      	ldr	r2, [pc, #88]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006146:	68d2      	ldr	r2, [r2, #12]
 8006148:	0a12      	lsrs	r2, r2, #8
 800614a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	617b      	str	r3, [r7, #20]
      break;
 8006154:	e00c      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006156:	4a13      	ldr	r2, [pc, #76]	@ (80061a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	fbb2 f3f3 	udiv	r3, r2, r3
 800615e:	4a10      	ldr	r2, [pc, #64]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006160:	68d2      	ldr	r2, [r2, #12]
 8006162:	0a12      	lsrs	r2, r2, #8
 8006164:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006168:	fb02 f303 	mul.w	r3, r2, r3
 800616c:	617b      	str	r3, [r7, #20]
      break;
 800616e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006170:	4b0b      	ldr	r3, [pc, #44]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	0e5b      	lsrs	r3, r3, #25
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	3301      	adds	r3, #1
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	e001      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006190:	693b      	ldr	r3, [r7, #16]
}
 8006192:	4618      	mov	r0, r3
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40021000 	.word	0x40021000
 80061a4:	00f42400 	.word	0x00f42400
 80061a8:	007a1200 	.word	0x007a1200

080061ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061b0:	4b03      	ldr	r3, [pc, #12]	@ (80061c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061b2:	681b      	ldr	r3, [r3, #0]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20000000 	.word	0x20000000

080061c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006244 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006244 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d10c      	bne.n	8006202 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061e8:	4a17      	ldr	r2, [pc, #92]	@ (8006248 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f0:	4a14      	ldr	r2, [pc, #80]	@ (8006244 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061f2:	68d2      	ldr	r2, [r2, #12]
 80061f4:	0a12      	lsrs	r2, r2, #8
 80061f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
 80061fe:	617b      	str	r3, [r7, #20]
    break;
 8006200:	e00c      	b.n	800621c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006202:	4a12      	ldr	r2, [pc, #72]	@ (800624c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	4a0e      	ldr	r2, [pc, #56]	@ (8006244 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800620c:	68d2      	ldr	r2, [r2, #12]
 800620e:	0a12      	lsrs	r2, r2, #8
 8006210:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006214:	fb02 f303 	mul.w	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]
    break;
 800621a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800621c:	4b09      	ldr	r3, [pc, #36]	@ (8006244 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	0e5b      	lsrs	r3, r3, #25
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	3301      	adds	r3, #1
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006236:	687b      	ldr	r3, [r7, #4]
}
 8006238:	4618      	mov	r0, r3
 800623a:	371c      	adds	r7, #28
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	40021000 	.word	0x40021000
 8006248:	007a1200 	.word	0x007a1200
 800624c:	00f42400 	.word	0x00f42400

08006250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006258:	2300      	movs	r3, #0
 800625a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800625c:	2300      	movs	r3, #0
 800625e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8098 	beq.w	800639e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800626e:	2300      	movs	r3, #0
 8006270:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006272:	4b43      	ldr	r3, [pc, #268]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10d      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800627e:	4b40      	ldr	r3, [pc, #256]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006282:	4a3f      	ldr	r2, [pc, #252]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006288:	6593      	str	r3, [r2, #88]	@ 0x58
 800628a:	4b3d      	ldr	r3, [pc, #244]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800628c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006292:	60bb      	str	r3, [r7, #8]
 8006294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006296:	2301      	movs	r3, #1
 8006298:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800629a:	4b3a      	ldr	r3, [pc, #232]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a39      	ldr	r2, [pc, #228]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062a6:	f7fa fe3d 	bl	8000f24 <HAL_GetTick>
 80062aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ac:	e009      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ae:	f7fa fe39 	bl	8000f24 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d902      	bls.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	74fb      	strb	r3, [r7, #19]
        break;
 80062c0:	e005      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c2:	4b30      	ldr	r3, [pc, #192]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0ef      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80062ce:	7cfb      	ldrb	r3, [r7, #19]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d159      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01e      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d019      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062f0:	4b23      	ldr	r3, [pc, #140]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062fc:	4b20      	ldr	r3, [pc, #128]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006302:	4a1f      	ldr	r2, [pc, #124]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800630c:	4b1c      	ldr	r3, [pc, #112]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006312:	4a1b      	ldr	r2, [pc, #108]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800631c:	4a18      	ldr	r2, [pc, #96]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d016      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632e:	f7fa fdf9 	bl	8000f24 <HAL_GetTick>
 8006332:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006334:	e00b      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006336:	f7fa fdf5 	bl	8000f24 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006344:	4293      	cmp	r3, r2
 8006346:	d902      	bls.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	74fb      	strb	r3, [r7, #19]
            break;
 800634c:	e006      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800634e:	4b0c      	ldr	r3, [pc, #48]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0ec      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006362:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	4903      	ldr	r1, [pc, #12]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006378:	e008      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800637a:	7cfb      	ldrb	r3, [r7, #19]
 800637c:	74bb      	strb	r3, [r7, #18]
 800637e:	e005      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006380:	40021000 	.word	0x40021000
 8006384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	7cfb      	ldrb	r3, [r7, #19]
 800638a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800638c:	7c7b      	ldrb	r3, [r7, #17]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d105      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006392:	4ba6      	ldr	r3, [pc, #664]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006396:	4aa5      	ldr	r2, [pc, #660]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800639c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063aa:	4ba0      	ldr	r3, [pc, #640]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	f023 0203 	bic.w	r2, r3, #3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	499c      	ldr	r1, [pc, #624]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063cc:	4b97      	ldr	r3, [pc, #604]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d2:	f023 020c 	bic.w	r2, r3, #12
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	4994      	ldr	r1, [pc, #592]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063ee:	4b8f      	ldr	r3, [pc, #572]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	498b      	ldr	r1, [pc, #556]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0308 	and.w	r3, r3, #8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006410:	4b86      	ldr	r3, [pc, #536]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006416:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	4983      	ldr	r1, [pc, #524]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006432:	4b7e      	ldr	r3, [pc, #504]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006438:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	497a      	ldr	r1, [pc, #488]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006454:	4b75      	ldr	r3, [pc, #468]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	4972      	ldr	r1, [pc, #456]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006476:	4b6d      	ldr	r3, [pc, #436]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	4969      	ldr	r1, [pc, #420]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006498:	4b64      	ldr	r3, [pc, #400]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	4961      	ldr	r1, [pc, #388]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064ba:	4b5c      	ldr	r3, [pc, #368]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	4958      	ldr	r1, [pc, #352]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d015      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064dc:	4b53      	ldr	r3, [pc, #332]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ea:	4950      	ldr	r1, [pc, #320]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064fa:	d105      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064fc:	4b4b      	ldr	r3, [pc, #300]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	4a4a      	ldr	r2, [pc, #296]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006506:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006510:	2b00      	cmp	r3, #0
 8006512:	d015      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006514:	4b45      	ldr	r3, [pc, #276]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	4942      	ldr	r1, [pc, #264]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006532:	d105      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006534:	4b3d      	ldr	r3, [pc, #244]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4a3c      	ldr	r2, [pc, #240]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800653a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800653e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d015      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800654c:	4b37      	ldr	r3, [pc, #220]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006552:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655a:	4934      	ldr	r1, [pc, #208]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800656a:	d105      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800656c:	4b2f      	ldr	r3, [pc, #188]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	4a2e      	ldr	r2, [pc, #184]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006576:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d015      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006584:	4b29      	ldr	r3, [pc, #164]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006592:	4926      	ldr	r1, [pc, #152]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065a2:	d105      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a4:	4b21      	ldr	r3, [pc, #132]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4a20      	ldr	r2, [pc, #128]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d015      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065bc:	4b1b      	ldr	r3, [pc, #108]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ca:	4918      	ldr	r1, [pc, #96]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065da:	d105      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065dc:	4b13      	ldr	r3, [pc, #76]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	4a12      	ldr	r2, [pc, #72]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d015      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80065f4:	4b0d      	ldr	r3, [pc, #52]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006602:	490a      	ldr	r1, [pc, #40]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006604:	4313      	orrs	r3, r2
 8006606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006612:	d105      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006614:	4b05      	ldr	r3, [pc, #20]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	4a04      	ldr	r2, [pc, #16]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800661a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800661e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006620:	7cbb      	ldrb	r3, [r7, #18]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40021000 	.word	0x40021000

08006630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e049      	b.n	80066d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fa fb16 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f000 f898 	bl	80067a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d001      	beq.n	80066f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e042      	b.n	800677e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a21      	ldr	r2, [pc, #132]	@ (800678c <HAL_TIM_Base_Start+0xac>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d018      	beq.n	800673c <HAL_TIM_Base_Start+0x5c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006712:	d013      	beq.n	800673c <HAL_TIM_Base_Start+0x5c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1d      	ldr	r2, [pc, #116]	@ (8006790 <HAL_TIM_Base_Start+0xb0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00e      	beq.n	800673c <HAL_TIM_Base_Start+0x5c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1c      	ldr	r2, [pc, #112]	@ (8006794 <HAL_TIM_Base_Start+0xb4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d009      	beq.n	800673c <HAL_TIM_Base_Start+0x5c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1a      	ldr	r2, [pc, #104]	@ (8006798 <HAL_TIM_Base_Start+0xb8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d004      	beq.n	800673c <HAL_TIM_Base_Start+0x5c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a19      	ldr	r2, [pc, #100]	@ (800679c <HAL_TIM_Base_Start+0xbc>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d115      	bne.n	8006768 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	4b17      	ldr	r3, [pc, #92]	@ (80067a0 <HAL_TIM_Base_Start+0xc0>)
 8006744:	4013      	ands	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b06      	cmp	r3, #6
 800674c:	d015      	beq.n	800677a <HAL_TIM_Base_Start+0x9a>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006754:	d011      	beq.n	800677a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006766:	e008      	b.n	800677a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e000      	b.n	800677c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40012c00 	.word	0x40012c00
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	40013400 	.word	0x40013400
 800679c:	40014000 	.word	0x40014000
 80067a0:	00010007 	.word	0x00010007

080067a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a42      	ldr	r2, [pc, #264]	@ (80068c0 <TIM_Base_SetConfig+0x11c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00f      	beq.n	80067dc <TIM_Base_SetConfig+0x38>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c2:	d00b      	beq.n	80067dc <TIM_Base_SetConfig+0x38>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a3f      	ldr	r2, [pc, #252]	@ (80068c4 <TIM_Base_SetConfig+0x120>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_Base_SetConfig+0x38>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a3e      	ldr	r2, [pc, #248]	@ (80068c8 <TIM_Base_SetConfig+0x124>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_Base_SetConfig+0x38>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a3d      	ldr	r2, [pc, #244]	@ (80068cc <TIM_Base_SetConfig+0x128>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d108      	bne.n	80067ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a33      	ldr	r2, [pc, #204]	@ (80068c0 <TIM_Base_SetConfig+0x11c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d01b      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067fc:	d017      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a30      	ldr	r2, [pc, #192]	@ (80068c4 <TIM_Base_SetConfig+0x120>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a2f      	ldr	r2, [pc, #188]	@ (80068c8 <TIM_Base_SetConfig+0x124>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00f      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2e      	ldr	r2, [pc, #184]	@ (80068cc <TIM_Base_SetConfig+0x128>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00b      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2d      	ldr	r2, [pc, #180]	@ (80068d0 <TIM_Base_SetConfig+0x12c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d007      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2c      	ldr	r2, [pc, #176]	@ (80068d4 <TIM_Base_SetConfig+0x130>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_Base_SetConfig+0x8a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2b      	ldr	r2, [pc, #172]	@ (80068d8 <TIM_Base_SetConfig+0x134>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d108      	bne.n	8006840 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a16      	ldr	r2, [pc, #88]	@ (80068c0 <TIM_Base_SetConfig+0x11c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00f      	beq.n	800688c <TIM_Base_SetConfig+0xe8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <TIM_Base_SetConfig+0x128>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00b      	beq.n	800688c <TIM_Base_SetConfig+0xe8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a16      	ldr	r2, [pc, #88]	@ (80068d0 <TIM_Base_SetConfig+0x12c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d007      	beq.n	800688c <TIM_Base_SetConfig+0xe8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a15      	ldr	r2, [pc, #84]	@ (80068d4 <TIM_Base_SetConfig+0x130>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_Base_SetConfig+0xe8>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a14      	ldr	r2, [pc, #80]	@ (80068d8 <TIM_Base_SetConfig+0x134>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d103      	bne.n	8006894 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d105      	bne.n	80068b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f023 0201 	bic.w	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	611a      	str	r2, [r3, #16]
  }
}
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40013400 	.word	0x40013400
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40014400 	.word	0x40014400
 80068d8:	40014800 	.word	0x40014800

080068dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e065      	b.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a2c      	ldr	r2, [pc, #176]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2b      	ldr	r2, [pc, #172]	@ (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d108      	bne.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800692e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006944:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1b      	ldr	r2, [pc, #108]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d018      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696a:	d013      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a18      	ldr	r2, [pc, #96]	@ (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00e      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a17      	ldr	r2, [pc, #92]	@ (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d009      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a12      	ldr	r2, [pc, #72]	@ (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a13      	ldr	r2, [pc, #76]	@ (80069dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d10c      	bne.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800699a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40013400 	.word	0x40013400
 80069d4:	40000400 	.word	0x40000400
 80069d8:	40000800 	.word	0x40000800
 80069dc:	40014000 	.word	0x40014000

080069e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069f0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80069f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a16:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006a1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	1d3b      	adds	r3, r7, #4
 8006a4e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b09d      	sub	sp, #116	@ 0x74
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	78db      	ldrb	r3, [r3, #3]
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d81f      	bhi.n	8006af2 <USB_ActivateEndpoint+0x72>
 8006ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab8 <USB_ActivateEndpoint+0x38>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006ac9 	.word	0x08006ac9
 8006abc:	08006ae5 	.word	0x08006ae5
 8006ac0:	08006afb 	.word	0x08006afb
 8006ac4:	08006ad7 	.word	0x08006ad7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006ac8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006acc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ad0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006ad4:	e012      	b.n	8006afc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006ad6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006ada:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006ade:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006ae2:	e00b      	b.n	8006afc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ae4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006ae8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006aec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006af0:	e004      	b.n	8006afc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006af8:	e000      	b.n	8006afc <USB_ActivateEndpoint+0x7c>
      break;
 8006afa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	441a      	add	r2, r3
 8006b06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	b21b      	sxth	r3, r3
 8006b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b36:	b21a      	sxth	r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	b21b      	sxth	r3, r3
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	7b1b      	ldrb	r3, [r3, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 8178 	bne.w	8006e62 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 8084 	beq.w	8006c84 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	00da      	lsls	r2, r3, #3
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	88db      	ldrh	r3, [r3, #6]
 8006ba4:	085b      	lsrs	r3, r3, #1
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	827b      	strh	r3, [r7, #18]
 8006bbe:	8a7b      	ldrh	r3, [r7, #18]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01b      	beq.n	8006c00 <USB_ActivateEndpoint+0x180>
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bde:	823b      	strh	r3, [r7, #16]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	441a      	add	r2, r3
 8006bea:	8a3b      	ldrh	r3, [r7, #16]
 8006bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bf8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	78db      	ldrb	r3, [r3, #3]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d020      	beq.n	8006c4a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c1e:	81bb      	strh	r3, [r7, #12]
 8006c20:	89bb      	ldrh	r3, [r7, #12]
 8006c22:	f083 0320 	eor.w	r3, r3, #32
 8006c26:	81bb      	strh	r3, [r7, #12]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	441a      	add	r2, r3
 8006c32:	89bb      	ldrh	r3, [r7, #12]
 8006c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	8013      	strh	r3, [r2, #0]
 8006c48:	e2d5      	b.n	80071f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c60:	81fb      	strh	r3, [r7, #14]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	89fb      	ldrh	r3, [r7, #14]
 8006c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]
 8006c82:	e2b8      	b.n	80071f6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c94:	4413      	add	r3, r2
 8006c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	00da      	lsls	r2, r3, #3
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	88db      	ldrh	r3, [r3, #6]
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	4413      	add	r3, r2
 8006cca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	00da      	lsls	r2, r3, #3
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cea:	801a      	strh	r2, [r3, #0]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cf2:	d91d      	bls.n	8006d30 <USB_ActivateEndpoint+0x2b0>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	095b      	lsrs	r3, r3, #5
 8006cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <USB_ActivateEndpoint+0x28e>
 8006d08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	029b      	lsls	r3, r3, #10
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	801a      	strh	r2, [r3, #0]
 8006d2e:	e026      	b.n	8006d7e <USB_ActivateEndpoint+0x2fe>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <USB_ActivateEndpoint+0x2ce>
 8006d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e017      	b.n	8006d7e <USB_ActivateEndpoint+0x2fe>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <USB_ActivateEndpoint+0x2e8>
 8006d62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d64:	3301      	adds	r3, #1
 8006d66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	029b      	lsls	r3, r3, #10
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	4313      	orrs	r3, r2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01b      	beq.n	8006dce <USB_ActivateEndpoint+0x34e>
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dac:	843b      	strh	r3, [r7, #32]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	8c3b      	ldrh	r3, [r7, #32]
 8006dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d124      	bne.n	8006e20 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dec:	83bb      	strh	r3, [r7, #28]
 8006dee:	8bbb      	ldrh	r3, [r7, #28]
 8006df0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006df4:	83bb      	strh	r3, [r7, #28]
 8006df6:	8bbb      	ldrh	r3, [r7, #28]
 8006df8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006dfc:	83bb      	strh	r3, [r7, #28]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	441a      	add	r2, r3
 8006e08:	8bbb      	ldrh	r3, [r7, #28]
 8006e0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	8013      	strh	r3, [r2, #0]
 8006e1e:	e1ea      	b.n	80071f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e36:	83fb      	strh	r3, [r7, #30]
 8006e38:	8bfb      	ldrh	r3, [r7, #30]
 8006e3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e3e:	83fb      	strh	r3, [r7, #30]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	441a      	add	r2, r3
 8006e4a:	8bfb      	ldrh	r3, [r7, #30]
 8006e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	8013      	strh	r3, [r2, #0]
 8006e60:	e1c9      	b.n	80071f6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	78db      	ldrb	r3, [r3, #3]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d11e      	bne.n	8006ea8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e80:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	441a      	add	r2, r3
 8006e8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e9a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	8013      	strh	r3, [r2, #0]
 8006ea6:	e01d      	b.n	8006ee4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ebe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	441a      	add	r2, r3
 8006ecc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006ed0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ed4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ef4:	4413      	add	r3, r2
 8006ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	00da      	lsls	r2, r3, #3
 8006efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	891b      	ldrh	r3, [r3, #8]
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f28:	4413      	add	r3, r2
 8006f2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	00da      	lsls	r2, r3, #3
 8006f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f34:	4413      	add	r3, r2
 8006f36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	895b      	ldrh	r3, [r3, #10]
 8006f40:	085b      	lsrs	r3, r3, #1
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f4a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	785b      	ldrb	r3, [r3, #1]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f040 8093 	bne.w	800707c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006f66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d01b      	beq.n	8006faa <USB_ActivateEndpoint+0x52a>
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f88:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	441a      	add	r2, r3
 8006f94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006fb8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01b      	beq.n	8006ffa <USB_ActivateEndpoint+0x57a>
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	441a      	add	r2, r3
 8006fe4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ff2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800700c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007010:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007012:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007014:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007018:	873b      	strh	r3, [r7, #56]	@ 0x38
 800701a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800701c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007020:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	441a      	add	r2, r3
 800702c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800702e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800703a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800703e:	b29b      	uxth	r3, r3
 8007040:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007058:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	441a      	add	r2, r3
 8007064:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800706a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800706e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007076:	b29b      	uxth	r3, r3
 8007078:	8013      	strh	r3, [r2, #0]
 800707a:	e0bc      	b.n	80071f6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800708c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01d      	beq.n	80070d4 <USB_ActivateEndpoint+0x654>
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	441a      	add	r2, r3
 80070bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80070c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80070e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80070e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01d      	beq.n	800712c <USB_ActivateEndpoint+0x6ac>
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007106:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	441a      	add	r2, r3
 8007114:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800711c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007124:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007128:	b29b      	uxth	r3, r3
 800712a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	78db      	ldrb	r3, [r3, #3]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d024      	beq.n	800717e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29b      	uxth	r3, r3
 8007142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800714a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800714e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007152:	f083 0320 	eor.w	r3, r3, #32
 8007156:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	441a      	add	r2, r3
 8007164:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007168:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800716c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007178:	b29b      	uxth	r3, r3
 800717a:	8013      	strh	r3, [r2, #0]
 800717c:	e01d      	b.n	80071ba <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007194:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	441a      	add	r2, r3
 80071a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80071a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	441a      	add	r2, r3
 80071de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80071e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80071f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3774      	adds	r7, #116	@ 0x74
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop

08007208 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007208:	b480      	push	{r7}
 800720a:	b08d      	sub	sp, #52	@ 0x34
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	7b1b      	ldrb	r3, [r3, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f040 808e 	bne.w	8007338 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d044      	beq.n	80072ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	81bb      	strh	r3, [r7, #12]
 8007232:	89bb      	ldrh	r3, [r7, #12]
 8007234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01b      	beq.n	8007274 <USB_DeactivateEndpoint+0x6c>
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	b29b      	uxth	r3, r3
 800724a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800724e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007252:	817b      	strh	r3, [r7, #10]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	441a      	add	r2, r3
 800725e:	897b      	ldrh	r3, [r7, #10]
 8007260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800726c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007270:	b29b      	uxth	r3, r3
 8007272:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	b29b      	uxth	r3, r3
 8007282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800728a:	813b      	strh	r3, [r7, #8]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	441a      	add	r2, r3
 8007296:	893b      	ldrh	r3, [r7, #8]
 8007298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800729c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	8013      	strh	r3, [r2, #0]
 80072ac:	e192      	b.n	80075d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	827b      	strh	r3, [r7, #18]
 80072bc:	8a7b      	ldrh	r3, [r7, #18]
 80072be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01b      	beq.n	80072fe <USB_DeactivateEndpoint+0xf6>
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072dc:	823b      	strh	r3, [r7, #16]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	441a      	add	r2, r3
 80072e8:	8a3b      	ldrh	r3, [r7, #16]
 80072ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007314:	81fb      	strh	r3, [r7, #14]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	441a      	add	r2, r3
 8007320:	89fb      	ldrh	r3, [r7, #14]
 8007322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800732a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800732e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007332:	b29b      	uxth	r3, r3
 8007334:	8013      	strh	r3, [r2, #0]
 8007336:	e14d      	b.n	80075d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 80a5 	bne.w	800748c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	843b      	strh	r3, [r7, #32]
 8007350:	8c3b      	ldrh	r3, [r7, #32]
 8007352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01b      	beq.n	8007392 <USB_DeactivateEndpoint+0x18a>
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800736c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007370:	83fb      	strh	r3, [r7, #30]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	441a      	add	r2, r3
 800737c:	8bfb      	ldrh	r3, [r7, #30]
 800737e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007386:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800738a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800738e:	b29b      	uxth	r3, r3
 8007390:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	83bb      	strh	r3, [r7, #28]
 80073a0:	8bbb      	ldrh	r3, [r7, #28]
 80073a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01b      	beq.n	80073e2 <USB_DeactivateEndpoint+0x1da>
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c0:	837b      	strh	r3, [r7, #26]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	441a      	add	r2, r3
 80073cc:	8b7b      	ldrh	r3, [r7, #26]
 80073ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073de:	b29b      	uxth	r3, r3
 80073e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073f8:	833b      	strh	r3, [r7, #24]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	441a      	add	r2, r3
 8007404:	8b3b      	ldrh	r3, [r7, #24]
 8007406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800740a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800740e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007412:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007416:	b29b      	uxth	r3, r3
 8007418:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800742c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007430:	82fb      	strh	r3, [r7, #22]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	441a      	add	r2, r3
 800743c:	8afb      	ldrh	r3, [r7, #22]
 800743e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800744a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800744e:	b29b      	uxth	r3, r3
 8007450:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007468:	82bb      	strh	r3, [r7, #20]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	8abb      	ldrh	r3, [r7, #20]
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800747e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]
 800748a:	e0a3      	b.n	80075d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800749a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800749c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01b      	beq.n	80074dc <USB_DeactivateEndpoint+0x2d4>
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80074ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80074ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01b      	beq.n	800752c <USB_DeactivateEndpoint+0x324>
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800750a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800751c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007524:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007528:	b29b      	uxth	r3, r3
 800752a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800753e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007542:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	441a      	add	r2, r3
 800754e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007558:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800755c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007560:	b29b      	uxth	r3, r3
 8007562:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	b29b      	uxth	r3, r3
 8007572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800757a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	441a      	add	r2, r3
 8007586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800758c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007598:	b29b      	uxth	r3, r3
 800759a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	441a      	add	r2, r3
 80075be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80075c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3734      	adds	r7, #52	@ 0x34
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b0c2      	sub	sp, #264	@ 0x108
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075f0:	6018      	str	r0, [r3, #0]
 80075f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075fa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	785b      	ldrb	r3, [r3, #1]
 8007608:	2b01      	cmp	r3, #1
 800760a:	f040 86b7 	bne.w	800837c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800760e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	429a      	cmp	r2, r3
 8007628:	d908      	bls.n	800763c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800762a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800763a:	e007      	b.n	800764c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800763c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800764c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	7b1b      	ldrb	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d13a      	bne.n	80076d2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800765c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6959      	ldr	r1, [r3, #20]
 8007668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	88da      	ldrh	r2, [r3, #6]
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007678:	b29b      	uxth	r3, r3
 800767a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800767e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007682:	6800      	ldr	r0, [r0, #0]
 8007684:	f001 fc98 	bl	8008fb8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007698:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	461a      	mov	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	4413      	add	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	00da      	lsls	r2, r3, #3
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	4413      	add	r3, r2
 80076be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	801a      	strh	r2, [r3, #0]
 80076ce:	f000 be1f 	b.w	8008310 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80076d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	78db      	ldrb	r3, [r3, #3]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	f040 8462 	bne.w	8007fa8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80076e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6a1a      	ldr	r2, [r3, #32]
 80076f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	f240 83df 	bls.w	8007ec0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007728:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800772c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007730:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	441a      	add	r2, r3
 8007746:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800774a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800774e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007752:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800775a:	b29b      	uxth	r3, r3
 800775c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800775e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776e:	1ad2      	subs	r2, r2, r3
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800777c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 81c7 	beq.w	8007b32 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80077b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d177      	bne.n	80078b0 <USB_EPStartXfer+0x2ce>
 80077c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077da:	b29b      	uxth	r3, r3
 80077dc:	461a      	mov	r2, r3
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	4413      	add	r3, r2
 80077e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	00da      	lsls	r2, r3, #3
 80077f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f4:	4413      	add	r3, r2
 80077f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80077fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007806:	b29a      	uxth	r2, r3
 8007808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007810:	2b3e      	cmp	r3, #62	@ 0x3e
 8007812:	d921      	bls.n	8007858 <USB_EPStartXfer+0x276>
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800781e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	2b00      	cmp	r3, #0
 8007828:	d104      	bne.n	8007834 <USB_EPStartXfer+0x252>
 800782a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800782e:	3b01      	subs	r3, #1
 8007830:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29a      	uxth	r2, r3
 800783a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800783e:	b29b      	uxth	r3, r3
 8007840:	029b      	lsls	r3, r3, #10
 8007842:	b29b      	uxth	r3, r3
 8007844:	4313      	orrs	r3, r2
 8007846:	b29b      	uxth	r3, r3
 8007848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007850:	b29a      	uxth	r2, r3
 8007852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007854:	801a      	strh	r2, [r3, #0]
 8007856:	e050      	b.n	80078fa <USB_EPStartXfer+0x318>
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <USB_EPStartXfer+0x294>
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800786a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786e:	b29a      	uxth	r2, r3
 8007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007872:	801a      	strh	r2, [r3, #0]
 8007874:	e041      	b.n	80078fa <USB_EPStartXfer+0x318>
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <USB_EPStartXfer+0x2b4>
 800788c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007890:	3301      	adds	r3, #1
 8007892:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29a      	uxth	r2, r3
 800789c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	029b      	lsls	r3, r3, #10
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4313      	orrs	r3, r2
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e024      	b.n	80078fa <USB_EPStartXfer+0x318>
 80078b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d11c      	bne.n	80078fa <USB_EPStartXfer+0x318>
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	461a      	mov	r2, r3
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	4413      	add	r3, r2
 80078d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80078d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	00da      	lsls	r2, r3, #3
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	4413      	add	r3, r2
 80078ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	895b      	ldrh	r3, [r3, #10]
 8007906:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800790a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6959      	ldr	r1, [r3, #20]
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791a:	b29b      	uxth	r3, r3
 800791c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007920:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007924:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007928:	6800      	ldr	r0, [r0, #0]
 800792a:	f001 fb45 	bl	8008fb8 <USB_WritePMA>
            ep->xfer_buff += len;
 800792e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	695a      	ldr	r2, [r3, #20]
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793e:	441a      	add	r2, r3
 8007940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800794c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6a1a      	ldr	r2, [r3, #32]
 8007958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	d90f      	bls.n	8007988 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6a1a      	ldr	r2, [r3, #32]
 8007974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007978:	1ad2      	subs	r2, r2, r3
 800797a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	621a      	str	r2, [r3, #32]
 8007986:	e00e      	b.n	80079a6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2200      	movs	r2, #0
 80079a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	785b      	ldrb	r3, [r3, #1]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d177      	bne.n	8007aa6 <USB_EPStartXfer+0x4c4>
 80079b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	4413      	add	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
 80079da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	00da      	lsls	r2, r3, #3
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	4413      	add	r3, r2
 80079ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a06:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a08:	d921      	bls.n	8007a4e <USB_EPStartXfer+0x46c>
 8007a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0e:	095b      	lsrs	r3, r3, #5
 8007a10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a18:	f003 031f 	and.w	r3, r3, #31
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <USB_EPStartXfer+0x448>
 8007a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a24:	3b01      	subs	r3, #1
 8007a26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	029b      	lsls	r3, r3, #10
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	801a      	strh	r2, [r3, #0]
 8007a4c:	e056      	b.n	8007afc <USB_EPStartXfer+0x51a>
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <USB_EPStartXfer+0x48a>
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	e047      	b.n	8007afc <USB_EPStartXfer+0x51a>
 8007a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a70:	085b      	lsrs	r3, r3, #1
 8007a72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <USB_EPStartXfer+0x4aa>
 8007a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a86:	3301      	adds	r3, #1
 8007a88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	029b      	lsls	r3, r3, #10
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	e02a      	b.n	8007afc <USB_EPStartXfer+0x51a>
 8007aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d122      	bne.n	8007afc <USB_EPStartXfer+0x51a>
 8007ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	623b      	str	r3, [r7, #32]
 8007ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	00da      	lsls	r2, r3, #3
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	4413      	add	r3, r2
 8007aec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	891b      	ldrh	r3, [r3, #8]
 8007b08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6959      	ldr	r1, [r3, #20]
 8007b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	f001 fa44 	bl	8008fb8 <USB_WritePMA>
 8007b30:	e3ee      	b.n	8008310 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d177      	bne.n	8007c32 <USB_EPStartXfer+0x650>
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b62:	4413      	add	r3, r2
 8007b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	00da      	lsls	r2, r3, #3
 8007b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b76:	4413      	add	r3, r2
 8007b78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b8c:	801a      	strh	r2, [r3, #0]
 8007b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b92:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b94:	d921      	bls.n	8007bda <USB_EPStartXfer+0x5f8>
 8007b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba4:	f003 031f 	and.w	r3, r3, #31
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d104      	bne.n	8007bb6 <USB_EPStartXfer+0x5d4>
 8007bac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	029b      	lsls	r3, r3, #10
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd6:	801a      	strh	r2, [r3, #0]
 8007bd8:	e056      	b.n	8007c88 <USB_EPStartXfer+0x6a6>
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10a      	bne.n	8007bf8 <USB_EPStartXfer+0x616>
 8007be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bf4:	801a      	strh	r2, [r3, #0]
 8007bf6:	e047      	b.n	8007c88 <USB_EPStartXfer+0x6a6>
 8007bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfc:	085b      	lsrs	r3, r3, #1
 8007bfe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <USB_EPStartXfer+0x636>
 8007c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c12:	3301      	adds	r3, #1
 8007c14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	029b      	lsls	r3, r3, #10
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	e02a      	b.n	8007c88 <USB_EPStartXfer+0x6a6>
 8007c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	785b      	ldrb	r3, [r3, #1]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d122      	bne.n	8007c88 <USB_EPStartXfer+0x6a6>
 8007c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	461a      	mov	r2, r3
 8007c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c62:	4413      	add	r3, r2
 8007c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	00da      	lsls	r2, r3, #3
 8007c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c76:	4413      	add	r3, r2
 8007c78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	891b      	ldrh	r3, [r3, #8]
 8007c94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6959      	ldr	r1, [r3, #20]
 8007ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007cae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007cb2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007cb6:	6800      	ldr	r0, [r0, #0]
 8007cb8:	f001 f97e 	bl	8008fb8 <USB_WritePMA>
            ep->xfer_buff += len;
 8007cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	695a      	ldr	r2, [r3, #20]
 8007cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ccc:	441a      	add	r2, r3
 8007cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6a1a      	ldr	r2, [r3, #32]
 8007ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d90f      	bls.n	8007d16 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6a1a      	ldr	r2, [r3, #32]
 8007d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	621a      	str	r2, [r3, #32]
 8007d14:	e00e      	b.n	8007d34 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2200      	movs	r2, #0
 8007d32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d177      	bne.n	8007e40 <USB_EPStartXfer+0x85e>
 8007d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d70:	4413      	add	r3, r2
 8007d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	00da      	lsls	r2, r3, #3
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	4413      	add	r3, r2
 8007d86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9a:	801a      	strh	r2, [r3, #0]
 8007d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007da2:	d921      	bls.n	8007de8 <USB_EPStartXfer+0x806>
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da8:	095b      	lsrs	r3, r3, #5
 8007daa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <USB_EPStartXfer+0x7e2>
 8007dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	029b      	lsls	r3, r3, #10
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de4:	801a      	strh	r2, [r3, #0]
 8007de6:	e050      	b.n	8007e8a <USB_EPStartXfer+0x8a8>
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <USB_EPStartXfer+0x824>
 8007df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e02:	801a      	strh	r2, [r3, #0]
 8007e04:	e041      	b.n	8007e8a <USB_EPStartXfer+0x8a8>
 8007e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0a:	085b      	lsrs	r3, r3, #1
 8007e0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <USB_EPStartXfer+0x844>
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e20:	3301      	adds	r3, #1
 8007e22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	029b      	lsls	r3, r3, #10
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	4313      	orrs	r3, r2
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3c:	801a      	strh	r2, [r3, #0]
 8007e3e:	e024      	b.n	8007e8a <USB_EPStartXfer+0x8a8>
 8007e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d11c      	bne.n	8007e8a <USB_EPStartXfer+0x8a8>
 8007e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e64:	4413      	add	r3, r2
 8007e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	00da      	lsls	r2, r3, #3
 8007e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e78:	4413      	add	r3, r2
 8007e7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	895b      	ldrh	r3, [r3, #10]
 8007e96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6959      	ldr	r1, [r3, #20]
 8007ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007eb0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007eb4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007eb8:	6800      	ldr	r0, [r0, #0]
 8007eba:	f001 f87d 	bl	8008fb8 <USB_WritePMA>
 8007ebe:	e227      	b.n	8008310 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ef6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	441a      	add	r2, r3
 8007f14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f4c:	4413      	add	r3, r2
 8007f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	00da      	lsls	r2, r3, #3
 8007f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f60:	4413      	add	r3, r2
 8007f62:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	891b      	ldrh	r3, [r3, #8]
 8007f7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6959      	ldr	r1, [r3, #20]
 8007f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007fa0:	6800      	ldr	r0, [r0, #0]
 8007fa2:	f001 f809 	bl	8008fb8 <USB_WritePMA>
 8007fa6:	e1b3      	b.n	8008310 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6a1a      	ldr	r2, [r3, #32]
 8007fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb8:	1ad2      	subs	r2, r2, r3
 8007fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 80c6 	beq.w	800817a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	785b      	ldrb	r3, [r3, #1]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d177      	bne.n	80080fa <USB_EPStartXfer+0xb18>
 800800a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800801a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008024:	b29b      	uxth	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800802a:	4413      	add	r3, r2
 800802c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800802e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	00da      	lsls	r2, r3, #3
 800803c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800803e:	4413      	add	r3, r2
 8008040:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008044:	667b      	str	r3, [r7, #100]	@ 0x64
 8008046:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	b29b      	uxth	r3, r3
 800804c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008050:	b29a      	uxth	r2, r3
 8008052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008054:	801a      	strh	r2, [r3, #0]
 8008056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805a:	2b3e      	cmp	r3, #62	@ 0x3e
 800805c:	d921      	bls.n	80080a2 <USB_EPStartXfer+0xac0>
 800805e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806c:	f003 031f 	and.w	r3, r3, #31
 8008070:	2b00      	cmp	r3, #0
 8008072:	d104      	bne.n	800807e <USB_EPStartXfer+0xa9c>
 8008074:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008078:	3b01      	subs	r3, #1
 800807a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800807e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	b29a      	uxth	r2, r3
 8008084:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008088:	b29b      	uxth	r3, r3
 800808a:	029b      	lsls	r3, r3, #10
 800808c:	b29b      	uxth	r3, r3
 800808e:	4313      	orrs	r3, r2
 8008090:	b29b      	uxth	r3, r3
 8008092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800809a:	b29a      	uxth	r2, r3
 800809c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800809e:	801a      	strh	r2, [r3, #0]
 80080a0:	e050      	b.n	8008144 <USB_EPStartXfer+0xb62>
 80080a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10a      	bne.n	80080c0 <USB_EPStartXfer+0xade>
 80080aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e041      	b.n	8008144 <USB_EPStartXfer+0xb62>
 80080c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c4:	085b      	lsrs	r3, r3, #1
 80080c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80080ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <USB_EPStartXfer+0xafe>
 80080d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80080da:	3301      	adds	r3, #1
 80080dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80080e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	029b      	lsls	r3, r3, #10
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	4313      	orrs	r3, r2
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080f6:	801a      	strh	r2, [r3, #0]
 80080f8:	e024      	b.n	8008144 <USB_EPStartXfer+0xb62>
 80080fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	785b      	ldrb	r3, [r3, #1]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d11c      	bne.n	8008144 <USB_EPStartXfer+0xb62>
 800810a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008118:	b29b      	uxth	r3, r3
 800811a:	461a      	mov	r2, r3
 800811c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800811e:	4413      	add	r3, r2
 8008120:	673b      	str	r3, [r7, #112]	@ 0x70
 8008122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	00da      	lsls	r2, r3, #3
 8008130:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008132:	4413      	add	r3, r2
 8008134:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008138:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800813a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800813e:	b29a      	uxth	r2, r3
 8008140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008142:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	895b      	ldrh	r3, [r3, #10]
 8008150:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6959      	ldr	r1, [r3, #20]
 8008160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008164:	b29b      	uxth	r3, r3
 8008166:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800816a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800816e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008172:	6800      	ldr	r0, [r0, #0]
 8008174:	f000 ff20 	bl	8008fb8 <USB_WritePMA>
 8008178:	e0ca      	b.n	8008310 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800817a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800817e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d177      	bne.n	800827a <USB_EPStartXfer+0xc98>
 800818a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800819a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	461a      	mov	r2, r3
 80081a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081aa:	4413      	add	r3, r2
 80081ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	00da      	lsls	r2, r3, #3
 80081bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081be:	4413      	add	r3, r2
 80081c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081d4:	801a      	strh	r2, [r3, #0]
 80081d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081da:	2b3e      	cmp	r3, #62	@ 0x3e
 80081dc:	d921      	bls.n	8008222 <USB_EPStartXfer+0xc40>
 80081de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80081e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ec:	f003 031f 	and.w	r3, r3, #31
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d104      	bne.n	80081fe <USB_EPStartXfer+0xc1c>
 80081f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80081f8:	3b01      	subs	r3, #1
 80081fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80081fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29a      	uxth	r2, r3
 8008204:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008208:	b29b      	uxth	r3, r3
 800820a:	029b      	lsls	r3, r3, #10
 800820c:	b29b      	uxth	r3, r3
 800820e:	4313      	orrs	r3, r2
 8008210:	b29b      	uxth	r3, r3
 8008212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821a:	b29a      	uxth	r2, r3
 800821c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800821e:	801a      	strh	r2, [r3, #0]
 8008220:	e05c      	b.n	80082dc <USB_EPStartXfer+0xcfa>
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <USB_EPStartXfer+0xc5e>
 800822a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008238:	b29a      	uxth	r2, r3
 800823a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800823c:	801a      	strh	r2, [r3, #0]
 800823e:	e04d      	b.n	80082dc <USB_EPStartXfer+0xcfa>
 8008240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d004      	beq.n	8008260 <USB_EPStartXfer+0xc7e>
 8008256:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800825a:	3301      	adds	r3, #1
 800825c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008260:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29a      	uxth	r2, r3
 8008266:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800826a:	b29b      	uxth	r3, r3
 800826c:	029b      	lsls	r3, r3, #10
 800826e:	b29b      	uxth	r3, r3
 8008270:	4313      	orrs	r3, r2
 8008272:	b29a      	uxth	r2, r3
 8008274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008276:	801a      	strh	r2, [r3, #0]
 8008278:	e030      	b.n	80082dc <USB_EPStartXfer+0xcfa>
 800827a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d128      	bne.n	80082dc <USB_EPStartXfer+0xcfa>
 800828a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800828e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800829c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082ae:	4413      	add	r3, r2
 80082b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	00da      	lsls	r2, r3, #3
 80082c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082c6:	4413      	add	r3, r2
 80082c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80082da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	891b      	ldrh	r3, [r3, #8]
 80082e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6959      	ldr	r1, [r3, #20]
 80082f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008302:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008306:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800830a:	6800      	ldr	r0, [r0, #0]
 800830c:	f000 fe54 	bl	8008fb8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008336:	817b      	strh	r3, [r7, #10]
 8008338:	897b      	ldrh	r3, [r7, #10]
 800833a:	f083 0310 	eor.w	r3, r3, #16
 800833e:	817b      	strh	r3, [r7, #10]
 8008340:	897b      	ldrh	r3, [r7, #10]
 8008342:	f083 0320 	eor.w	r3, r3, #32
 8008346:	817b      	strh	r3, [r7, #10]
 8008348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	441a      	add	r2, r3
 8008362:	897b      	ldrh	r3, [r7, #10]
 8008364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800836c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008374:	b29b      	uxth	r3, r3
 8008376:	8013      	strh	r3, [r2, #0]
 8008378:	f000 bcde 	b.w	8008d38 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800837c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	7b1b      	ldrb	r3, [r3, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f040 80bb 	bne.w	8008504 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800838e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d917      	bls.n	80083da <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80083aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80083ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ca:	1ad2      	subs	r2, r2, r3
 80083cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	619a      	str	r2, [r3, #24]
 80083d8:	e00e      	b.n	80083f8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80083da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80083ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2200      	movs	r2, #0
 80083f6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80083f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008414:	b29b      	uxth	r3, r3
 8008416:	461a      	mov	r2, r3
 8008418:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800841c:	4413      	add	r3, r2
 800841e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	00da      	lsls	r2, r3, #3
 8008430:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008434:	4413      	add	r3, r2
 8008436:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800843a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800843e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800844a:	b29a      	uxth	r2, r3
 800844c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008450:	801a      	strh	r2, [r3, #0]
 8008452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008456:	2b3e      	cmp	r3, #62	@ 0x3e
 8008458:	d924      	bls.n	80084a4 <USB_EPStartXfer+0xec2>
 800845a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008468:	f003 031f 	and.w	r3, r3, #31
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <USB_EPStartXfer+0xe98>
 8008470:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008474:	3b01      	subs	r3, #1
 8008476:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800847a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	b29a      	uxth	r2, r3
 8008482:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008486:	b29b      	uxth	r3, r3
 8008488:	029b      	lsls	r3, r3, #10
 800848a:	b29b      	uxth	r3, r3
 800848c:	4313      	orrs	r3, r2
 800848e:	b29b      	uxth	r3, r3
 8008490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008498:	b29a      	uxth	r2, r3
 800849a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800849e:	801a      	strh	r2, [r3, #0]
 80084a0:	f000 bc10 	b.w	8008cc4 <USB_EPStartXfer+0x16e2>
 80084a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10c      	bne.n	80084c6 <USB_EPStartXfer+0xee4>
 80084ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084bc:	b29a      	uxth	r2, r3
 80084be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084c2:	801a      	strh	r2, [r3, #0]
 80084c4:	e3fe      	b.n	8008cc4 <USB_EPStartXfer+0x16e2>
 80084c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ca:	085b      	lsrs	r3, r3, #1
 80084cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80084d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d004      	beq.n	80084e6 <USB_EPStartXfer+0xf04>
 80084dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80084e0:	3301      	adds	r3, #1
 80084e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80084e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	029b      	lsls	r3, r3, #10
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	4313      	orrs	r3, r2
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008500:	801a      	strh	r2, [r3, #0]
 8008502:	e3df      	b.n	8008cc4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	78db      	ldrb	r3, [r3, #3]
 8008510:	2b02      	cmp	r3, #2
 8008512:	f040 8218 	bne.w	8008946 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	2b00      	cmp	r3, #0
 8008524:	f040 809d 	bne.w	8008662 <USB_EPStartXfer+0x1080>
 8008528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008544:	b29b      	uxth	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800854c:	4413      	add	r3, r2
 800854e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	00da      	lsls	r2, r3, #3
 8008560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008564:	4413      	add	r3, r2
 8008566:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800856a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800856e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800857a:	b29a      	uxth	r2, r3
 800857c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008590:	d92b      	bls.n	80085ea <USB_EPStartXfer+0x1008>
 8008592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	f003 031f 	and.w	r3, r3, #31
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <USB_EPStartXfer+0xfe0>
 80085b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085bc:	3b01      	subs	r3, #1
 80085be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	029b      	lsls	r3, r3, #10
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	4313      	orrs	r3, r2
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085e6:	801a      	strh	r2, [r3, #0]
 80085e8:	e070      	b.n	80086cc <USB_EPStartXfer+0x10ea>
 80085ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10c      	bne.n	8008614 <USB_EPStartXfer+0x1032>
 80085fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860a:	b29a      	uxth	r2, r3
 800860c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008610:	801a      	strh	r2, [r3, #0]
 8008612:	e05b      	b.n	80086cc <USB_EPStartXfer+0x10ea>
 8008614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <USB_EPStartXfer+0x1062>
 800863a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863e:	3301      	adds	r3, #1
 8008640:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	b29a      	uxth	r2, r3
 800864c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008650:	b29b      	uxth	r3, r3
 8008652:	029b      	lsls	r3, r3, #10
 8008654:	b29b      	uxth	r3, r3
 8008656:	4313      	orrs	r3, r2
 8008658:	b29a      	uxth	r2, r3
 800865a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800865e:	801a      	strh	r2, [r3, #0]
 8008660:	e034      	b.n	80086cc <USB_EPStartXfer+0x10ea>
 8008662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	785b      	ldrb	r3, [r3, #1]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d12c      	bne.n	80086cc <USB_EPStartXfer+0x10ea>
 8008672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800868e:	b29b      	uxth	r3, r3
 8008690:	461a      	mov	r2, r3
 8008692:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008696:	4413      	add	r3, r2
 8008698:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800869c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	00da      	lsls	r2, r3, #3
 80086aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086ae:	4413      	add	r3, r2
 80086b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80086b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80086da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f040 809d 	bne.w	8008826 <USB_EPStartXfer+0x1244>
 80086ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008708:	b29b      	uxth	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008710:	4413      	add	r3, r2
 8008712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	00da      	lsls	r2, r3, #3
 8008724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008728:	4413      	add	r3, r2
 800872a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800872e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008732:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800873e:	b29a      	uxth	r2, r3
 8008740:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008744:	801a      	strh	r2, [r3, #0]
 8008746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b3e      	cmp	r3, #62	@ 0x3e
 8008754:	d92b      	bls.n	80087ae <USB_EPStartXfer+0x11cc>
 8008756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	095b      	lsrs	r3, r3, #5
 8008764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800876c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	2b00      	cmp	r3, #0
 800877a:	d104      	bne.n	8008786 <USB_EPStartXfer+0x11a4>
 800877c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008780:	3b01      	subs	r3, #1
 8008782:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008786:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	b29a      	uxth	r2, r3
 800878e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008792:	b29b      	uxth	r3, r3
 8008794:	029b      	lsls	r3, r3, #10
 8008796:	b29b      	uxth	r3, r3
 8008798:	4313      	orrs	r3, r2
 800879a:	b29b      	uxth	r3, r3
 800879c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087aa:	801a      	strh	r2, [r3, #0]
 80087ac:	e069      	b.n	8008882 <USB_EPStartXfer+0x12a0>
 80087ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10c      	bne.n	80087d8 <USB_EPStartXfer+0x11f6>
 80087be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087d4:	801a      	strh	r2, [r3, #0]
 80087d6:	e054      	b.n	8008882 <USB_EPStartXfer+0x12a0>
 80087d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	085b      	lsrs	r3, r3, #1
 80087e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80087ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d004      	beq.n	8008808 <USB_EPStartXfer+0x1226>
 80087fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008802:	3301      	adds	r3, #1
 8008804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008808:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	b29a      	uxth	r2, r3
 8008810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008814:	b29b      	uxth	r3, r3
 8008816:	029b      	lsls	r3, r3, #10
 8008818:	b29b      	uxth	r3, r3
 800881a:	4313      	orrs	r3, r2
 800881c:	b29a      	uxth	r2, r3
 800881e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008822:	801a      	strh	r2, [r3, #0]
 8008824:	e02d      	b.n	8008882 <USB_EPStartXfer+0x12a0>
 8008826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	785b      	ldrb	r3, [r3, #1]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d125      	bne.n	8008882 <USB_EPStartXfer+0x12a0>
 8008836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008844:	b29b      	uxth	r3, r3
 8008846:	461a      	mov	r2, r3
 8008848:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800884c:	4413      	add	r3, r2
 800884e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	00da      	lsls	r2, r3, #3
 8008860:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008864:	4413      	add	r3, r2
 8008866:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800886a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800886e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	b29a      	uxth	r2, r3
 800887c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008880:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 8218 	beq.w	8008cc4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80088b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d005      	beq.n	80088cc <USB_EPStartXfer+0x12ea>
 80088c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80088c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10d      	bne.n	80088e8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80088d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f040 81f5 	bne.w	8008cc4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80088de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f040 81ee 	bne.w	8008cc4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80088e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800890a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800890e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008916:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	441a      	add	r2, r3
 800892c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800893c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008940:	b29b      	uxth	r3, r3
 8008942:	8013      	strh	r3, [r2, #0]
 8008944:	e1be      	b.n	8008cc4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800894a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	78db      	ldrb	r3, [r3, #3]
 8008952:	2b01      	cmp	r3, #1
 8008954:	f040 81b4 	bne.w	8008cc0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	429a      	cmp	r2, r3
 8008972:	d917      	bls.n	80089a4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	699a      	ldr	r2, [r3, #24]
 8008990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008994:	1ad2      	subs	r2, r2, r3
 8008996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800899a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	619a      	str	r2, [r3, #24]
 80089a2:	e00e      	b.n	80089c2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80089a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80089b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2200      	movs	r2, #0
 80089c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80089c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	785b      	ldrb	r3, [r3, #1]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f040 8085 	bne.w	8008ade <USB_EPStartXfer+0x14fc>
 80089d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80089e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80089f8:	4413      	add	r3, r2
 80089fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80089fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	00da      	lsls	r2, r3, #3
 8008a0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a10:	4413      	add	r3, r2
 8008a12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a2c:	801a      	strh	r2, [r3, #0]
 8008a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a32:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a34:	d923      	bls.n	8008a7e <USB_EPStartXfer+0x149c>
 8008a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a3a:	095b      	lsrs	r3, r3, #5
 8008a3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a44:	f003 031f 	and.w	r3, r3, #31
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d104      	bne.n	8008a56 <USB_EPStartXfer+0x1474>
 8008a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a50:	3b01      	subs	r3, #1
 8008a52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	029b      	lsls	r3, r3, #10
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a7a:	801a      	strh	r2, [r3, #0]
 8008a7c:	e060      	b.n	8008b40 <USB_EPStartXfer+0x155e>
 8008a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10c      	bne.n	8008aa0 <USB_EPStartXfer+0x14be>
 8008a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a9c:	801a      	strh	r2, [r3, #0]
 8008a9e:	e04f      	b.n	8008b40 <USB_EPStartXfer+0x155e>
 8008aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa4:	085b      	lsrs	r3, r3, #1
 8008aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d004      	beq.n	8008ac0 <USB_EPStartXfer+0x14de>
 8008ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aba:	3301      	adds	r3, #1
 8008abc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	029b      	lsls	r3, r3, #10
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ada:	801a      	strh	r2, [r3, #0]
 8008adc:	e030      	b.n	8008b40 <USB_EPStartXfer+0x155e>
 8008ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d128      	bne.n	8008b40 <USB_EPStartXfer+0x155e>
 8008aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b12:	4413      	add	r3, r2
 8008b14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	00da      	lsls	r2, r3, #3
 8008b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	785b      	ldrb	r3, [r3, #1]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f040 8085 	bne.w	8008c6a <USB_EPStartXfer+0x1688>
 8008b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b84:	4413      	add	r3, r2
 8008b86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	00da      	lsls	r2, r3, #3
 8008b98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008bb8:	801a      	strh	r2, [r3, #0]
 8008bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8008bc0:	d923      	bls.n	8008c0a <USB_EPStartXfer+0x1628>
 8008bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bc6:	095b      	lsrs	r3, r3, #5
 8008bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd0:	f003 031f 	and.w	r3, r3, #31
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <USB_EPStartXfer+0x1600>
 8008bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008be2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	029b      	lsls	r3, r3, #10
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c06:	801a      	strh	r2, [r3, #0]
 8008c08:	e05c      	b.n	8008cc4 <USB_EPStartXfer+0x16e2>
 8008c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10c      	bne.n	8008c2c <USB_EPStartXfer+0x164a>
 8008c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c28:	801a      	strh	r2, [r3, #0]
 8008c2a:	e04b      	b.n	8008cc4 <USB_EPStartXfer+0x16e2>
 8008c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c30:	085b      	lsrs	r3, r3, #1
 8008c32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <USB_EPStartXfer+0x166a>
 8008c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c46:	3301      	adds	r3, #1
 8008c48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	029b      	lsls	r3, r3, #10
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c66:	801a      	strh	r2, [r3, #0]
 8008c68:	e02c      	b.n	8008cc4 <USB_EPStartXfer+0x16e2>
 8008c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	785b      	ldrb	r3, [r3, #1]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d124      	bne.n	8008cc4 <USB_EPStartXfer+0x16e2>
 8008c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008c90:	4413      	add	r3, r2
 8008c92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	00da      	lsls	r2, r3, #3
 8008ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008ca8:	4413      	add	r3, r2
 8008caa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008cae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008cbc:	801a      	strh	r2, [r3, #0]
 8008cbe:	e001      	b.n	8008cc4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e03a      	b.n	8008d3a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008cee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008cf2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008cf6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008cfa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008cfe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d02:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	441a      	add	r2, r3
 8008d20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	785b      	ldrb	r3, [r3, #1]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d020      	beq.n	8008d98 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d6c:	81bb      	strh	r3, [r7, #12]
 8008d6e:	89bb      	ldrh	r3, [r7, #12]
 8008d70:	f083 0310 	eor.w	r3, r3, #16
 8008d74:	81bb      	strh	r3, [r7, #12]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	441a      	add	r2, r3
 8008d80:	89bb      	ldrh	r3, [r7, #12]
 8008d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	8013      	strh	r3, [r2, #0]
 8008d96:	e01f      	b.n	8008dd8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dae:	81fb      	strh	r3, [r7, #14]
 8008db0:	89fb      	ldrh	r3, [r7, #14]
 8008db2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008db6:	81fb      	strh	r3, [r7, #14]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	441a      	add	r2, r3
 8008dc2:	89fb      	ldrh	r3, [r7, #14]
 8008dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b087      	sub	sp, #28
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	7b1b      	ldrb	r3, [r3, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f040 809d 	bne.w	8008f34 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	785b      	ldrb	r3, [r3, #1]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d04c      	beq.n	8008e9c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	823b      	strh	r3, [r7, #16]
 8008e10:	8a3b      	ldrh	r3, [r7, #16]
 8008e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d01b      	beq.n	8008e52 <USB_EPClearStall+0x6c>
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e30:	81fb      	strh	r3, [r7, #14]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	441a      	add	r2, r3
 8008e3c:	89fb      	ldrh	r3, [r7, #14]
 8008e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	78db      	ldrb	r3, [r3, #3]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d06c      	beq.n	8008f34 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e70:	81bb      	strh	r3, [r7, #12]
 8008e72:	89bb      	ldrh	r3, [r7, #12]
 8008e74:	f083 0320 	eor.w	r3, r3, #32
 8008e78:	81bb      	strh	r3, [r7, #12]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	441a      	add	r2, r3
 8008e84:	89bb      	ldrh	r3, [r7, #12]
 8008e86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	8013      	strh	r3, [r2, #0]
 8008e9a:	e04b      	b.n	8008f34 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	82fb      	strh	r3, [r7, #22]
 8008eaa:	8afb      	ldrh	r3, [r7, #22]
 8008eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01b      	beq.n	8008eec <USB_EPClearStall+0x106>
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eca:	82bb      	strh	r3, [r7, #20]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	441a      	add	r2, r3
 8008ed6:	8abb      	ldrh	r3, [r7, #20]
 8008ed8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008edc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ee0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f02:	827b      	strh	r3, [r7, #18]
 8008f04:	8a7b      	ldrh	r3, [r7, #18]
 8008f06:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f0a:	827b      	strh	r3, [r7, #18]
 8008f0c:	8a7b      	ldrh	r3, [r7, #18]
 8008f0e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f12:	827b      	strh	r3, [r7, #18]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	441a      	add	r2, r3
 8008f1e:	8a7b      	ldrh	r3, [r7, #18]
 8008f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f4e:	78fb      	ldrb	r3, [r7, #3]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d103      	bne.n	8008f5c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2280      	movs	r2, #128	@ 0x80
 8008f58:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008faa:	68fb      	ldr	r3, [r7, #12]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b08b      	sub	sp, #44	@ 0x2c
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	80fb      	strh	r3, [r7, #6]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008fce:	88bb      	ldrh	r3, [r7, #4]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	085b      	lsrs	r3, r3, #1
 8008fd4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fde:	88fa      	ldrh	r2, [r7, #6]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fe8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fee:	e01b      	b.n	8009028 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	021b      	lsls	r3, r3, #8
 8008ffe:	b21a      	sxth	r2, r3
 8009000:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009004:	4313      	orrs	r3, r2
 8009006:	b21b      	sxth	r3, r3
 8009008:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	8a7a      	ldrh	r2, [r7, #18]
 800900e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	3302      	adds	r3, #2
 8009014:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	3301      	adds	r3, #1
 800901a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	3301      	adds	r3, #1
 8009020:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009024:	3b01      	subs	r3, #1
 8009026:	627b      	str	r3, [r7, #36]	@ 0x24
 8009028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e0      	bne.n	8008ff0 <USB_WritePMA+0x38>
  }
}
 800902e:	bf00      	nop
 8009030:	bf00      	nop
 8009032:	372c      	adds	r7, #44	@ 0x2c
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800903c:	b480      	push	{r7}
 800903e:	b08b      	sub	sp, #44	@ 0x2c
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	4611      	mov	r1, r2
 8009048:	461a      	mov	r2, r3
 800904a:	460b      	mov	r3, r1
 800904c:	80fb      	strh	r3, [r7, #6]
 800904e:	4613      	mov	r3, r2
 8009050:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009052:	88bb      	ldrh	r3, [r7, #4]
 8009054:	085b      	lsrs	r3, r3, #1
 8009056:	b29b      	uxth	r3, r3
 8009058:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800906c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	627b      	str	r3, [r7, #36]	@ 0x24
 8009072:	e018      	b.n	80090a6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	3302      	adds	r3, #2
 8009080:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	b2da      	uxtb	r2, r3
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	3301      	adds	r3, #1
 800908e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	0a1b      	lsrs	r3, r3, #8
 8009094:	b2da      	uxtb	r2, r3
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	3301      	adds	r3, #1
 800909e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80090a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a2:	3b01      	subs	r3, #1
 80090a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1e3      	bne.n	8009074 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80090ac:	88bb      	ldrh	r3, [r7, #4]
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d007      	beq.n	80090c8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	701a      	strb	r2, [r3, #0]
  }
}
 80090c8:	bf00      	nop
 80090ca:	372c      	adds	r7, #44	@ 0x2c
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80090e4:	f002 f8fa 	bl	800b2dc <USBD_static_malloc>
 80090e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d105      	bne.n	80090fc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80090f8:	2302      	movs	r3, #2
 80090fa:	e066      	b.n	80091ca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	7c1b      	ldrb	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d119      	bne.n	8009140 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800910c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009110:	2202      	movs	r2, #2
 8009112:	2181      	movs	r1, #129	@ 0x81
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 ff88 	bl	800b02a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009124:	2202      	movs	r2, #2
 8009126:	2101      	movs	r1, #1
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 ff7e 	bl	800b02a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2210      	movs	r2, #16
 800913a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800913e:	e016      	b.n	800916e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009140:	2340      	movs	r3, #64	@ 0x40
 8009142:	2202      	movs	r2, #2
 8009144:	2181      	movs	r1, #129	@ 0x81
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f001 ff6f 	bl	800b02a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009152:	2340      	movs	r3, #64	@ 0x40
 8009154:	2202      	movs	r2, #2
 8009156:	2101      	movs	r1, #1
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 ff66 	bl	800b02a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2210      	movs	r2, #16
 800916a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800916e:	2308      	movs	r3, #8
 8009170:	2203      	movs	r2, #3
 8009172:	2182      	movs	r1, #130	@ 0x82
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 ff58 	bl	800b02a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	7c1b      	ldrb	r3, [r3, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d109      	bne.n	80091b8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091ae:	2101      	movs	r1, #1
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f002 f829 	bl	800b208 <USBD_LL_PrepareReceive>
 80091b6:	e007      	b.n	80091c8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091be:	2340      	movs	r3, #64	@ 0x40
 80091c0:	2101      	movs	r1, #1
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f002 f820 	bl	800b208 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	460b      	mov	r3, r1
 80091dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80091de:	2181      	movs	r1, #129	@ 0x81
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 ff48 	bl	800b076 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80091ec:	2101      	movs	r1, #1
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 ff41 	bl	800b076 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80091fc:	2182      	movs	r1, #130	@ 0x82
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f001 ff39 	bl	800b076 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800922e:	4618      	mov	r0, r3
 8009230:	f002 f862 	bl	800b2f8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
	...

08009248 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009258:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800925a:	2300      	movs	r3, #0
 800925c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800926c:	2303      	movs	r3, #3
 800926e:	e0af      	b.n	80093d0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009278:	2b00      	cmp	r3, #0
 800927a:	d03f      	beq.n	80092fc <USBD_CDC_Setup+0xb4>
 800927c:	2b20      	cmp	r3, #32
 800927e:	f040 809f 	bne.w	80093c0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	88db      	ldrh	r3, [r3, #6]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d02e      	beq.n	80092e8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	b25b      	sxtb	r3, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	da16      	bge.n	80092c2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80092a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	88d2      	ldrh	r2, [r2, #6]
 80092a6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	88db      	ldrh	r3, [r3, #6]
 80092ac:	2b07      	cmp	r3, #7
 80092ae:	bf28      	it	cs
 80092b0:	2307      	movcs	r3, #7
 80092b2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	89fa      	ldrh	r2, [r7, #14]
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f001 facd 	bl	800a85a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80092c0:	e085      	b.n	80093ce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	785a      	ldrb	r2, [r3, #1]
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	88db      	ldrh	r3, [r3, #6]
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80092d8:	6939      	ldr	r1, [r7, #16]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	88db      	ldrh	r3, [r3, #6]
 80092de:	461a      	mov	r2, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 fae6 	bl	800a8b2 <USBD_CtlPrepareRx>
      break;
 80092e6:	e072      	b.n	80093ce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	7850      	ldrb	r0, [r2, #1]
 80092f4:	2200      	movs	r2, #0
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	4798      	blx	r3
      break;
 80092fa:	e068      	b.n	80093ce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	785b      	ldrb	r3, [r3, #1]
 8009300:	2b0b      	cmp	r3, #11
 8009302:	d852      	bhi.n	80093aa <USBD_CDC_Setup+0x162>
 8009304:	a201      	add	r2, pc, #4	@ (adr r2, 800930c <USBD_CDC_Setup+0xc4>)
 8009306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930a:	bf00      	nop
 800930c:	0800933d 	.word	0x0800933d
 8009310:	080093b9 	.word	0x080093b9
 8009314:	080093ab 	.word	0x080093ab
 8009318:	080093ab 	.word	0x080093ab
 800931c:	080093ab 	.word	0x080093ab
 8009320:	080093ab 	.word	0x080093ab
 8009324:	080093ab 	.word	0x080093ab
 8009328:	080093ab 	.word	0x080093ab
 800932c:	080093ab 	.word	0x080093ab
 8009330:	080093ab 	.word	0x080093ab
 8009334:	08009367 	.word	0x08009367
 8009338:	08009391 	.word	0x08009391
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b03      	cmp	r3, #3
 8009346:	d107      	bne.n	8009358 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009348:	f107 030a 	add.w	r3, r7, #10
 800934c:	2202      	movs	r2, #2
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 fa82 	bl	800a85a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009356:	e032      	b.n	80093be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f001 fa0c 	bl	800a778 <USBD_CtlError>
            ret = USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	75fb      	strb	r3, [r7, #23]
          break;
 8009364:	e02b      	b.n	80093be <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b03      	cmp	r3, #3
 8009370:	d107      	bne.n	8009382 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009372:	f107 030d 	add.w	r3, r7, #13
 8009376:	2201      	movs	r2, #1
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 fa6d 	bl	800a85a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009380:	e01d      	b.n	80093be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 f9f7 	bl	800a778 <USBD_CtlError>
            ret = USBD_FAIL;
 800938a:	2303      	movs	r3, #3
 800938c:	75fb      	strb	r3, [r7, #23]
          break;
 800938e:	e016      	b.n	80093be <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b03      	cmp	r3, #3
 800939a:	d00f      	beq.n	80093bc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 f9ea 	bl	800a778 <USBD_CtlError>
            ret = USBD_FAIL;
 80093a4:	2303      	movs	r3, #3
 80093a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093a8:	e008      	b.n	80093bc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 f9e3 	bl	800a778 <USBD_CtlError>
          ret = USBD_FAIL;
 80093b2:	2303      	movs	r3, #3
 80093b4:	75fb      	strb	r3, [r7, #23]
          break;
 80093b6:	e002      	b.n	80093be <USBD_CDC_Setup+0x176>
          break;
 80093b8:	bf00      	nop
 80093ba:	e008      	b.n	80093ce <USBD_CDC_Setup+0x186>
          break;
 80093bc:	bf00      	nop
      }
      break;
 80093be:	e006      	b.n	80093ce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f001 f9d8 	bl	800a778 <USBD_CtlError>
      ret = USBD_FAIL;
 80093c8:	2303      	movs	r3, #3
 80093ca:	75fb      	strb	r3, [r7, #23]
      break;
 80093cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80093ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e04f      	b.n	800949a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009400:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	4613      	mov	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	440b      	add	r3, r1
 8009410:	3318      	adds	r3, #24
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d029      	beq.n	800946c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009418:	78fa      	ldrb	r2, [r7, #3]
 800941a:	6879      	ldr	r1, [r7, #4]
 800941c:	4613      	mov	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	440b      	add	r3, r1
 8009426:	3318      	adds	r3, #24
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	78f9      	ldrb	r1, [r7, #3]
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	460b      	mov	r3, r1
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	4403      	add	r3, r0
 8009438:	3320      	adds	r3, #32
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009440:	fb01 f303 	mul.w	r3, r1, r3
 8009444:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009446:	2b00      	cmp	r3, #0
 8009448:	d110      	bne.n	800946c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800944a:	78fa      	ldrb	r2, [r7, #3]
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	440b      	add	r3, r1
 8009458:	3318      	adds	r3, #24
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800945e:	78f9      	ldrb	r1, [r7, #3]
 8009460:	2300      	movs	r3, #0
 8009462:	2200      	movs	r2, #0
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 feae 	bl	800b1c6 <USBD_LL_Transmit>
 800946a:	e015      	b.n	8009498 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2200      	movs	r2, #0
 8009470:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009494:	78fa      	ldrb	r2, [r7, #3]
 8009496:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	460b      	mov	r3, r1
 80094ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e015      	b.n	80094f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 febe 	bl	800b24a <USBD_LL_GetRxDataSize>
 80094ce:	4602      	mov	r2, r0
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80094ea:	4611      	mov	r1, r2
 80094ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009506:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800950e:	2303      	movs	r3, #3
 8009510:	e01a      	b.n	8009548 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d014      	beq.n	8009546 <USBD_CDC_EP0_RxReady+0x4e>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009522:	2bff      	cmp	r3, #255	@ 0xff
 8009524:	d00f      	beq.n	8009546 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009534:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800953c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	22ff      	movs	r2, #255	@ 0xff
 8009542:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2243      	movs	r2, #67	@ 0x43
 800955c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800955e:	4b03      	ldr	r3, [pc, #12]	@ (800956c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	20000094 	.word	0x20000094

08009570 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2243      	movs	r2, #67	@ 0x43
 800957c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800957e:	4b03      	ldr	r3, [pc, #12]	@ (800958c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	20000050 	.word	0x20000050

08009590 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2243      	movs	r2, #67	@ 0x43
 800959c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800959e:	4b03      	ldr	r3, [pc, #12]	@ (80095ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	200000d8 	.word	0x200000d8

080095b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	220a      	movs	r2, #10
 80095bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80095be:	4b03      	ldr	r3, [pc, #12]	@ (80095cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	2000000c 	.word	0x2000000c

080095d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e004      	b.n	80095ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b087      	sub	sp, #28
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800960c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009614:	2303      	movs	r3, #3
 8009616:	e008      	b.n	800962a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	371c      	adds	r7, #28
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009636:	b480      	push	{r7}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009646:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800964e:	2303      	movs	r3, #3
 8009650:	e004      	b.n	800965c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009676:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009678:	2301      	movs	r3, #1
 800967a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009686:	2303      	movs	r3, #3
 8009688:	e01a      	b.n	80096c0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009690:	2b00      	cmp	r3, #0
 8009692:	d114      	bne.n	80096be <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2201      	movs	r2, #1
 8009698:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80096b2:	2181      	movs	r1, #129	@ 0x81
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 fd86 	bl	800b1c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80096be:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e016      	b.n	8009714 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	7c1b      	ldrb	r3, [r3, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d109      	bne.n	8009702 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80096f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096f8:	2101      	movs	r1, #1
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 fd84 	bl	800b208 <USBD_LL_PrepareReceive>
 8009700:	e007      	b.n	8009712 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009708:	2340      	movs	r3, #64	@ 0x40
 800970a:	2101      	movs	r1, #1
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 fd7b 	bl	800b208 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	4613      	mov	r3, r2
 8009728:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009730:	2303      	movs	r3, #3
 8009732:	e01f      	b.n	8009774 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	79fa      	ldrb	r2, [r7, #7]
 8009766:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f001 fbe3 	bl	800af34 <USBD_LL_Init>
 800976e:	4603      	mov	r3, r0
 8009770:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009772:	7dfb      	ldrb	r3, [r7, #23]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009790:	2303      	movs	r3, #3
 8009792:	e016      	b.n	80097c2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	f107 020e 	add.w	r2, r7, #14
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
 80097b8:	4602      	mov	r2, r0
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f001 fc0e 	bl	800aff4 <USBD_LL_Start>
 80097d8:	4603      	mov	r3, r0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b083      	sub	sp, #12
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009804:	2303      	movs	r3, #3
 8009806:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800980e:	2b00      	cmp	r3, #0
 8009810:	d009      	beq.n	8009826 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	78fa      	ldrb	r2, [r7, #3]
 800981c:	4611      	mov	r1, r2
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	78fa      	ldrb	r2, [r7, #3]
 8009850:	4611      	mov	r1, r2
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
  }

  return USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 ff46 	bl	800a704 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009886:	461a      	mov	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009894:	f003 031f 	and.w	r3, r3, #31
 8009898:	2b02      	cmp	r3, #2
 800989a:	d01a      	beq.n	80098d2 <USBD_LL_SetupStage+0x72>
 800989c:	2b02      	cmp	r3, #2
 800989e:	d822      	bhi.n	80098e6 <USBD_LL_SetupStage+0x86>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <USBD_LL_SetupStage+0x4a>
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d00a      	beq.n	80098be <USBD_LL_SetupStage+0x5e>
 80098a8:	e01d      	b.n	80098e6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f9ee 	bl	8009c94 <USBD_StdDevReq>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]
      break;
 80098bc:	e020      	b.n	8009900 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fa52 	bl	8009d70 <USBD_StdItfReq>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]
      break;
 80098d0:	e016      	b.n	8009900 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa91 	bl	8009e02 <USBD_StdEPReq>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]
      break;
 80098e4:	e00c      	b.n	8009900 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80098ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 fbdd 	bl	800b0b4 <USBD_LL_StallEP>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]
      break;
 80098fe:	bf00      	nop
  }

  return ret;
 8009900:	7bfb      	ldrb	r3, [r7, #15]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b086      	sub	sp, #24
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	460b      	mov	r3, r1
 8009914:	607a      	str	r2, [r7, #4]
 8009916:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009918:	7afb      	ldrb	r3, [r7, #11]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d138      	bne.n	8009990 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009924:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800992c:	2b03      	cmp	r3, #3
 800992e:	d14a      	bne.n	80099c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	429a      	cmp	r2, r3
 800993a:	d913      	bls.n	8009964 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	1ad2      	subs	r2, r2, r3
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	68da      	ldr	r2, [r3, #12]
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	4293      	cmp	r3, r2
 8009954:	bf28      	it	cs
 8009956:	4613      	movcs	r3, r2
 8009958:	461a      	mov	r2, r3
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 ffc5 	bl	800a8ec <USBD_CtlContinueRx>
 8009962:	e030      	b.n	80099c6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b03      	cmp	r3, #3
 800996e:	d10b      	bne.n	8009988 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d005      	beq.n	8009988 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 ffc0 	bl	800a90e <USBD_CtlSendStatus>
 800998e:	e01a      	b.n	80099c6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b03      	cmp	r3, #3
 800999a:	d114      	bne.n	80099c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00e      	beq.n	80099c6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	7afa      	ldrb	r2, [r7, #11]
 80099b2:	4611      	mov	r1, r2
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	4798      	blx	r3
 80099b8:	4603      	mov	r3, r0
 80099ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	e000      	b.n	80099c8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	460b      	mov	r3, r1
 80099da:	607a      	str	r2, [r7, #4]
 80099dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80099de:	7afb      	ldrb	r3, [r7, #11]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d16b      	bne.n	8009abc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	3314      	adds	r3, #20
 80099e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d156      	bne.n	8009aa2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d914      	bls.n	8009a2a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	1ad2      	subs	r2, r2, r3
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	461a      	mov	r2, r3
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f000 ff3a 	bl	800a890 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f001 fbf0 	bl	800b208 <USBD_LL_PrepareReceive>
 8009a28:	e03b      	b.n	8009aa2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d11c      	bne.n	8009a70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d316      	bcc.n	8009a70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d20f      	bcs.n	8009a70 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a50:	2200      	movs	r2, #0
 8009a52:	2100      	movs	r1, #0
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 ff1b 	bl	800a890 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a62:	2300      	movs	r3, #0
 8009a64:	2200      	movs	r2, #0
 8009a66:	2100      	movs	r1, #0
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f001 fbcd 	bl	800b208 <USBD_LL_PrepareReceive>
 8009a6e:	e018      	b.n	8009aa2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d10b      	bne.n	8009a94 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d005      	beq.n	8009a94 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a94:	2180      	movs	r1, #128	@ 0x80
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f001 fb0c 	bl	800b0b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 ff49 	bl	800a934 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d122      	bne.n	8009af2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f7ff fe98 	bl	80097e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009aba:	e01a      	b.n	8009af2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d114      	bne.n	8009af2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00e      	beq.n	8009af2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	7afa      	ldrb	r2, [r7, #11]
 8009ade:	4611      	mov	r1, r2
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	4798      	blx	r3
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	e000      	b.n	8009af4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e02f      	b.n	8009b90 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00f      	beq.n	8009b5a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d009      	beq.n	8009b5a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	6852      	ldr	r2, [r2, #4]
 8009b52:	b2d2      	uxtb	r2, r2
 8009b54:	4611      	mov	r1, r2
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b5a:	2340      	movs	r3, #64	@ 0x40
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2100      	movs	r1, #0
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 fa62 	bl	800b02a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2240      	movs	r2, #64	@ 0x40
 8009b72:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b76:	2340      	movs	r3, #64	@ 0x40
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2180      	movs	r1, #128	@ 0x80
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f001 fa54 	bl	800b02a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2240      	movs	r2, #64	@ 0x40
 8009b8c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	78fa      	ldrb	r2, [r7, #3]
 8009ba8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2204      	movs	r2, #4
 8009bd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	d106      	bne.n	8009c06 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e012      	b.n	8009c50 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d10b      	bne.n	8009c4e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d005      	beq.n	8009c4e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c76:	8a3b      	ldrh	r3, [r7, #16]
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	b21a      	sxth	r2, r3
 8009c7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	b21b      	sxth	r3, r3
 8009c84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c86:	89fb      	ldrh	r3, [r7, #14]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	371c      	adds	r7, #28
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009caa:	2b40      	cmp	r3, #64	@ 0x40
 8009cac:	d005      	beq.n	8009cba <USBD_StdDevReq+0x26>
 8009cae:	2b40      	cmp	r3, #64	@ 0x40
 8009cb0:	d853      	bhi.n	8009d5a <USBD_StdDevReq+0xc6>
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <USBD_StdDevReq+0x3a>
 8009cb6:	2b20      	cmp	r3, #32
 8009cb8:	d14f      	bne.n	8009d5a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	4798      	blx	r3
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]
      break;
 8009ccc:	e04a      	b.n	8009d64 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	2b09      	cmp	r3, #9
 8009cd4:	d83b      	bhi.n	8009d4e <USBD_StdDevReq+0xba>
 8009cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cdc <USBD_StdDevReq+0x48>)
 8009cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cdc:	08009d31 	.word	0x08009d31
 8009ce0:	08009d45 	.word	0x08009d45
 8009ce4:	08009d4f 	.word	0x08009d4f
 8009ce8:	08009d3b 	.word	0x08009d3b
 8009cec:	08009d4f 	.word	0x08009d4f
 8009cf0:	08009d0f 	.word	0x08009d0f
 8009cf4:	08009d05 	.word	0x08009d05
 8009cf8:	08009d4f 	.word	0x08009d4f
 8009cfc:	08009d27 	.word	0x08009d27
 8009d00:	08009d19 	.word	0x08009d19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f9de 	bl	800a0c8 <USBD_GetDescriptor>
          break;
 8009d0c:	e024      	b.n	8009d58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fb6d 	bl	800a3f0 <USBD_SetAddress>
          break;
 8009d16:	e01f      	b.n	8009d58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fbac 	bl	800a478 <USBD_SetConfig>
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]
          break;
 8009d24:	e018      	b.n	8009d58 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fc4b 	bl	800a5c4 <USBD_GetConfig>
          break;
 8009d2e:	e013      	b.n	8009d58 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fc7c 	bl	800a630 <USBD_GetStatus>
          break;
 8009d38:	e00e      	b.n	8009d58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fcab 	bl	800a698 <USBD_SetFeature>
          break;
 8009d42:	e009      	b.n	8009d58 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fcba 	bl	800a6c0 <USBD_ClrFeature>
          break;
 8009d4c:	e004      	b.n	8009d58 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fd11 	bl	800a778 <USBD_CtlError>
          break;
 8009d56:	bf00      	nop
      }
      break;
 8009d58:	e004      	b.n	8009d64 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fd0b 	bl	800a778 <USBD_CtlError>
      break;
 8009d62:	bf00      	nop
  }

  return ret;
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop

08009d70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d86:	2b40      	cmp	r3, #64	@ 0x40
 8009d88:	d005      	beq.n	8009d96 <USBD_StdItfReq+0x26>
 8009d8a:	2b40      	cmp	r3, #64	@ 0x40
 8009d8c:	d82f      	bhi.n	8009dee <USBD_StdItfReq+0x7e>
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <USBD_StdItfReq+0x26>
 8009d92:	2b20      	cmp	r3, #32
 8009d94:	d12b      	bne.n	8009dee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d81d      	bhi.n	8009de0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	889b      	ldrh	r3, [r3, #4]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d813      	bhi.n	8009dd6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	4798      	blx	r3
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	88db      	ldrh	r3, [r3, #6]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d110      	bne.n	8009dea <USBD_StdItfReq+0x7a>
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10d      	bne.n	8009dea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fd9d 	bl	800a90e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009dd4:	e009      	b.n	8009dea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fccd 	bl	800a778 <USBD_CtlError>
          break;
 8009dde:	e004      	b.n	8009dea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fcc8 	bl	800a778 <USBD_CtlError>
          break;
 8009de8:	e000      	b.n	8009dec <USBD_StdItfReq+0x7c>
          break;
 8009dea:	bf00      	nop
      }
      break;
 8009dec:	e004      	b.n	8009df8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fcc1 	bl	800a778 <USBD_CtlError>
      break;
 8009df6:	bf00      	nop
  }

  return ret;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	889b      	ldrh	r3, [r3, #4]
 8009e14:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e1e:	2b40      	cmp	r3, #64	@ 0x40
 8009e20:	d007      	beq.n	8009e32 <USBD_StdEPReq+0x30>
 8009e22:	2b40      	cmp	r3, #64	@ 0x40
 8009e24:	f200 8145 	bhi.w	800a0b2 <USBD_StdEPReq+0x2b0>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00c      	beq.n	8009e46 <USBD_StdEPReq+0x44>
 8009e2c:	2b20      	cmp	r3, #32
 8009e2e:	f040 8140 	bne.w	800a0b2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	4798      	blx	r3
 8009e40:	4603      	mov	r3, r0
 8009e42:	73fb      	strb	r3, [r7, #15]
      break;
 8009e44:	e13a      	b.n	800a0bc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	785b      	ldrb	r3, [r3, #1]
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d007      	beq.n	8009e5e <USBD_StdEPReq+0x5c>
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	f300 8129 	bgt.w	800a0a6 <USBD_StdEPReq+0x2a4>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d07f      	beq.n	8009f58 <USBD_StdEPReq+0x156>
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d03c      	beq.n	8009ed6 <USBD_StdEPReq+0xd4>
 8009e5c:	e123      	b.n	800a0a6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d002      	beq.n	8009e70 <USBD_StdEPReq+0x6e>
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d016      	beq.n	8009e9c <USBD_StdEPReq+0x9a>
 8009e6e:	e02c      	b.n	8009eca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00d      	beq.n	8009e92 <USBD_StdEPReq+0x90>
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	2b80      	cmp	r3, #128	@ 0x80
 8009e7a:	d00a      	beq.n	8009e92 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 f917 	bl	800b0b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e86:	2180      	movs	r1, #128	@ 0x80
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 f913 	bl	800b0b4 <USBD_LL_StallEP>
 8009e8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e90:	e020      	b.n	8009ed4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fc6f 	bl	800a778 <USBD_CtlError>
              break;
 8009e9a:	e01b      	b.n	8009ed4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	885b      	ldrh	r3, [r3, #2]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10e      	bne.n	8009ec2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ea4:	7bbb      	ldrb	r3, [r7, #14]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00b      	beq.n	8009ec2 <USBD_StdEPReq+0xc0>
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	2b80      	cmp	r3, #128	@ 0x80
 8009eae:	d008      	beq.n	8009ec2 <USBD_StdEPReq+0xc0>
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	88db      	ldrh	r3, [r3, #6]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d104      	bne.n	8009ec2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 f8f9 	bl	800b0b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fd23 	bl	800a90e <USBD_CtlSendStatus>

              break;
 8009ec8:	e004      	b.n	8009ed4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fc53 	bl	800a778 <USBD_CtlError>
              break;
 8009ed2:	bf00      	nop
          }
          break;
 8009ed4:	e0ec      	b.n	800a0b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d002      	beq.n	8009ee8 <USBD_StdEPReq+0xe6>
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d016      	beq.n	8009f14 <USBD_StdEPReq+0x112>
 8009ee6:	e030      	b.n	8009f4a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00d      	beq.n	8009f0a <USBD_StdEPReq+0x108>
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b80      	cmp	r3, #128	@ 0x80
 8009ef2:	d00a      	beq.n	8009f0a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 f8db 	bl	800b0b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009efe:	2180      	movs	r1, #128	@ 0x80
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f001 f8d7 	bl	800b0b4 <USBD_LL_StallEP>
 8009f06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f08:	e025      	b.n	8009f56 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fc33 	bl	800a778 <USBD_CtlError>
              break;
 8009f12:	e020      	b.n	8009f56 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	885b      	ldrh	r3, [r3, #2]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d11b      	bne.n	8009f54 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d004      	beq.n	8009f30 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 f8e1 	bl	800b0f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fcec 	bl	800a90e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	6839      	ldr	r1, [r7, #0]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	4798      	blx	r3
 8009f44:	4603      	mov	r3, r0
 8009f46:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009f48:	e004      	b.n	8009f54 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fc13 	bl	800a778 <USBD_CtlError>
              break;
 8009f52:	e000      	b.n	8009f56 <USBD_StdEPReq+0x154>
              break;
 8009f54:	bf00      	nop
          }
          break;
 8009f56:	e0ab      	b.n	800a0b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d002      	beq.n	8009f6a <USBD_StdEPReq+0x168>
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	d032      	beq.n	8009fce <USBD_StdEPReq+0x1cc>
 8009f68:	e097      	b.n	800a09a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d007      	beq.n	8009f80 <USBD_StdEPReq+0x17e>
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	2b80      	cmp	r3, #128	@ 0x80
 8009f74:	d004      	beq.n	8009f80 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fbfd 	bl	800a778 <USBD_CtlError>
                break;
 8009f7e:	e091      	b.n	800a0a4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	da0b      	bge.n	8009fa0 <USBD_StdEPReq+0x19e>
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	3310      	adds	r3, #16
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	e00b      	b.n	8009fb8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fc47 	bl	800a85a <USBD_CtlSendData>
              break;
 8009fcc:	e06a      	b.n	800a0a4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	da11      	bge.n	8009ffa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
 8009fd8:	f003 020f 	and.w	r2, r3, #15
 8009fdc:	6879      	ldr	r1, [r7, #4]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	440b      	add	r3, r1
 8009fe8:	3324      	adds	r3, #36	@ 0x24
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d117      	bne.n	800a020 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fbc0 	bl	800a778 <USBD_CtlError>
                  break;
 8009ff8:	e054      	b.n	800a0a4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	f003 020f 	and.w	r2, r3, #15
 800a000:	6879      	ldr	r1, [r7, #4]
 800a002:	4613      	mov	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	440b      	add	r3, r1
 800a00c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d104      	bne.n	800a020 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fbad 	bl	800a778 <USBD_CtlError>
                  break;
 800a01e:	e041      	b.n	800a0a4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a024:	2b00      	cmp	r3, #0
 800a026:	da0b      	bge.n	800a040 <USBD_StdEPReq+0x23e>
 800a028:	7bbb      	ldrb	r3, [r7, #14]
 800a02a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a02e:	4613      	mov	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	3310      	adds	r3, #16
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	4413      	add	r3, r2
 800a03c:	3304      	adds	r3, #4
 800a03e:	e00b      	b.n	800a058 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a046:	4613      	mov	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	4413      	add	r3, r2
 800a056:	3304      	adds	r3, #4
 800a058:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <USBD_StdEPReq+0x264>
 800a060:	7bbb      	ldrb	r3, [r7, #14]
 800a062:	2b80      	cmp	r3, #128	@ 0x80
 800a064:	d103      	bne.n	800a06e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	e00e      	b.n	800a08c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 f85c 	bl	800b130 <USBD_LL_IsStallEP>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2201      	movs	r2, #1
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	e002      	b.n	800a08c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	2200      	movs	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2202      	movs	r2, #2
 800a090:	4619      	mov	r1, r3
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fbe1 	bl	800a85a <USBD_CtlSendData>
              break;
 800a098:	e004      	b.n	800a0a4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fb6b 	bl	800a778 <USBD_CtlError>
              break;
 800a0a2:	bf00      	nop
          }
          break;
 800a0a4:	e004      	b.n	800a0b0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fb65 	bl	800a778 <USBD_CtlError>
          break;
 800a0ae:	bf00      	nop
      }
      break;
 800a0b0:	e004      	b.n	800a0bc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fb5f 	bl	800a778 <USBD_CtlError>
      break;
 800a0ba:	bf00      	nop
  }

  return ret;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	885b      	ldrh	r3, [r3, #2]
 800a0e2:	0a1b      	lsrs	r3, r3, #8
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	2b0e      	cmp	r3, #14
 800a0ea:	f200 8152 	bhi.w	800a392 <USBD_GetDescriptor+0x2ca>
 800a0ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f4 <USBD_GetDescriptor+0x2c>)
 800a0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f4:	0800a165 	.word	0x0800a165
 800a0f8:	0800a17d 	.word	0x0800a17d
 800a0fc:	0800a1bd 	.word	0x0800a1bd
 800a100:	0800a393 	.word	0x0800a393
 800a104:	0800a393 	.word	0x0800a393
 800a108:	0800a333 	.word	0x0800a333
 800a10c:	0800a35f 	.word	0x0800a35f
 800a110:	0800a393 	.word	0x0800a393
 800a114:	0800a393 	.word	0x0800a393
 800a118:	0800a393 	.word	0x0800a393
 800a11c:	0800a393 	.word	0x0800a393
 800a120:	0800a393 	.word	0x0800a393
 800a124:	0800a393 	.word	0x0800a393
 800a128:	0800a393 	.word	0x0800a393
 800a12c:	0800a131 	.word	0x0800a131
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00b      	beq.n	800a154 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	7c12      	ldrb	r2, [r2, #16]
 800a148:	f107 0108 	add.w	r1, r7, #8
 800a14c:	4610      	mov	r0, r2
 800a14e:	4798      	blx	r3
 800a150:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a152:	e126      	b.n	800a3a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fb0e 	bl	800a778 <USBD_CtlError>
        err++;
 800a15c:	7afb      	ldrb	r3, [r7, #11]
 800a15e:	3301      	adds	r3, #1
 800a160:	72fb      	strb	r3, [r7, #11]
      break;
 800a162:	e11e      	b.n	800a3a2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	7c12      	ldrb	r2, [r2, #16]
 800a170:	f107 0108 	add.w	r1, r7, #8
 800a174:	4610      	mov	r0, r2
 800a176:	4798      	blx	r3
 800a178:	60f8      	str	r0, [r7, #12]
      break;
 800a17a:	e112      	b.n	800a3a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7c1b      	ldrb	r3, [r3, #16]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10d      	bne.n	800a1a0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a18c:	f107 0208 	add.w	r2, r7, #8
 800a190:	4610      	mov	r0, r2
 800a192:	4798      	blx	r3
 800a194:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3301      	adds	r3, #1
 800a19a:	2202      	movs	r2, #2
 800a19c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a19e:	e100      	b.n	800a3a2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a8:	f107 0208 	add.w	r2, r7, #8
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4798      	blx	r3
 800a1b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	701a      	strb	r2, [r3, #0]
      break;
 800a1ba:	e0f2      	b.n	800a3a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	885b      	ldrh	r3, [r3, #2]
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b05      	cmp	r3, #5
 800a1c4:	f200 80ac 	bhi.w	800a320 <USBD_GetDescriptor+0x258>
 800a1c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d0 <USBD_GetDescriptor+0x108>)
 800a1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ce:	bf00      	nop
 800a1d0:	0800a1e9 	.word	0x0800a1e9
 800a1d4:	0800a21d 	.word	0x0800a21d
 800a1d8:	0800a251 	.word	0x0800a251
 800a1dc:	0800a285 	.word	0x0800a285
 800a1e0:	0800a2b9 	.word	0x0800a2b9
 800a1e4:	0800a2ed 	.word	0x0800a2ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00b      	beq.n	800a20c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	7c12      	ldrb	r2, [r2, #16]
 800a200:	f107 0108 	add.w	r1, r7, #8
 800a204:	4610      	mov	r0, r2
 800a206:	4798      	blx	r3
 800a208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a20a:	e091      	b.n	800a330 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fab2 	bl	800a778 <USBD_CtlError>
            err++;
 800a214:	7afb      	ldrb	r3, [r7, #11]
 800a216:	3301      	adds	r3, #1
 800a218:	72fb      	strb	r3, [r7, #11]
          break;
 800a21a:	e089      	b.n	800a330 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00b      	beq.n	800a240 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	7c12      	ldrb	r2, [r2, #16]
 800a234:	f107 0108 	add.w	r1, r7, #8
 800a238:	4610      	mov	r0, r2
 800a23a:	4798      	blx	r3
 800a23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a23e:	e077      	b.n	800a330 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fa98 	bl	800a778 <USBD_CtlError>
            err++;
 800a248:	7afb      	ldrb	r3, [r7, #11]
 800a24a:	3301      	adds	r3, #1
 800a24c:	72fb      	strb	r3, [r7, #11]
          break;
 800a24e:	e06f      	b.n	800a330 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00b      	beq.n	800a274 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	7c12      	ldrb	r2, [r2, #16]
 800a268:	f107 0108 	add.w	r1, r7, #8
 800a26c:	4610      	mov	r0, r2
 800a26e:	4798      	blx	r3
 800a270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a272:	e05d      	b.n	800a330 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fa7e 	bl	800a778 <USBD_CtlError>
            err++;
 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	3301      	adds	r3, #1
 800a280:	72fb      	strb	r3, [r7, #11]
          break;
 800a282:	e055      	b.n	800a330 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00b      	beq.n	800a2a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	7c12      	ldrb	r2, [r2, #16]
 800a29c:	f107 0108 	add.w	r1, r7, #8
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4798      	blx	r3
 800a2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2a6:	e043      	b.n	800a330 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa64 	bl	800a778 <USBD_CtlError>
            err++;
 800a2b0:	7afb      	ldrb	r3, [r7, #11]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2b6:	e03b      	b.n	800a330 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2be:	695b      	ldr	r3, [r3, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	7c12      	ldrb	r2, [r2, #16]
 800a2d0:	f107 0108 	add.w	r1, r7, #8
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	4798      	blx	r3
 800a2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2da:	e029      	b.n	800a330 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fa4a 	bl	800a778 <USBD_CtlError>
            err++;
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ea:	e021      	b.n	800a330 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00b      	beq.n	800a310 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	7c12      	ldrb	r2, [r2, #16]
 800a304:	f107 0108 	add.w	r1, r7, #8
 800a308:	4610      	mov	r0, r2
 800a30a:	4798      	blx	r3
 800a30c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a30e:	e00f      	b.n	800a330 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa30 	bl	800a778 <USBD_CtlError>
            err++;
 800a318:	7afb      	ldrb	r3, [r7, #11]
 800a31a:	3301      	adds	r3, #1
 800a31c:	72fb      	strb	r3, [r7, #11]
          break;
 800a31e:	e007      	b.n	800a330 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa28 	bl	800a778 <USBD_CtlError>
          err++;
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	3301      	adds	r3, #1
 800a32c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a32e:	bf00      	nop
      }
      break;
 800a330:	e037      	b.n	800a3a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	7c1b      	ldrb	r3, [r3, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d109      	bne.n	800a34e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a342:	f107 0208 	add.w	r2, r7, #8
 800a346:	4610      	mov	r0, r2
 800a348:	4798      	blx	r3
 800a34a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a34c:	e029      	b.n	800a3a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fa11 	bl	800a778 <USBD_CtlError>
        err++;
 800a356:	7afb      	ldrb	r3, [r7, #11]
 800a358:	3301      	adds	r3, #1
 800a35a:	72fb      	strb	r3, [r7, #11]
      break;
 800a35c:	e021      	b.n	800a3a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	7c1b      	ldrb	r3, [r3, #16]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10d      	bne.n	800a382 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a36c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a36e:	f107 0208 	add.w	r2, r7, #8
 800a372:	4610      	mov	r0, r2
 800a374:	4798      	blx	r3
 800a376:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3301      	adds	r3, #1
 800a37c:	2207      	movs	r2, #7
 800a37e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a380:	e00f      	b.n	800a3a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f9f7 	bl	800a778 <USBD_CtlError>
        err++;
 800a38a:	7afb      	ldrb	r3, [r7, #11]
 800a38c:	3301      	adds	r3, #1
 800a38e:	72fb      	strb	r3, [r7, #11]
      break;
 800a390:	e007      	b.n	800a3a2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f9ef 	bl	800a778 <USBD_CtlError>
      err++;
 800a39a:	7afb      	ldrb	r3, [r7, #11]
 800a39c:	3301      	adds	r3, #1
 800a39e:	72fb      	strb	r3, [r7, #11]
      break;
 800a3a0:	bf00      	nop
  }

  if (err != 0U)
 800a3a2:	7afb      	ldrb	r3, [r7, #11]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d11e      	bne.n	800a3e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	88db      	ldrh	r3, [r3, #6]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d016      	beq.n	800a3de <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a3b0:	893b      	ldrh	r3, [r7, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00e      	beq.n	800a3d4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	88da      	ldrh	r2, [r3, #6]
 800a3ba:	893b      	ldrh	r3, [r7, #8]
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	bf28      	it	cs
 800a3c0:	4613      	movcs	r3, r2
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3c6:	893b      	ldrh	r3, [r7, #8]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	68f9      	ldr	r1, [r7, #12]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fa44 	bl	800a85a <USBD_CtlSendData>
 800a3d2:	e009      	b.n	800a3e8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f9ce 	bl	800a778 <USBD_CtlError>
 800a3dc:	e004      	b.n	800a3e8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fa95 	bl	800a90e <USBD_CtlSendStatus>
 800a3e4:	e000      	b.n	800a3e8 <USBD_GetDescriptor+0x320>
    return;
 800a3e6:	bf00      	nop
  }
}
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop

0800a3f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	889b      	ldrh	r3, [r3, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d131      	bne.n	800a466 <USBD_SetAddress+0x76>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	88db      	ldrh	r3, [r3, #6]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d12d      	bne.n	800a466 <USBD_SetAddress+0x76>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	885b      	ldrh	r3, [r3, #2]
 800a40e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a410:	d829      	bhi.n	800a466 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	885b      	ldrh	r3, [r3, #2]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a41c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b03      	cmp	r3, #3
 800a428:	d104      	bne.n	800a434 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f9a3 	bl	800a778 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a432:	e01d      	b.n	800a470 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	7bfa      	ldrb	r2, [r7, #15]
 800a438:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fea1 	bl	800b188 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fa61 	bl	800a90e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d004      	beq.n	800a45c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2202      	movs	r2, #2
 800a456:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a45a:	e009      	b.n	800a470 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a464:	e004      	b.n	800a470 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f985 	bl	800a778 <USBD_CtlError>
  }
}
 800a46e:	bf00      	nop
 800a470:	bf00      	nop
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	885b      	ldrh	r3, [r3, #2]
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	4b4c      	ldr	r3, [pc, #304]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a48e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a490:	4b4b      	ldr	r3, [pc, #300]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d905      	bls.n	800a4a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f96c 	bl	800a778 <USBD_CtlError>
    return USBD_FAIL;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e088      	b.n	800a5b6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d002      	beq.n	800a4b6 <USBD_SetConfig+0x3e>
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d025      	beq.n	800a500 <USBD_SetConfig+0x88>
 800a4b4:	e071      	b.n	800a59a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4b6:	4b42      	ldr	r3, [pc, #264]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d01c      	beq.n	800a4f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a4be:	4b40      	ldr	r3, [pc, #256]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4c8:	4b3d      	ldr	r3, [pc, #244]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7ff f992 	bl	80097f8 <USBD_SetClassConfig>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d004      	beq.n	800a4e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a4de:	6839      	ldr	r1, [r7, #0]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f949 	bl	800a778 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4e6:	e065      	b.n	800a5b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 fa10 	bl	800a90e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2203      	movs	r2, #3
 800a4f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4f6:	e05d      	b.n	800a5b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fa08 	bl	800a90e <USBD_CtlSendStatus>
      break;
 800a4fe:	e059      	b.n	800a5b4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a500:	4b2f      	ldr	r3, [pc, #188]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d112      	bne.n	800a52e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2202      	movs	r2, #2
 800a50c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a510:	4b2b      	ldr	r3, [pc, #172]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a51a:	4b29      	ldr	r3, [pc, #164]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff f985 	bl	8009830 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f9f1 	bl	800a90e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a52c:	e042      	b.n	800a5b4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a52e:	4b24      	ldr	r3, [pc, #144]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d02a      	beq.n	800a592 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	b2db      	uxtb	r3, r3
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff f973 	bl	8009830 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a54a:	4b1d      	ldr	r3, [pc, #116]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a554:	4b1a      	ldr	r3, [pc, #104]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7ff f94c 	bl	80097f8 <USBD_SetClassConfig>
 800a560:	4603      	mov	r3, r0
 800a562:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a564:	7bfb      	ldrb	r3, [r7, #15]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00f      	beq.n	800a58a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f903 	bl	800a778 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff f958 	bl	8009830 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2202      	movs	r2, #2
 800a584:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a588:	e014      	b.n	800a5b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f9bf 	bl	800a90e <USBD_CtlSendStatus>
      break;
 800a590:	e010      	b.n	800a5b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f9bb 	bl	800a90e <USBD_CtlSendStatus>
      break;
 800a598:	e00c      	b.n	800a5b4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f8eb 	bl	800a778 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5a2:	4b07      	ldr	r3, [pc, #28]	@ (800a5c0 <USBD_SetConfig+0x148>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7ff f941 	bl	8009830 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b2:	bf00      	nop
  }

  return ret;
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	200064d0 	.word	0x200064d0

0800a5c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	88db      	ldrh	r3, [r3, #6]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d004      	beq.n	800a5e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f8cd 	bl	800a778 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5de:	e023      	b.n	800a628 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	dc02      	bgt.n	800a5f2 <USBD_GetConfig+0x2e>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	dc03      	bgt.n	800a5f8 <USBD_GetConfig+0x34>
 800a5f0:	e015      	b.n	800a61e <USBD_GetConfig+0x5a>
 800a5f2:	2b03      	cmp	r3, #3
 800a5f4:	d00b      	beq.n	800a60e <USBD_GetConfig+0x4a>
 800a5f6:	e012      	b.n	800a61e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	3308      	adds	r3, #8
 800a602:	2201      	movs	r2, #1
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f927 	bl	800a85a <USBD_CtlSendData>
        break;
 800a60c:	e00c      	b.n	800a628 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	3304      	adds	r3, #4
 800a612:	2201      	movs	r2, #1
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f91f 	bl	800a85a <USBD_CtlSendData>
        break;
 800a61c:	e004      	b.n	800a628 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f8a9 	bl	800a778 <USBD_CtlError>
        break;
 800a626:	bf00      	nop
}
 800a628:	bf00      	nop
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a640:	b2db      	uxtb	r3, r3
 800a642:	3b01      	subs	r3, #1
 800a644:	2b02      	cmp	r3, #2
 800a646:	d81e      	bhi.n	800a686 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	88db      	ldrh	r3, [r3, #6]
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d004      	beq.n	800a65a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f890 	bl	800a778 <USBD_CtlError>
        break;
 800a658:	e01a      	b.n	800a690 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a666:	2b00      	cmp	r3, #0
 800a668:	d005      	beq.n	800a676 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	f043 0202 	orr.w	r2, r3, #2
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	330c      	adds	r3, #12
 800a67a:	2202      	movs	r2, #2
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f8eb 	bl	800a85a <USBD_CtlSendData>
      break;
 800a684:	e004      	b.n	800a690 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f875 	bl	800a778 <USBD_CtlError>
      break;
 800a68e:	bf00      	nop
  }
}
 800a690:	bf00      	nop
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	885b      	ldrh	r3, [r3, #2]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d106      	bne.n	800a6b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f92b 	bl	800a90e <USBD_CtlSendStatus>
  }
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d80b      	bhi.n	800a6f0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	885b      	ldrh	r3, [r3, #2]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d10c      	bne.n	800a6fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f910 	bl	800a90e <USBD_CtlSendStatus>
      }
      break;
 800a6ee:	e004      	b.n	800a6fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f840 	bl	800a778 <USBD_CtlError>
      break;
 800a6f8:	e000      	b.n	800a6fc <USBD_ClrFeature+0x3c>
      break;
 800a6fa:	bf00      	nop
  }
}
 800a6fc:	bf00      	nop
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	781a      	ldrb	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3301      	adds	r3, #1
 800a71e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	781a      	ldrb	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	3301      	adds	r3, #1
 800a72c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f7ff fa92 	bl	8009c58 <SWAPBYTE>
 800a734:	4603      	mov	r3, r0
 800a736:	461a      	mov	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3301      	adds	r3, #1
 800a740:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3301      	adds	r3, #1
 800a746:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f7ff fa85 	bl	8009c58 <SWAPBYTE>
 800a74e:	4603      	mov	r3, r0
 800a750:	461a      	mov	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3301      	adds	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3301      	adds	r3, #1
 800a760:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f7ff fa78 	bl	8009c58 <SWAPBYTE>
 800a768:	4603      	mov	r3, r0
 800a76a:	461a      	mov	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	80da      	strh	r2, [r3, #6]
}
 800a770:	bf00      	nop
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a782:	2180      	movs	r1, #128	@ 0x80
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fc95 	bl	800b0b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a78a:	2100      	movs	r1, #0
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fc91 	bl	800b0b4 <USBD_LL_StallEP>
}
 800a792:	bf00      	nop
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b086      	sub	sp, #24
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d036      	beq.n	800a81e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a7b4:	6938      	ldr	r0, [r7, #16]
 800a7b6:	f000 f836 	bl	800a826 <USBD_GetLen>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	3301      	adds	r3, #1
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	7812      	ldrb	r2, [r2, #0]
 800a7d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	4413      	add	r3, r2
 800a7e0:	2203      	movs	r2, #3
 800a7e2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a7ea:	e013      	b.n	800a814 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a7ec:	7dfb      	ldrb	r3, [r7, #23]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	7812      	ldrb	r2, [r2, #0]
 800a7f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	613b      	str	r3, [r7, #16]
    idx++;
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	3301      	adds	r3, #1
 800a802:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a804:	7dfb      	ldrb	r3, [r7, #23]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	4413      	add	r3, r2
 800a80a:	2200      	movs	r2, #0
 800a80c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	3301      	adds	r3, #1
 800a812:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e7      	bne.n	800a7ec <USBD_GetString+0x52>
 800a81c:	e000      	b.n	800a820 <USBD_GetString+0x86>
    return;
 800a81e:	bf00      	nop
  }
}
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a826:	b480      	push	{r7}
 800a828:	b085      	sub	sp, #20
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a836:	e005      	b.n	800a844 <USBD_GetLen+0x1e>
  {
    len++;
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	3301      	adds	r3, #1
 800a83c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	3301      	adds	r3, #1
 800a842:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1f5      	bne.n	800a838 <USBD_GetLen+0x12>
  }

  return len;
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	60f8      	str	r0, [r7, #12]
 800a862:	60b9      	str	r1, [r7, #8]
 800a864:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2202      	movs	r2, #2
 800a86a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	2100      	movs	r1, #0
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 fca0 	bl	800b1c6 <USBD_LL_Transmit>

  return USBD_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 fc8f 	bl	800b1c6 <USBD_LL_Transmit>

  return USBD_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2203      	movs	r2, #3
 800a8c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	2100      	movs	r1, #0
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 fc93 	bl	800b208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f000 fc82 	bl	800b208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2204      	movs	r2, #4
 800a91a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a91e:	2300      	movs	r3, #0
 800a920:	2200      	movs	r2, #0
 800a922:	2100      	movs	r1, #0
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fc4e 	bl	800b1c6 <USBD_LL_Transmit>

  return USBD_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2205      	movs	r2, #5
 800a940:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a944:	2300      	movs	r3, #0
 800a946:	2200      	movs	r2, #0
 800a948:	2100      	movs	r1, #0
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fc5c 	bl	800b208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
	...

0800a95c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a960:	2200      	movs	r2, #0
 800a962:	4912      	ldr	r1, [pc, #72]	@ (800a9ac <MX_USB_Device_Init+0x50>)
 800a964:	4812      	ldr	r0, [pc, #72]	@ (800a9b0 <MX_USB_Device_Init+0x54>)
 800a966:	f7fe fed9 	bl	800971c <USBD_Init>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a970:	f7f6 f80a 	bl	8000988 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a974:	490f      	ldr	r1, [pc, #60]	@ (800a9b4 <MX_USB_Device_Init+0x58>)
 800a976:	480e      	ldr	r0, [pc, #56]	@ (800a9b0 <MX_USB_Device_Init+0x54>)
 800a978:	f7fe ff00 	bl	800977c <USBD_RegisterClass>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d001      	beq.n	800a986 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a982:	f7f6 f801 	bl	8000988 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a986:	490c      	ldr	r1, [pc, #48]	@ (800a9b8 <MX_USB_Device_Init+0x5c>)
 800a988:	4809      	ldr	r0, [pc, #36]	@ (800a9b0 <MX_USB_Device_Init+0x54>)
 800a98a:	f7fe fe21 	bl	80095d0 <USBD_CDC_RegisterInterface>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a994:	f7f5 fff8 	bl	8000988 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a998:	4805      	ldr	r0, [pc, #20]	@ (800a9b0 <MX_USB_Device_Init+0x54>)
 800a99a:	f7fe ff16 	bl	80097ca <USBD_Start>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a9a4:	f7f5 fff0 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a9a8:	bf00      	nop
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	20000130 	.word	0x20000130
 800a9b0:	200064d4 	.word	0x200064d4
 800a9b4:	20000018 	.word	0x20000018
 800a9b8:	2000011c 	.word	0x2000011c

0800a9bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	4905      	ldr	r1, [pc, #20]	@ (800a9d8 <CDC_Init_FS+0x1c>)
 800a9c4:	4805      	ldr	r0, [pc, #20]	@ (800a9dc <CDC_Init_FS+0x20>)
 800a9c6:	f7fe fe18 	bl	80095fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9ca:	4905      	ldr	r1, [pc, #20]	@ (800a9e0 <CDC_Init_FS+0x24>)
 800a9cc:	4803      	ldr	r0, [pc, #12]	@ (800a9dc <CDC_Init_FS+0x20>)
 800a9ce:	f7fe fe32 	bl	8009636 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a9d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	20006ba4 	.word	0x20006ba4
 800a9dc:	200064d4 	.word	0x200064d4
 800a9e0:	200067a4 	.word	0x200067a4

0800a9e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a9e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	6039      	str	r1, [r7, #0]
 800a9fe:	71fb      	strb	r3, [r7, #7]
 800aa00:	4613      	mov	r3, r2
 800aa02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa04:	79fb      	ldrb	r3, [r7, #7]
 800aa06:	2b23      	cmp	r3, #35	@ 0x23
 800aa08:	d84a      	bhi.n	800aaa0 <CDC_Control_FS+0xac>
 800aa0a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa10 <CDC_Control_FS+0x1c>)
 800aa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa10:	0800aaa1 	.word	0x0800aaa1
 800aa14:	0800aaa1 	.word	0x0800aaa1
 800aa18:	0800aaa1 	.word	0x0800aaa1
 800aa1c:	0800aaa1 	.word	0x0800aaa1
 800aa20:	0800aaa1 	.word	0x0800aaa1
 800aa24:	0800aaa1 	.word	0x0800aaa1
 800aa28:	0800aaa1 	.word	0x0800aaa1
 800aa2c:	0800aaa1 	.word	0x0800aaa1
 800aa30:	0800aaa1 	.word	0x0800aaa1
 800aa34:	0800aaa1 	.word	0x0800aaa1
 800aa38:	0800aaa1 	.word	0x0800aaa1
 800aa3c:	0800aaa1 	.word	0x0800aaa1
 800aa40:	0800aaa1 	.word	0x0800aaa1
 800aa44:	0800aaa1 	.word	0x0800aaa1
 800aa48:	0800aaa1 	.word	0x0800aaa1
 800aa4c:	0800aaa1 	.word	0x0800aaa1
 800aa50:	0800aaa1 	.word	0x0800aaa1
 800aa54:	0800aaa1 	.word	0x0800aaa1
 800aa58:	0800aaa1 	.word	0x0800aaa1
 800aa5c:	0800aaa1 	.word	0x0800aaa1
 800aa60:	0800aaa1 	.word	0x0800aaa1
 800aa64:	0800aaa1 	.word	0x0800aaa1
 800aa68:	0800aaa1 	.word	0x0800aaa1
 800aa6c:	0800aaa1 	.word	0x0800aaa1
 800aa70:	0800aaa1 	.word	0x0800aaa1
 800aa74:	0800aaa1 	.word	0x0800aaa1
 800aa78:	0800aaa1 	.word	0x0800aaa1
 800aa7c:	0800aaa1 	.word	0x0800aaa1
 800aa80:	0800aaa1 	.word	0x0800aaa1
 800aa84:	0800aaa1 	.word	0x0800aaa1
 800aa88:	0800aaa1 	.word	0x0800aaa1
 800aa8c:	0800aaa1 	.word	0x0800aaa1
 800aa90:	0800aaa1 	.word	0x0800aaa1
 800aa94:	0800aaa1 	.word	0x0800aaa1
 800aa98:	0800aaa1 	.word	0x0800aaa1
 800aa9c:	0800aaa1 	.word	0x0800aaa1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aaa0:	bf00      	nop
  }

  return (USBD_OK);
 800aaa2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aaba:	6879      	ldr	r1, [r7, #4]
 800aabc:	4805      	ldr	r0, [pc, #20]	@ (800aad4 <CDC_Receive_FS+0x24>)
 800aabe:	f7fe fdba 	bl	8009636 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aac2:	4804      	ldr	r0, [pc, #16]	@ (800aad4 <CDC_Receive_FS+0x24>)
 800aac4:	f7fe fe00 	bl	80096c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aac8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	200064d4 	.word	0x200064d4

0800aad8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	460b      	mov	r3, r1
 800aae2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aae8:	4b0d      	ldr	r3, [pc, #52]	@ (800ab20 <CDC_Transmit_FS+0x48>)
 800aaea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aaee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d001      	beq.n	800aafe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e00b      	b.n	800ab16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aafe:	887b      	ldrh	r3, [r7, #2]
 800ab00:	461a      	mov	r2, r3
 800ab02:	6879      	ldr	r1, [r7, #4]
 800ab04:	4806      	ldr	r0, [pc, #24]	@ (800ab20 <CDC_Transmit_FS+0x48>)
 800ab06:	f7fe fd78 	bl	80095fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab0a:	4805      	ldr	r0, [pc, #20]	@ (800ab20 <CDC_Transmit_FS+0x48>)
 800ab0c:	f7fe fdac 	bl	8009668 <USBD_CDC_TransmitPacket>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	200064d4 	.word	0x200064d4

0800ab24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	371c      	adds	r7, #28
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
	...

0800ab48 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	6039      	str	r1, [r7, #0]
 800ab52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	2212      	movs	r2, #18
 800ab58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ab5a:	4b03      	ldr	r3, [pc, #12]	@ (800ab68 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	20000150 	.word	0x20000150

0800ab6c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2204      	movs	r2, #4
 800ab7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab7e:	4b03      	ldr	r3, [pc, #12]	@ (800ab8c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	20000164 	.word	0x20000164

0800ab90 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	6039      	str	r1, [r7, #0]
 800ab9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d105      	bne.n	800abae <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	4907      	ldr	r1, [pc, #28]	@ (800abc4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800aba6:	4808      	ldr	r0, [pc, #32]	@ (800abc8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aba8:	f7ff fdf7 	bl	800a79a <USBD_GetString>
 800abac:	e004      	b.n	800abb8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	4904      	ldr	r1, [pc, #16]	@ (800abc4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800abb2:	4805      	ldr	r0, [pc, #20]	@ (800abc8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800abb4:	f7ff fdf1 	bl	800a79a <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb8:	4b02      	ldr	r3, [pc, #8]	@ (800abc4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20006fa4 	.word	0x20006fa4
 800abc8:	0800bcd4 	.word	0x0800bcd4

0800abcc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	6039      	str	r1, [r7, #0]
 800abd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	4904      	ldr	r1, [pc, #16]	@ (800abec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800abdc:	4804      	ldr	r0, [pc, #16]	@ (800abf0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800abde:	f7ff fddc 	bl	800a79a <USBD_GetString>
  return USBD_StrDesc;
 800abe2:	4b02      	ldr	r3, [pc, #8]	@ (800abec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	20006fa4 	.word	0x20006fa4
 800abf0:	0800bcec 	.word	0x0800bcec

0800abf4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	6039      	str	r1, [r7, #0]
 800abfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	221a      	movs	r2, #26
 800ac04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac06:	f000 f843 	bl	800ac90 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac0a:	4b02      	ldr	r3, [pc, #8]	@ (800ac14 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000168 	.word	0x20000168

0800ac18 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	6039      	str	r1, [r7, #0]
 800ac22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac24:	79fb      	ldrb	r3, [r7, #7]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d105      	bne.n	800ac36 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac2a:	683a      	ldr	r2, [r7, #0]
 800ac2c:	4907      	ldr	r1, [pc, #28]	@ (800ac4c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac2e:	4808      	ldr	r0, [pc, #32]	@ (800ac50 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac30:	f7ff fdb3 	bl	800a79a <USBD_GetString>
 800ac34:	e004      	b.n	800ac40 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	4904      	ldr	r1, [pc, #16]	@ (800ac4c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac3a:	4805      	ldr	r0, [pc, #20]	@ (800ac50 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac3c:	f7ff fdad 	bl	800a79a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac40:	4b02      	ldr	r3, [pc, #8]	@ (800ac4c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20006fa4 	.word	0x20006fa4
 800ac50:	0800bd00 	.word	0x0800bd00

0800ac54 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	6039      	str	r1, [r7, #0]
 800ac5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d105      	bne.n	800ac72 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	4907      	ldr	r1, [pc, #28]	@ (800ac88 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac6a:	4808      	ldr	r0, [pc, #32]	@ (800ac8c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac6c:	f7ff fd95 	bl	800a79a <USBD_GetString>
 800ac70:	e004      	b.n	800ac7c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	4904      	ldr	r1, [pc, #16]	@ (800ac88 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac76:	4805      	ldr	r0, [pc, #20]	@ (800ac8c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac78:	f7ff fd8f 	bl	800a79a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac7c:	4b02      	ldr	r3, [pc, #8]	@ (800ac88 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20006fa4 	.word	0x20006fa4
 800ac8c:	0800bd0c 	.word	0x0800bd0c

0800ac90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac96:	4b0f      	ldr	r3, [pc, #60]	@ (800acd4 <Get_SerialNum+0x44>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac9c:	4b0e      	ldr	r3, [pc, #56]	@ (800acd8 <Get_SerialNum+0x48>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aca2:	4b0e      	ldr	r3, [pc, #56]	@ (800acdc <Get_SerialNum+0x4c>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4413      	add	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d009      	beq.n	800acca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acb6:	2208      	movs	r2, #8
 800acb8:	4909      	ldr	r1, [pc, #36]	@ (800ace0 <Get_SerialNum+0x50>)
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 f814 	bl	800ace8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acc0:	2204      	movs	r2, #4
 800acc2:	4908      	ldr	r1, [pc, #32]	@ (800ace4 <Get_SerialNum+0x54>)
 800acc4:	68b8      	ldr	r0, [r7, #8]
 800acc6:	f000 f80f 	bl	800ace8 <IntToUnicode>
  }
}
 800acca:	bf00      	nop
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	1fff7590 	.word	0x1fff7590
 800acd8:	1fff7594 	.word	0x1fff7594
 800acdc:	1fff7598 	.word	0x1fff7598
 800ace0:	2000016a 	.word	0x2000016a
 800ace4:	2000017a 	.word	0x2000017a

0800ace8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	4613      	mov	r3, r2
 800acf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800acfa:	2300      	movs	r3, #0
 800acfc:	75fb      	strb	r3, [r7, #23]
 800acfe:	e027      	b.n	800ad50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	0f1b      	lsrs	r3, r3, #28
 800ad04:	2b09      	cmp	r3, #9
 800ad06:	d80b      	bhi.n	800ad20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	0f1b      	lsrs	r3, r3, #28
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	4619      	mov	r1, r3
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	440b      	add	r3, r1
 800ad18:	3230      	adds	r2, #48	@ 0x30
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	701a      	strb	r2, [r3, #0]
 800ad1e:	e00a      	b.n	800ad36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	0f1b      	lsrs	r3, r3, #28
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	005b      	lsls	r3, r3, #1
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	440b      	add	r3, r1
 800ad30:	3237      	adds	r2, #55	@ 0x37
 800ad32:	b2d2      	uxtb	r2, r2
 800ad34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	011b      	lsls	r3, r3, #4
 800ad3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	3301      	adds	r3, #1
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	4413      	add	r3, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad4a:	7dfb      	ldrb	r3, [r7, #23]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	75fb      	strb	r3, [r7, #23]
 800ad50:	7dfa      	ldrb	r2, [r7, #23]
 800ad52:	79fb      	ldrb	r3, [r7, #7]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d3d3      	bcc.n	800ad00 <IntToUnicode+0x18>
  }
}
 800ad58:	bf00      	nop
 800ad5a:	bf00      	nop
 800ad5c:	371c      	adds	r7, #28
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
	...

0800ad68 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b094      	sub	sp, #80	@ 0x50
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ad70:	f107 030c 	add.w	r3, r7, #12
 800ad74:	2244      	movs	r2, #68	@ 0x44
 800ad76:	2100      	movs	r1, #0
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fb19 	bl	800b3b0 <memset>
  if(pcdHandle->Instance==USB)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a15      	ldr	r2, [pc, #84]	@ (800add8 <HAL_PCD_MspInit+0x70>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d122      	bne.n	800adce <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ad88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ad8c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ad92:	f107 030c 	add.w	r3, r7, #12
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fb fa5a 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ada2:	f7f5 fdf1 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ada6:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <HAL_PCD_MspInit+0x74>)
 800ada8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adaa:	4a0c      	ldr	r2, [pc, #48]	@ (800addc <HAL_PCD_MspInit+0x74>)
 800adac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800adb0:	6593      	str	r3, [r2, #88]	@ 0x58
 800adb2:	4b0a      	ldr	r3, [pc, #40]	@ (800addc <HAL_PCD_MspInit+0x74>)
 800adb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adba:	60bb      	str	r3, [r7, #8]
 800adbc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800adbe:	2200      	movs	r2, #0
 800adc0:	2100      	movs	r1, #0
 800adc2:	2014      	movs	r0, #20
 800adc4:	f7f7 fe17 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800adc8:	2014      	movs	r0, #20
 800adca:	f7f7 fe2e 	bl	8002a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800adce:	bf00      	nop
 800add0:	3750      	adds	r7, #80	@ 0x50
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	40005c00 	.word	0x40005c00
 800addc:	40021000 	.word	0x40021000

0800ade0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800adf4:	4619      	mov	r1, r3
 800adf6:	4610      	mov	r0, r2
 800adf8:	f7fe fd32 	bl	8009860 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ae16:	78fa      	ldrb	r2, [r7, #3]
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	00db      	lsls	r3, r3, #3
 800ae22:	440b      	add	r3, r1
 800ae24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	78fb      	ldrb	r3, [r7, #3]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	f7fe fd6c 	bl	800990a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ae32:	bf00      	nop
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b082      	sub	sp, #8
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	460b      	mov	r3, r1
 800ae44:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ae4c:	78fa      	ldrb	r2, [r7, #3]
 800ae4e:	6879      	ldr	r1, [r7, #4]
 800ae50:	4613      	mov	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	00db      	lsls	r3, r3, #3
 800ae58:	440b      	add	r3, r1
 800ae5a:	3324      	adds	r3, #36	@ 0x24
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	78fb      	ldrb	r3, [r7, #3]
 800ae60:	4619      	mov	r1, r3
 800ae62:	f7fe fdb5 	bl	80099d0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ae66:	bf00      	nop
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fe fec9 	bl	8009c14 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b084      	sub	sp, #16
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae92:	2301      	movs	r3, #1
 800ae94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	795b      	ldrb	r3, [r3, #5]
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d001      	beq.n	800aea2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae9e:	f7f5 fd73 	bl	8000988 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aea8:	7bfa      	ldrb	r2, [r7, #15]
 800aeaa:	4611      	mov	r1, r2
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fe fe73 	bl	8009b98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe fe1f 	bl	8009afc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800aebe:	bf00      	nop
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
	...

0800aec8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe fe6e 	bl	8009bb8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	7a5b      	ldrb	r3, [r3, #9]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d005      	beq.n	800aef0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aee4:	4b04      	ldr	r3, [pc, #16]	@ (800aef8 <HAL_PCD_SuspendCallback+0x30>)
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	4a03      	ldr	r2, [pc, #12]	@ (800aef8 <HAL_PCD_SuspendCallback+0x30>)
 800aeea:	f043 0306 	orr.w	r3, r3, #6
 800aeee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	e000ed00 	.word	0xe000ed00

0800aefc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	7a5b      	ldrb	r3, [r3, #9]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d007      	beq.n	800af1c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af0c:	4b08      	ldr	r3, [pc, #32]	@ (800af30 <HAL_PCD_ResumeCallback+0x34>)
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	4a07      	ldr	r2, [pc, #28]	@ (800af30 <HAL_PCD_ResumeCallback+0x34>)
 800af12:	f023 0306 	bic.w	r3, r3, #6
 800af16:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af18:	f000 f9f8 	bl	800b30c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af22:	4618      	mov	r0, r3
 800af24:	f7fe fe5e 	bl	8009be4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800af28:	bf00      	nop
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	e000ed00 	.word	0xe000ed00

0800af34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800af3c:	4a2b      	ldr	r2, [pc, #172]	@ (800afec <USBD_LL_Init+0xb8>)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a29      	ldr	r2, [pc, #164]	@ (800afec <USBD_LL_Init+0xb8>)
 800af48:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800af4c:	4b27      	ldr	r3, [pc, #156]	@ (800afec <USBD_LL_Init+0xb8>)
 800af4e:	4a28      	ldr	r2, [pc, #160]	@ (800aff0 <USBD_LL_Init+0xbc>)
 800af50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800af52:	4b26      	ldr	r3, [pc, #152]	@ (800afec <USBD_LL_Init+0xb8>)
 800af54:	2208      	movs	r2, #8
 800af56:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af58:	4b24      	ldr	r3, [pc, #144]	@ (800afec <USBD_LL_Init+0xb8>)
 800af5a:	2202      	movs	r2, #2
 800af5c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af5e:	4b23      	ldr	r3, [pc, #140]	@ (800afec <USBD_LL_Init+0xb8>)
 800af60:	2202      	movs	r2, #2
 800af62:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800af64:	4b21      	ldr	r3, [pc, #132]	@ (800afec <USBD_LL_Init+0xb8>)
 800af66:	2200      	movs	r2, #0
 800af68:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af6a:	4b20      	ldr	r3, [pc, #128]	@ (800afec <USBD_LL_Init+0xb8>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800af70:	4b1e      	ldr	r3, [pc, #120]	@ (800afec <USBD_LL_Init+0xb8>)
 800af72:	2200      	movs	r2, #0
 800af74:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800af76:	4b1d      	ldr	r3, [pc, #116]	@ (800afec <USBD_LL_Init+0xb8>)
 800af78:	2200      	movs	r2, #0
 800af7a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800af7c:	481b      	ldr	r0, [pc, #108]	@ (800afec <USBD_LL_Init+0xb8>)
 800af7e:	f7f8 fe7e 	bl	8003c7e <HAL_PCD_Init>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800af88:	f7f5 fcfe 	bl	8000988 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800af92:	2318      	movs	r3, #24
 800af94:	2200      	movs	r2, #0
 800af96:	2100      	movs	r1, #0
 800af98:	f7fa fb37 	bl	800560a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800afa2:	2358      	movs	r3, #88	@ 0x58
 800afa4:	2200      	movs	r2, #0
 800afa6:	2180      	movs	r1, #128	@ 0x80
 800afa8:	f7fa fb2f 	bl	800560a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800afb2:	23c0      	movs	r3, #192	@ 0xc0
 800afb4:	2200      	movs	r2, #0
 800afb6:	2181      	movs	r1, #129	@ 0x81
 800afb8:	f7fa fb27 	bl	800560a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800afc2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800afc6:	2200      	movs	r2, #0
 800afc8:	2101      	movs	r1, #1
 800afca:	f7fa fb1e 	bl	800560a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800afd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afd8:	2200      	movs	r2, #0
 800afda:	2182      	movs	r1, #130	@ 0x82
 800afdc:	f7fa fb15 	bl	800560a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	200071a4 	.word	0x200071a4
 800aff0:	40005c00 	.word	0x40005c00

0800aff4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7f8 ff05 	bl	8003e1a <HAL_PCD_Start>
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	4618      	mov	r0, r3
 800b018:	f000 f97e 	bl	800b318 <USBD_Get_USB_Status>
 800b01c:	4603      	mov	r3, r0
 800b01e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b020:	7bbb      	ldrb	r3, [r7, #14]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	4608      	mov	r0, r1
 800b034:	4611      	mov	r1, r2
 800b036:	461a      	mov	r2, r3
 800b038:	4603      	mov	r3, r0
 800b03a:	70fb      	strb	r3, [r7, #3]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70bb      	strb	r3, [r7, #2]
 800b040:	4613      	mov	r3, r2
 800b042:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b052:	78bb      	ldrb	r3, [r7, #2]
 800b054:	883a      	ldrh	r2, [r7, #0]
 800b056:	78f9      	ldrb	r1, [r7, #3]
 800b058:	f7f9 f84c 	bl	80040f4 <HAL_PCD_EP_Open>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4618      	mov	r0, r3
 800b064:	f000 f958 	bl	800b318 <USBD_Get_USB_Status>
 800b068:	4603      	mov	r3, r0
 800b06a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b090:	78fa      	ldrb	r2, [r7, #3]
 800b092:	4611      	mov	r1, r2
 800b094:	4618      	mov	r0, r3
 800b096:	f7f9 f88a 	bl	80041ae <HAL_PCD_EP_Close>
 800b09a:	4603      	mov	r3, r0
 800b09c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 f939 	bl	800b318 <USBD_Get_USB_Status>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b0ce:	78fa      	ldrb	r2, [r7, #3]
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7f9 f933 	bl	800433e <HAL_PCD_EP_SetStall>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 f91a 	bl	800b318 <USBD_Get_USB_Status>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b10c:	78fa      	ldrb	r2, [r7, #3]
 800b10e:	4611      	mov	r1, r2
 800b110:	4618      	mov	r0, r3
 800b112:	f7f9 f966 	bl	80043e2 <HAL_PCD_EP_ClrStall>
 800b116:	4603      	mov	r3, r0
 800b118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b11a:	7bfb      	ldrb	r3, [r7, #15]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 f8fb 	bl	800b318 <USBD_Get_USB_Status>
 800b122:	4603      	mov	r3, r0
 800b124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b126:	7bbb      	ldrb	r3, [r7, #14]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	460b      	mov	r3, r1
 800b13a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b142:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	da0b      	bge.n	800b164 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b14c:	78fb      	ldrb	r3, [r7, #3]
 800b14e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b152:	68f9      	ldr	r1, [r7, #12]
 800b154:	4613      	mov	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4413      	add	r3, r2
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	440b      	add	r3, r1
 800b15e:	3312      	adds	r3, #18
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	e00b      	b.n	800b17c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b164:	78fb      	ldrb	r3, [r7, #3]
 800b166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b16a:	68f9      	ldr	r1, [r7, #12]
 800b16c:	4613      	mov	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	00db      	lsls	r3, r3, #3
 800b174:	440b      	add	r3, r1
 800b176:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b17a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3714      	adds	r7, #20
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	460b      	mov	r3, r1
 800b192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b1a2:	78fa      	ldrb	r2, [r7, #3]
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7f8 ff80 	bl	80040ac <HAL_PCD_SetAddress>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f000 f8b0 	bl	800b318 <USBD_Get_USB_Status>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b086      	sub	sp, #24
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	607a      	str	r2, [r7, #4]
 800b1d0:	603b      	str	r3, [r7, #0]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b1e4:	7af9      	ldrb	r1, [r7, #11]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	f7f9 f871 	bl	80042d0 <HAL_PCD_EP_Transmit>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 f88f 	bl	800b318 <USBD_Get_USB_Status>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3718      	adds	r7, #24
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	607a      	str	r2, [r7, #4]
 800b212:	603b      	str	r3, [r7, #0]
 800b214:	460b      	mov	r3, r1
 800b216:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b21c:	2300      	movs	r3, #0
 800b21e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b226:	7af9      	ldrb	r1, [r7, #11]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	f7f9 f807 	bl	800423e <HAL_PCD_EP_Receive>
 800b230:	4603      	mov	r3, r0
 800b232:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b234:	7dfb      	ldrb	r3, [r7, #23]
 800b236:	4618      	mov	r0, r3
 800b238:	f000 f86e 	bl	800b318 <USBD_Get_USB_Status>
 800b23c:	4603      	mov	r3, r0
 800b23e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b240:	7dbb      	ldrb	r3, [r7, #22]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b082      	sub	sp, #8
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	460b      	mov	r3, r1
 800b254:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b25c:	78fa      	ldrb	r2, [r7, #3]
 800b25e:	4611      	mov	r1, r2
 800b260:	4618      	mov	r0, r3
 800b262:	f7f9 f81d 	bl	80042a0 <HAL_PCD_EP_GetRxCount>
 800b266:	4603      	mov	r3, r0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b27c:	78fb      	ldrb	r3, [r7, #3]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d002      	beq.n	800b288 <HAL_PCDEx_LPM_Callback+0x18>
 800b282:	2b01      	cmp	r3, #1
 800b284:	d013      	beq.n	800b2ae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b286:	e023      	b.n	800b2d0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	7a5b      	ldrb	r3, [r3, #9]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d007      	beq.n	800b2a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b290:	f000 f83c 	bl	800b30c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b294:	4b10      	ldr	r3, [pc, #64]	@ (800b2d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	4a0f      	ldr	r2, [pc, #60]	@ (800b2d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b29a:	f023 0306 	bic.w	r3, r3, #6
 800b29e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe fc9c 	bl	8009be4 <USBD_LL_Resume>
    break;
 800b2ac:	e010      	b.n	800b2d0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fe fc7f 	bl	8009bb8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	7a5b      	ldrb	r3, [r3, #9]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d005      	beq.n	800b2ce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2c2:	4b05      	ldr	r3, [pc, #20]	@ (800b2d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	4a04      	ldr	r2, [pc, #16]	@ (800b2d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2c8:	f043 0306 	orr.w	r3, r3, #6
 800b2cc:	6113      	str	r3, [r2, #16]
    break;
 800b2ce:	bf00      	nop
}
 800b2d0:	bf00      	nop
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	e000ed00 	.word	0xe000ed00

0800b2dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b2e4:	4b03      	ldr	r3, [pc, #12]	@ (800b2f4 <USBD_static_malloc+0x18>)
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20007480 	.word	0x20007480

0800b2f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]

}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b310:	f7f5 f848 	bl	80003a4 <SystemClock_Config>
}
 800b314:	bf00      	nop
 800b316:	bd80      	pop	{r7, pc}

0800b318 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	4603      	mov	r3, r0
 800b320:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b326:	79fb      	ldrb	r3, [r7, #7]
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d817      	bhi.n	800b35c <USBD_Get_USB_Status+0x44>
 800b32c:	a201      	add	r2, pc, #4	@ (adr r2, 800b334 <USBD_Get_USB_Status+0x1c>)
 800b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b332:	bf00      	nop
 800b334:	0800b345 	.word	0x0800b345
 800b338:	0800b34b 	.word	0x0800b34b
 800b33c:	0800b351 	.word	0x0800b351
 800b340:	0800b357 	.word	0x0800b357
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	73fb      	strb	r3, [r7, #15]
    break;
 800b348:	e00b      	b.n	800b362 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b34a:	2303      	movs	r3, #3
 800b34c:	73fb      	strb	r3, [r7, #15]
    break;
 800b34e:	e008      	b.n	800b362 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b350:	2301      	movs	r3, #1
 800b352:	73fb      	strb	r3, [r7, #15]
    break;
 800b354:	e005      	b.n	800b362 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b356:	2303      	movs	r3, #3
 800b358:	73fb      	strb	r3, [r7, #15]
    break;
 800b35a:	e002      	b.n	800b362 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b35c:	2303      	movs	r3, #3
 800b35e:	73fb      	strb	r3, [r7, #15]
    break;
 800b360:	bf00      	nop
  }
  return usb_status;
 800b362:	7bfb      	ldrb	r3, [r7, #15]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3714      	adds	r7, #20
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <siprintf>:
 800b370:	b40e      	push	{r1, r2, r3}
 800b372:	b500      	push	{lr}
 800b374:	b09c      	sub	sp, #112	@ 0x70
 800b376:	ab1d      	add	r3, sp, #116	@ 0x74
 800b378:	9002      	str	r0, [sp, #8]
 800b37a:	9006      	str	r0, [sp, #24]
 800b37c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b380:	4809      	ldr	r0, [pc, #36]	@ (800b3a8 <siprintf+0x38>)
 800b382:	9107      	str	r1, [sp, #28]
 800b384:	9104      	str	r1, [sp, #16]
 800b386:	4909      	ldr	r1, [pc, #36]	@ (800b3ac <siprintf+0x3c>)
 800b388:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38c:	9105      	str	r1, [sp, #20]
 800b38e:	6800      	ldr	r0, [r0, #0]
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	a902      	add	r1, sp, #8
 800b394:	f000 f994 	bl	800b6c0 <_svfiprintf_r>
 800b398:	9b02      	ldr	r3, [sp, #8]
 800b39a:	2200      	movs	r2, #0
 800b39c:	701a      	strb	r2, [r3, #0]
 800b39e:	b01c      	add	sp, #112	@ 0x70
 800b3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3a4:	b003      	add	sp, #12
 800b3a6:	4770      	bx	lr
 800b3a8:	20000184 	.word	0x20000184
 800b3ac:	ffff0208 	.word	0xffff0208

0800b3b0 <memset>:
 800b3b0:	4402      	add	r2, r0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d100      	bne.n	800b3ba <memset+0xa>
 800b3b8:	4770      	bx	lr
 800b3ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b3be:	e7f9      	b.n	800b3b4 <memset+0x4>

0800b3c0 <__errno>:
 800b3c0:	4b01      	ldr	r3, [pc, #4]	@ (800b3c8 <__errno+0x8>)
 800b3c2:	6818      	ldr	r0, [r3, #0]
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	20000184 	.word	0x20000184

0800b3cc <__libc_init_array>:
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	4d0d      	ldr	r5, [pc, #52]	@ (800b404 <__libc_init_array+0x38>)
 800b3d0:	4c0d      	ldr	r4, [pc, #52]	@ (800b408 <__libc_init_array+0x3c>)
 800b3d2:	1b64      	subs	r4, r4, r5
 800b3d4:	10a4      	asrs	r4, r4, #2
 800b3d6:	2600      	movs	r6, #0
 800b3d8:	42a6      	cmp	r6, r4
 800b3da:	d109      	bne.n	800b3f0 <__libc_init_array+0x24>
 800b3dc:	4d0b      	ldr	r5, [pc, #44]	@ (800b40c <__libc_init_array+0x40>)
 800b3de:	4c0c      	ldr	r4, [pc, #48]	@ (800b410 <__libc_init_array+0x44>)
 800b3e0:	f000 fc66 	bl	800bcb0 <_init>
 800b3e4:	1b64      	subs	r4, r4, r5
 800b3e6:	10a4      	asrs	r4, r4, #2
 800b3e8:	2600      	movs	r6, #0
 800b3ea:	42a6      	cmp	r6, r4
 800b3ec:	d105      	bne.n	800b3fa <__libc_init_array+0x2e>
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}
 800b3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f4:	4798      	blx	r3
 800b3f6:	3601      	adds	r6, #1
 800b3f8:	e7ee      	b.n	800b3d8 <__libc_init_array+0xc>
 800b3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3fe:	4798      	blx	r3
 800b400:	3601      	adds	r6, #1
 800b402:	e7f2      	b.n	800b3ea <__libc_init_array+0x1e>
 800b404:	0800bd68 	.word	0x0800bd68
 800b408:	0800bd68 	.word	0x0800bd68
 800b40c:	0800bd68 	.word	0x0800bd68
 800b410:	0800bd6c 	.word	0x0800bd6c

0800b414 <__retarget_lock_acquire_recursive>:
 800b414:	4770      	bx	lr

0800b416 <__retarget_lock_release_recursive>:
 800b416:	4770      	bx	lr

0800b418 <_free_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4605      	mov	r5, r0
 800b41c:	2900      	cmp	r1, #0
 800b41e:	d041      	beq.n	800b4a4 <_free_r+0x8c>
 800b420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b424:	1f0c      	subs	r4, r1, #4
 800b426:	2b00      	cmp	r3, #0
 800b428:	bfb8      	it	lt
 800b42a:	18e4      	addlt	r4, r4, r3
 800b42c:	f000 f8e0 	bl	800b5f0 <__malloc_lock>
 800b430:	4a1d      	ldr	r2, [pc, #116]	@ (800b4a8 <_free_r+0x90>)
 800b432:	6813      	ldr	r3, [r2, #0]
 800b434:	b933      	cbnz	r3, 800b444 <_free_r+0x2c>
 800b436:	6063      	str	r3, [r4, #4]
 800b438:	6014      	str	r4, [r2, #0]
 800b43a:	4628      	mov	r0, r5
 800b43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b440:	f000 b8dc 	b.w	800b5fc <__malloc_unlock>
 800b444:	42a3      	cmp	r3, r4
 800b446:	d908      	bls.n	800b45a <_free_r+0x42>
 800b448:	6820      	ldr	r0, [r4, #0]
 800b44a:	1821      	adds	r1, r4, r0
 800b44c:	428b      	cmp	r3, r1
 800b44e:	bf01      	itttt	eq
 800b450:	6819      	ldreq	r1, [r3, #0]
 800b452:	685b      	ldreq	r3, [r3, #4]
 800b454:	1809      	addeq	r1, r1, r0
 800b456:	6021      	streq	r1, [r4, #0]
 800b458:	e7ed      	b.n	800b436 <_free_r+0x1e>
 800b45a:	461a      	mov	r2, r3
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	b10b      	cbz	r3, 800b464 <_free_r+0x4c>
 800b460:	42a3      	cmp	r3, r4
 800b462:	d9fa      	bls.n	800b45a <_free_r+0x42>
 800b464:	6811      	ldr	r1, [r2, #0]
 800b466:	1850      	adds	r0, r2, r1
 800b468:	42a0      	cmp	r0, r4
 800b46a:	d10b      	bne.n	800b484 <_free_r+0x6c>
 800b46c:	6820      	ldr	r0, [r4, #0]
 800b46e:	4401      	add	r1, r0
 800b470:	1850      	adds	r0, r2, r1
 800b472:	4283      	cmp	r3, r0
 800b474:	6011      	str	r1, [r2, #0]
 800b476:	d1e0      	bne.n	800b43a <_free_r+0x22>
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	6053      	str	r3, [r2, #4]
 800b47e:	4408      	add	r0, r1
 800b480:	6010      	str	r0, [r2, #0]
 800b482:	e7da      	b.n	800b43a <_free_r+0x22>
 800b484:	d902      	bls.n	800b48c <_free_r+0x74>
 800b486:	230c      	movs	r3, #12
 800b488:	602b      	str	r3, [r5, #0]
 800b48a:	e7d6      	b.n	800b43a <_free_r+0x22>
 800b48c:	6820      	ldr	r0, [r4, #0]
 800b48e:	1821      	adds	r1, r4, r0
 800b490:	428b      	cmp	r3, r1
 800b492:	bf04      	itt	eq
 800b494:	6819      	ldreq	r1, [r3, #0]
 800b496:	685b      	ldreq	r3, [r3, #4]
 800b498:	6063      	str	r3, [r4, #4]
 800b49a:	bf04      	itt	eq
 800b49c:	1809      	addeq	r1, r1, r0
 800b49e:	6021      	streq	r1, [r4, #0]
 800b4a0:	6054      	str	r4, [r2, #4]
 800b4a2:	e7ca      	b.n	800b43a <_free_r+0x22>
 800b4a4:	bd38      	pop	{r3, r4, r5, pc}
 800b4a6:	bf00      	nop
 800b4a8:	200077e4 	.word	0x200077e4

0800b4ac <sbrk_aligned>:
 800b4ac:	b570      	push	{r4, r5, r6, lr}
 800b4ae:	4e0f      	ldr	r6, [pc, #60]	@ (800b4ec <sbrk_aligned+0x40>)
 800b4b0:	460c      	mov	r4, r1
 800b4b2:	6831      	ldr	r1, [r6, #0]
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	b911      	cbnz	r1, 800b4be <sbrk_aligned+0x12>
 800b4b8:	f000 fba6 	bl	800bc08 <_sbrk_r>
 800b4bc:	6030      	str	r0, [r6, #0]
 800b4be:	4621      	mov	r1, r4
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	f000 fba1 	bl	800bc08 <_sbrk_r>
 800b4c6:	1c43      	adds	r3, r0, #1
 800b4c8:	d103      	bne.n	800b4d2 <sbrk_aligned+0x26>
 800b4ca:	f04f 34ff 	mov.w	r4, #4294967295
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	bd70      	pop	{r4, r5, r6, pc}
 800b4d2:	1cc4      	adds	r4, r0, #3
 800b4d4:	f024 0403 	bic.w	r4, r4, #3
 800b4d8:	42a0      	cmp	r0, r4
 800b4da:	d0f8      	beq.n	800b4ce <sbrk_aligned+0x22>
 800b4dc:	1a21      	subs	r1, r4, r0
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f000 fb92 	bl	800bc08 <_sbrk_r>
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d1f2      	bne.n	800b4ce <sbrk_aligned+0x22>
 800b4e8:	e7ef      	b.n	800b4ca <sbrk_aligned+0x1e>
 800b4ea:	bf00      	nop
 800b4ec:	200077e0 	.word	0x200077e0

0800b4f0 <_malloc_r>:
 800b4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f4:	1ccd      	adds	r5, r1, #3
 800b4f6:	f025 0503 	bic.w	r5, r5, #3
 800b4fa:	3508      	adds	r5, #8
 800b4fc:	2d0c      	cmp	r5, #12
 800b4fe:	bf38      	it	cc
 800b500:	250c      	movcc	r5, #12
 800b502:	2d00      	cmp	r5, #0
 800b504:	4606      	mov	r6, r0
 800b506:	db01      	blt.n	800b50c <_malloc_r+0x1c>
 800b508:	42a9      	cmp	r1, r5
 800b50a:	d904      	bls.n	800b516 <_malloc_r+0x26>
 800b50c:	230c      	movs	r3, #12
 800b50e:	6033      	str	r3, [r6, #0]
 800b510:	2000      	movs	r0, #0
 800b512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5ec <_malloc_r+0xfc>
 800b51a:	f000 f869 	bl	800b5f0 <__malloc_lock>
 800b51e:	f8d8 3000 	ldr.w	r3, [r8]
 800b522:	461c      	mov	r4, r3
 800b524:	bb44      	cbnz	r4, 800b578 <_malloc_r+0x88>
 800b526:	4629      	mov	r1, r5
 800b528:	4630      	mov	r0, r6
 800b52a:	f7ff ffbf 	bl	800b4ac <sbrk_aligned>
 800b52e:	1c43      	adds	r3, r0, #1
 800b530:	4604      	mov	r4, r0
 800b532:	d158      	bne.n	800b5e6 <_malloc_r+0xf6>
 800b534:	f8d8 4000 	ldr.w	r4, [r8]
 800b538:	4627      	mov	r7, r4
 800b53a:	2f00      	cmp	r7, #0
 800b53c:	d143      	bne.n	800b5c6 <_malloc_r+0xd6>
 800b53e:	2c00      	cmp	r4, #0
 800b540:	d04b      	beq.n	800b5da <_malloc_r+0xea>
 800b542:	6823      	ldr	r3, [r4, #0]
 800b544:	4639      	mov	r1, r7
 800b546:	4630      	mov	r0, r6
 800b548:	eb04 0903 	add.w	r9, r4, r3
 800b54c:	f000 fb5c 	bl	800bc08 <_sbrk_r>
 800b550:	4581      	cmp	r9, r0
 800b552:	d142      	bne.n	800b5da <_malloc_r+0xea>
 800b554:	6821      	ldr	r1, [r4, #0]
 800b556:	1a6d      	subs	r5, r5, r1
 800b558:	4629      	mov	r1, r5
 800b55a:	4630      	mov	r0, r6
 800b55c:	f7ff ffa6 	bl	800b4ac <sbrk_aligned>
 800b560:	3001      	adds	r0, #1
 800b562:	d03a      	beq.n	800b5da <_malloc_r+0xea>
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	442b      	add	r3, r5
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	f8d8 3000 	ldr.w	r3, [r8]
 800b56e:	685a      	ldr	r2, [r3, #4]
 800b570:	bb62      	cbnz	r2, 800b5cc <_malloc_r+0xdc>
 800b572:	f8c8 7000 	str.w	r7, [r8]
 800b576:	e00f      	b.n	800b598 <_malloc_r+0xa8>
 800b578:	6822      	ldr	r2, [r4, #0]
 800b57a:	1b52      	subs	r2, r2, r5
 800b57c:	d420      	bmi.n	800b5c0 <_malloc_r+0xd0>
 800b57e:	2a0b      	cmp	r2, #11
 800b580:	d917      	bls.n	800b5b2 <_malloc_r+0xc2>
 800b582:	1961      	adds	r1, r4, r5
 800b584:	42a3      	cmp	r3, r4
 800b586:	6025      	str	r5, [r4, #0]
 800b588:	bf18      	it	ne
 800b58a:	6059      	strne	r1, [r3, #4]
 800b58c:	6863      	ldr	r3, [r4, #4]
 800b58e:	bf08      	it	eq
 800b590:	f8c8 1000 	streq.w	r1, [r8]
 800b594:	5162      	str	r2, [r4, r5]
 800b596:	604b      	str	r3, [r1, #4]
 800b598:	4630      	mov	r0, r6
 800b59a:	f000 f82f 	bl	800b5fc <__malloc_unlock>
 800b59e:	f104 000b 	add.w	r0, r4, #11
 800b5a2:	1d23      	adds	r3, r4, #4
 800b5a4:	f020 0007 	bic.w	r0, r0, #7
 800b5a8:	1ac2      	subs	r2, r0, r3
 800b5aa:	bf1c      	itt	ne
 800b5ac:	1a1b      	subne	r3, r3, r0
 800b5ae:	50a3      	strne	r3, [r4, r2]
 800b5b0:	e7af      	b.n	800b512 <_malloc_r+0x22>
 800b5b2:	6862      	ldr	r2, [r4, #4]
 800b5b4:	42a3      	cmp	r3, r4
 800b5b6:	bf0c      	ite	eq
 800b5b8:	f8c8 2000 	streq.w	r2, [r8]
 800b5bc:	605a      	strne	r2, [r3, #4]
 800b5be:	e7eb      	b.n	800b598 <_malloc_r+0xa8>
 800b5c0:	4623      	mov	r3, r4
 800b5c2:	6864      	ldr	r4, [r4, #4]
 800b5c4:	e7ae      	b.n	800b524 <_malloc_r+0x34>
 800b5c6:	463c      	mov	r4, r7
 800b5c8:	687f      	ldr	r7, [r7, #4]
 800b5ca:	e7b6      	b.n	800b53a <_malloc_r+0x4a>
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	42a3      	cmp	r3, r4
 800b5d2:	d1fb      	bne.n	800b5cc <_malloc_r+0xdc>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	6053      	str	r3, [r2, #4]
 800b5d8:	e7de      	b.n	800b598 <_malloc_r+0xa8>
 800b5da:	230c      	movs	r3, #12
 800b5dc:	6033      	str	r3, [r6, #0]
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f000 f80c 	bl	800b5fc <__malloc_unlock>
 800b5e4:	e794      	b.n	800b510 <_malloc_r+0x20>
 800b5e6:	6005      	str	r5, [r0, #0]
 800b5e8:	e7d6      	b.n	800b598 <_malloc_r+0xa8>
 800b5ea:	bf00      	nop
 800b5ec:	200077e4 	.word	0x200077e4

0800b5f0 <__malloc_lock>:
 800b5f0:	4801      	ldr	r0, [pc, #4]	@ (800b5f8 <__malloc_lock+0x8>)
 800b5f2:	f7ff bf0f 	b.w	800b414 <__retarget_lock_acquire_recursive>
 800b5f6:	bf00      	nop
 800b5f8:	200077dc 	.word	0x200077dc

0800b5fc <__malloc_unlock>:
 800b5fc:	4801      	ldr	r0, [pc, #4]	@ (800b604 <__malloc_unlock+0x8>)
 800b5fe:	f7ff bf0a 	b.w	800b416 <__retarget_lock_release_recursive>
 800b602:	bf00      	nop
 800b604:	200077dc 	.word	0x200077dc

0800b608 <__ssputs_r>:
 800b608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b60c:	688e      	ldr	r6, [r1, #8]
 800b60e:	461f      	mov	r7, r3
 800b610:	42be      	cmp	r6, r7
 800b612:	680b      	ldr	r3, [r1, #0]
 800b614:	4682      	mov	sl, r0
 800b616:	460c      	mov	r4, r1
 800b618:	4690      	mov	r8, r2
 800b61a:	d82d      	bhi.n	800b678 <__ssputs_r+0x70>
 800b61c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b620:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b624:	d026      	beq.n	800b674 <__ssputs_r+0x6c>
 800b626:	6965      	ldr	r5, [r4, #20]
 800b628:	6909      	ldr	r1, [r1, #16]
 800b62a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b62e:	eba3 0901 	sub.w	r9, r3, r1
 800b632:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b636:	1c7b      	adds	r3, r7, #1
 800b638:	444b      	add	r3, r9
 800b63a:	106d      	asrs	r5, r5, #1
 800b63c:	429d      	cmp	r5, r3
 800b63e:	bf38      	it	cc
 800b640:	461d      	movcc	r5, r3
 800b642:	0553      	lsls	r3, r2, #21
 800b644:	d527      	bpl.n	800b696 <__ssputs_r+0x8e>
 800b646:	4629      	mov	r1, r5
 800b648:	f7ff ff52 	bl	800b4f0 <_malloc_r>
 800b64c:	4606      	mov	r6, r0
 800b64e:	b360      	cbz	r0, 800b6aa <__ssputs_r+0xa2>
 800b650:	6921      	ldr	r1, [r4, #16]
 800b652:	464a      	mov	r2, r9
 800b654:	f000 fae8 	bl	800bc28 <memcpy>
 800b658:	89a3      	ldrh	r3, [r4, #12]
 800b65a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b65e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b662:	81a3      	strh	r3, [r4, #12]
 800b664:	6126      	str	r6, [r4, #16]
 800b666:	6165      	str	r5, [r4, #20]
 800b668:	444e      	add	r6, r9
 800b66a:	eba5 0509 	sub.w	r5, r5, r9
 800b66e:	6026      	str	r6, [r4, #0]
 800b670:	60a5      	str	r5, [r4, #8]
 800b672:	463e      	mov	r6, r7
 800b674:	42be      	cmp	r6, r7
 800b676:	d900      	bls.n	800b67a <__ssputs_r+0x72>
 800b678:	463e      	mov	r6, r7
 800b67a:	6820      	ldr	r0, [r4, #0]
 800b67c:	4632      	mov	r2, r6
 800b67e:	4641      	mov	r1, r8
 800b680:	f000 faa8 	bl	800bbd4 <memmove>
 800b684:	68a3      	ldr	r3, [r4, #8]
 800b686:	1b9b      	subs	r3, r3, r6
 800b688:	60a3      	str	r3, [r4, #8]
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	4433      	add	r3, r6
 800b68e:	6023      	str	r3, [r4, #0]
 800b690:	2000      	movs	r0, #0
 800b692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b696:	462a      	mov	r2, r5
 800b698:	f000 fad4 	bl	800bc44 <_realloc_r>
 800b69c:	4606      	mov	r6, r0
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d1e0      	bne.n	800b664 <__ssputs_r+0x5c>
 800b6a2:	6921      	ldr	r1, [r4, #16]
 800b6a4:	4650      	mov	r0, sl
 800b6a6:	f7ff feb7 	bl	800b418 <_free_r>
 800b6aa:	230c      	movs	r3, #12
 800b6ac:	f8ca 3000 	str.w	r3, [sl]
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6b6:	81a3      	strh	r3, [r4, #12]
 800b6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6bc:	e7e9      	b.n	800b692 <__ssputs_r+0x8a>
	...

0800b6c0 <_svfiprintf_r>:
 800b6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	4698      	mov	r8, r3
 800b6c6:	898b      	ldrh	r3, [r1, #12]
 800b6c8:	061b      	lsls	r3, r3, #24
 800b6ca:	b09d      	sub	sp, #116	@ 0x74
 800b6cc:	4607      	mov	r7, r0
 800b6ce:	460d      	mov	r5, r1
 800b6d0:	4614      	mov	r4, r2
 800b6d2:	d510      	bpl.n	800b6f6 <_svfiprintf_r+0x36>
 800b6d4:	690b      	ldr	r3, [r1, #16]
 800b6d6:	b973      	cbnz	r3, 800b6f6 <_svfiprintf_r+0x36>
 800b6d8:	2140      	movs	r1, #64	@ 0x40
 800b6da:	f7ff ff09 	bl	800b4f0 <_malloc_r>
 800b6de:	6028      	str	r0, [r5, #0]
 800b6e0:	6128      	str	r0, [r5, #16]
 800b6e2:	b930      	cbnz	r0, 800b6f2 <_svfiprintf_r+0x32>
 800b6e4:	230c      	movs	r3, #12
 800b6e6:	603b      	str	r3, [r7, #0]
 800b6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ec:	b01d      	add	sp, #116	@ 0x74
 800b6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f2:	2340      	movs	r3, #64	@ 0x40
 800b6f4:	616b      	str	r3, [r5, #20]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6fa:	2320      	movs	r3, #32
 800b6fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b700:	f8cd 800c 	str.w	r8, [sp, #12]
 800b704:	2330      	movs	r3, #48	@ 0x30
 800b706:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b8a4 <_svfiprintf_r+0x1e4>
 800b70a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b70e:	f04f 0901 	mov.w	r9, #1
 800b712:	4623      	mov	r3, r4
 800b714:	469a      	mov	sl, r3
 800b716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71a:	b10a      	cbz	r2, 800b720 <_svfiprintf_r+0x60>
 800b71c:	2a25      	cmp	r2, #37	@ 0x25
 800b71e:	d1f9      	bne.n	800b714 <_svfiprintf_r+0x54>
 800b720:	ebba 0b04 	subs.w	fp, sl, r4
 800b724:	d00b      	beq.n	800b73e <_svfiprintf_r+0x7e>
 800b726:	465b      	mov	r3, fp
 800b728:	4622      	mov	r2, r4
 800b72a:	4629      	mov	r1, r5
 800b72c:	4638      	mov	r0, r7
 800b72e:	f7ff ff6b 	bl	800b608 <__ssputs_r>
 800b732:	3001      	adds	r0, #1
 800b734:	f000 80a7 	beq.w	800b886 <_svfiprintf_r+0x1c6>
 800b738:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b73a:	445a      	add	r2, fp
 800b73c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b73e:	f89a 3000 	ldrb.w	r3, [sl]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 809f 	beq.w	800b886 <_svfiprintf_r+0x1c6>
 800b748:	2300      	movs	r3, #0
 800b74a:	f04f 32ff 	mov.w	r2, #4294967295
 800b74e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b752:	f10a 0a01 	add.w	sl, sl, #1
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	9307      	str	r3, [sp, #28]
 800b75a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b75e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b760:	4654      	mov	r4, sl
 800b762:	2205      	movs	r2, #5
 800b764:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b768:	484e      	ldr	r0, [pc, #312]	@ (800b8a4 <_svfiprintf_r+0x1e4>)
 800b76a:	f7f4 fd59 	bl	8000220 <memchr>
 800b76e:	9a04      	ldr	r2, [sp, #16]
 800b770:	b9d8      	cbnz	r0, 800b7aa <_svfiprintf_r+0xea>
 800b772:	06d0      	lsls	r0, r2, #27
 800b774:	bf44      	itt	mi
 800b776:	2320      	movmi	r3, #32
 800b778:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b77c:	0711      	lsls	r1, r2, #28
 800b77e:	bf44      	itt	mi
 800b780:	232b      	movmi	r3, #43	@ 0x2b
 800b782:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b786:	f89a 3000 	ldrb.w	r3, [sl]
 800b78a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b78c:	d015      	beq.n	800b7ba <_svfiprintf_r+0xfa>
 800b78e:	9a07      	ldr	r2, [sp, #28]
 800b790:	4654      	mov	r4, sl
 800b792:	2000      	movs	r0, #0
 800b794:	f04f 0c0a 	mov.w	ip, #10
 800b798:	4621      	mov	r1, r4
 800b79a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b79e:	3b30      	subs	r3, #48	@ 0x30
 800b7a0:	2b09      	cmp	r3, #9
 800b7a2:	d94b      	bls.n	800b83c <_svfiprintf_r+0x17c>
 800b7a4:	b1b0      	cbz	r0, 800b7d4 <_svfiprintf_r+0x114>
 800b7a6:	9207      	str	r2, [sp, #28]
 800b7a8:	e014      	b.n	800b7d4 <_svfiprintf_r+0x114>
 800b7aa:	eba0 0308 	sub.w	r3, r0, r8
 800b7ae:	fa09 f303 	lsl.w	r3, r9, r3
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	46a2      	mov	sl, r4
 800b7b8:	e7d2      	b.n	800b760 <_svfiprintf_r+0xa0>
 800b7ba:	9b03      	ldr	r3, [sp, #12]
 800b7bc:	1d19      	adds	r1, r3, #4
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	9103      	str	r1, [sp, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	bfbb      	ittet	lt
 800b7c6:	425b      	neglt	r3, r3
 800b7c8:	f042 0202 	orrlt.w	r2, r2, #2
 800b7cc:	9307      	strge	r3, [sp, #28]
 800b7ce:	9307      	strlt	r3, [sp, #28]
 800b7d0:	bfb8      	it	lt
 800b7d2:	9204      	strlt	r2, [sp, #16]
 800b7d4:	7823      	ldrb	r3, [r4, #0]
 800b7d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7d8:	d10a      	bne.n	800b7f0 <_svfiprintf_r+0x130>
 800b7da:	7863      	ldrb	r3, [r4, #1]
 800b7dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7de:	d132      	bne.n	800b846 <_svfiprintf_r+0x186>
 800b7e0:	9b03      	ldr	r3, [sp, #12]
 800b7e2:	1d1a      	adds	r2, r3, #4
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	9203      	str	r2, [sp, #12]
 800b7e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7ec:	3402      	adds	r4, #2
 800b7ee:	9305      	str	r3, [sp, #20]
 800b7f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b8b4 <_svfiprintf_r+0x1f4>
 800b7f4:	7821      	ldrb	r1, [r4, #0]
 800b7f6:	2203      	movs	r2, #3
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	f7f4 fd11 	bl	8000220 <memchr>
 800b7fe:	b138      	cbz	r0, 800b810 <_svfiprintf_r+0x150>
 800b800:	9b04      	ldr	r3, [sp, #16]
 800b802:	eba0 000a 	sub.w	r0, r0, sl
 800b806:	2240      	movs	r2, #64	@ 0x40
 800b808:	4082      	lsls	r2, r0
 800b80a:	4313      	orrs	r3, r2
 800b80c:	3401      	adds	r4, #1
 800b80e:	9304      	str	r3, [sp, #16]
 800b810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b814:	4824      	ldr	r0, [pc, #144]	@ (800b8a8 <_svfiprintf_r+0x1e8>)
 800b816:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b81a:	2206      	movs	r2, #6
 800b81c:	f7f4 fd00 	bl	8000220 <memchr>
 800b820:	2800      	cmp	r0, #0
 800b822:	d036      	beq.n	800b892 <_svfiprintf_r+0x1d2>
 800b824:	4b21      	ldr	r3, [pc, #132]	@ (800b8ac <_svfiprintf_r+0x1ec>)
 800b826:	bb1b      	cbnz	r3, 800b870 <_svfiprintf_r+0x1b0>
 800b828:	9b03      	ldr	r3, [sp, #12]
 800b82a:	3307      	adds	r3, #7
 800b82c:	f023 0307 	bic.w	r3, r3, #7
 800b830:	3308      	adds	r3, #8
 800b832:	9303      	str	r3, [sp, #12]
 800b834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b836:	4433      	add	r3, r6
 800b838:	9309      	str	r3, [sp, #36]	@ 0x24
 800b83a:	e76a      	b.n	800b712 <_svfiprintf_r+0x52>
 800b83c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b840:	460c      	mov	r4, r1
 800b842:	2001      	movs	r0, #1
 800b844:	e7a8      	b.n	800b798 <_svfiprintf_r+0xd8>
 800b846:	2300      	movs	r3, #0
 800b848:	3401      	adds	r4, #1
 800b84a:	9305      	str	r3, [sp, #20]
 800b84c:	4619      	mov	r1, r3
 800b84e:	f04f 0c0a 	mov.w	ip, #10
 800b852:	4620      	mov	r0, r4
 800b854:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b858:	3a30      	subs	r2, #48	@ 0x30
 800b85a:	2a09      	cmp	r2, #9
 800b85c:	d903      	bls.n	800b866 <_svfiprintf_r+0x1a6>
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d0c6      	beq.n	800b7f0 <_svfiprintf_r+0x130>
 800b862:	9105      	str	r1, [sp, #20]
 800b864:	e7c4      	b.n	800b7f0 <_svfiprintf_r+0x130>
 800b866:	fb0c 2101 	mla	r1, ip, r1, r2
 800b86a:	4604      	mov	r4, r0
 800b86c:	2301      	movs	r3, #1
 800b86e:	e7f0      	b.n	800b852 <_svfiprintf_r+0x192>
 800b870:	ab03      	add	r3, sp, #12
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	462a      	mov	r2, r5
 800b876:	4b0e      	ldr	r3, [pc, #56]	@ (800b8b0 <_svfiprintf_r+0x1f0>)
 800b878:	a904      	add	r1, sp, #16
 800b87a:	4638      	mov	r0, r7
 800b87c:	f3af 8000 	nop.w
 800b880:	1c42      	adds	r2, r0, #1
 800b882:	4606      	mov	r6, r0
 800b884:	d1d6      	bne.n	800b834 <_svfiprintf_r+0x174>
 800b886:	89ab      	ldrh	r3, [r5, #12]
 800b888:	065b      	lsls	r3, r3, #25
 800b88a:	f53f af2d 	bmi.w	800b6e8 <_svfiprintf_r+0x28>
 800b88e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b890:	e72c      	b.n	800b6ec <_svfiprintf_r+0x2c>
 800b892:	ab03      	add	r3, sp, #12
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	462a      	mov	r2, r5
 800b898:	4b05      	ldr	r3, [pc, #20]	@ (800b8b0 <_svfiprintf_r+0x1f0>)
 800b89a:	a904      	add	r1, sp, #16
 800b89c:	4638      	mov	r0, r7
 800b89e:	f000 f879 	bl	800b994 <_printf_i>
 800b8a2:	e7ed      	b.n	800b880 <_svfiprintf_r+0x1c0>
 800b8a4:	0800bd2c 	.word	0x0800bd2c
 800b8a8:	0800bd36 	.word	0x0800bd36
 800b8ac:	00000000 	.word	0x00000000
 800b8b0:	0800b609 	.word	0x0800b609
 800b8b4:	0800bd32 	.word	0x0800bd32

0800b8b8 <_printf_common>:
 800b8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8bc:	4616      	mov	r6, r2
 800b8be:	4698      	mov	r8, r3
 800b8c0:	688a      	ldr	r2, [r1, #8]
 800b8c2:	690b      	ldr	r3, [r1, #16]
 800b8c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	bfb8      	it	lt
 800b8cc:	4613      	movlt	r3, r2
 800b8ce:	6033      	str	r3, [r6, #0]
 800b8d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	b10a      	cbz	r2, 800b8de <_printf_common+0x26>
 800b8da:	3301      	adds	r3, #1
 800b8dc:	6033      	str	r3, [r6, #0]
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	0699      	lsls	r1, r3, #26
 800b8e2:	bf42      	ittt	mi
 800b8e4:	6833      	ldrmi	r3, [r6, #0]
 800b8e6:	3302      	addmi	r3, #2
 800b8e8:	6033      	strmi	r3, [r6, #0]
 800b8ea:	6825      	ldr	r5, [r4, #0]
 800b8ec:	f015 0506 	ands.w	r5, r5, #6
 800b8f0:	d106      	bne.n	800b900 <_printf_common+0x48>
 800b8f2:	f104 0a19 	add.w	sl, r4, #25
 800b8f6:	68e3      	ldr	r3, [r4, #12]
 800b8f8:	6832      	ldr	r2, [r6, #0]
 800b8fa:	1a9b      	subs	r3, r3, r2
 800b8fc:	42ab      	cmp	r3, r5
 800b8fe:	dc26      	bgt.n	800b94e <_printf_common+0x96>
 800b900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b904:	6822      	ldr	r2, [r4, #0]
 800b906:	3b00      	subs	r3, #0
 800b908:	bf18      	it	ne
 800b90a:	2301      	movne	r3, #1
 800b90c:	0692      	lsls	r2, r2, #26
 800b90e:	d42b      	bmi.n	800b968 <_printf_common+0xb0>
 800b910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b914:	4641      	mov	r1, r8
 800b916:	4638      	mov	r0, r7
 800b918:	47c8      	blx	r9
 800b91a:	3001      	adds	r0, #1
 800b91c:	d01e      	beq.n	800b95c <_printf_common+0xa4>
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	6922      	ldr	r2, [r4, #16]
 800b922:	f003 0306 	and.w	r3, r3, #6
 800b926:	2b04      	cmp	r3, #4
 800b928:	bf02      	ittt	eq
 800b92a:	68e5      	ldreq	r5, [r4, #12]
 800b92c:	6833      	ldreq	r3, [r6, #0]
 800b92e:	1aed      	subeq	r5, r5, r3
 800b930:	68a3      	ldr	r3, [r4, #8]
 800b932:	bf0c      	ite	eq
 800b934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b938:	2500      	movne	r5, #0
 800b93a:	4293      	cmp	r3, r2
 800b93c:	bfc4      	itt	gt
 800b93e:	1a9b      	subgt	r3, r3, r2
 800b940:	18ed      	addgt	r5, r5, r3
 800b942:	2600      	movs	r6, #0
 800b944:	341a      	adds	r4, #26
 800b946:	42b5      	cmp	r5, r6
 800b948:	d11a      	bne.n	800b980 <_printf_common+0xc8>
 800b94a:	2000      	movs	r0, #0
 800b94c:	e008      	b.n	800b960 <_printf_common+0xa8>
 800b94e:	2301      	movs	r3, #1
 800b950:	4652      	mov	r2, sl
 800b952:	4641      	mov	r1, r8
 800b954:	4638      	mov	r0, r7
 800b956:	47c8      	blx	r9
 800b958:	3001      	adds	r0, #1
 800b95a:	d103      	bne.n	800b964 <_printf_common+0xac>
 800b95c:	f04f 30ff 	mov.w	r0, #4294967295
 800b960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b964:	3501      	adds	r5, #1
 800b966:	e7c6      	b.n	800b8f6 <_printf_common+0x3e>
 800b968:	18e1      	adds	r1, r4, r3
 800b96a:	1c5a      	adds	r2, r3, #1
 800b96c:	2030      	movs	r0, #48	@ 0x30
 800b96e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b972:	4422      	add	r2, r4
 800b974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b97c:	3302      	adds	r3, #2
 800b97e:	e7c7      	b.n	800b910 <_printf_common+0x58>
 800b980:	2301      	movs	r3, #1
 800b982:	4622      	mov	r2, r4
 800b984:	4641      	mov	r1, r8
 800b986:	4638      	mov	r0, r7
 800b988:	47c8      	blx	r9
 800b98a:	3001      	adds	r0, #1
 800b98c:	d0e6      	beq.n	800b95c <_printf_common+0xa4>
 800b98e:	3601      	adds	r6, #1
 800b990:	e7d9      	b.n	800b946 <_printf_common+0x8e>
	...

0800b994 <_printf_i>:
 800b994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b998:	7e0f      	ldrb	r7, [r1, #24]
 800b99a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b99c:	2f78      	cmp	r7, #120	@ 0x78
 800b99e:	4691      	mov	r9, r2
 800b9a0:	4680      	mov	r8, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	469a      	mov	sl, r3
 800b9a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b9aa:	d807      	bhi.n	800b9bc <_printf_i+0x28>
 800b9ac:	2f62      	cmp	r7, #98	@ 0x62
 800b9ae:	d80a      	bhi.n	800b9c6 <_printf_i+0x32>
 800b9b0:	2f00      	cmp	r7, #0
 800b9b2:	f000 80d2 	beq.w	800bb5a <_printf_i+0x1c6>
 800b9b6:	2f58      	cmp	r7, #88	@ 0x58
 800b9b8:	f000 80b9 	beq.w	800bb2e <_printf_i+0x19a>
 800b9bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b9c4:	e03a      	b.n	800ba3c <_printf_i+0xa8>
 800b9c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b9ca:	2b15      	cmp	r3, #21
 800b9cc:	d8f6      	bhi.n	800b9bc <_printf_i+0x28>
 800b9ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b9d4 <_printf_i+0x40>)
 800b9d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9d4:	0800ba2d 	.word	0x0800ba2d
 800b9d8:	0800ba41 	.word	0x0800ba41
 800b9dc:	0800b9bd 	.word	0x0800b9bd
 800b9e0:	0800b9bd 	.word	0x0800b9bd
 800b9e4:	0800b9bd 	.word	0x0800b9bd
 800b9e8:	0800b9bd 	.word	0x0800b9bd
 800b9ec:	0800ba41 	.word	0x0800ba41
 800b9f0:	0800b9bd 	.word	0x0800b9bd
 800b9f4:	0800b9bd 	.word	0x0800b9bd
 800b9f8:	0800b9bd 	.word	0x0800b9bd
 800b9fc:	0800b9bd 	.word	0x0800b9bd
 800ba00:	0800bb41 	.word	0x0800bb41
 800ba04:	0800ba6b 	.word	0x0800ba6b
 800ba08:	0800bafb 	.word	0x0800bafb
 800ba0c:	0800b9bd 	.word	0x0800b9bd
 800ba10:	0800b9bd 	.word	0x0800b9bd
 800ba14:	0800bb63 	.word	0x0800bb63
 800ba18:	0800b9bd 	.word	0x0800b9bd
 800ba1c:	0800ba6b 	.word	0x0800ba6b
 800ba20:	0800b9bd 	.word	0x0800b9bd
 800ba24:	0800b9bd 	.word	0x0800b9bd
 800ba28:	0800bb03 	.word	0x0800bb03
 800ba2c:	6833      	ldr	r3, [r6, #0]
 800ba2e:	1d1a      	adds	r2, r3, #4
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	6032      	str	r2, [r6, #0]
 800ba34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e09d      	b.n	800bb7c <_printf_i+0x1e8>
 800ba40:	6833      	ldr	r3, [r6, #0]
 800ba42:	6820      	ldr	r0, [r4, #0]
 800ba44:	1d19      	adds	r1, r3, #4
 800ba46:	6031      	str	r1, [r6, #0]
 800ba48:	0606      	lsls	r6, r0, #24
 800ba4a:	d501      	bpl.n	800ba50 <_printf_i+0xbc>
 800ba4c:	681d      	ldr	r5, [r3, #0]
 800ba4e:	e003      	b.n	800ba58 <_printf_i+0xc4>
 800ba50:	0645      	lsls	r5, r0, #25
 800ba52:	d5fb      	bpl.n	800ba4c <_printf_i+0xb8>
 800ba54:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba58:	2d00      	cmp	r5, #0
 800ba5a:	da03      	bge.n	800ba64 <_printf_i+0xd0>
 800ba5c:	232d      	movs	r3, #45	@ 0x2d
 800ba5e:	426d      	negs	r5, r5
 800ba60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba64:	4859      	ldr	r0, [pc, #356]	@ (800bbcc <_printf_i+0x238>)
 800ba66:	230a      	movs	r3, #10
 800ba68:	e011      	b.n	800ba8e <_printf_i+0xfa>
 800ba6a:	6821      	ldr	r1, [r4, #0]
 800ba6c:	6833      	ldr	r3, [r6, #0]
 800ba6e:	0608      	lsls	r0, r1, #24
 800ba70:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba74:	d402      	bmi.n	800ba7c <_printf_i+0xe8>
 800ba76:	0649      	lsls	r1, r1, #25
 800ba78:	bf48      	it	mi
 800ba7a:	b2ad      	uxthmi	r5, r5
 800ba7c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba7e:	4853      	ldr	r0, [pc, #332]	@ (800bbcc <_printf_i+0x238>)
 800ba80:	6033      	str	r3, [r6, #0]
 800ba82:	bf14      	ite	ne
 800ba84:	230a      	movne	r3, #10
 800ba86:	2308      	moveq	r3, #8
 800ba88:	2100      	movs	r1, #0
 800ba8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba8e:	6866      	ldr	r6, [r4, #4]
 800ba90:	60a6      	str	r6, [r4, #8]
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	bfa2      	ittt	ge
 800ba96:	6821      	ldrge	r1, [r4, #0]
 800ba98:	f021 0104 	bicge.w	r1, r1, #4
 800ba9c:	6021      	strge	r1, [r4, #0]
 800ba9e:	b90d      	cbnz	r5, 800baa4 <_printf_i+0x110>
 800baa0:	2e00      	cmp	r6, #0
 800baa2:	d04b      	beq.n	800bb3c <_printf_i+0x1a8>
 800baa4:	4616      	mov	r6, r2
 800baa6:	fbb5 f1f3 	udiv	r1, r5, r3
 800baaa:	fb03 5711 	mls	r7, r3, r1, r5
 800baae:	5dc7      	ldrb	r7, [r0, r7]
 800bab0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bab4:	462f      	mov	r7, r5
 800bab6:	42bb      	cmp	r3, r7
 800bab8:	460d      	mov	r5, r1
 800baba:	d9f4      	bls.n	800baa6 <_printf_i+0x112>
 800babc:	2b08      	cmp	r3, #8
 800babe:	d10b      	bne.n	800bad8 <_printf_i+0x144>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	07df      	lsls	r7, r3, #31
 800bac4:	d508      	bpl.n	800bad8 <_printf_i+0x144>
 800bac6:	6923      	ldr	r3, [r4, #16]
 800bac8:	6861      	ldr	r1, [r4, #4]
 800baca:	4299      	cmp	r1, r3
 800bacc:	bfde      	ittt	le
 800bace:	2330      	movle	r3, #48	@ 0x30
 800bad0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bad4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bad8:	1b92      	subs	r2, r2, r6
 800bada:	6122      	str	r2, [r4, #16]
 800badc:	f8cd a000 	str.w	sl, [sp]
 800bae0:	464b      	mov	r3, r9
 800bae2:	aa03      	add	r2, sp, #12
 800bae4:	4621      	mov	r1, r4
 800bae6:	4640      	mov	r0, r8
 800bae8:	f7ff fee6 	bl	800b8b8 <_printf_common>
 800baec:	3001      	adds	r0, #1
 800baee:	d14a      	bne.n	800bb86 <_printf_i+0x1f2>
 800baf0:	f04f 30ff 	mov.w	r0, #4294967295
 800baf4:	b004      	add	sp, #16
 800baf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafa:	6823      	ldr	r3, [r4, #0]
 800bafc:	f043 0320 	orr.w	r3, r3, #32
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	4833      	ldr	r0, [pc, #204]	@ (800bbd0 <_printf_i+0x23c>)
 800bb04:	2778      	movs	r7, #120	@ 0x78
 800bb06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	6831      	ldr	r1, [r6, #0]
 800bb0e:	061f      	lsls	r7, r3, #24
 800bb10:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb14:	d402      	bmi.n	800bb1c <_printf_i+0x188>
 800bb16:	065f      	lsls	r7, r3, #25
 800bb18:	bf48      	it	mi
 800bb1a:	b2ad      	uxthmi	r5, r5
 800bb1c:	6031      	str	r1, [r6, #0]
 800bb1e:	07d9      	lsls	r1, r3, #31
 800bb20:	bf44      	itt	mi
 800bb22:	f043 0320 	orrmi.w	r3, r3, #32
 800bb26:	6023      	strmi	r3, [r4, #0]
 800bb28:	b11d      	cbz	r5, 800bb32 <_printf_i+0x19e>
 800bb2a:	2310      	movs	r3, #16
 800bb2c:	e7ac      	b.n	800ba88 <_printf_i+0xf4>
 800bb2e:	4827      	ldr	r0, [pc, #156]	@ (800bbcc <_printf_i+0x238>)
 800bb30:	e7e9      	b.n	800bb06 <_printf_i+0x172>
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	f023 0320 	bic.w	r3, r3, #32
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	e7f6      	b.n	800bb2a <_printf_i+0x196>
 800bb3c:	4616      	mov	r6, r2
 800bb3e:	e7bd      	b.n	800babc <_printf_i+0x128>
 800bb40:	6833      	ldr	r3, [r6, #0]
 800bb42:	6825      	ldr	r5, [r4, #0]
 800bb44:	6961      	ldr	r1, [r4, #20]
 800bb46:	1d18      	adds	r0, r3, #4
 800bb48:	6030      	str	r0, [r6, #0]
 800bb4a:	062e      	lsls	r6, r5, #24
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	d501      	bpl.n	800bb54 <_printf_i+0x1c0>
 800bb50:	6019      	str	r1, [r3, #0]
 800bb52:	e002      	b.n	800bb5a <_printf_i+0x1c6>
 800bb54:	0668      	lsls	r0, r5, #25
 800bb56:	d5fb      	bpl.n	800bb50 <_printf_i+0x1bc>
 800bb58:	8019      	strh	r1, [r3, #0]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	6123      	str	r3, [r4, #16]
 800bb5e:	4616      	mov	r6, r2
 800bb60:	e7bc      	b.n	800badc <_printf_i+0x148>
 800bb62:	6833      	ldr	r3, [r6, #0]
 800bb64:	1d1a      	adds	r2, r3, #4
 800bb66:	6032      	str	r2, [r6, #0]
 800bb68:	681e      	ldr	r6, [r3, #0]
 800bb6a:	6862      	ldr	r2, [r4, #4]
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	4630      	mov	r0, r6
 800bb70:	f7f4 fb56 	bl	8000220 <memchr>
 800bb74:	b108      	cbz	r0, 800bb7a <_printf_i+0x1e6>
 800bb76:	1b80      	subs	r0, r0, r6
 800bb78:	6060      	str	r0, [r4, #4]
 800bb7a:	6863      	ldr	r3, [r4, #4]
 800bb7c:	6123      	str	r3, [r4, #16]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb84:	e7aa      	b.n	800badc <_printf_i+0x148>
 800bb86:	6923      	ldr	r3, [r4, #16]
 800bb88:	4632      	mov	r2, r6
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	47d0      	blx	sl
 800bb90:	3001      	adds	r0, #1
 800bb92:	d0ad      	beq.n	800baf0 <_printf_i+0x15c>
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	079b      	lsls	r3, r3, #30
 800bb98:	d413      	bmi.n	800bbc2 <_printf_i+0x22e>
 800bb9a:	68e0      	ldr	r0, [r4, #12]
 800bb9c:	9b03      	ldr	r3, [sp, #12]
 800bb9e:	4298      	cmp	r0, r3
 800bba0:	bfb8      	it	lt
 800bba2:	4618      	movlt	r0, r3
 800bba4:	e7a6      	b.n	800baf4 <_printf_i+0x160>
 800bba6:	2301      	movs	r3, #1
 800bba8:	4632      	mov	r2, r6
 800bbaa:	4649      	mov	r1, r9
 800bbac:	4640      	mov	r0, r8
 800bbae:	47d0      	blx	sl
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d09d      	beq.n	800baf0 <_printf_i+0x15c>
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	68e3      	ldr	r3, [r4, #12]
 800bbb8:	9903      	ldr	r1, [sp, #12]
 800bbba:	1a5b      	subs	r3, r3, r1
 800bbbc:	42ab      	cmp	r3, r5
 800bbbe:	dcf2      	bgt.n	800bba6 <_printf_i+0x212>
 800bbc0:	e7eb      	b.n	800bb9a <_printf_i+0x206>
 800bbc2:	2500      	movs	r5, #0
 800bbc4:	f104 0619 	add.w	r6, r4, #25
 800bbc8:	e7f5      	b.n	800bbb6 <_printf_i+0x222>
 800bbca:	bf00      	nop
 800bbcc:	0800bd3d 	.word	0x0800bd3d
 800bbd0:	0800bd4e 	.word	0x0800bd4e

0800bbd4 <memmove>:
 800bbd4:	4288      	cmp	r0, r1
 800bbd6:	b510      	push	{r4, lr}
 800bbd8:	eb01 0402 	add.w	r4, r1, r2
 800bbdc:	d902      	bls.n	800bbe4 <memmove+0x10>
 800bbde:	4284      	cmp	r4, r0
 800bbe0:	4623      	mov	r3, r4
 800bbe2:	d807      	bhi.n	800bbf4 <memmove+0x20>
 800bbe4:	1e43      	subs	r3, r0, #1
 800bbe6:	42a1      	cmp	r1, r4
 800bbe8:	d008      	beq.n	800bbfc <memmove+0x28>
 800bbea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbf2:	e7f8      	b.n	800bbe6 <memmove+0x12>
 800bbf4:	4402      	add	r2, r0
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	428a      	cmp	r2, r1
 800bbfa:	d100      	bne.n	800bbfe <memmove+0x2a>
 800bbfc:	bd10      	pop	{r4, pc}
 800bbfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc06:	e7f7      	b.n	800bbf8 <memmove+0x24>

0800bc08 <_sbrk_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4d06      	ldr	r5, [pc, #24]	@ (800bc24 <_sbrk_r+0x1c>)
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	4604      	mov	r4, r0
 800bc10:	4608      	mov	r0, r1
 800bc12:	602b      	str	r3, [r5, #0]
 800bc14:	f7f5 f8b0 	bl	8000d78 <_sbrk>
 800bc18:	1c43      	adds	r3, r0, #1
 800bc1a:	d102      	bne.n	800bc22 <_sbrk_r+0x1a>
 800bc1c:	682b      	ldr	r3, [r5, #0]
 800bc1e:	b103      	cbz	r3, 800bc22 <_sbrk_r+0x1a>
 800bc20:	6023      	str	r3, [r4, #0]
 800bc22:	bd38      	pop	{r3, r4, r5, pc}
 800bc24:	200077d8 	.word	0x200077d8

0800bc28 <memcpy>:
 800bc28:	440a      	add	r2, r1
 800bc2a:	4291      	cmp	r1, r2
 800bc2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc30:	d100      	bne.n	800bc34 <memcpy+0xc>
 800bc32:	4770      	bx	lr
 800bc34:	b510      	push	{r4, lr}
 800bc36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc3e:	4291      	cmp	r1, r2
 800bc40:	d1f9      	bne.n	800bc36 <memcpy+0xe>
 800bc42:	bd10      	pop	{r4, pc}

0800bc44 <_realloc_r>:
 800bc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc48:	4680      	mov	r8, r0
 800bc4a:	4615      	mov	r5, r2
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	b921      	cbnz	r1, 800bc5a <_realloc_r+0x16>
 800bc50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc54:	4611      	mov	r1, r2
 800bc56:	f7ff bc4b 	b.w	800b4f0 <_malloc_r>
 800bc5a:	b92a      	cbnz	r2, 800bc68 <_realloc_r+0x24>
 800bc5c:	f7ff fbdc 	bl	800b418 <_free_r>
 800bc60:	2400      	movs	r4, #0
 800bc62:	4620      	mov	r0, r4
 800bc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc68:	f000 f81a 	bl	800bca0 <_malloc_usable_size_r>
 800bc6c:	4285      	cmp	r5, r0
 800bc6e:	4606      	mov	r6, r0
 800bc70:	d802      	bhi.n	800bc78 <_realloc_r+0x34>
 800bc72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc76:	d8f4      	bhi.n	800bc62 <_realloc_r+0x1e>
 800bc78:	4629      	mov	r1, r5
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	f7ff fc38 	bl	800b4f0 <_malloc_r>
 800bc80:	4607      	mov	r7, r0
 800bc82:	2800      	cmp	r0, #0
 800bc84:	d0ec      	beq.n	800bc60 <_realloc_r+0x1c>
 800bc86:	42b5      	cmp	r5, r6
 800bc88:	462a      	mov	r2, r5
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	bf28      	it	cs
 800bc8e:	4632      	movcs	r2, r6
 800bc90:	f7ff ffca 	bl	800bc28 <memcpy>
 800bc94:	4621      	mov	r1, r4
 800bc96:	4640      	mov	r0, r8
 800bc98:	f7ff fbbe 	bl	800b418 <_free_r>
 800bc9c:	463c      	mov	r4, r7
 800bc9e:	e7e0      	b.n	800bc62 <_realloc_r+0x1e>

0800bca0 <_malloc_usable_size_r>:
 800bca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca4:	1f18      	subs	r0, r3, #4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bfbc      	itt	lt
 800bcaa:	580b      	ldrlt	r3, [r1, r0]
 800bcac:	18c0      	addlt	r0, r0, r3
 800bcae:	4770      	bx	lr

0800bcb0 <_init>:
 800bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb2:	bf00      	nop
 800bcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb6:	bc08      	pop	{r3}
 800bcb8:	469e      	mov	lr, r3
 800bcba:	4770      	bx	lr

0800bcbc <_fini>:
 800bcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcbe:	bf00      	nop
 800bcc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc2:	bc08      	pop	{r3}
 800bcc4:	469e      	mov	lr, r3
 800bcc6:	4770      	bx	lr
