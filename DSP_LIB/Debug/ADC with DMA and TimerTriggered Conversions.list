
ADC with DMA and TimerTriggered Conversions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800bc40  0800bc40  0000cc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcdc  0800bcdc  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcdc  0800bcdc  0000ccdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bce4  0800bce4  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bce4  0800bce4  0000cce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bce8  0800bce8  0000cce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bcec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048e4  200001d4  0800bec0  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ab8  0800bec0  0000dab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f58f  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a1d  00000000  00000000  0002c793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  000311b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001599  00000000  00000000  00032e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024472  00000000  00000000  000343a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e5d  00000000  00000000  0005881b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1cf7  00000000  00000000  0007a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c36f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d2c  00000000  00000000  0015c3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001640e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bc28 	.word	0x0800bc28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800bc28 	.word	0x0800bc28

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 fd9c 	bl	8000e02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f867 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 fa2f 	bl	8000730 <MX_GPIO_Init>
  MX_DMA_Init();
 80002d2:	f000 f9fb 	bl	80006cc <MX_DMA_Init>
  MX_ADC2_Init();
 80002d6:	f000 f8ad 	bl	8000434 <MX_ADC2_Init>
  MX_TIM6_Init();
 80002da:	f000 f9c1 	bl	8000660 <MX_TIM6_Init>
  MX_DAC3_Init();
 80002de:	f000 f925 	bl	800052c <MX_DAC3_Init>
  MX_OPAMP1_Init();
 80002e2:	f000 f971 	bl	80005c8 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80002e6:	f000 f995 	bl	8000614 <MX_OPAMP3_Init>
  MX_CORDIC_Init();
 80002ea:	f000 f90b 	bl	8000504 <MX_CORDIC_Init>
  MX_FMAC_Init();
 80002ee:	f000 f957 	bl	80005a0 <MX_FMAC_Init>
  MX_USB_Device_Init();
 80002f2:	f00a faef 	bl	800a8d4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

HAL_OPAMP_Start(&hopamp1);
 80002f6:	481e      	ldr	r0, [pc, #120]	@ (8000370 <main+0xb0>)
 80002f8:	f003 fc4c 	bl	8003b94 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp3);
 80002fc:	481d      	ldr	r0, [pc, #116]	@ (8000374 <main+0xb4>)
 80002fe:	f003 fc49 	bl	8003b94 <HAL_OPAMP_Start>

HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 8000302:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000306:	491c      	ldr	r1, [pc, #112]	@ (8000378 <main+0xb8>)
 8000308:	481c      	ldr	r0, [pc, #112]	@ (800037c <main+0xbc>)
 800030a:	f001 fa1d 	bl	8001748 <HAL_ADC_Start_DMA>
//HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, DAC_BUFFER, BUFFER_SIZE, DAC_ALIGN_12B_R);
HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, DAC_BUFFER, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800030e:	2300      	movs	r3, #0
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000316:	4a1a      	ldr	r2, [pc, #104]	@ (8000380 <main+0xc0>)
 8000318:	2100      	movs	r1, #0
 800031a:	481a      	ldr	r0, [pc, #104]	@ (8000384 <main+0xc4>)
 800031c:	f002 fb96 	bl	8002a4c <HAL_DAC_Start_DMA>
HAL_TIM_Base_Start(&htim6);
 8000320:	4819      	ldr	r0, [pc, #100]	@ (8000388 <main+0xc8>)
 8000322:	f006 f999 	bl	8006658 <HAL_TIM_Base_Start>


HAL_Delay(100);
 8000326:	2064      	movs	r0, #100	@ 0x64
 8000328:	f000 fddc 	bl	8000ee4 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		if (WHILE_FLAG==0) {
 800032c:	4b17      	ldr	r3, [pc, #92]	@ (800038c <main+0xcc>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1fb      	bne.n	800032c <main+0x6c>
			for (int i = 0; i < BUFFER_SIZE; ++i) {
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	e00f      	b.n	800035a <main+0x9a>
//			HAL_Delay(1);
			  sprintf(CDC_BUFFER,"Data: %d , %d\r\n",WHILE_BUFFER[i],i);
 800033a:	4a15      	ldr	r2, [pc, #84]	@ (8000390 <main+0xd0>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4913      	ldr	r1, [pc, #76]	@ (8000394 <main+0xd4>)
 8000346:	4814      	ldr	r0, [pc, #80]	@ (8000398 <main+0xd8>)
 8000348:	f00a ffce 	bl	800b2e8 <siprintf>
			  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 800034c:	211e      	movs	r1, #30
 800034e:	4812      	ldr	r0, [pc, #72]	@ (8000398 <main+0xd8>)
 8000350:	f00a fb7e 	bl	800aa50 <CDC_Transmit_FS>
			for (int i = 0; i < BUFFER_SIZE; ++i) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3301      	adds	r3, #1
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000360:	dbeb      	blt.n	800033a <main+0x7a>
			}
			HAL_Delay(10);
 8000362:	200a      	movs	r0, #10
 8000364:	f000 fdbe 	bl	8000ee4 <HAL_Delay>

			  WHILE_FLAG=2;
 8000368:	4b08      	ldr	r3, [pc, #32]	@ (800038c <main+0xcc>)
 800036a:	2202      	movs	r2, #2
 800036c:	601a      	str	r2, [r3, #0]
		if (WHILE_FLAG==0) {
 800036e:	e7dd      	b.n	800032c <main+0x6c>
 8000370:	20000390 	.word	0x20000390
 8000374:	200003cc 	.word	0x200003cc
 8000378:	20000454 	.word	0x20000454
 800037c:	200001f0 	.word	0x200001f0
 8000380:	20001454 	.word	0x20001454
 8000384:	200002e4 	.word	0x200002e4
 8000388:	20000408 	.word	0x20000408
 800038c:	20003794 	.word	0x20003794
 8000390:	20002454 	.word	0x20002454
 8000394:	0800bc40 	.word	0x0800bc40
 8000398:	20003454 	.word	0x20003454

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b094      	sub	sp, #80	@ 0x50
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2238      	movs	r2, #56	@ 0x38
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f00a ffbc 	bl	800b328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003be:	2000      	movs	r0, #0
 80003c0:	f005 f94c 	bl	800565c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003c4:	2321      	movs	r3, #33	@ 0x21
 80003c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d6:	2303      	movs	r3, #3
 80003d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80003da:	2302      	movs	r3, #2
 80003dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003de:	2355      	movs	r3, #85	@ 0x55
 80003e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003e2:	2302      	movs	r3, #2
 80003e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003ea:	2302      	movs	r3, #2
 80003ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	f107 0318 	add.w	r3, r7, #24
 80003f2:	4618      	mov	r0, r3
 80003f4:	f005 f9e6 	bl	80057c4 <HAL_RCC_OscConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003fe:	f000 fa97 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	230f      	movs	r3, #15
 8000404:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000406:	2303      	movs	r3, #3
 8000408:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2104      	movs	r1, #4
 800041a:	4618      	mov	r0, r3
 800041c:	f005 fce4 	bl	8005de8 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000426:	f000 fa83 	bl	8000930 <Error_Handler>
  }
}
 800042a:	bf00      	nop
 800042c:	3750      	adds	r7, #80	@ 0x50
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800043a:	463b      	mov	r3, r7
 800043c:	2220      	movs	r2, #32
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f00a ff71 	bl	800b328 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000446:	4b2c      	ldr	r3, [pc, #176]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 8000448:	4a2c      	ldr	r2, [pc, #176]	@ (80004fc <MX_ADC2_Init+0xc8>)
 800044a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800044c:	4b2a      	ldr	r3, [pc, #168]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 800044e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000452:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000454:	4b28      	ldr	r3, [pc, #160]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800045a:	4b27      	ldr	r3, [pc, #156]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000460:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000466:	4b24      	ldr	r3, [pc, #144]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800046c:	4b22      	ldr	r3, [pc, #136]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 800046e:	2204      	movs	r2, #4
 8000470:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000472:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 8000474:	2200      	movs	r2, #0
 8000476:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000478:	4b1f      	ldr	r3, [pc, #124]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 800047a:	2200      	movs	r2, #0
 800047c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800047e:	4b1e      	ldr	r3, [pc, #120]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 8000480:	2201      	movs	r2, #1
 8000482:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 8000486:	2200      	movs	r2, #0
 8000488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800048c:	4b1a      	ldr	r3, [pc, #104]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 800048e:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000492:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000494:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 8000496:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800049a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800049c:	4b16      	ldr	r3, [pc, #88]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 800049e:	2201      	movs	r2, #1
 80004a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80004aa:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004b2:	4811      	ldr	r0, [pc, #68]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 80004b4:	f000 ffc4 	bl	8001440 <HAL_ADC_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80004be:	f000 fa37 	bl	8000930 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_ADC2_Init+0xcc>)
 80004c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004c6:	2306      	movs	r3, #6
 80004c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ce:	237f      	movs	r3, #127	@ 0x7f
 80004d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004d2:	2304      	movs	r3, #4
 80004d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004da:	463b      	mov	r3, r7
 80004dc:	4619      	mov	r1, r3
 80004de:	4806      	ldr	r0, [pc, #24]	@ (80004f8 <MX_ADC2_Init+0xc4>)
 80004e0:	f001 fc14 	bl	8001d0c <HAL_ADC_ConfigChannel>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80004ea:	f000 fa21 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	3720      	adds	r7, #32
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200001f0 	.word	0x200001f0
 80004fc:	50000100 	.word	0x50000100
 8000500:	cb8c0000 	.word	0xcb8c0000

08000504 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000508:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <MX_CORDIC_Init+0x20>)
 800050a:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <MX_CORDIC_Init+0x24>)
 800050c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	@ (8000524 <MX_CORDIC_Init+0x20>)
 8000510:	f002 f938 	bl	8002784 <HAL_CORDIC_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800051a:	f000 fa09 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200002bc 	.word	0x200002bc
 8000528:	40020c00 	.word	0x40020c00

0800052c <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08c      	sub	sp, #48	@ 0x30
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000532:	463b      	mov	r3, r7
 8000534:	2230      	movs	r2, #48	@ 0x30
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f00a fef5 	bl	800b328 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800053e:	4b16      	ldr	r3, [pc, #88]	@ (8000598 <MX_DAC3_Init+0x6c>)
 8000540:	4a16      	ldr	r2, [pc, #88]	@ (800059c <MX_DAC3_Init+0x70>)
 8000542:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000544:	4814      	ldr	r0, [pc, #80]	@ (8000598 <MX_DAC3_Init+0x6c>)
 8000546:	f002 fa5e 	bl	8002a06 <HAL_DAC_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000550:	f000 f9ee 	bl	8000930 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000554:	2302      	movs	r3, #2
 8000556:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000564:	231e      	movs	r3, #30
 8000566:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000570:	2302      	movs	r3, #2
 8000572:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	4619      	mov	r1, r3
 800057e:	4806      	ldr	r0, [pc, #24]	@ (8000598 <MX_DAC3_Init+0x6c>)
 8000580:	f002 fb56 	bl	8002c30 <HAL_DAC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800058a:	f000 f9d1 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	3730      	adds	r7, #48	@ 0x30
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200002e4 	.word	0x200002e4
 800059c:	50001000 	.word	0x50001000

080005a0 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_FMAC_Init+0x20>)
 80005a6:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <MX_FMAC_Init+0x24>)
 80005a8:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <MX_FMAC_Init+0x20>)
 80005ac:	f002 fff4 	bl	8003598 <HAL_FMAC_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80005b6:	f000 f9bb 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000358 	.word	0x20000358
 80005c4:	40021400 	.word	0x40021400

080005c8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_OPAMP1_Init+0x44>)
 80005ce:	4a10      	ldr	r2, [pc, #64]	@ (8000610 <MX_OPAMP1_Init+0x48>)
 80005d0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_OPAMP1_Init+0x44>)
 80005d4:	2280      	movs	r2, #128	@ 0x80
 80005d6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <MX_OPAMP1_Init+0x44>)
 80005da:	2260      	movs	r2, #96	@ 0x60
 80005dc:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <MX_OPAMP1_Init+0x44>)
 80005e0:	220c      	movs	r2, #12
 80005e2:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_OPAMP1_Init+0x44>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MX_OPAMP1_Init+0x44>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_OPAMP1_Init+0x44>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	@ (800060c <MX_OPAMP1_Init+0x44>)
 80005f8:	f003 f9fc 	bl	80039f4 <HAL_OPAMP_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000602:	f000 f995 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000390 	.word	0x20000390
 8000610:	40010300 	.word	0x40010300

08000614 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000618:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <MX_OPAMP3_Init+0x44>)
 800061a:	4a10      	ldr	r2, [pc, #64]	@ (800065c <MX_OPAMP3_Init+0x48>)
 800061c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MX_OPAMP3_Init+0x44>)
 8000620:	2280      	movs	r2, #128	@ 0x80
 8000622:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <MX_OPAMP3_Init+0x44>)
 8000626:	2260      	movs	r2, #96	@ 0x60
 8000628:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <MX_OPAMP3_Init+0x44>)
 800062c:	2208      	movs	r2, #8
 800062e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000630:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_OPAMP3_Init+0x44>)
 8000632:	2201      	movs	r2, #1
 8000634:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <MX_OPAMP3_Init+0x44>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <MX_OPAMP3_Init+0x44>)
 800063e:	2200      	movs	r2, #0
 8000640:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	@ (8000658 <MX_OPAMP3_Init+0x44>)
 8000644:	f003 f9d6 	bl	80039f4 <HAL_OPAMP_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 800064e:	f000 f96f 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200003cc 	.word	0x200003cc
 800065c:	40010308 	.word	0x40010308

08000660 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_TIM6_Init+0x64>)
 8000672:	4a15      	ldr	r2, [pc, #84]	@ (80006c8 <MX_TIM6_Init+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17-1;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_TIM6_Init+0x64>)
 8000678:	2210      	movs	r2, #16
 800067a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_TIM6_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_TIM6_Init+0x64>)
 8000684:	2204      	movs	r2, #4
 8000686:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_TIM6_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800068e:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <MX_TIM6_Init+0x64>)
 8000690:	f005 ff8a 	bl	80065a8 <HAL_TIM_Base_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800069a:	f000 f949 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800069e:	2320      	movs	r3, #32
 80006a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <MX_TIM6_Init+0x64>)
 80006ac:	f006 f8d2 	bl	8006854 <HAL_TIMEx_MasterConfigSynchronization>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80006b6:	f000 f93b 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000408 	.word	0x20000408
 80006c8:	40001000 	.word	0x40001000

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <MX_DMA_Init+0x60>)
 80006d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006d6:	4a15      	ldr	r2, [pc, #84]	@ (800072c <MX_DMA_Init+0x60>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <MX_DMA_Init+0x60>)
 80006e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_DMA_Init+0x60>)
 80006ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ee:	4a0f      	ldr	r2, [pc, #60]	@ (800072c <MX_DMA_Init+0x60>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <MX_DMA_Init+0x60>)
 80006f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	200b      	movs	r0, #11
 8000708:	f002 f949 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800070c:	200b      	movs	r0, #11
 800070e:	f002 f960 	bl	80029d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200c      	movs	r0, #12
 8000718:	f002 f941 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800071c:	200c      	movs	r0, #12
 800071e:	f002 f958 	bl	80029d2 <HAL_NVIC_EnableIRQ>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_GPIO_Init+0x44>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a0e      	ldr	r2, [pc, #56]	@ (8000774 <MX_GPIO_Init+0x44>)
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_GPIO_Init+0x44>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_GPIO_Init+0x44>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <MX_GPIO_Init+0x44>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_GPIO_Init+0x44>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_ADC_ConvHalfCpltCallback>:
//}


//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 8000778:	b480      	push	{r7}
 800077a:	b087      	sub	sp, #28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	for (size_t i = 0; i < BUFFER_DELAY; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e00a      	b.n	800079c <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		DAC_BUFFER[i] = DELAY_BUFFER_1[i];
 8000786:	4a2c      	ldr	r2, [pc, #176]	@ (8000838 <HAL_ADC_ConvHalfCpltCallback+0xc0>)
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800078e:	492b      	ldr	r1, [pc, #172]	@ (800083c <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < BUFFER_DELAY; i++)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	3301      	adds	r3, #1
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	2b63      	cmp	r3, #99	@ 0x63
 80007a0:	d9f1      	bls.n	8000786 <HAL_ADC_ConvHalfCpltCallback+0xe>
	}

	for (size_t i = BUFFER_DELAY; i < BUFFER_SIZE_HALF; i++)
 80007a2:	2364      	movs	r3, #100	@ 0x64
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	e00b      	b.n	80007c0 <HAL_ADC_ConvHalfCpltCallback+0x48>
	{
		DAC_BUFFER[i] = ADC_BUFFER[i-BUFFER_DELAY];
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	3b64      	subs	r3, #100	@ 0x64
 80007ac:	4a24      	ldr	r2, [pc, #144]	@ (8000840 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 80007ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b2:	4922      	ldr	r1, [pc, #136]	@ (800083c <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = BUFFER_DELAY; i < BUFFER_SIZE_HALF; i++)
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	3301      	adds	r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80007c6:	d3ef      	bcc.n	80007a8 <HAL_ADC_ConvHalfCpltCallback+0x30>
	}

	for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE_HALF+BUFFER_DELAY; i++)
 80007c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	e00e      	b.n	80007ee <HAL_ADC_ConvHalfCpltCallback+0x76>
	{
		DELAY_BUFFER_0[i-BUFFER_SIZE_HALF] = ADC_BUFFER[i-BUFFER_DELAY];
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80007dc:	4918      	ldr	r1, [pc, #96]	@ (8000840 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 80007de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007e2:	4918      	ldr	r1, [pc, #96]	@ (8000844 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 80007e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE_HALF+BUFFER_DELAY; i++)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80007f4:	d3ec      	bcc.n	80007d0 <HAL_ADC_ConvHalfCpltCallback+0x58>
	}


	//抓数据进while
	if (WHILE_FLAG==2) {
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d116      	bne.n	800082c <HAL_ADC_ConvHalfCpltCallback+0xb4>
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	e00a      	b.n	800081a <HAL_ADC_ConvHalfCpltCallback+0xa2>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000804:	4a0e      	ldr	r2, [pc, #56]	@ (8000840 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800080c:	490f      	ldr	r1, [pc, #60]	@ (800084c <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3301      	adds	r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000820:	d3f0      	bcc.n	8000804 <HAL_ADC_ConvHalfCpltCallback+0x8c>
		WHILE_FLAG-=1;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	4a07      	ldr	r2, [pc, #28]	@ (8000848 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 800082a:	6013      	str	r3, [r2, #0]
	}



}
 800082c:	bf00      	nop
 800082e:	371c      	adds	r7, #28
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	20003604 	.word	0x20003604
 800083c:	20001454 	.word	0x20001454
 8000840:	20000454 	.word	0x20000454
 8000844:	20003474 	.word	0x20003474
 8000848:	20003794 	.word	0x20003794
 800084c:	20002454 	.word	0x20002454

08000850 <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8000850:	b480      	push	{r7}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	for (size_t i = 0; i < BUFFER_DELAY; i++)
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	e00c      	b.n	8000878 <HAL_ADC_ConvCpltCallback+0x28>
	{
		DAC_BUFFER[i+BUFFER_SIZE_HALF] = DELAY_BUFFER_0[i];
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000864:	492c      	ldr	r1, [pc, #176]	@ (8000918 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000866:	697a      	ldr	r2, [r7, #20]
 8000868:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800086c:	492b      	ldr	r1, [pc, #172]	@ (800091c <HAL_ADC_ConvCpltCallback+0xcc>)
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < BUFFER_DELAY; i++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	2b63      	cmp	r3, #99	@ 0x63
 800087c:	d9ef      	bls.n	800085e <HAL_ADC_ConvCpltCallback+0xe>
	}

	for (size_t i = BUFFER_DELAY; i < BUFFER_SIZE_HALF; i++)
 800087e:	2364      	movs	r3, #100	@ 0x64
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	e00e      	b.n	80008a2 <HAL_ADC_ConvCpltCallback+0x52>
	{
		DAC_BUFFER[i+BUFFER_SIZE_HALF] = ADC_BUFFER[i+BUFFER_SIZE_HALF-BUFFER_DELAY];
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000890:	4923      	ldr	r1, [pc, #140]	@ (8000920 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000892:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000896:	4921      	ldr	r1, [pc, #132]	@ (800091c <HAL_ADC_ConvCpltCallback+0xcc>)
 8000898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = BUFFER_DELAY; i < BUFFER_SIZE_HALF; i++)
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	3301      	adds	r3, #1
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008a8:	d3ec      	bcc.n	8000884 <HAL_ADC_ConvCpltCallback+0x34>
	}

	for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE_HALF+BUFFER_DELAY; i++)
 80008aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	e00e      	b.n	80008d0 <HAL_ADC_ConvCpltCallback+0x80>
	{
		DELAY_BUFFER_1[i-BUFFER_SIZE_HALF] = ADC_BUFFER[i+BUFFER_SIZE_HALF-BUFFER_DELAY];
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80008be:	4918      	ldr	r1, [pc, #96]	@ (8000920 <HAL_ADC_ConvCpltCallback+0xd0>)
 80008c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008c4:	4917      	ldr	r1, [pc, #92]	@ (8000924 <HAL_ADC_ConvCpltCallback+0xd4>)
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE_HALF+BUFFER_DELAY; i++)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	3301      	adds	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80008d6:	d3ec      	bcc.n	80008b2 <HAL_ADC_ConvCpltCallback+0x62>
	}


	//抓数据进while
	if (WHILE_FLAG==1) {
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <HAL_ADC_ConvCpltCallback+0xd8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d115      	bne.n	800090c <HAL_ADC_ConvCpltCallback+0xbc>
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 80008e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	e00a      	b.n	80008fe <HAL_ADC_ConvCpltCallback+0xae>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <HAL_ADC_ConvCpltCallback+0xd0>)
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f0:	490e      	ldr	r1, [pc, #56]	@ (800092c <HAL_ADC_ConvCpltCallback+0xdc>)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000904:	d3f0      	bcc.n	80008e8 <HAL_ADC_ConvCpltCallback+0x98>
		WHILE_FLAG=0;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
	}
}
 800090c:	bf00      	nop
 800090e:	371c      	adds	r7, #28
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	20003474 	.word	0x20003474
 800091c:	20001454 	.word	0x20001454
 8000920:	20000454 	.word	0x20000454
 8000924:	20003604 	.word	0x20003604
 8000928:	20003794 	.word	0x20003794
 800092c:	20002454 	.word	0x20002454

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <Error_Handler+0x8>

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <HAL_MspInit+0x54>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000946:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <HAL_MspInit+0x54>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6613      	str	r3, [r2, #96]	@ 0x60
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <HAL_MspInit+0x54>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <HAL_MspInit+0x54>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095e:	4a0c      	ldr	r2, [pc, #48]	@ (8000990 <HAL_MspInit+0x54>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000964:	6593      	str	r3, [r2, #88]	@ 0x58
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <HAL_MspInit+0x54>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000972:	2000      	movs	r0, #0
 8000974:	f000 fad8 	bl	8000f28 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000978:	f000 fafe 	bl	8000f78 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800097c:	2000      	movs	r0, #0
 800097e:	f000 fae7 	bl	8000f50 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000982:	f004 ff0f 	bl	80057a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b094      	sub	sp, #80	@ 0x50
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2244      	movs	r2, #68	@ 0x44
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00a fcbf 	bl	800b328 <memset>
  if(hadc->Instance==ADC2)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a2b      	ldr	r2, [pc, #172]	@ (8000a5c <HAL_ADC_MspInit+0xc8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d14e      	bne.n	8000a52 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009ba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009be:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4618      	mov	r0, r3
 80009c6:	f005 fbff 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 80009d0:	f7ff ffae 	bl	8000930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009d4:	4b22      	ldr	r3, [pc, #136]	@ (8000a60 <HAL_ADC_MspInit+0xcc>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d8:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <HAL_ADC_MspInit+0xcc>)
 80009da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <HAL_ADC_MspInit+0xcc>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 80009ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000a68 <HAL_ADC_MspInit+0xd4>)
 80009f0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 80009f4:	2224      	movs	r2, #36	@ 0x24
 80009f6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fe:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a04:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 8000a06:	2280      	movs	r2, #128	@ 0x80
 8000a08:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 8000a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a10:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 8000a14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a18:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a20:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a26:	480f      	ldr	r0, [pc, #60]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 8000a28:	f002 fb44 	bl	80030b4 <HAL_DMA_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 8000a32:	f7ff ff7d 	bl	8000930 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 8000a3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a3c:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <HAL_ADC_MspInit+0xd0>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2012      	movs	r0, #18
 8000a48:	f001 ffa9 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a4c:	2012      	movs	r0, #18
 8000a4e:	f001 ffc0 	bl	80029d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3750      	adds	r7, #80	@ 0x50
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	50000100 	.word	0x50000100
 8000a60:	40021000 	.word	0x40021000
 8000a64:	2000025c 	.word	0x2000025c
 8000a68:	40020008 	.word	0x40020008

08000a6c <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <HAL_CORDIC_MspInit+0x38>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d10b      	bne.n	8000a96 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <HAL_CORDIC_MspInit+0x3c>)
 8000a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a82:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <HAL_CORDIC_MspInit+0x3c>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a8a:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <HAL_CORDIC_MspInit+0x3c>)
 8000a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b38 <HAL_DAC_MspInit+0x8c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d137      	bne.n	8000b2e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8000abe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <HAL_DAC_MspInit+0x90>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <HAL_DAC_MspInit+0x90>)
 8000ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aca:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <HAL_DAC_MspInit+0x90>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel2;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b44 <HAL_DAC_MspInit+0x98>)
 8000ada:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8000adc:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000ade:	2266      	movs	r2, #102	@ 0x66
 8000ae0:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000ae4:	2210      	movs	r2, #16
 8000ae6:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000afa:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000afc:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b02:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000b06:	2220      	movs	r2, #32
 8000b08:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000b0c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000b10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8000b12:	480b      	ldr	r0, [pc, #44]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000b14:	f002 face 	bl	80030b4 <HAL_DMA_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_DAC_MspInit+0x76>
    {
      Error_Handler();
 8000b1e:	f7ff ff07 	bl	8000930 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <HAL_DAC_MspInit+0x94>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	50001000 	.word	0x50001000
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	200002f8 	.word	0x200002f8
 8000b44:	4002001c 	.word	0x4002001c

08000b48 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <HAL_FMAC_MspInit+0x38>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d10b      	bne.n	8000b72 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <HAL_FMAC_MspInit+0x3c>)
 8000b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b5e:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <HAL_FMAC_MspInit+0x3c>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b66:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <HAL_FMAC_MspInit+0x3c>)
 8000b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40021400 	.word	0x40021400
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c24 <HAL_OPAMP_MspInit+0x9c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d119      	bne.n	8000bde <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <HAL_OPAMP_MspInit+0xa0>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	4a1e      	ldr	r2, [pc, #120]	@ (8000c28 <HAL_OPAMP_MspInit+0xa0>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <HAL_OPAMP_MspInit+0xa0>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f002 fd8a 	bl	80036f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8000bdc:	e01d      	b.n	8000c1a <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <HAL_OPAMP_MspInit+0xa4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d118      	bne.n	8000c1a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_OPAMP_MspInit+0xa0>)
 8000bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bec:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <HAL_OPAMP_MspInit+0xa0>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <HAL_OPAMP_MspInit+0xa0>)
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c00:	2302      	movs	r3, #2
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c04:	2303      	movs	r3, #3
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c16:	f002 fd6b 	bl	80036f0 <HAL_GPIO_Init>
}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	@ 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40010300 	.word	0x40010300
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010308 	.word	0x40010308

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <HAL_TIM_Base_MspInit+0x38>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d10b      	bne.n	8000c5a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_TIM_Base_MspInit+0x3c>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c46:	4a09      	ldr	r2, [pc, #36]	@ (8000c6c <HAL_TIM_Base_MspInit+0x3c>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <HAL_TIM_Base_MspInit+0x3c>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40001000 	.word	0x40001000
 8000c6c:	40021000 	.word	0x40021000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <NMI_Handler+0x4>

08000c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <MemManage_Handler+0x4>

08000c88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc6:	f000 f8ef 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <DMA1_Channel1_IRQHandler+0x10>)
 8000cd6:	f002 fb10 	bl	80032fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000025c 	.word	0x2000025c

08000ce4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <DMA1_Channel2_IRQHandler+0x10>)
 8000cea:	f002 fb06 	bl	80032fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200002f8 	.word	0x200002f8

08000cf8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <ADC1_2_IRQHandler+0x10>)
 8000cfe:	f000 fdd7 	bl	80018b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200001f0 	.word	0x200001f0

08000d0c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <USB_LP_IRQHandler+0x10>)
 8000d12:	f003 f860 	bl	8003dd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20004474 	.word	0x20004474

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f00a faf2 	bl	800b338 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20008000 	.word	0x20008000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	20003798 	.word	0x20003798
 8000d88:	20004ab8 	.word	0x20004ab8

08000d8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db0:	480d      	ldr	r0, [pc, #52]	@ (8000de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db4:	f7ff ffea 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dfc <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000dde:	f00a fab1 	bl	800b344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de2:	f7ff fa6d 	bl	80002c0 <main>

08000de6 <LoopForever>:

LoopForever:
    b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   r0, =_estack
 8000de8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000df4:	0800bcec 	.word	0x0800bcec
  ldr r2, =_sbss
 8000df8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000dfc:	20004ab8 	.word	0x20004ab8

08000e00 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <COMP1_2_3_IRQHandler>

08000e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f001 fdbb 	bl	8002988 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f80e 	bl	8000e34 <HAL_InitTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	e001      	b.n	8000e28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e24:	f7ff fd8a 	bl	800093c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e28:	79fb      	ldrb	r3, [r7, #7]

}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_InitTick+0x68>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d022      	beq.n	8000e8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_InitTick+0x6c>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <HAL_InitTick+0x68>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fdc6 	bl	80029ee <HAL_SYSTICK_Config>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10f      	bne.n	8000e88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b0f      	cmp	r3, #15
 8000e6c:	d809      	bhi.n	8000e82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	f04f 30ff 	mov.w	r0, #4294967295
 8000e76:	f001 fd92 	bl	800299e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <HAL_InitTick+0x70>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e007      	b.n	8000e92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e004      	b.n	8000e92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e001      	b.n	8000e92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <HAL_IncTick+0x1c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <HAL_IncTick+0x20>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a03      	ldr	r2, [pc, #12]	@ (8000ec4 <HAL_IncTick+0x1c>)
 8000eb8:	6013      	str	r3, [r2, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	2000379c 	.word	0x2000379c
 8000ec8:	20000008 	.word	0x20000008

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2000379c 	.word	0x2000379c

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d004      	beq.n	8000f08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <HAL_Delay+0x40>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f08:	bf00      	nop
 8000f0a:	f7ff ffdf 	bl	8000ecc <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d8f7      	bhi.n	8000f0a <HAL_Delay+0x26>
  {
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000008 	.word	0x20000008

08000f28 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000f38:	4904      	ldr	r1, [pc, #16]	@ (8000f4c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40010030 	.word	0x40010030

08000f50 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f023 0202 	bic.w	r2, r3, #2
 8000f60:	4904      	ldr	r1, [pc, #16]	@ (8000f74 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40010030 	.word	0x40010030

08000f78 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000f8a:	f7ff ff9f 	bl	8000ecc <HAL_GetTick>
 8000f8e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000f90:	e008      	b.n	8000fa4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000f92:	f7ff ff9b 	bl	8000ecc <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b0a      	cmp	r3, #10
 8000f9e:	d901      	bls.n	8000fa4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e006      	b.n	8000fb2 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f0      	beq.n	8000f92 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010030 	.word	0x40010030

08000fc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3360      	adds	r3, #96	@ 0x60
 800103a:	461a      	mov	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <LL_ADC_SetOffset+0x44>)
 800104a:	4013      	ands	r3, r2
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	4313      	orrs	r3, r2
 8001058:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	03fff000 	.word	0x03fff000

08001070 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3360      	adds	r3, #96	@ 0x60
 800107e:	461a      	mov	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3360      	adds	r3, #96	@ 0x60
 80010ac:	461a      	mov	r2, r3
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b087      	sub	sp, #28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3360      	adds	r3, #96	@ 0x60
 80010e2:	461a      	mov	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3360      	adds	r3, #96	@ 0x60
 8001118:	461a      	mov	r2, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	431a      	orrs	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001132:	bf00      	nop
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	615a      	str	r2, [r3, #20]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800118a:	b480      	push	{r7}
 800118c:	b087      	sub	sp, #28
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3330      	adds	r3, #48	@ 0x30
 800119a:	461a      	mov	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	4413      	add	r3, r2
 80011a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	211f      	movs	r1, #31
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	401a      	ands	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	0e9b      	lsrs	r3, r3, #26
 80011c2:	f003 011f 	and.w	r1, r3, #31
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	431a      	orrs	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3314      	adds	r3, #20
 8001218:	461a      	mov	r2, r3
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	0e5b      	lsrs	r3, r3, #25
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	4413      	add	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	0d1b      	lsrs	r3, r3, #20
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	2107      	movs	r1, #7
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	401a      	ands	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	0d1b      	lsrs	r3, r3, #20
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001252:	bf00      	nop
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0318 	and.w	r3, r3, #24
 8001282:	4908      	ldr	r1, [pc, #32]	@ (80012a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001284:	40d9      	lsrs	r1, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	400b      	ands	r3, r1
 800128a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800128e:	431a      	orrs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	0007ffff 	.word	0x0007ffff

080012a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 031f 	and.w	r3, r3, #31
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80012f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6093      	str	r3, [r2, #8]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001318:	d101      	bne.n	800131e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800133c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001340:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001368:	d101      	bne.n	800136e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800138c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <LL_ADC_IsEnabled+0x18>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <LL_ADC_IsEnabled+0x1a>
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013de:	f043 0204 	orr.w	r2, r3, #4
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b04      	cmp	r3, #4
 8001404:	d101      	bne.n	800140a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b08      	cmp	r3, #8
 800142a:	d101      	bne.n	8001430 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e167      	b.n	800172a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fa93 	bl	8000994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff3f 	bl	8001304 <LL_ADC_IsDeepPowerDownEnabled>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff25 	bl	80012e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff5a 	bl	8001354 <LL_ADC_IsInternalRegulatorEnabled>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d115      	bne.n	80014d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff3e 	bl	800132c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001734 <HAL_ADC_Init+0x2f4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	4aa0      	ldr	r2, [pc, #640]	@ (8001738 <HAL_ADC_Init+0x2f8>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	3301      	adds	r3, #1
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014c4:	e002      	b.n	80014cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff3c 	bl	8001354 <LL_ADC_IsInternalRegulatorEnabled>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10d      	bne.n	80014fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e6:	f043 0210 	orr.w	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f2:	f043 0201 	orr.w	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff75 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 8001508:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 8100 	bne.w	8001718 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 80fc 	bne.w	8001718 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001524:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001528:	f043 0202 	orr.w	r2, r3, #2
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff35 	bl	80013a4 <LL_ADC_IsEnabled>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d111      	bne.n	8001564 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001540:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001544:	f7ff ff2e 	bl	80013a4 <LL_ADC_IsEnabled>
 8001548:	4604      	mov	r4, r0
 800154a:	487c      	ldr	r0, [pc, #496]	@ (800173c <HAL_ADC_Init+0x2fc>)
 800154c:	f7ff ff2a 	bl	80013a4 <LL_ADC_IsEnabled>
 8001550:	4603      	mov	r3, r0
 8001552:	4323      	orrs	r3, r4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4619      	mov	r1, r3
 800155e:	4878      	ldr	r0, [pc, #480]	@ (8001740 <HAL_ADC_Init+0x300>)
 8001560:	f7ff fd2e 	bl	8000fc0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7f5b      	ldrb	r3, [r3, #29]
 8001568:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800156e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001574:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800157a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001582:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800158e:	2b01      	cmp	r3, #1
 8001590:	d106      	bne.n	80015a0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001596:	3b01      	subs	r3, #1
 8001598:	045b      	lsls	r3, r3, #17
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d009      	beq.n	80015bc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	4b60      	ldr	r3, [pc, #384]	@ (8001744 <HAL_ADC_Init+0x304>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	69b9      	ldr	r1, [r7, #24]
 80015cc:	430b      	orrs	r3, r1
 80015ce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff14 	bl	8001418 <LL_ADC_INJ_IsConversionOngoing>
 80015f0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d16d      	bne.n	80016d4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d16a      	bne.n	80016d4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001602:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800160a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800161a:	f023 0302 	bic.w	r3, r3, #2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	69b9      	ldr	r1, [r7, #24]
 8001624:	430b      	orrs	r3, r1
 8001626:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d017      	beq.n	8001660 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800163e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001648:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800164c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6911      	ldr	r1, [r2, #16]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	430b      	orrs	r3, r1
 800165a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800165e:	e013      	b.n	8001688 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691a      	ldr	r2, [r3, #16]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800166e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001680:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001684:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800168e:	2b01      	cmp	r3, #1
 8001690:	d118      	bne.n	80016c4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80016a8:	4311      	orrs	r1, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016b4:	430a      	orrs	r2, r1
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0201 	orr.w	r2, r2, #1
 80016c0:	611a      	str	r2, [r3, #16]
 80016c2:	e007      	b.n	80016d4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10c      	bne.n	80016f6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f023 010f 	bic.w	r1, r3, #15
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	1e5a      	subs	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80016f4:	e007      	b.n	8001706 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 020f 	bic.w	r2, r2, #15
 8001704:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170a:	f023 0303 	bic.w	r3, r3, #3
 800170e:	f043 0201 	orr.w	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001716:	e007      	b.n	8001728 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171c:	f043 0210 	orr.w	r2, r3, #16
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001728:	7ffb      	ldrb	r3, [r7, #31]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	@ 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	bf00      	nop
 8001734:	20000000 	.word	0x20000000
 8001738:	053e2d63 	.word	0x053e2d63
 800173c:	50000100 	.word	0x50000100
 8001740:	50000300 	.word	0x50000300
 8001744:	fff04007 	.word	0xfff04007

08001748 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001754:	4851      	ldr	r0, [pc, #324]	@ (800189c <HAL_ADC_Start_DMA+0x154>)
 8001756:	f7ff fda7 	bl	80012a8 <LL_ADC_GetMultimode>
 800175a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fe46 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	f040 808f 	bne.w	800188c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_ADC_Start_DMA+0x34>
 8001778:	2302      	movs	r3, #2
 800177a:	e08a      	b.n	8001892 <HAL_ADC_Start_DMA+0x14a>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b05      	cmp	r3, #5
 800178e:	d002      	beq.n	8001796 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	2b09      	cmp	r3, #9
 8001794:	d173      	bne.n	800187e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fea8 	bl	80024ec <ADC_Enable>
 800179c:	4603      	mov	r3, r0
 800179e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d166      	bne.n	8001874 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a38      	ldr	r2, [pc, #224]	@ (80018a0 <HAL_ADC_Start_DMA+0x158>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d002      	beq.n	80017ca <HAL_ADC_Start_DMA+0x82>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	e001      	b.n	80017ce <HAL_ADC_Start_DMA+0x86>
 80017ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d002      	beq.n	80017dc <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f8:	f023 0206 	bic.w	r2, r3, #6
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	661a      	str	r2, [r3, #96]	@ 0x60
 8001800:	e002      	b.n	8001808 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180c:	4a25      	ldr	r2, [pc, #148]	@ (80018a4 <HAL_ADC_Start_DMA+0x15c>)
 800180e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001814:	4a24      	ldr	r2, [pc, #144]	@ (80018a8 <HAL_ADC_Start_DMA+0x160>)
 8001816:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800181c:	4a23      	ldr	r2, [pc, #140]	@ (80018ac <HAL_ADC_Start_DMA+0x164>)
 800181e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	221c      	movs	r2, #28
 8001826:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0210 	orr.w	r2, r2, #16
 800183e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3340      	adds	r3, #64	@ 0x40
 800185a:	4619      	mov	r1, r3
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f001 fcd0 	bl	8003204 <HAL_DMA_Start_IT>
 8001864:	4603      	mov	r3, r0
 8001866:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fdac 	bl	80013ca <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001872:	e00d      	b.n	8001890 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800187c:	e008      	b.n	8001890 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800188a:	e001      	b.n	8001890 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800188c:	2302      	movs	r3, #2
 800188e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001890:	7dfb      	ldrb	r3, [r7, #23]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	50000300 	.word	0x50000300
 80018a0:	50000100 	.word	0x50000100
 80018a4:	080025f9 	.word	0x080025f9
 80018a8:	080026d1 	.word	0x080026d1
 80018ac:	080026ed 	.word	0x080026ed

080018b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	@ 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018cc:	4883      	ldr	r0, [pc, #524]	@ (8001adc <HAL_ADC_IRQHandler+0x22c>)
 80018ce:	f7ff fceb 	bl	80012a8 <LL_ADC_GetMultimode>
 80018d2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <HAL_ADC_IRQHandler+0x5e>
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d012      	beq.n	800190e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 ff35 	bl	8002770 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2202      	movs	r2, #2
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <HAL_ADC_IRQHandler+0x72>
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10a      	bne.n	8001938 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 8085 	beq.w	8001a38 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d07f      	beq.n	8001a38 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001948:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fc05 	bl	8001164 <LL_ADC_REG_IsTriggerSourceSWStart>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d064      	beq.n	8001a2a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a5e      	ldr	r2, [pc, #376]	@ (8001ae0 <HAL_ADC_IRQHandler+0x230>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d002      	beq.n	8001970 <HAL_ADC_IRQHandler+0xc0>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	e001      	b.n	8001974 <HAL_ADC_IRQHandler+0xc4>
 8001970:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	4293      	cmp	r3, r2
 800197a:	d008      	beq.n	800198e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d002      	beq.n	800198e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b09      	cmp	r3, #9
 800198c:	d104      	bne.n	8001998 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	623b      	str	r3, [r7, #32]
 8001996:	e00d      	b.n	80019b4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a50      	ldr	r2, [pc, #320]	@ (8001ae0 <HAL_ADC_IRQHandler+0x230>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d002      	beq.n	80019a8 <HAL_ADC_IRQHandler+0xf8>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	e001      	b.n	80019ac <HAL_ADC_IRQHandler+0xfc>
 80019a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019ac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d135      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d12e      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fd0e 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d11a      	bne.n	8001a12 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 020c 	bic.w	r2, r2, #12
 80019ea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d112      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a10:	e00b      	b.n	8001a2a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	f043 0210 	orr.w	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe ff10 	bl	8000850 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	220c      	movs	r2, #12
 8001a36:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_ADC_IRQHandler+0x19c>
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10b      	bne.n	8001a64 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 809e 	beq.w	8001b94 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8098 	beq.w	8001b94 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a74:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fbae 	bl	80011e2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001a86:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fb69 	bl	8001164 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a92:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <HAL_ADC_IRQHandler+0x230>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d002      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x1f4>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	e001      	b.n	8001aa8 <HAL_ADC_IRQHandler+0x1f8>
 8001aa4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d008      	beq.n	8001ac2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b06      	cmp	r3, #6
 8001aba:	d002      	beq.n	8001ac2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d104      	bne.n	8001acc <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	623b      	str	r3, [r7, #32]
 8001aca:	e011      	b.n	8001af0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a03      	ldr	r2, [pc, #12]	@ (8001ae0 <HAL_ADC_IRQHandler+0x230>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d006      	beq.n	8001ae4 <HAL_ADC_IRQHandler+0x234>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	e005      	b.n	8001ae8 <HAL_ADC_IRQHandler+0x238>
 8001adc:	50000300 	.word	0x50000300
 8001ae0:	50000100 	.word	0x50000100
 8001ae4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ae8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d047      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <HAL_ADC_IRQHandler+0x260>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d03f      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d13a      	bne.n	8001b86 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b1a:	2b40      	cmp	r3, #64	@ 0x40
 8001b1c:	d133      	bne.n	8001b86 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d12e      	bne.n	8001b86 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fc73 	bl	8001418 <LL_ADC_INJ_IsConversionOngoing>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d11a      	bne.n	8001b6e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001b46:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d112      	bne.n	8001b86 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b6c:	e00b      	b.n	8001b86 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b72:	f043 0210 	orr.w	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fdca 	bl	8002720 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2260      	movs	r2, #96	@ 0x60
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d011      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x312>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f895 	bl	8001ce4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2280      	movs	r2, #128	@ 0x80
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d012      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x342>
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fdb0 	bl	8002748 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <HAL_ADC_IRQHandler+0x372>
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fda2 	bl	800275c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d036      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x3ea>
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d031      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c42:	e014      	b.n	8001c6e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c4a:	4825      	ldr	r0, [pc, #148]	@ (8001ce0 <HAL_ADC_IRQHandler+0x430>)
 8001c4c:	f7ff fb3a 	bl	80012c4 <LL_ADC_GetMultiDMATransfer>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001c56:	2301      	movs	r3, #1
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5a:	e008      	b.n	8001c6e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10e      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c78:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c84:	f043 0202 	orr.w	r2, r3, #2
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f833 	bl	8001cf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2210      	movs	r2, #16
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d018      	beq.n	8001cd6 <HAL_ADC_IRQHandler+0x426>
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d013      	beq.n	8001cd6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cbe:	f043 0208 	orr.w	r2, r3, #8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cce:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fd2f 	bl	8002734 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	@ 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	50000300 	.word	0x50000300

08001ce4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0b6      	sub	sp, #216	@ 0xd8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x22>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e3c8      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x7b4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fb59 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 83ad 	bne.w	80024a2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	f7ff fa18 	bl	800118a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fb47 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 8001d64:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fb53 	bl	8001418 <LL_ADC_INJ_IsConversionOngoing>
 8001d72:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 81d9 	bne.w	8002132 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 81d4 	bne.w	8002132 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d92:	d10f      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7ff fa32 	bl	8001208 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f9c6 	bl	800113e <LL_ADC_SetSamplingTimeCommonConfig>
 8001db2:	e00e      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f7ff fa21 	bl	8001208 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f9b6 	bl	800113e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d022      	beq.n	8001e3a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6919      	ldr	r1, [r3, #16]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e04:	f7ff f910 	bl	8001028 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6919      	ldr	r1, [r3, #16]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f7ff f95c 	bl	80010d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x124>
 8001e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x126>
 8001e30:	2300      	movs	r3, #0
 8001e32:	461a      	mov	r2, r3
 8001e34:	f7ff f968 	bl	8001108 <LL_ADC_SetOffsetSaturation>
 8001e38:	e17b      	b.n	8002132 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f915 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10a      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x15a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f90a 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	0e9b      	lsrs	r3, r3, #26
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	e01e      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x198>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff f8ff 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e004      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1b0>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	e018      	b.n	8001eee <HAL_ADC_ConfigChannel+0x1e2>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	e004      	b.n	8001eee <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001ee4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d106      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f8ce 	bl	800109c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2101      	movs	r1, #1
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f8b2 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10a      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x220>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f8a7 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	f003 021f 	and.w	r2, r3, #31
 8001f2a:	e01e      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x25e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f89c 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	e004      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x276>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	0e9b      	lsrs	r3, r3, #26
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	e018      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x2a8>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	e004      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001faa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d106      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f86b 	bl	800109c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f84f 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10a      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x2e6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f844 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	0e9b      	lsrs	r3, r3, #26
 8001fec:	f003 021f 	and.w	r2, r3, #31
 8001ff0:	e01e      	b.n	8002030 <HAL_ADC_ConfigChannel+0x324>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f839 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002010:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002018:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002020:	2320      	movs	r3, #32
 8002022:	e004      	b.n	800202e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002024:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002038:	2b00      	cmp	r3, #0
 800203a:	d105      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x33c>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	e016      	b.n	8002076 <HAL_ADC_ConfigChannel+0x36a>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800205a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800205c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002060:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e004      	b.n	8002076 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800206c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002076:	429a      	cmp	r2, r3
 8002078:	d106      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2200      	movs	r2, #0
 8002080:	2102      	movs	r1, #2
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f80a 	bl	800109c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2103      	movs	r1, #3
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe ffee 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10a      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x3a8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2103      	movs	r1, #3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe ffe3 	bl	8001070 <LL_ADC_GetOffsetChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	0e9b      	lsrs	r3, r3, #26
 80020ae:	f003 021f 	and.w	r2, r3, #31
 80020b2:	e017      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x3d8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2103      	movs	r1, #3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ffd8 	bl	8001070 <LL_ADC_GetOffsetChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80020cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020ce:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80020d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80020d6:	2320      	movs	r3, #32
 80020d8:	e003      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80020da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x3f0>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0e9b      	lsrs	r3, r3, #26
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	e011      	b.n	8002120 <HAL_ADC_ConfigChannel+0x414>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800210a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800210c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800210e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002114:	2320      	movs	r3, #32
 8002116:	e003      	b.n	8002120 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002120:	429a      	cmp	r2, r3
 8002122:	d106      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2200      	movs	r2, #0
 800212a:	2103      	movs	r1, #3
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe ffb5 	bl	800109c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff f934 	bl	80013a4 <LL_ADC_IsEnabled>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 8140 	bne.w	80023c4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	461a      	mov	r2, r3
 8002152:	f7ff f885 	bl	8001260 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	4a8f      	ldr	r2, [pc, #572]	@ (8002398 <HAL_ADC_ConfigChannel+0x68c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	f040 8131 	bne.w	80023c4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10b      	bne.n	800218a <HAL_ADC_ConfigChannel+0x47e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	0e9b      	lsrs	r3, r3, #26
 8002178:	3301      	adds	r3, #1
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2b09      	cmp	r3, #9
 8002180:	bf94      	ite	ls
 8002182:	2301      	movls	r3, #1
 8002184:	2300      	movhi	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	e019      	b.n	80021be <HAL_ADC_ConfigChannel+0x4b2>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002198:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800219a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800219c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e003      	b.n	80021ae <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80021a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2b09      	cmp	r3, #9
 80021b6:	bf94      	ite	ls
 80021b8:	2301      	movls	r3, #1
 80021ba:	2300      	movhi	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d079      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d107      	bne.n	80021de <HAL_ADC_ConfigChannel+0x4d2>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0e9b      	lsrs	r3, r3, #26
 80021d4:	3301      	adds	r3, #1
 80021d6:	069b      	lsls	r3, r3, #26
 80021d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021dc:	e015      	b.n	800220a <HAL_ADC_ConfigChannel+0x4fe>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80021ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80021f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80021f6:	2320      	movs	r3, #32
 80021f8:	e003      	b.n	8002202 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80021fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	069b      	lsls	r3, r3, #26
 8002206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_ADC_ConfigChannel+0x51e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	e017      	b.n	800225a <HAL_ADC_ConfigChannel+0x54e>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800223a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800223c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002242:	2320      	movs	r3, #32
 8002244:	e003      	b.n	800224e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	3301      	adds	r3, #1
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	ea42 0103 	orr.w	r1, r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10a      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x574>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	0e9b      	lsrs	r3, r3, #26
 8002270:	3301      	adds	r3, #1
 8002272:	f003 021f 	and.w	r2, r3, #31
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	051b      	lsls	r3, r3, #20
 800227e:	e018      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x5a6>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800228e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800229c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	f003 021f 	and.w	r2, r3, #31
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b2:	430b      	orrs	r3, r1
 80022b4:	e081      	b.n	80023ba <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x5c6>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	3301      	adds	r3, #1
 80022ca:	069b      	lsls	r3, r3, #26
 80022cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d0:	e015      	b.n	80022fe <HAL_ADC_ConfigChannel+0x5f2>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80022e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80022e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80022ea:	2320      	movs	r3, #32
 80022ec:	e003      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80022ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	069b      	lsls	r3, r3, #26
 80022fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_ADC_ConfigChannel+0x612>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	e017      	b.n	800234e <HAL_ADC_ConfigChannel+0x642>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	61fb      	str	r3, [r7, #28]
  return result;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e003      	b.n	8002342 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	ea42 0103 	orr.w	r1, r2, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <HAL_ADC_ConfigChannel+0x66e>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	3301      	adds	r3, #1
 8002366:	f003 021f 	and.w	r2, r3, #31
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	3b1e      	subs	r3, #30
 8002372:	051b      	lsls	r3, r3, #20
 8002374:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002378:	e01e      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x6ac>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	613b      	str	r3, [r7, #16]
  return result;
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e006      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x698>
 8002396:	bf00      	nop
 8002398:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f003 021f 	and.w	r2, r3, #31
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	051b      	lsls	r3, r3, #20
 80023b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe ff22 	bl	8001208 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b3f      	ldr	r3, [pc, #252]	@ (80024c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d071      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d0:	483e      	ldr	r0, [pc, #248]	@ (80024cc <HAL_ADC_ConfigChannel+0x7c0>)
 80023d2:	f7fe fe1b 	bl	800100c <LL_ADC_GetCommonPathInternalCh>
 80023d6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a3c      	ldr	r2, [pc, #240]	@ (80024d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_ConfigChannel+0x6e2>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a3a      	ldr	r2, [pc, #232]	@ (80024d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d127      	bne.n	800243e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d121      	bne.n	800243e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002402:	d157      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002408:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800240c:	4619      	mov	r1, r3
 800240e:	482f      	ldr	r0, [pc, #188]	@ (80024cc <HAL_ADC_ConfigChannel+0x7c0>)
 8002410:	f7fe fde9 	bl	8000fe6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002414:	4b30      	ldr	r3, [pc, #192]	@ (80024d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	4a30      	ldr	r2, [pc, #192]	@ (80024dc <HAL_ADC_ConfigChannel+0x7d0>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800242e:	e002      	b.n	8002436 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3b01      	subs	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f9      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800243c:	e03a      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a27      	ldr	r2, [pc, #156]	@ (80024e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d113      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800244c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a22      	ldr	r2, [pc, #136]	@ (80024e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02a      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800245e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002466:	4619      	mov	r1, r3
 8002468:	4818      	ldr	r0, [pc, #96]	@ (80024cc <HAL_ADC_ConfigChannel+0x7c0>)
 800246a:	f7fe fdbc 	bl	8000fe6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800246e:	e021      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d11c      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800247a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800247e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d116      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a16      	ldr	r2, [pc, #88]	@ (80024e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d011      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002490:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002494:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002498:	4619      	mov	r1, r3
 800249a:	480c      	ldr	r0, [pc, #48]	@ (80024cc <HAL_ADC_ConfigChannel+0x7c0>)
 800249c:	f7fe fda3 	bl	8000fe6 <LL_ADC_SetCommonPathInternalCh>
 80024a0:	e008      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80024bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	37d8      	adds	r7, #216	@ 0xd8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	80080000 	.word	0x80080000
 80024cc:	50000300 	.word	0x50000300
 80024d0:	c3210000 	.word	0xc3210000
 80024d4:	90c00010 	.word	0x90c00010
 80024d8:	20000000 	.word	0x20000000
 80024dc:	053e2d63 	.word	0x053e2d63
 80024e0:	c7520000 	.word	0xc7520000
 80024e4:	50000100 	.word	0x50000100
 80024e8:	cb840000 	.word	0xcb840000

080024ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe ff51 	bl	80013a4 <LL_ADC_IsEnabled>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d169      	bne.n	80025dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	4b36      	ldr	r3, [pc, #216]	@ (80025e8 <ADC_Enable+0xfc>)
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e055      	b.n	80025de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe ff20 	bl	800137c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800253c:	482b      	ldr	r0, [pc, #172]	@ (80025ec <ADC_Enable+0x100>)
 800253e:	f7fe fd65 	bl	800100c <LL_ADC_GetCommonPathInternalCh>
 8002542:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002544:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800254c:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <ADC_Enable+0x104>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	4a28      	ldr	r2, [pc, #160]	@ (80025f4 <ADC_Enable+0x108>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002566:	e002      	b.n	800256e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3b01      	subs	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f9      	bne.n	8002568 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002574:	f7fe fcaa 	bl	8000ecc <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800257a:	e028      	b.n	80025ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe ff0f 	bl	80013a4 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d104      	bne.n	8002596 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fef3 	bl	800137c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002596:	f7fe fc99 	bl	8000ecc <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d914      	bls.n	80025ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d00d      	beq.n	80025ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b6:	f043 0210 	orr.w	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e007      	b.n	80025de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d1cf      	bne.n	800257c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	8000003f 	.word	0x8000003f
 80025ec:	50000300 	.word	0x50000300
 80025f0:	20000000 	.word	0x20000000
 80025f4:	053e2d63 	.word	0x053e2d63

080025f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002604:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800260e:	2b00      	cmp	r3, #0
 8002610:	d14b      	bne.n	80026aa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002616:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d021      	beq.n	8002670 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fd97 	bl	8001164 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d032      	beq.n	80026a2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d12b      	bne.n	80026a2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11f      	bne.n	80026a2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800266e:	e018      	b.n	80026a2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d111      	bne.n	80026a2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002682:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f7fe f8d4 	bl	8000850 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026a8:	e00e      	b.n	80026c8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7ff fb1e 	bl	8001cf8 <HAL_ADC_ErrorCallback>
}
 80026bc:	e004      	b.n	80026c8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7fe f84a 	bl	8000778 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270a:	f043 0204 	orr.w	r2, r3, #4
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff faf0 	bl	8001cf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e023      	b.n	80027de <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f95e 	bl	8000a6c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <__NVIC_SetPriorityGrouping+0x44>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281a:	4a04      	ldr	r2, [pc, #16]	@ (800282c <__NVIC_SetPriorityGrouping+0x44>)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	60d3      	str	r3, [r2, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002834:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <__NVIC_GetPriorityGrouping+0x18>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0307 	and.w	r3, r3, #7
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	2b00      	cmp	r3, #0
 800285c:	db0b      	blt.n	8002876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	4907      	ldr	r1, [pc, #28]	@ (8002884 <__NVIC_EnableIRQ+0x38>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2001      	movs	r0, #1
 800286e:	fa00 f202 	lsl.w	r2, r0, r2
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	@ (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	@ (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	@ 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002954:	d301      	bcc.n	800295a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002956:	2301      	movs	r3, #1
 8002958:	e00f      	b.n	800297a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295a:	4a0a      	ldr	r2, [pc, #40]	@ (8002984 <SysTick_Config+0x40>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002962:	210f      	movs	r1, #15
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f7ff ff8e 	bl	8002888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <SysTick_Config+0x40>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002972:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <SysTick_Config+0x40>)
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff29 	bl	80027e8 <__NVIC_SetPriorityGrouping>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029ac:	f7ff ff40 	bl	8002830 <__NVIC_GetPriorityGrouping>
 80029b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ff90 	bl	80028dc <NVIC_EncodePriority>
 80029bc:	4602      	mov	r2, r0
 80029be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff5f 	bl	8002888 <__NVIC_SetPriority>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff33 	bl	800284c <__NVIC_EnableIRQ>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffa4 	bl	8002944 <SysTick_Config>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e014      	b.n	8002a42 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	791b      	ldrb	r3, [r3, #4]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7fe f83f 	bl	8000aac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b2      	b.n	8002bca <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	795b      	ldrb	r3, [r3, #5]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_DAC_Start_DMA+0x24>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0ac      	b.n	8002bca <HAL_DAC_Start_DMA+0x17e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d129      	bne.n	8002ad6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4a53      	ldr	r2, [pc, #332]	@ (8002bd4 <HAL_DAC_Start_DMA+0x188>)
 8002a88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4a52      	ldr	r2, [pc, #328]	@ (8002bd8 <HAL_DAC_Start_DMA+0x18c>)
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4a51      	ldr	r2, [pc, #324]	@ (8002bdc <HAL_DAC_Start_DMA+0x190>)
 8002a98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002aa8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_DAC_Start_DMA+0x6c>
 8002ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d005      	beq.n	8002ac2 <HAL_DAC_Start_DMA+0x76>
 8002ab6:	e009      	b.n	8002acc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3308      	adds	r3, #8
 8002abe:	61bb      	str	r3, [r7, #24]
        break;
 8002ac0:	e033      	b.n	8002b2a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	61bb      	str	r3, [r7, #24]
        break;
 8002aca:	e02e      	b.n	8002b2a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	61bb      	str	r3, [r7, #24]
        break;
 8002ad4:	e029      	b.n	8002b2a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4a41      	ldr	r2, [pc, #260]	@ (8002be0 <HAL_DAC_Start_DMA+0x194>)
 8002adc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4a40      	ldr	r2, [pc, #256]	@ (8002be4 <HAL_DAC_Start_DMA+0x198>)
 8002ae4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a3f      	ldr	r2, [pc, #252]	@ (8002be8 <HAL_DAC_Start_DMA+0x19c>)
 8002aec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002afc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_DAC_Start_DMA+0xc0>
 8002b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d005      	beq.n	8002b16 <HAL_DAC_Start_DMA+0xca>
 8002b0a:	e009      	b.n	8002b20 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3314      	adds	r3, #20
 8002b12:	61bb      	str	r3, [r7, #24]
        break;
 8002b14:	e009      	b.n	8002b2a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3318      	adds	r3, #24
 8002b1c:	61bb      	str	r3, [r7, #24]
        break;
 8002b1e:	e004      	b.n	8002b2a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	331c      	adds	r3, #28
 8002b26:	61bb      	str	r3, [r7, #24]
        break;
 8002b28:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6898      	ldr	r0, [r3, #8]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	f000 fb5b 	bl	8003204 <HAL_DMA_Start_IT>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	77fb      	strb	r3, [r7, #31]
 8002b52:	e010      	b.n	8002b76 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002b62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68d8      	ldr	r0, [r3, #12]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	f000 fb49 	bl	8003204 <HAL_DMA_Start_IT>
 8002b72:	4603      	mov	r3, r0
 8002b74:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002b7c:	7ffb      	ldrb	r3, [r7, #31]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11c      	bne.n	8002bbc <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2201      	movs	r2, #1
 8002b90:	409a      	lsls	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9a:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <HAL_DAC_Start_DMA+0x1a0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	4a13      	ldr	r2, [pc, #76]	@ (8002bf0 <HAL_DAC_Start_DMA+0x1a4>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	3301      	adds	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002bac:	e002      	b.n	8002bb4 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <HAL_DAC_Start_DMA+0x162>
 8002bba:	e005      	b.n	8002bc8 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	08002fa1 	.word	0x08002fa1
 8002bd8:	08002fc3 	.word	0x08002fc3
 8002bdc:	08002fdf 	.word	0x08002fdf
 8002be0:	08003049 	.word	0x08003049
 8002be4:	0800306b 	.word	0x0800306b
 8002be8:	08003087 	.word	0x08003087
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	053e2d63 	.word	0x053e2d63

08002bf4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	@ 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_DAC_ConfigChannel+0x1c>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e19e      	b.n	8002f8e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	795b      	ldrb	r3, [r3, #5]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_DAC_ConfigChannel+0x2c>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e198      	b.n	8002f8e <HAL_DAC_ConfigChannel+0x35e>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2202      	movs	r2, #2
 8002c66:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d17a      	bne.n	8002d66 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c70:	f7fe f92c 	bl	8000ecc <HAL_GetTick>
 8002c74:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d13d      	bne.n	8002cf8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c7c:	e018      	b.n	8002cb0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c7e:	f7fe f925 	bl	8000ecc <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d911      	bls.n	8002cb0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f043 0208 	orr.w	r2, r3, #8
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e16e      	b.n	8002f8e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1df      	bne.n	8002c7e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cc8:	e020      	b.n	8002d0c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cca:	f7fe f8ff 	bl	8000ecc <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d90f      	bls.n	8002cf8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da0a      	bge.n	8002cf8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f043 0208 	orr.w	r2, r3, #8
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e14a      	b.n	8002f8e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	dbe3      	blt.n	8002cca <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	ea02 0103 	and.w	r1, r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	21ff      	movs	r1, #255	@ 0xff
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	ea02 0103 	and.w	r1, r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d11d      	bne.n	8002daa <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	221f      	movs	r2, #31
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d86:	4013      	ands	r3, r2
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2207      	movs	r2, #7
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d102      	bne.n	8002dd4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	e00f      	b.n	8002df4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d102      	bne.n	8002de2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	623b      	str	r3, [r7, #32]
 8002de0:	e008      	b.n	8002df4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002dea:	2301      	movs	r3, #1
 8002dec:	623b      	str	r3, [r7, #32]
 8002dee:	e001      	b.n	8002df4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	6a3a      	ldr	r2, [r7, #32]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e16:	4013      	ands	r3, r2
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	791b      	ldrb	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d102      	bne.n	8002e28 <HAL_DAC_ConfigChannel+0x1f8>
 8002e22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e26:	e000      	b.n	8002e2a <HAL_DAC_ConfigChannel+0x1fa>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e42:	4013      	ands	r3, r2
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	795b      	ldrb	r3, [r3, #5]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_DAC_ConfigChannel+0x224>
 8002e4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e52:	e000      	b.n	8002e56 <HAL_DAC_ConfigChannel+0x226>
 8002e54:	2300      	movs	r3, #0
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d114      	bne.n	8002e96 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002e6c:	f003 f95a 	bl	8006124 <HAL_RCC_GetHCLKFreq>
 8002e70:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4a48      	ldr	r2, [pc, #288]	@ (8002f98 <HAL_DAC_ConfigChannel+0x368>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d904      	bls.n	8002e84 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e82:	e00f      	b.n	8002ea4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4a45      	ldr	r2, [pc, #276]	@ (8002f9c <HAL_DAC_ConfigChannel+0x36c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d90a      	bls.n	8002ea2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e94:	e006      	b.n	8002ea4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea0:	e000      	b.n	8002ea4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002ea2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	400a      	ands	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6819      	ldr	r1, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	22c0      	movs	r2, #192	@ 0xc0
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	400a      	ands	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	ea02 0103 	and.w	r1, r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002f8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3728      	adds	r7, #40	@ 0x28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	09896800 	.word	0x09896800
 8002f9c:	04c4b400 	.word	0x04c4b400

08002fa0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff fe20 	bl	8002bf4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	711a      	strb	r2, [r3, #4]
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff fe19 	bl	8002c08 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fe0f 	bl	8002c1c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	711a      	strb	r2, [r3, #4]
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003054:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7ff ffd8 	bl	800300c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	711a      	strb	r2, [r3, #4]
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003076:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7ff ffd1 	bl	8003020 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003092:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f043 0204 	orr.w	r2, r3, #4
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff ffc7 	bl	8003034 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	711a      	strb	r2, [r3, #4]
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e08d      	b.n	80031e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b47      	ldr	r3, [pc, #284]	@ (80031ec <HAL_DMA_Init+0x138>)
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d80f      	bhi.n	80030f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b45      	ldr	r3, [pc, #276]	@ (80031f0 <HAL_DMA_Init+0x13c>)
 80030da:	4413      	add	r3, r2
 80030dc:	4a45      	ldr	r2, [pc, #276]	@ (80031f4 <HAL_DMA_Init+0x140>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	009a      	lsls	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a42      	ldr	r2, [pc, #264]	@ (80031f8 <HAL_DMA_Init+0x144>)
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80030f0:	e00e      	b.n	8003110 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b40      	ldr	r3, [pc, #256]	@ (80031fc <HAL_DMA_Init+0x148>)
 80030fa:	4413      	add	r3, r2
 80030fc:	4a3d      	ldr	r2, [pc, #244]	@ (80031f4 <HAL_DMA_Init+0x140>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	009a      	lsls	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a3c      	ldr	r2, [pc, #240]	@ (8003200 <HAL_DMA_Init+0x14c>)
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f9b6 	bl	80034d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003170:	d102      	bne.n	8003178 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800318c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d010      	beq.n	80031b8 <HAL_DMA_Init+0x104>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b04      	cmp	r3, #4
 800319c:	d80c      	bhi.n	80031b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f9d6 	bl	8003550 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	e008      	b.n	80031ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40020407 	.word	0x40020407
 80031f0:	bffdfff8 	.word	0xbffdfff8
 80031f4:	cccccccd 	.word	0xcccccccd
 80031f8:	40020000 	.word	0x40020000
 80031fc:	bffdfbf8 	.word	0xbffdfbf8
 8003200:	40020400 	.word	0x40020400

08003204 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_DMA_Start_IT+0x20>
 8003220:	2302      	movs	r3, #2
 8003222:	e066      	b.n	80032f2 <HAL_DMA_Start_IT+0xee>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d155      	bne.n	80032e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f8fb 	bl	8003458 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 020e 	orr.w	r2, r2, #14
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e00f      	b.n	800329c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 020a 	orr.w	r2, r2, #10
 800329a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e005      	b.n	80032f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
 80032ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2204      	movs	r2, #4
 800331c:	409a      	lsls	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d026      	beq.n	8003374 <HAL_DMA_IRQHandler+0x7a>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d021      	beq.n	8003374 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d107      	bne.n	800334e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0204 	bic.w	r2, r2, #4
 800334c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2104      	movs	r1, #4
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	2b00      	cmp	r3, #0
 8003368:	d071      	beq.n	800344e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003372:	e06c      	b.n	800344e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2202      	movs	r2, #2
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02e      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d029      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 020a 	bic.w	r2, r2, #10
 80033ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	2102      	movs	r1, #2
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d038      	beq.n	800344e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033e4:	e033      	b.n	800344e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2208      	movs	r2, #8
 80033f0:	409a      	lsls	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d02a      	beq.n	8003450 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d025      	beq.n	8003450 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 020e 	bic.w	r2, r2, #14
 8003412:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f202 	lsl.w	r2, r1, r2
 8003426:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800344e:	bf00      	nop
 8003450:	bf00      	nop
}
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800346e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003480:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f003 021f 	and.w	r2, r3, #31
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	2101      	movs	r1, #1
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d108      	bne.n	80034b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034b6:	e007      	b.n	80034c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	60da      	str	r2, [r3, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b16      	ldr	r3, [pc, #88]	@ (800353c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d802      	bhi.n	80034ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80034e8:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e001      	b.n	80034f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80034ee:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034f0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3b08      	subs	r3, #8
 80034fe:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	461a      	mov	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a0b      	ldr	r2, [pc, #44]	@ (800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800351e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2201      	movs	r2, #1
 8003528:	409a      	lsls	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40020407 	.word	0x40020407
 8003540:	40020800 	.word	0x40020800
 8003544:	40020820 	.word	0x40020820
 8003548:	cccccccd 	.word	0xcccccccd
 800354c:	40020880 	.word	0x40020880

08003550 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	461a      	mov	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a08      	ldr	r2, [pc, #32]	@ (8003594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003572:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3b01      	subs	r3, #1
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	1000823f 	.word	0x1000823f
 8003594:	40020940 	.word	0x40020940

08003598 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e033      	b.n	8003612 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fac2 	bl	8000b48 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f854 	bl	8003678 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f822 	bl	800361a <FMAC_Reset>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10c      	bne.n	80035f6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e0:	f043 0210 	orr.w	r2, r3, #16
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	22a0      	movs	r2, #160	@ 0xa0
 80035ec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e008      	b.n	8003608 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003622:	f7fd fc53 	bl	8000ecc <HAL_GetTick>
 8003626:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003636:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8003638:	e00f      	b.n	800365a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800363a:	f7fd fc47 	bl	8000ecc <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003648:	d907      	bls.n	800365a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e00a      	b.n	8003670 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e8      	bne.n	800363a <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f807 	bl	8003694 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f81b 	bl	80036c2 <FMAC_ResetOutputStateAndDataPointers>
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036fe:	e15a      	b.n	80039b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2101      	movs	r1, #1
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 814c 	beq.w	80039b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d005      	beq.n	8003730 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800372c:	2b02      	cmp	r3, #2
 800372e:	d130      	bne.n	8003792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003766:	2201      	movs	r2, #1
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0201 	and.w	r2, r3, #1
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b03      	cmp	r3, #3
 800379c:	d017      	beq.n	80037ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	2203      	movs	r2, #3
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d123      	bne.n	8003822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	08da      	lsrs	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3208      	adds	r2, #8
 80037e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	220f      	movs	r2, #15
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	08da      	lsrs	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3208      	adds	r2, #8
 800381c:	6939      	ldr	r1, [r7, #16]
 800381e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0203 	and.w	r2, r3, #3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80a6 	beq.w	80039b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003864:	4b5b      	ldr	r3, [pc, #364]	@ (80039d4 <HAL_GPIO_Init+0x2e4>)
 8003866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003868:	4a5a      	ldr	r2, [pc, #360]	@ (80039d4 <HAL_GPIO_Init+0x2e4>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003870:	4b58      	ldr	r3, [pc, #352]	@ (80039d4 <HAL_GPIO_Init+0x2e4>)
 8003872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387c:	4a56      	ldr	r2, [pc, #344]	@ (80039d8 <HAL_GPIO_Init+0x2e8>)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038a6:	d01f      	beq.n	80038e8 <HAL_GPIO_Init+0x1f8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a4c      	ldr	r2, [pc, #304]	@ (80039dc <HAL_GPIO_Init+0x2ec>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d019      	beq.n	80038e4 <HAL_GPIO_Init+0x1f4>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a4b      	ldr	r2, [pc, #300]	@ (80039e0 <HAL_GPIO_Init+0x2f0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_GPIO_Init+0x1f0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a4a      	ldr	r2, [pc, #296]	@ (80039e4 <HAL_GPIO_Init+0x2f4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00d      	beq.n	80038dc <HAL_GPIO_Init+0x1ec>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a49      	ldr	r2, [pc, #292]	@ (80039e8 <HAL_GPIO_Init+0x2f8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <HAL_GPIO_Init+0x1e8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a48      	ldr	r2, [pc, #288]	@ (80039ec <HAL_GPIO_Init+0x2fc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_GPIO_Init+0x1e4>
 80038d0:	2305      	movs	r3, #5
 80038d2:	e00a      	b.n	80038ea <HAL_GPIO_Init+0x1fa>
 80038d4:	2306      	movs	r3, #6
 80038d6:	e008      	b.n	80038ea <HAL_GPIO_Init+0x1fa>
 80038d8:	2304      	movs	r3, #4
 80038da:	e006      	b.n	80038ea <HAL_GPIO_Init+0x1fa>
 80038dc:	2303      	movs	r3, #3
 80038de:	e004      	b.n	80038ea <HAL_GPIO_Init+0x1fa>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e002      	b.n	80038ea <HAL_GPIO_Init+0x1fa>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_GPIO_Init+0x1fa>
 80038e8:	2300      	movs	r3, #0
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	f002 0203 	and.w	r2, r2, #3
 80038f0:	0092      	lsls	r2, r2, #2
 80038f2:	4093      	lsls	r3, r2
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038fa:	4937      	ldr	r1, [pc, #220]	@ (80039d8 <HAL_GPIO_Init+0x2e8>)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	3302      	adds	r3, #2
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003908:	4b39      	ldr	r3, [pc, #228]	@ (80039f0 <HAL_GPIO_Init+0x300>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43db      	mvns	r3, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800392c:	4a30      	ldr	r2, [pc, #192]	@ (80039f0 <HAL_GPIO_Init+0x300>)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003932:	4b2f      	ldr	r3, [pc, #188]	@ (80039f0 <HAL_GPIO_Init+0x300>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003956:	4a26      	ldr	r2, [pc, #152]	@ (80039f0 <HAL_GPIO_Init+0x300>)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800395c:	4b24      	ldr	r3, [pc, #144]	@ (80039f0 <HAL_GPIO_Init+0x300>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	43db      	mvns	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003980:	4a1b      	ldr	r2, [pc, #108]	@ (80039f0 <HAL_GPIO_Init+0x300>)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003986:	4b1a      	ldr	r3, [pc, #104]	@ (80039f0 <HAL_GPIO_Init+0x300>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	43db      	mvns	r3, r3
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4013      	ands	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039aa:	4a11      	ldr	r2, [pc, #68]	@ (80039f0 <HAL_GPIO_Init+0x300>)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	3301      	adds	r3, #1
 80039b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f47f ae9d 	bne.w	8003700 <HAL_GPIO_Init+0x10>
  }
}
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40010000 	.word	0x40010000
 80039dc:	48000400 	.word	0x48000400
 80039e0:	48000800 	.word	0x48000800
 80039e4:	48000c00 	.word	0x48000c00
 80039e8:	48001000 	.word	0x48001000
 80039ec:	48001400 	.word	0x48001400
 80039f0:	40010400 	.word	0x40010400

080039f4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e0bb      	b.n	8003b82 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d101      	bne.n	8003a1a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0b3      	b.n	8003b82 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d101      	bne.n	8003a2a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0ab      	b.n	8003b82 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2a:	4b58      	ldr	r3, [pc, #352]	@ (8003b8c <HAL_OPAMP_Init+0x198>)
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	4a57      	ldr	r2, [pc, #348]	@ (8003b8c <HAL_OPAMP_Init+0x198>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a36:	4b55      	ldr	r3, [pc, #340]	@ (8003b8c <HAL_OPAMP_Init+0x198>)
 8003a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd f896 	bl	8000b88 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b40      	cmp	r3, #64	@ 0x40
 8003a62:	d003      	beq.n	8003a6c <HAL_OPAMP_Init+0x78>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b60      	cmp	r3, #96	@ 0x60
 8003a6a:	d133      	bne.n	8003ad4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 0110 	bic.w	r1, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b41      	ldr	r3, [pc, #260]	@ (8003b90 <HAL_OPAMP_Init+0x19c>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6851      	ldr	r1, [r2, #4]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6892      	ldr	r2, [r2, #8]
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6912      	ldr	r2, [r2, #16]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	7d09      	ldrb	r1, [r1, #20]
 8003aa0:	2901      	cmp	r1, #1
 8003aa2:	d102      	bne.n	8003aaa <HAL_OPAMP_Init+0xb6>
 8003aa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003aa8:	e000      	b.n	8003aac <HAL_OPAMP_Init+0xb8>
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4311      	orrs	r1, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ab2:	4311      	orrs	r1, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003ab8:	4311      	orrs	r1, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003abe:	04d2      	lsls	r2, r2, #19
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ac6:	0612      	lsls	r2, r2, #24
 8003ac8:	4311      	orrs	r1, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e035      	b.n	8003b40 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0110 	bic.w	r1, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <HAL_OPAMP_Init+0x19c>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6851      	ldr	r1, [r2, #4]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6892      	ldr	r2, [r2, #8]
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68d2      	ldr	r2, [r2, #12]
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6912      	ldr	r2, [r2, #16]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	7d09      	ldrb	r1, [r1, #20]
 8003b0e:	2901      	cmp	r1, #1
 8003b10:	d102      	bne.n	8003b18 <HAL_OPAMP_Init+0x124>
 8003b12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b16:	e000      	b.n	8003b1a <HAL_OPAMP_Init+0x126>
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b2c:	04d2      	lsls	r2, r2, #19
 8003b2e:	4311      	orrs	r1, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b34:	0612      	lsls	r2, r2, #24
 8003b36:	4311      	orrs	r1, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	db10      	blt.n	8003b6c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d103      	bne.n	8003b80 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	e0003e11 	.word	0xe0003e11

08003b94 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e01d      	b.n	8003be8 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b05      	cmp	r3, #5
 8003bb6:	d102      	bne.n	8003bbe <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	e014      	b.n	8003be8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10c      	bne.n	8003be4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003be2:	e001      	b.n	8003be8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0c0      	b.n	8003d8a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f007 f85f 	bl	800ace0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2203      	movs	r2, #3
 8003c26:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f002 fea9 	bl	8006986 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
 8003c38:	e03e      	b.n	8003cb8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c3a:	7bfa      	ldrb	r2, [r7, #15]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	440b      	add	r3, r1
 8003c48:	3311      	adds	r3, #17
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	440b      	add	r3, r1
 8003c70:	3313      	adds	r3, #19
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	440b      	add	r3, r1
 8003c84:	3320      	adds	r3, #32
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	440b      	add	r3, r1
 8003c98:	3324      	adds	r3, #36	@ 0x24
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	791b      	ldrb	r3, [r3, #4]
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d3bb      	bcc.n	8003c3a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
 8003cc6:	e044      	b.n	8003d52 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	440b      	add	r3, r1
 8003cec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cf4:	7bfa      	ldrb	r2, [r7, #15]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	440b      	add	r3, r1
 8003d02:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003d06:	2200      	movs	r2, #0
 8003d08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	440b      	add	r3, r1
 8003d18:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d20:	7bfa      	ldrb	r2, [r7, #15]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	440b      	add	r3, r1
 8003d2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d36:	7bfa      	ldrb	r2, [r7, #15]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	440b      	add	r3, r1
 8003d44:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	791b      	ldrb	r3, [r3, #4]
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d3b5      	bcc.n	8003cc8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d68:	f002 fe28 	bl	80069bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	7a9b      	ldrb	r3, [r3, #10]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d102      	bne.n	8003d88 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f001 fc40 	bl	8005608 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_PCD_Start+0x16>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e012      	b.n	8003dce <HAL_PCD_Start+0x3c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f002 fdcf 	bl	8006958 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f005 f88f 	bl	8008ee2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f005 f894 	bl	8008f10 <USB_ReadInterrupts>
 8003de8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fb04 	bl	8004402 <PCD_EP_ISR_Handler>

    return;
 8003dfa:	e110      	b.n	800401e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d013      	beq.n	8003e2e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e18:	b292      	uxth	r2, r2
 8003e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f006 ffef 	bl	800ae02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003e24:	2100      	movs	r1, #0
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8fc 	bl	8004024 <HAL_PCD_SetAddress>

    return;
 8003e2c:	e0f7      	b.n	800401e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00c      	beq.n	8003e52 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e4a:	b292      	uxth	r2, r2
 8003e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003e50:	e0e5      	b.n	800401e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003e74:	e0d3      	b.n	800401e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d034      	beq.n	8003eea <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0204 	bic.w	r2, r2, #4
 8003e92:	b292      	uxth	r2, r2
 8003e94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0208 	bic.w	r2, r2, #8
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d107      	bne.n	8003eca <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f007 f98f 	bl	800b1e8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f006 ffd2 	bl	800ae74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ee2:	b292      	uxth	r2, r2
 8003ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003ee8:	e099      	b.n	800401e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d027      	beq.n	8003f44 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0208 	orr.w	r2, r2, #8
 8003f06:	b292      	uxth	r2, r2
 8003f08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f1e:	b292      	uxth	r2, r2
 8003f20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0204 	orr.w	r2, r2, #4
 8003f36:	b292      	uxth	r2, r2
 8003f38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f006 ff7f 	bl	800ae40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003f42:	e06c      	b.n	800401e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d040      	beq.n	8003fd0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f60:	b292      	uxth	r2, r2
 8003f62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d12b      	bne.n	8003fc8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0204 	orr.w	r2, r2, #4
 8003f82:	b292      	uxth	r2, r2
 8003f84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f007 f911 	bl	800b1e8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003fc6:	e02a      	b.n	800401e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f006 ff39 	bl	800ae40 <HAL_PCD_SuspendCallback>
    return;
 8003fce:	e026      	b.n	800401e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00f      	beq.n	8003ffa <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003fec:	b292      	uxth	r2, r2
 8003fee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f006 fef7 	bl	800ade6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003ff8:	e011      	b.n	800401e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00c      	beq.n	800401e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800400c:	b29a      	uxth	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004016:	b292      	uxth	r2, r2
 8004018:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800401c:	bf00      	nop
  }
}
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_PCD_SetAddress+0x1a>
 800403a:	2302      	movs	r3, #2
 800403c:	e012      	b.n	8004064 <HAL_PCD_SetAddress+0x40>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f004 ff30 	bl	8008eba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	70fb      	strb	r3, [r7, #3]
 800407e:	460b      	mov	r3, r1
 8004080:	803b      	strh	r3, [r7, #0]
 8004082:	4613      	mov	r3, r2
 8004084:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800408a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800408e:	2b00      	cmp	r3, #0
 8004090:	da0e      	bge.n	80040b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 0207 	and.w	r2, r3, #7
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	3310      	adds	r3, #16
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	705a      	strb	r2, [r3, #1]
 80040ae:	e00e      	b.n	80040ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	f003 0207 	and.w	r2, r3, #7
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040da:	883a      	ldrh	r2, [r7, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	78ba      	ldrb	r2, [r7, #2]
 80040e4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040e6:	78bb      	ldrb	r3, [r7, #2]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d102      	bne.n	80040f2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_PCD_EP_Open+0x94>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e00e      	b.n	800411e <HAL_PCD_EP_Open+0xb2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68f9      	ldr	r1, [r7, #12]
 800410e:	4618      	mov	r0, r3
 8004110:	f002 fc72 	bl	80069f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800411c:	7afb      	ldrb	r3, [r7, #11]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004136:	2b00      	cmp	r3, #0
 8004138:	da0e      	bge.n	8004158 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	f003 0207 	and.w	r2, r3, #7
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	3310      	adds	r3, #16
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	705a      	strb	r2, [r3, #1]
 8004156:	e00e      	b.n	8004176 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 0207 	and.w	r2, r3, #7
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_PCD_EP_Close+0x6a>
 800418c:	2302      	movs	r3, #2
 800418e:	e00e      	b.n	80041ae <HAL_PCD_EP_Close+0x88>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68f9      	ldr	r1, [r7, #12]
 800419e:	4618      	mov	r0, r3
 80041a0:	f002 ffee 	bl	8007180 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	460b      	mov	r3, r1
 80041c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041c6:	7afb      	ldrb	r3, [r7, #11]
 80041c8:	f003 0207 	and.w	r2, r3, #7
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2200      	movs	r2, #0
 80041ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2200      	movs	r2, #0
 80041f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f6:	7afb      	ldrb	r3, [r7, #11]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6979      	ldr	r1, [r7, #20]
 8004208:	4618      	mov	r0, r3
 800420a:	f003 f9a6 	bl	800755a <USB_EPStartXfer>

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	f003 0207 	and.w	r2, r3, #7
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	440b      	add	r3, r1
 8004236:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	460b      	mov	r3, r1
 8004256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	f003 0207 	and.w	r2, r3, #7
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	3310      	adds	r3, #16
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2200      	movs	r2, #0
 800428c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2201      	movs	r2, #1
 8004292:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004294:	7afb      	ldrb	r3, [r7, #11]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	b2da      	uxtb	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6979      	ldr	r1, [r7, #20]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f003 f957 	bl	800755a <USB_EPStartXfer>

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	7912      	ldrb	r2, [r2, #4]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e03e      	b.n	8004352 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	da0e      	bge.n	80042fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	f003 0207 	and.w	r2, r3, #7
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	3310      	adds	r3, #16
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	4413      	add	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	705a      	strb	r2, [r3, #1]
 80042f8:	e00c      	b.n	8004314 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_PCD_EP_SetStall+0x7e>
 8004330:	2302      	movs	r3, #2
 8004332:	e00e      	b.n	8004352 <HAL_PCD_EP_SetStall+0x9c>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68f9      	ldr	r1, [r7, #12]
 8004342:	4618      	mov	r0, r3
 8004344:	f004 fcba 	bl	8008cbc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	7912      	ldrb	r2, [r2, #4]
 8004370:	4293      	cmp	r3, r2
 8004372:	d901      	bls.n	8004378 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e040      	b.n	80043fa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800437c:	2b00      	cmp	r3, #0
 800437e:	da0e      	bge.n	800439e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 0207 	and.w	r2, r3, #7
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	3310      	adds	r3, #16
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	705a      	strb	r2, [r3, #1]
 800439c:	e00e      	b.n	80043bc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	f003 0207 	and.w	r2, r3, #7
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4413      	add	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_PCD_EP_ClrStall+0x82>
 80043d8:	2302      	movs	r3, #2
 80043da:	e00e      	b.n	80043fa <HAL_PCD_EP_ClrStall+0xa0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68f9      	ldr	r1, [r7, #12]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f004 fcb7 	bl	8008d5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b096      	sub	sp, #88	@ 0x58
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800440a:	e3ad      	b.n	8004b68 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004414:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004418:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004426:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 816f 	bne.w	800470e <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d14c      	bne.n	80044d6 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444c:	81fb      	strh	r3, [r7, #14]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	89fb      	ldrh	r3, [r7, #14]
 8004454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800445c:	b29b      	uxth	r3, r3
 800445e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3310      	adds	r3, #16
 8004464:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800446e:	b29b      	uxth	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	4413      	add	r3, r2
 8004480:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800448a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800448c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800448e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	441a      	add	r2, r3
 8004498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800449c:	2100      	movs	r1, #0
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f006 fc87 	bl	800adb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7b1b      	ldrb	r3, [r3, #12]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 835c 	beq.w	8004b68 <PCD_EP_ISR_Handler+0x766>
 80044b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f040 8357 	bne.w	8004b68 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7b1b      	ldrb	r3, [r3, #12]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	731a      	strb	r2, [r3, #12]
 80044d4:	e348      	b.n	8004b68 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044dc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80044e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d032      	beq.n	800455a <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	4413      	add	r3, r2
 800450e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004528:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800452a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800452c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800452e:	b29b      	uxth	r3, r3
 8004530:	f004 fd40 	bl	8008fb4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29a      	uxth	r2, r3
 800453c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004540:	4013      	ands	r3, r2
 8004542:	823b      	strh	r3, [r7, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	8a3a      	ldrh	r2, [r7, #16]
 800454a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800454e:	b292      	uxth	r2, r2
 8004550:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f006 fc00 	bl	800ad58 <HAL_PCD_SetupStageCallback>
 8004558:	e306      	b.n	8004b68 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800455a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800455e:	2b00      	cmp	r3, #0
 8004560:	f280 8302 	bge.w	8004b68 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29a      	uxth	r2, r3
 800456c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004570:	4013      	ands	r3, r2
 8004572:	83fb      	strh	r3, [r7, #30]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	8bfa      	ldrh	r2, [r7, #30]
 800457a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800457e:	b292      	uxth	r2, r2
 8004580:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800458a:	b29b      	uxth	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4413      	add	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	4413      	add	r3, r2
 800459c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80045aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d019      	beq.n	80045e6 <PCD_EP_ISR_Handler+0x1e4>
 80045b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d015      	beq.n	80045e6 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c0:	6959      	ldr	r1, [r3, #20]
 80045c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80045c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f004 fcf2 	bl	8008fb4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80045d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	441a      	add	r2, r3
 80045da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80045de:	2100      	movs	r1, #0
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f006 fbcb 	bl	800ad7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80045f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80045f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f040 82b5 	bne.w	8004b68 <PCD_EP_ISR_Handler+0x766>
 80045fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004602:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004606:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800460a:	f000 82ad 	beq.w	8004b68 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800461c:	b29b      	uxth	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	4413      	add	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004638:	b29a      	uxth	r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b3e      	cmp	r3, #62	@ 0x3e
 8004644:	d91d      	bls.n	8004682 <PCD_EP_ISR_Handler+0x280>
 8004646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	647b      	str	r3, [r7, #68]	@ 0x44
 800464e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <PCD_EP_ISR_Handler+0x25e>
 800465a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800465c:	3b01      	subs	r3, #1
 800465e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29a      	uxth	r2, r3
 8004666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004668:	b29b      	uxth	r3, r3
 800466a:	029b      	lsls	r3, r3, #10
 800466c:	b29b      	uxth	r3, r3
 800466e:	4313      	orrs	r3, r2
 8004670:	b29b      	uxth	r3, r3
 8004672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800467a:	b29a      	uxth	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	801a      	strh	r2, [r3, #0]
 8004680:	e026      	b.n	80046d0 <PCD_EP_ISR_Handler+0x2ce>
 8004682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <PCD_EP_ISR_Handler+0x29e>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004698:	b29a      	uxth	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	e017      	b.n	80046d0 <PCD_EP_ISR_Handler+0x2ce>
 80046a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <PCD_EP_ISR_Handler+0x2b8>
 80046b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046b6:	3301      	adds	r3, #1
 80046b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29a      	uxth	r2, r3
 80046c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	029b      	lsls	r3, r3, #10
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	4313      	orrs	r3, r2
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e0:	827b      	strh	r3, [r7, #18]
 80046e2:	8a7b      	ldrh	r3, [r7, #18]
 80046e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80046e8:	827b      	strh	r3, [r7, #18]
 80046ea:	8a7b      	ldrh	r3, [r7, #18]
 80046ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046f0:	827b      	strh	r3, [r7, #18]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	8a7b      	ldrh	r3, [r7, #18]
 80046f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004708:	b29b      	uxth	r3, r3
 800470a:	8013      	strh	r3, [r2, #0]
 800470c:	e22c      	b.n	8004b68 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004722:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004726:	2b00      	cmp	r3, #0
 8004728:	f280 80f6 	bge.w	8004918 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29a      	uxth	r2, r3
 800473e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004742:	4013      	ands	r3, r2
 8004744:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800475a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800475e:	b292      	uxth	r2, r2
 8004760:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004762:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477a:	7b1b      	ldrb	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d123      	bne.n	80047c8 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004788:	b29b      	uxth	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	4413      	add	r3, r2
 800479a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80047a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 808e 	beq.w	80048ce <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b8:	6959      	ldr	r1, [r3, #20]
 80047ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047bc:	88da      	ldrh	r2, [r3, #6]
 80047be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80047c2:	f004 fbf7 	bl	8008fb4 <USB_ReadPMA>
 80047c6:	e082      	b.n	80048ce <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80047c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ca:	78db      	ldrb	r3, [r3, #3]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d10a      	bne.n	80047e6 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80047d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80047d4:	461a      	mov	r2, r3
 80047d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f9d3 	bl	8004b84 <HAL_PCD_EP_DB_Receive>
 80047de:	4603      	mov	r3, r0
 80047e0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80047e4:	e073      	b.n	80048ce <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004800:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	441a      	add	r2, r3
 8004812:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800481a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800481e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004822:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d022      	beq.n	800488a <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800484c:	b29b      	uxth	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	4413      	add	r3, r2
 800485e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004868:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800486c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004870:	2b00      	cmp	r3, #0
 8004872:	d02c      	beq.n	80048ce <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487a:	6959      	ldr	r1, [r3, #20]
 800487c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487e:	891a      	ldrh	r2, [r3, #8]
 8004880:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004884:	f004 fb96 	bl	8008fb4 <USB_ReadPMA>
 8004888:	e021      	b.n	80048ce <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	4413      	add	r3, r2
 80048a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80048b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c0:	6959      	ldr	r1, [r3, #20]
 80048c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c4:	895a      	ldrh	r2, [r3, #10]
 80048c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80048ca:	f004 fb73 	bl	8008fb4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80048ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d0:	69da      	ldr	r2, [r3, #28]
 80048d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80048d6:	441a      	add	r2, r3
 80048d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80048dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80048e4:	441a      	add	r2, r3
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80048ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <PCD_EP_ISR_Handler+0x4fc>
 80048f2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80048f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d206      	bcs.n	800490c <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80048fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f006 fa39 	bl	800ad7c <HAL_PCD_DataOutStageCallback>
 800490a:	e005      	b.n	8004918 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004912:	4618      	mov	r0, r3
 8004914:	f002 fe21 	bl	800755a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004918:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800491c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8121 	beq.w	8004b68 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004926:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	3310      	adds	r3, #16
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004954:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800496a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800496e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004972:	b29b      	uxth	r3, r3
 8004974:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004978:	78db      	ldrb	r3, [r3, #3]
 800497a:	2b01      	cmp	r3, #1
 800497c:	f040 80a2 	bne.w	8004ac4 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8004980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004982:	2200      	movs	r2, #0
 8004984:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004988:	7b1b      	ldrb	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8093 	beq.w	8004ab6 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004990:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d046      	beq.n	8004a2a <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800499c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800499e:	785b      	ldrb	r3, [r3, #1]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d126      	bne.n	80049f2 <PCD_EP_ISR_Handler+0x5f0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	4413      	add	r3, r2
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80049bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	00da      	lsls	r2, r3, #3
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	4413      	add	r3, r2
 80049c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049ca:	623b      	str	r3, [r7, #32]
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	801a      	strh	r2, [r3, #0]
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	801a      	strh	r2, [r3, #0]
 80049f0:	e061      	b.n	8004ab6 <PCD_EP_ISR_Handler+0x6b4>
 80049f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d15d      	bne.n	8004ab6 <PCD_EP_ISR_Handler+0x6b4>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0e:	4413      	add	r3, r2
 8004a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	00da      	lsls	r2, r3, #3
 8004a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	2200      	movs	r2, #0
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	e045      	b.n	8004ab6 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d126      	bne.n	8004a86 <PCD_EP_ISR_Handler+0x684>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4c:	4413      	add	r3, r2
 8004a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	00da      	lsls	r2, r3, #3
 8004a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a58:	4413      	add	r3, r2
 8004a5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	e017      	b.n	8004ab6 <PCD_EP_ISR_Handler+0x6b4>
 8004a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a88:	785b      	ldrb	r3, [r3, #1]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d113      	bne.n	8004ab6 <PCD_EP_ISR_Handler+0x6b4>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9c:	4413      	add	r3, r2
 8004a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	00da      	lsls	r2, r3, #3
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f006 f978 	bl	800adb2 <HAL_PCD_DataInStageCallback>
 8004ac2:	e051      	b.n	8004b68 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004ac4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d144      	bne.n	8004b5a <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	4413      	add	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004afa:	699a      	ldr	r2, [r3, #24]
 8004afc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d907      	bls.n	8004b14 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8004b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b06:	699a      	ldr	r2, [r3, #24]
 8004b08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b0c:	1ad2      	subs	r2, r2, r3
 8004b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b10:	619a      	str	r2, [r3, #24]
 8004b12:	e002      	b.n	8004b1a <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b16:	2200      	movs	r2, #0
 8004b18:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f006 f942 	bl	800adb2 <HAL_PCD_DataInStageCallback>
 8004b2e:	e01b      	b.n	8004b68 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b38:	441a      	add	r2, r3
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b40:	69da      	ldr	r2, [r3, #28]
 8004b42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b46:	441a      	add	r2, r3
 8004b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b4a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b52:	4618      	mov	r0, r3
 8004b54:	f002 fd01 	bl	800755a <USB_EPStartXfer>
 8004b58:	e006      	b.n	8004b68 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004b5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f917 	bl	8004d96 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	b21b      	sxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f6ff ac49 	blt.w	800440c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3758      	adds	r7, #88	@ 0x58
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d07c      	beq.n	8004c96 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	8b7b      	ldrh	r3, [r7, #26]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d306      	bcc.n	8004bda <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	699a      	ldr	r2, [r3, #24]
 8004bd0:	8b7b      	ldrh	r3, [r7, #26]
 8004bd2:	1ad2      	subs	r2, r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	619a      	str	r2, [r3, #24]
 8004bd8:	e002      	b.n	8004be0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d123      	bne.n	8004c30 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c02:	833b      	strh	r3, [r7, #24]
 8004c04:	8b3b      	ldrh	r3, [r7, #24]
 8004c06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c0a:	833b      	strh	r3, [r7, #24]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	8b3b      	ldrh	r3, [r7, #24]
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01f      	beq.n	8004c7a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c54:	82fb      	strh	r3, [r7, #22]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	8afb      	ldrh	r3, [r7, #22]
 8004c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004c7a:	8b7b      	ldrh	r3, [r7, #26]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8085 	beq.w	8004d8c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6959      	ldr	r1, [r3, #20]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	891a      	ldrh	r2, [r3, #8]
 8004c8e:	8b7b      	ldrh	r3, [r7, #26]
 8004c90:	f004 f990 	bl	8008fb4 <USB_ReadPMA>
 8004c94:	e07a      	b.n	8004d8c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	8b7b      	ldrh	r3, [r7, #26]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d306      	bcc.n	8004cd4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	8b7b      	ldrh	r3, [r7, #26]
 8004ccc:	1ad2      	subs	r2, r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	619a      	str	r2, [r3, #24]
 8004cd2:	e002      	b.n	8004cda <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d123      	bne.n	8004d2a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfc:	83fb      	strh	r3, [r7, #30]
 8004cfe:	8bfb      	ldrh	r3, [r7, #30]
 8004d00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d04:	83fb      	strh	r3, [r7, #30]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	441a      	add	r2, r3
 8004d14:	8bfb      	ldrh	r3, [r7, #30]
 8004d16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d11f      	bne.n	8004d74 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4e:	83bb      	strh	r3, [r7, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	8bbb      	ldrh	r3, [r7, #28]
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d74:	8b7b      	ldrh	r3, [r7, #26]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6959      	ldr	r1, [r3, #20]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	895a      	ldrh	r2, [r3, #10]
 8004d86:	8b7b      	ldrh	r3, [r7, #26]
 8004d88:	f004 f914 	bl	8008fb4 <USB_ReadPMA>
    }
  }

  return count;
 8004d8c:	8b7b      	ldrh	r3, [r7, #26]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b0a4      	sub	sp, #144	@ 0x90
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	4613      	mov	r3, r2
 8004da2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 81db 	beq.w	8005166 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d907      	bls.n	8004df4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	699a      	ldr	r2, [r3, #24]
 8004de8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004dec:	1ad2      	subs	r2, r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	619a      	str	r2, [r3, #24]
 8004df2:	e002      	b.n	8004dfa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 80b9 	bne.w	8004f76 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	785b      	ldrb	r3, [r3, #1]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d126      	bne.n	8004e5a <HAL_PCD_EP_DB_Transmit+0xc4>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e20:	4413      	add	r3, r2
 8004e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	00da      	lsls	r2, r3, #3
 8004e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	801a      	strh	r2, [r3, #0]
 8004e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	e01a      	b.n	8004e90 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d116      	bne.n	8004e90 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e76:	4413      	add	r3, r2
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	00da      	lsls	r2, r3, #3
 8004e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e82:	4413      	add	r3, r2
 8004e84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d126      	bne.n	8004eec <HAL_PCD_EP_DB_Transmit+0x156>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	00da      	lsls	r2, r3, #3
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	801a      	strh	r2, [r3, #0]
 8004eea:	e017      	b.n	8004f1c <HAL_PCD_EP_DB_Transmit+0x186>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d113      	bne.n	8004f1c <HAL_PCD_EP_DB_Transmit+0x186>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	4413      	add	r3, r2
 8004f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	00da      	lsls	r2, r3, #3
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	4413      	add	r3, r2
 8004f10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f14:	623b      	str	r3, [r7, #32]
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	4619      	mov	r1, r3
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f005 ff45 	bl	800adb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 82fa 	beq.w	8005528 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4e:	82fb      	strh	r3, [r7, #22]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	8afb      	ldrh	r3, [r7, #22]
 8004f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	8013      	strh	r3, [r2, #0]
 8004f74:	e2d8      	b.n	8005528 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d021      	beq.n	8004fc4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	f040 82ac 	bne.w	8005528 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004fd8:	441a      	add	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004fe6:	441a      	add	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6a1a      	ldr	r2, [r3, #32]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d30b      	bcc.n	8005010 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005008:	1ad2      	subs	r2, r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	621a      	str	r2, [r3, #32]
 800500e:	e017      	b.n	8005040 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005018:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800501c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005028:	e00a      	b.n	8005040 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2200      	movs	r2, #0
 800503e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d165      	bne.n	8005114 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005056:	b29b      	uxth	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505c:	4413      	add	r3, r2
 800505e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	00da      	lsls	r2, r3, #3
 8005066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005068:	4413      	add	r3, r2
 800506a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800506e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800507a:	b29a      	uxth	r2, r3
 800507c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005084:	2b3e      	cmp	r3, #62	@ 0x3e
 8005086:	d91d      	bls.n	80050c4 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005088:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <HAL_PCD_EP_DB_Transmit+0x30c>
 800509c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800509e:	3b01      	subs	r3, #1
 80050a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	029b      	lsls	r3, r3, #10
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	4313      	orrs	r3, r2
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050bc:	b29a      	uxth	r2, r3
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	e044      	b.n	800514e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80050c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <HAL_PCD_EP_DB_Transmit+0x34c>
 80050cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050da:	b29a      	uxth	r2, r3
 80050dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	e035      	b.n	800514e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80050e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_PCD_EP_DB_Transmit+0x366>
 80050f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f8:	3301      	adds	r3, #1
 80050fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29a      	uxth	r2, r3
 8005102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005104:	b29b      	uxth	r3, r3
 8005106:	029b      	lsls	r3, r3, #10
 8005108:	b29b      	uxth	r3, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	b29a      	uxth	r2, r3
 800510e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	e01c      	b.n	800514e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d118      	bne.n	800514e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	647b      	str	r3, [r7, #68]	@ 0x44
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800512a:	b29b      	uxth	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005130:	4413      	add	r3, r2
 8005132:	647b      	str	r3, [r7, #68]	@ 0x44
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	00da      	lsls	r2, r3, #3
 800513a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800513c:	4413      	add	r3, r2
 800513e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005142:	643b      	str	r3, [r7, #64]	@ 0x40
 8005144:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005148:	b29a      	uxth	r2, r3
 800514a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800514c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	6959      	ldr	r1, [r3, #20]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	891a      	ldrh	r2, [r3, #8]
 800515a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800515e:	b29b      	uxth	r3, r3
 8005160:	f003 fee6 	bl	8008f30 <USB_WritePMA>
 8005164:	e1e0      	b.n	8005528 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	4413      	add	r3, r2
 8005180:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800518a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005196:	429a      	cmp	r2, r3
 8005198:	d307      	bcc.n	80051aa <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	619a      	str	r2, [r3, #24]
 80051a8:	e002      	b.n	80051b0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2200      	movs	r2, #0
 80051ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 80c0 	bne.w	800533a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d126      	bne.n	8005210 <HAL_PCD_EP_DB_Transmit+0x47a>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051d6:	4413      	add	r3, r2
 80051d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	00da      	lsls	r2, r3, #3
 80051e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051e2:	4413      	add	r3, r2
 80051e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051f8:	801a      	strh	r2, [r3, #0]
 80051fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005208:	b29a      	uxth	r2, r3
 800520a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	e01a      	b.n	8005246 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	785b      	ldrb	r3, [r3, #1]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d116      	bne.n	8005246 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	667b      	str	r3, [r7, #100]	@ 0x64
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005226:	b29b      	uxth	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800522c:	4413      	add	r3, r2
 800522e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	00da      	lsls	r2, r3, #3
 8005236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005238:	4413      	add	r3, r2
 800523a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800523e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005242:	2200      	movs	r2, #0
 8005244:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	677b      	str	r3, [r7, #116]	@ 0x74
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d12b      	bne.n	80052ac <HAL_PCD_EP_DB_Transmit+0x516>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005262:	b29b      	uxth	r3, r3
 8005264:	461a      	mov	r2, r3
 8005266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005268:	4413      	add	r3, r2
 800526a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	00da      	lsls	r2, r3, #3
 8005272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005274:	4413      	add	r3, r2
 8005276:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800527a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800527e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800528a:	b29a      	uxth	r2, r3
 800528c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052a8:	801a      	strh	r2, [r3, #0]
 80052aa:	e017      	b.n	80052dc <HAL_PCD_EP_DB_Transmit+0x546>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d113      	bne.n	80052dc <HAL_PCD_EP_DB_Transmit+0x546>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052c2:	4413      	add	r3, r2
 80052c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	00da      	lsls	r2, r3, #3
 80052cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052ce:	4413      	add	r3, r2
 80052d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80052d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052d8:	2200      	movs	r2, #0
 80052da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	4619      	mov	r1, r3
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f005 fd65 	bl	800adb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f040 811a 	bne.w	8005528 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800530a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800530e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	441a      	add	r2, r3
 8005320:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800532c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005334:	b29b      	uxth	r3, r3
 8005336:	8013      	strh	r3, [r2, #0]
 8005338:	e0f6      	b.n	8005528 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d121      	bne.n	8005388 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	441a      	add	r2, r3
 8005370:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800537c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005384:	b29b      	uxth	r3, r3
 8005386:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800538e:	2b01      	cmp	r3, #1
 8005390:	f040 80ca 	bne.w	8005528 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800539c:	441a      	add	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80053aa:	441a      	add	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d30b      	bcc.n	80053d4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6a1a      	ldr	r2, [r3, #32]
 80053c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053cc:	1ad2      	subs	r2, r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	621a      	str	r2, [r3, #32]
 80053d2:	e017      	b.n	8005404 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d108      	bne.n	80053ee <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80053dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80053e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80053ec:	e00a      	b.n	8005404 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2200      	movs	r2, #0
 80053fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	657b      	str	r3, [r7, #84]	@ 0x54
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d165      	bne.n	80054de <HAL_PCD_EP_DB_Transmit+0x748>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005426:	4413      	add	r3, r2
 8005428:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	00da      	lsls	r2, r3, #3
 8005430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005432:	4413      	add	r3, r2
 8005434:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005438:	65bb      	str	r3, [r7, #88]	@ 0x58
 800543a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005444:	b29a      	uxth	r2, r3
 8005446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800544e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005450:	d91d      	bls.n	800548e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	66bb      	str	r3, [r7, #104]	@ 0x68
 800545a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005466:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005468:	3b01      	subs	r3, #1
 800546a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800546c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29a      	uxth	r2, r3
 8005472:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005474:	b29b      	uxth	r3, r3
 8005476:	029b      	lsls	r3, r3, #10
 8005478:	b29b      	uxth	r3, r3
 800547a:	4313      	orrs	r3, r2
 800547c:	b29b      	uxth	r3, r3
 800547e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005486:	b29a      	uxth	r2, r3
 8005488:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	e041      	b.n	8005512 <HAL_PCD_EP_DB_Transmit+0x77c>
 800548e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10a      	bne.n	80054ac <HAL_PCD_EP_DB_Transmit+0x716>
 8005496:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	e032      	b.n	8005512 <HAL_PCD_EP_DB_Transmit+0x77c>
 80054ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b0:	085b      	lsrs	r3, r3, #1
 80054b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_PCD_EP_DB_Transmit+0x730>
 80054c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054c2:	3301      	adds	r3, #1
 80054c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	029b      	lsls	r3, r3, #10
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	4313      	orrs	r3, r2
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	e019      	b.n	8005512 <HAL_PCD_EP_DB_Transmit+0x77c>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d115      	bne.n	8005512 <HAL_PCD_EP_DB_Transmit+0x77c>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054f4:	4413      	add	r3, r2
 80054f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	00da      	lsls	r2, r3, #3
 80054fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005500:	4413      	add	r3, r2
 8005502:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005506:	653b      	str	r3, [r7, #80]	@ 0x50
 8005508:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800550c:	b29a      	uxth	r2, r3
 800550e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005510:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6959      	ldr	r1, [r3, #20]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	895a      	ldrh	r2, [r3, #10]
 800551e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005522:	b29b      	uxth	r3, r3
 8005524:	f003 fd04 	bl	8008f30 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005542:	82bb      	strh	r3, [r7, #20]
 8005544:	8abb      	ldrh	r3, [r7, #20]
 8005546:	f083 0310 	eor.w	r3, r3, #16
 800554a:	82bb      	strh	r3, [r7, #20]
 800554c:	8abb      	ldrh	r3, [r7, #20]
 800554e:	f083 0320 	eor.w	r3, r3, #32
 8005552:	82bb      	strh	r3, [r7, #20]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8abb      	ldrh	r3, [r7, #20]
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3790      	adds	r7, #144	@ 0x90
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005582:	b480      	push	{r7}
 8005584:	b087      	sub	sp, #28
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	817b      	strh	r3, [r7, #10]
 8005590:	4613      	mov	r3, r2
 8005592:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005594:	897b      	ldrh	r3, [r7, #10]
 8005596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055a0:	897b      	ldrh	r3, [r7, #10]
 80055a2:	f003 0207 	and.w	r2, r3, #7
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	3310      	adds	r3, #16
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e009      	b.n	80055cc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055b8:	897a      	ldrh	r2, [r7, #10]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80055cc:	893b      	ldrh	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	b29a      	uxth	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	80da      	strh	r2, [r3, #6]
 80055e0:	e00b      	b.n	80055fa <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2201      	movs	r2, #1
 80055e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	0c1b      	lsrs	r3, r3, #16
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800562c:	b29b      	uxth	r3, r3
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005640:	b29b      	uxth	r3, r3
 8005642:	f043 0302 	orr.w	r3, r3, #2
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d141      	bne.n	80056ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800566a:	4b4b      	ldr	r3, [pc, #300]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005676:	d131      	bne.n	80056dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005678:	4b47      	ldr	r3, [pc, #284]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800567a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800567e:	4a46      	ldr	r2, [pc, #280]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005684:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005688:	4b43      	ldr	r3, [pc, #268]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005690:	4a41      	ldr	r2, [pc, #260]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005696:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005698:	4b40      	ldr	r3, [pc, #256]	@ (800579c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2232      	movs	r2, #50	@ 0x32
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	4a3f      	ldr	r2, [pc, #252]	@ (80057a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056a4:	fba2 2303 	umull	r2, r3, r2, r3
 80056a8:	0c9b      	lsrs	r3, r3, #18
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ae:	e002      	b.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056b6:	4b38      	ldr	r3, [pc, #224]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c2:	d102      	bne.n	80056ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f2      	bne.n	80056b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056ca:	4b33      	ldr	r3, [pc, #204]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d6:	d158      	bne.n	800578a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e057      	b.n	800578c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80056ec:	e04d      	b.n	800578a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f4:	d141      	bne.n	800577a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056f6:	4b28      	ldr	r3, [pc, #160]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005702:	d131      	bne.n	8005768 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005704:	4b24      	ldr	r3, [pc, #144]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800570a:	4a23      	ldr	r2, [pc, #140]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005714:	4b20      	ldr	r3, [pc, #128]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800571c:	4a1e      	ldr	r2, [pc, #120]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800571e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005722:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005724:	4b1d      	ldr	r3, [pc, #116]	@ (800579c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2232      	movs	r2, #50	@ 0x32
 800572a:	fb02 f303 	mul.w	r3, r2, r3
 800572e:	4a1c      	ldr	r2, [pc, #112]	@ (80057a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	0c9b      	lsrs	r3, r3, #18
 8005736:	3301      	adds	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800573a:	e002      	b.n	8005742 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3b01      	subs	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005742:	4b15      	ldr	r3, [pc, #84]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800574a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800574e:	d102      	bne.n	8005756 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f2      	bne.n	800573c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005756:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800575e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005762:	d112      	bne.n	800578a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e011      	b.n	800578c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005768:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800576a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800576e:	4a0a      	ldr	r2, [pc, #40]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005774:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005778:	e007      	b.n	800578a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800577a:	4b07      	ldr	r3, [pc, #28]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005782:	4a05      	ldr	r2, [pc, #20]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005784:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005788:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40007000 	.word	0x40007000
 800579c:	20000000 	.word	0x20000000
 80057a0:	431bde83 	.word	0x431bde83

080057a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80057a8:	4b05      	ldr	r3, [pc, #20]	@ (80057c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4a04      	ldr	r2, [pc, #16]	@ (80057c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057b2:	6093      	str	r3, [r2, #8]
}
 80057b4:	bf00      	nop
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40007000 	.word	0x40007000

080057c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e2fe      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d075      	beq.n	80058ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e2:	4b97      	ldr	r3, [pc, #604]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ec:	4b94      	ldr	r3, [pc, #592]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b0c      	cmp	r3, #12
 80057fa:	d102      	bne.n	8005802 <HAL_RCC_OscConfig+0x3e>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d002      	beq.n	8005808 <HAL_RCC_OscConfig+0x44>
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d10b      	bne.n	8005820 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005808:	4b8d      	ldr	r3, [pc, #564]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d05b      	beq.n	80058cc <HAL_RCC_OscConfig+0x108>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d157      	bne.n	80058cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e2d9      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005828:	d106      	bne.n	8005838 <HAL_RCC_OscConfig+0x74>
 800582a:	4b85      	ldr	r3, [pc, #532]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a84      	ldr	r2, [pc, #528]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e01d      	b.n	8005874 <HAL_RCC_OscConfig+0xb0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005840:	d10c      	bne.n	800585c <HAL_RCC_OscConfig+0x98>
 8005842:	4b7f      	ldr	r3, [pc, #508]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a7e      	ldr	r2, [pc, #504]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a7b      	ldr	r2, [pc, #492]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e00b      	b.n	8005874 <HAL_RCC_OscConfig+0xb0>
 800585c:	4b78      	ldr	r3, [pc, #480]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a77      	ldr	r2, [pc, #476]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	4b75      	ldr	r3, [pc, #468]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a74      	ldr	r2, [pc, #464]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 800586e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d013      	beq.n	80058a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fb fb26 	bl	8000ecc <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005884:	f7fb fb22 	bl	8000ecc <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b64      	cmp	r3, #100	@ 0x64
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e29e      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005896:	4b6a      	ldr	r3, [pc, #424]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0xc0>
 80058a2:	e014      	b.n	80058ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fb fb12 	bl	8000ecc <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058ac:	f7fb fb0e 	bl	8000ecc <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	@ 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e28a      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058be:	4b60      	ldr	r3, [pc, #384]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0xe8>
 80058ca:	e000      	b.n	80058ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d075      	beq.n	80059c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058da:	4b59      	ldr	r3, [pc, #356]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058e4:	4b56      	ldr	r3, [pc, #344]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d102      	bne.n	80058fa <HAL_RCC_OscConfig+0x136>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d002      	beq.n	8005900 <HAL_RCC_OscConfig+0x13c>
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d11f      	bne.n	8005940 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005900:	4b4f      	ldr	r3, [pc, #316]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_RCC_OscConfig+0x154>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e25d      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005918:	4b49      	ldr	r3, [pc, #292]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	061b      	lsls	r3, r3, #24
 8005926:	4946      	ldr	r1, [pc, #280]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005928:	4313      	orrs	r3, r2
 800592a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800592c:	4b45      	ldr	r3, [pc, #276]	@ (8005a44 <HAL_RCC_OscConfig+0x280>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f7fb fa7f 	bl	8000e34 <HAL_InitTick>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d043      	beq.n	80059c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e249      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d023      	beq.n	8005990 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005948:	4b3d      	ldr	r3, [pc, #244]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 800594e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005954:	f7fb faba 	bl	8000ecc <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800595c:	f7fb fab6 	bl	8000ecc <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e232      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800596e:	4b34      	ldr	r3, [pc, #208]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0f0      	beq.n	800595c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597a:	4b31      	ldr	r3, [pc, #196]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	061b      	lsls	r3, r3, #24
 8005988:	492d      	ldr	r1, [pc, #180]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 800598a:	4313      	orrs	r3, r2
 800598c:	604b      	str	r3, [r1, #4]
 800598e:	e01a      	b.n	80059c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005990:	4b2b      	ldr	r3, [pc, #172]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2a      	ldr	r2, [pc, #168]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005996:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800599a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599c:	f7fb fa96 	bl	8000ecc <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a4:	f7fb fa92 	bl	8000ecc <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e20e      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059b6:	4b22      	ldr	r3, [pc, #136]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f0      	bne.n	80059a4 <HAL_RCC_OscConfig+0x1e0>
 80059c2:	e000      	b.n	80059c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d041      	beq.n	8005a56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01c      	beq.n	8005a14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059da:	4b19      	ldr	r3, [pc, #100]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 80059dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059e0:	4a17      	ldr	r2, [pc, #92]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ea:	f7fb fa6f 	bl	8000ecc <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059f2:	f7fb fa6b 	bl	8000ecc <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e1e7      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a04:	4b0e      	ldr	r3, [pc, #56]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0ef      	beq.n	80059f2 <HAL_RCC_OscConfig+0x22e>
 8005a12:	e020      	b.n	8005a56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a14:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a1a:	4a09      	ldr	r2, [pc, #36]	@ (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a24:	f7fb fa52 	bl	8000ecc <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a2a:	e00d      	b.n	8005a48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a2c:	f7fb fa4e 	bl	8000ecc <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d906      	bls.n	8005a48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e1ca      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000
 8005a44:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a48:	4b8c      	ldr	r3, [pc, #560]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1ea      	bne.n	8005a2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80a6 	beq.w	8005bb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a64:	2300      	movs	r3, #0
 8005a66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a68:	4b84      	ldr	r3, [pc, #528]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_RCC_OscConfig+0x2b4>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <HAL_RCC_OscConfig+0x2b6>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a82:	4a7e      	ldr	r2, [pc, #504]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a96:	2301      	movs	r3, #1
 8005a98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a9a:	4b79      	ldr	r3, [pc, #484]	@ (8005c80 <HAL_RCC_OscConfig+0x4bc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d118      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aa6:	4b76      	ldr	r3, [pc, #472]	@ (8005c80 <HAL_RCC_OscConfig+0x4bc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a75      	ldr	r2, [pc, #468]	@ (8005c80 <HAL_RCC_OscConfig+0x4bc>)
 8005aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ab2:	f7fb fa0b 	bl	8000ecc <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aba:	f7fb fa07 	bl	8000ecc <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e183      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005acc:	4b6c      	ldr	r3, [pc, #432]	@ (8005c80 <HAL_RCC_OscConfig+0x4bc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d108      	bne.n	8005af2 <HAL_RCC_OscConfig+0x32e>
 8005ae0:	4b66      	ldr	r3, [pc, #408]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae6:	4a65      	ldr	r2, [pc, #404]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005af0:	e024      	b.n	8005b3c <HAL_RCC_OscConfig+0x378>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	d110      	bne.n	8005b1c <HAL_RCC_OscConfig+0x358>
 8005afa:	4b60      	ldr	r3, [pc, #384]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b00:	4a5e      	ldr	r2, [pc, #376]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005b02:	f043 0304 	orr.w	r3, r3, #4
 8005b06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b10:	4a5a      	ldr	r2, [pc, #360]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b1a:	e00f      	b.n	8005b3c <HAL_RCC_OscConfig+0x378>
 8005b1c:	4b57      	ldr	r3, [pc, #348]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b22:	4a56      	ldr	r2, [pc, #344]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005b24:	f023 0301 	bic.w	r3, r3, #1
 8005b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b2c:	4b53      	ldr	r3, [pc, #332]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b32:	4a52      	ldr	r2, [pc, #328]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005b34:	f023 0304 	bic.w	r3, r3, #4
 8005b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d016      	beq.n	8005b72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b44:	f7fb f9c2 	bl	8000ecc <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b4a:	e00a      	b.n	8005b62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b4c:	f7fb f9be 	bl	8000ecc <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e138      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b62:	4b46      	ldr	r3, [pc, #280]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0ed      	beq.n	8005b4c <HAL_RCC_OscConfig+0x388>
 8005b70:	e015      	b.n	8005b9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b72:	f7fb f9ab 	bl	8000ecc <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b78:	e00a      	b.n	8005b90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7a:	f7fb f9a7 	bl	8000ecc <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e121      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b90:	4b3a      	ldr	r3, [pc, #232]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1ed      	bne.n	8005b7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d105      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba4:	4b35      	ldr	r3, [pc, #212]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba8:	4a34      	ldr	r2, [pc, #208]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005baa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d03c      	beq.n	8005c36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01c      	beq.n	8005bfe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bca:	4a2c      	ldr	r2, [pc, #176]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd4:	f7fb f97a 	bl	8000ecc <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bdc:	f7fb f976 	bl	8000ecc <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e0f2      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bee:	4b23      	ldr	r3, [pc, #140]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0ef      	beq.n	8005bdc <HAL_RCC_OscConfig+0x418>
 8005bfc:	e01b      	b.n	8005c36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c04:	4a1d      	ldr	r2, [pc, #116]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0e:	f7fb f95d 	bl	8000ecc <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c16:	f7fb f959 	bl	8000ecc <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e0d5      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c28:	4b14      	ldr	r3, [pc, #80]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1ef      	bne.n	8005c16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80c9 	beq.w	8005dd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c40:	4b0e      	ldr	r3, [pc, #56]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 030c 	and.w	r3, r3, #12
 8005c48:	2b0c      	cmp	r3, #12
 8005c4a:	f000 8083 	beq.w	8005d54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d15e      	bne.n	8005d14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c56:	4b09      	ldr	r3, [pc, #36]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a08      	ldr	r2, [pc, #32]	@ (8005c7c <HAL_RCC_OscConfig+0x4b8>)
 8005c5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c62:	f7fb f933 	bl	8000ecc <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c68:	e00c      	b.n	8005c84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c6a:	f7fb f92f 	bl	8000ecc <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d905      	bls.n	8005c84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e0ab      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c84:	4b55      	ldr	r3, [pc, #340]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1ec      	bne.n	8005c6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c90:	4b52      	ldr	r3, [pc, #328]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	4b52      	ldr	r3, [pc, #328]	@ (8005de0 <HAL_RCC_OscConfig+0x61c>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6a11      	ldr	r1, [r2, #32]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ca0:	3a01      	subs	r2, #1
 8005ca2:	0112      	lsls	r2, r2, #4
 8005ca4:	4311      	orrs	r1, r2
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005caa:	0212      	lsls	r2, r2, #8
 8005cac:	4311      	orrs	r1, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cb2:	0852      	lsrs	r2, r2, #1
 8005cb4:	3a01      	subs	r2, #1
 8005cb6:	0552      	lsls	r2, r2, #21
 8005cb8:	4311      	orrs	r1, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cbe:	0852      	lsrs	r2, r2, #1
 8005cc0:	3a01      	subs	r2, #1
 8005cc2:	0652      	lsls	r2, r2, #25
 8005cc4:	4311      	orrs	r1, r2
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cca:	06d2      	lsls	r2, r2, #27
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	4943      	ldr	r1, [pc, #268]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd4:	4b41      	ldr	r3, [pc, #260]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a40      	ldr	r2, [pc, #256]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cde:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	4a3d      	ldr	r2, [pc, #244]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fb f8ee 	bl	8000ecc <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf4:	f7fb f8ea 	bl	8000ecc <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e066      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d06:	4b35      	ldr	r3, [pc, #212]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x530>
 8005d12:	e05e      	b.n	8005dd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d14:	4b31      	ldr	r3, [pc, #196]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a30      	ldr	r2, [pc, #192]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005d1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d20:	f7fb f8d4 	bl	8000ecc <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d28:	f7fb f8d0 	bl	8000ecc <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e04c      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d3a:	4b28      	ldr	r3, [pc, #160]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f0      	bne.n	8005d28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d46:	4b25      	ldr	r3, [pc, #148]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	4924      	ldr	r1, [pc, #144]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005d4c:	4b25      	ldr	r3, [pc, #148]	@ (8005de4 <HAL_RCC_OscConfig+0x620>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	60cb      	str	r3, [r1, #12]
 8005d52:	e03e      	b.n	8005dd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e039      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d60:	4b1e      	ldr	r3, [pc, #120]	@ (8005ddc <HAL_RCC_OscConfig+0x618>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f003 0203 	and.w	r2, r3, #3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d12c      	bne.n	8005dce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d123      	bne.n	8005dce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d11b      	bne.n	8005dce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d113      	bne.n	8005dce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	3b01      	subs	r3, #1
 8005db4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d109      	bne.n	8005dce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dc4:	085b      	lsrs	r3, r3, #1
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d001      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3720      	adds	r7, #32
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	019f800c 	.word	0x019f800c
 8005de4:	feeefffc 	.word	0xfeeefffc

08005de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e11e      	b.n	800603e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e00:	4b91      	ldr	r3, [pc, #580]	@ (8006048 <HAL_RCC_ClockConfig+0x260>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d910      	bls.n	8005e30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0e:	4b8e      	ldr	r3, [pc, #568]	@ (8006048 <HAL_RCC_ClockConfig+0x260>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f023 020f 	bic.w	r2, r3, #15
 8005e16:	498c      	ldr	r1, [pc, #560]	@ (8006048 <HAL_RCC_ClockConfig+0x260>)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1e:	4b8a      	ldr	r3, [pc, #552]	@ (8006048 <HAL_RCC_ClockConfig+0x260>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d001      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e106      	b.n	800603e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d073      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b03      	cmp	r3, #3
 8005e42:	d129      	bne.n	8005e98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e44:	4b81      	ldr	r3, [pc, #516]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0f4      	b.n	800603e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e54:	f000 f972 	bl	800613c <RCC_GetSysClockFreqFromPLLSource>
 8005e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4a7c      	ldr	r2, [pc, #496]	@ (8006050 <HAL_RCC_ClockConfig+0x268>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d93f      	bls.n	8005ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e62:	4b7a      	ldr	r3, [pc, #488]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d009      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d033      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d12f      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e82:	4b72      	ldr	r3, [pc, #456]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e8a:	4a70      	ldr	r2, [pc, #448]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e92:	2380      	movs	r3, #128	@ 0x80
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	e024      	b.n	8005ee2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d107      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0c6      	b.n	800603e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eb0:	4b66      	ldr	r3, [pc, #408]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0be      	b.n	800603e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ec0:	f000 f8ce 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8005ec4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4a61      	ldr	r2, [pc, #388]	@ (8006050 <HAL_RCC_ClockConfig+0x268>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d909      	bls.n	8005ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ece:	4b5f      	ldr	r3, [pc, #380]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ed6:	4a5d      	ldr	r2, [pc, #372]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005edc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ede:	2380      	movs	r3, #128	@ 0x80
 8005ee0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f023 0203 	bic.w	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4957      	ldr	r1, [pc, #348]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ef4:	f7fa ffea 	bl	8000ecc <HAL_GetTick>
 8005ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efc:	f7fa ffe6 	bl	8000ecc <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e095      	b.n	800603e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f12:	4b4e      	ldr	r3, [pc, #312]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 020c 	and.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d1eb      	bne.n	8005efc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d023      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f3c:	4b43      	ldr	r3, [pc, #268]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	4a42      	ldr	r2, [pc, #264]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005f42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f54:	4b3d      	ldr	r3, [pc, #244]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f5c:	4a3b      	ldr	r2, [pc, #236]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005f5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f64:	4b39      	ldr	r3, [pc, #228]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4936      	ldr	r1, [pc, #216]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	608b      	str	r3, [r1, #8]
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b80      	cmp	r3, #128	@ 0x80
 8005f7c:	d105      	bne.n	8005f8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f7e:	4b33      	ldr	r3, [pc, #204]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	4a32      	ldr	r2, [pc, #200]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005f84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8006048 <HAL_RCC_ClockConfig+0x260>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d21d      	bcs.n	8005fd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f98:	4b2b      	ldr	r3, [pc, #172]	@ (8006048 <HAL_RCC_ClockConfig+0x260>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f023 020f 	bic.w	r2, r3, #15
 8005fa0:	4929      	ldr	r1, [pc, #164]	@ (8006048 <HAL_RCC_ClockConfig+0x260>)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fa8:	f7fa ff90 	bl	8000ecc <HAL_GetTick>
 8005fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb0:	f7fa ff8c 	bl	8000ecc <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e03b      	b.n	800603e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc6:	4b20      	ldr	r3, [pc, #128]	@ (8006048 <HAL_RCC_ClockConfig+0x260>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d1ed      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4917      	ldr	r1, [pc, #92]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ffe:	4b13      	ldr	r3, [pc, #76]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	490f      	ldr	r1, [pc, #60]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 800600e:	4313      	orrs	r3, r2
 8006010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006012:	f000 f825 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8006016:	4602      	mov	r2, r0
 8006018:	4b0c      	ldr	r3, [pc, #48]	@ (800604c <HAL_RCC_ClockConfig+0x264>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	490c      	ldr	r1, [pc, #48]	@ (8006054 <HAL_RCC_ClockConfig+0x26c>)
 8006024:	5ccb      	ldrb	r3, [r1, r3]
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	fa22 f303 	lsr.w	r3, r2, r3
 800602e:	4a0a      	ldr	r2, [pc, #40]	@ (8006058 <HAL_RCC_ClockConfig+0x270>)
 8006030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006032:	4b0a      	ldr	r3, [pc, #40]	@ (800605c <HAL_RCC_ClockConfig+0x274>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f7fa fefc 	bl	8000e34 <HAL_InitTick>
 800603c:	4603      	mov	r3, r0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	40022000 	.word	0x40022000
 800604c:	40021000 	.word	0x40021000
 8006050:	04c4b400 	.word	0x04c4b400
 8006054:	0800bc98 	.word	0x0800bc98
 8006058:	20000000 	.word	0x20000000
 800605c:	20000004 	.word	0x20000004

08006060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006066:	4b2c      	ldr	r3, [pc, #176]	@ (8006118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 030c 	and.w	r3, r3, #12
 800606e:	2b04      	cmp	r3, #4
 8006070:	d102      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006072:	4b2a      	ldr	r3, [pc, #168]	@ (800611c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	e047      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006078:	4b27      	ldr	r3, [pc, #156]	@ (8006118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 030c 	and.w	r3, r3, #12
 8006080:	2b08      	cmp	r3, #8
 8006082:	d102      	bne.n	800608a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006084:	4b26      	ldr	r3, [pc, #152]	@ (8006120 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e03e      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800608a:	4b23      	ldr	r3, [pc, #140]	@ (8006118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
 8006092:	2b0c      	cmp	r3, #12
 8006094:	d136      	bne.n	8006104 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006096:	4b20      	ldr	r3, [pc, #128]	@ (8006118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	3301      	adds	r3, #1
 80060ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d10c      	bne.n	80060ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006120 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060bc:	4a16      	ldr	r2, [pc, #88]	@ (8006118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060be:	68d2      	ldr	r2, [r2, #12]
 80060c0:	0a12      	lsrs	r2, r2, #8
 80060c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	617b      	str	r3, [r7, #20]
      break;
 80060cc:	e00c      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060ce:	4a13      	ldr	r2, [pc, #76]	@ (800611c <HAL_RCC_GetSysClockFreq+0xbc>)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d6:	4a10      	ldr	r2, [pc, #64]	@ (8006118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060d8:	68d2      	ldr	r2, [r2, #12]
 80060da:	0a12      	lsrs	r2, r2, #8
 80060dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060e0:	fb02 f303 	mul.w	r3, r2, r3
 80060e4:	617b      	str	r3, [r7, #20]
      break;
 80060e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	0e5b      	lsrs	r3, r3, #25
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	3301      	adds	r3, #1
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	e001      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006108:	693b      	ldr	r3, [r7, #16]
}
 800610a:	4618      	mov	r0, r3
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40021000 	.word	0x40021000
 800611c:	00f42400 	.word	0x00f42400
 8006120:	007a1200 	.word	0x007a1200

08006124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006128:	4b03      	ldr	r3, [pc, #12]	@ (8006138 <HAL_RCC_GetHCLKFreq+0x14>)
 800612a:	681b      	ldr	r3, [r3, #0]
}
 800612c:	4618      	mov	r0, r3
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	20000000 	.word	0x20000000

0800613c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006142:	4b1e      	ldr	r3, [pc, #120]	@ (80061bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800614c:	4b1b      	ldr	r3, [pc, #108]	@ (80061bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	091b      	lsrs	r3, r3, #4
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b03      	cmp	r3, #3
 800615e:	d10c      	bne.n	800617a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006160:	4a17      	ldr	r2, [pc, #92]	@ (80061c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	4a14      	ldr	r2, [pc, #80]	@ (80061bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800616a:	68d2      	ldr	r2, [r2, #12]
 800616c:	0a12      	lsrs	r2, r2, #8
 800616e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	617b      	str	r3, [r7, #20]
    break;
 8006178:	e00c      	b.n	8006194 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800617a:	4a12      	ldr	r2, [pc, #72]	@ (80061c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006182:	4a0e      	ldr	r2, [pc, #56]	@ (80061bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006184:	68d2      	ldr	r2, [r2, #12]
 8006186:	0a12      	lsrs	r2, r2, #8
 8006188:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800618c:	fb02 f303 	mul.w	r3, r2, r3
 8006190:	617b      	str	r3, [r7, #20]
    break;
 8006192:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006194:	4b09      	ldr	r3, [pc, #36]	@ (80061bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	0e5b      	lsrs	r3, r3, #25
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	3301      	adds	r3, #1
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80061ae:	687b      	ldr	r3, [r7, #4]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	40021000 	.word	0x40021000
 80061c0:	007a1200 	.word	0x007a1200
 80061c4:	00f42400 	.word	0x00f42400

080061c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061d0:	2300      	movs	r3, #0
 80061d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061d4:	2300      	movs	r3, #0
 80061d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8098 	beq.w	8006316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e6:	2300      	movs	r3, #0
 80061e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ea:	4b43      	ldr	r3, [pc, #268]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10d      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f6:	4b40      	ldr	r3, [pc, #256]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061fa:	4a3f      	ldr	r2, [pc, #252]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006200:	6593      	str	r3, [r2, #88]	@ 0x58
 8006202:	4b3d      	ldr	r3, [pc, #244]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620a:	60bb      	str	r3, [r7, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800620e:	2301      	movs	r3, #1
 8006210:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006212:	4b3a      	ldr	r3, [pc, #232]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a39      	ldr	r2, [pc, #228]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800621c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800621e:	f7fa fe55 	bl	8000ecc <HAL_GetTick>
 8006222:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006224:	e009      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006226:	f7fa fe51 	bl	8000ecc <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d902      	bls.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	74fb      	strb	r3, [r7, #19]
        break;
 8006238:	e005      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800623a:	4b30      	ldr	r3, [pc, #192]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0ef      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006246:	7cfb      	ldrb	r3, [r7, #19]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d159      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800624c:	4b2a      	ldr	r3, [pc, #168]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006256:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01e      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	429a      	cmp	r2, r3
 8006266:	d019      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006268:	4b23      	ldr	r3, [pc, #140]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006274:	4b20      	ldr	r3, [pc, #128]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627a:	4a1f      	ldr	r2, [pc, #124]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006284:	4b1c      	ldr	r3, [pc, #112]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628a:	4a1b      	ldr	r2, [pc, #108]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800628c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006294:	4a18      	ldr	r2, [pc, #96]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a6:	f7fa fe11 	bl	8000ecc <HAL_GetTick>
 80062aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ac:	e00b      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ae:	f7fa fe0d 	bl	8000ecc <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062bc:	4293      	cmp	r3, r2
 80062be:	d902      	bls.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	74fb      	strb	r3, [r7, #19]
            break;
 80062c4:	e006      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c6:	4b0c      	ldr	r3, [pc, #48]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0ec      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80062d4:	7cfb      	ldrb	r3, [r7, #19]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062da:	4b07      	ldr	r3, [pc, #28]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	4903      	ldr	r1, [pc, #12]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80062f0:	e008      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062f2:	7cfb      	ldrb	r3, [r7, #19]
 80062f4:	74bb      	strb	r3, [r7, #18]
 80062f6:	e005      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80062f8:	40021000 	.word	0x40021000
 80062fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006304:	7c7b      	ldrb	r3, [r7, #17]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d105      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800630a:	4ba6      	ldr	r3, [pc, #664]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630e:	4aa5      	ldr	r2, [pc, #660]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006314:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006322:	4ba0      	ldr	r3, [pc, #640]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006328:	f023 0203 	bic.w	r2, r3, #3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	499c      	ldr	r1, [pc, #624]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006344:	4b97      	ldr	r3, [pc, #604]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634a:	f023 020c 	bic.w	r2, r3, #12
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	4994      	ldr	r1, [pc, #592]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006366:	4b8f      	ldr	r3, [pc, #572]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800636c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	498b      	ldr	r1, [pc, #556]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006388:	4b86      	ldr	r3, [pc, #536]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800638a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	4983      	ldr	r1, [pc, #524]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063aa:	4b7e      	ldr	r3, [pc, #504]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	497a      	ldr	r1, [pc, #488]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063cc:	4b75      	ldr	r3, [pc, #468]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	4972      	ldr	r1, [pc, #456]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063ee:	4b6d      	ldr	r3, [pc, #436]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	4969      	ldr	r1, [pc, #420]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006410:	4b64      	ldr	r3, [pc, #400]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006416:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	4961      	ldr	r1, [pc, #388]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006432:	4b5c      	ldr	r3, [pc, #368]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006438:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	4958      	ldr	r1, [pc, #352]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006450:	2b00      	cmp	r3, #0
 8006452:	d015      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006454:	4b53      	ldr	r3, [pc, #332]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006462:	4950      	ldr	r1, [pc, #320]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006472:	d105      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006474:	4b4b      	ldr	r3, [pc, #300]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4a4a      	ldr	r2, [pc, #296]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800647a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800647e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006488:	2b00      	cmp	r3, #0
 800648a:	d015      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800648c:	4b45      	ldr	r3, [pc, #276]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006492:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649a:	4942      	ldr	r1, [pc, #264]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064aa:	d105      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064ac:	4b3d      	ldr	r3, [pc, #244]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	4a3c      	ldr	r2, [pc, #240]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d015      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064c4:	4b37      	ldr	r3, [pc, #220]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d2:	4934      	ldr	r1, [pc, #208]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064e2:	d105      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064e4:	4b2f      	ldr	r3, [pc, #188]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	4a2e      	ldr	r2, [pc, #184]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d015      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064fc:	4b29      	ldr	r3, [pc, #164]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006502:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650a:	4926      	ldr	r1, [pc, #152]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006516:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800651a:	d105      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800651c:	4b21      	ldr	r3, [pc, #132]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	4a20      	ldr	r2, [pc, #128]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006526:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d015      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006534:	4b1b      	ldr	r3, [pc, #108]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006542:	4918      	ldr	r1, [pc, #96]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006552:	d105      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006554:	4b13      	ldr	r3, [pc, #76]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	4a12      	ldr	r2, [pc, #72]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800655a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800655e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d015      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800656c:	4b0d      	ldr	r3, [pc, #52]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006572:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657a:	490a      	ldr	r1, [pc, #40]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800658a:	d105      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800658c:	4b05      	ldr	r3, [pc, #20]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a04      	ldr	r2, [pc, #16]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006596:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006598:	7cbb      	ldrb	r3, [r7, #18]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40021000 	.word	0x40021000

080065a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e049      	b.n	800664e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fa fb2e 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f000 f898 	bl	800671c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d001      	beq.n	8006670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e042      	b.n	80066f6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a21      	ldr	r2, [pc, #132]	@ (8006704 <HAL_TIM_Base_Start+0xac>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d018      	beq.n	80066b4 <HAL_TIM_Base_Start+0x5c>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800668a:	d013      	beq.n	80066b4 <HAL_TIM_Base_Start+0x5c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1d      	ldr	r2, [pc, #116]	@ (8006708 <HAL_TIM_Base_Start+0xb0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00e      	beq.n	80066b4 <HAL_TIM_Base_Start+0x5c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a1c      	ldr	r2, [pc, #112]	@ (800670c <HAL_TIM_Base_Start+0xb4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d009      	beq.n	80066b4 <HAL_TIM_Base_Start+0x5c>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006710 <HAL_TIM_Base_Start+0xb8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d004      	beq.n	80066b4 <HAL_TIM_Base_Start+0x5c>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a19      	ldr	r2, [pc, #100]	@ (8006714 <HAL_TIM_Base_Start+0xbc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d115      	bne.n	80066e0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	4b17      	ldr	r3, [pc, #92]	@ (8006718 <HAL_TIM_Base_Start+0xc0>)
 80066bc:	4013      	ands	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b06      	cmp	r3, #6
 80066c4:	d015      	beq.n	80066f2 <HAL_TIM_Base_Start+0x9a>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066cc:	d011      	beq.n	80066f2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 0201 	orr.w	r2, r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066de:	e008      	b.n	80066f2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0201 	orr.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	e000      	b.n	80066f4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40000400 	.word	0x40000400
 800670c:	40000800 	.word	0x40000800
 8006710:	40013400 	.word	0x40013400
 8006714:	40014000 	.word	0x40014000
 8006718:	00010007 	.word	0x00010007

0800671c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a42      	ldr	r2, [pc, #264]	@ (8006838 <TIM_Base_SetConfig+0x11c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00f      	beq.n	8006754 <TIM_Base_SetConfig+0x38>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800673a:	d00b      	beq.n	8006754 <TIM_Base_SetConfig+0x38>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a3f      	ldr	r2, [pc, #252]	@ (800683c <TIM_Base_SetConfig+0x120>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d007      	beq.n	8006754 <TIM_Base_SetConfig+0x38>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a3e      	ldr	r2, [pc, #248]	@ (8006840 <TIM_Base_SetConfig+0x124>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_Base_SetConfig+0x38>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a3d      	ldr	r2, [pc, #244]	@ (8006844 <TIM_Base_SetConfig+0x128>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d108      	bne.n	8006766 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a33      	ldr	r2, [pc, #204]	@ (8006838 <TIM_Base_SetConfig+0x11c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01b      	beq.n	80067a6 <TIM_Base_SetConfig+0x8a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006774:	d017      	beq.n	80067a6 <TIM_Base_SetConfig+0x8a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a30      	ldr	r2, [pc, #192]	@ (800683c <TIM_Base_SetConfig+0x120>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <TIM_Base_SetConfig+0x8a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2f      	ldr	r2, [pc, #188]	@ (8006840 <TIM_Base_SetConfig+0x124>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00f      	beq.n	80067a6 <TIM_Base_SetConfig+0x8a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a2e      	ldr	r2, [pc, #184]	@ (8006844 <TIM_Base_SetConfig+0x128>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <TIM_Base_SetConfig+0x8a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2d      	ldr	r2, [pc, #180]	@ (8006848 <TIM_Base_SetConfig+0x12c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <TIM_Base_SetConfig+0x8a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a2c      	ldr	r2, [pc, #176]	@ (800684c <TIM_Base_SetConfig+0x130>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_Base_SetConfig+0x8a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006850 <TIM_Base_SetConfig+0x134>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d108      	bne.n	80067b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a16      	ldr	r2, [pc, #88]	@ (8006838 <TIM_Base_SetConfig+0x11c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00f      	beq.n	8006804 <TIM_Base_SetConfig+0xe8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a17      	ldr	r2, [pc, #92]	@ (8006844 <TIM_Base_SetConfig+0x128>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00b      	beq.n	8006804 <TIM_Base_SetConfig+0xe8>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a16      	ldr	r2, [pc, #88]	@ (8006848 <TIM_Base_SetConfig+0x12c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_Base_SetConfig+0xe8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a15      	ldr	r2, [pc, #84]	@ (800684c <TIM_Base_SetConfig+0x130>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_Base_SetConfig+0xe8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a14      	ldr	r2, [pc, #80]	@ (8006850 <TIM_Base_SetConfig+0x134>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d103      	bne.n	800680c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b01      	cmp	r3, #1
 800681c:	d105      	bne.n	800682a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f023 0201 	bic.w	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	611a      	str	r2, [r3, #16]
  }
}
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40012c00 	.word	0x40012c00
 800683c:	40000400 	.word	0x40000400
 8006840:	40000800 	.word	0x40000800
 8006844:	40013400 	.word	0x40013400
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800

08006854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006868:	2302      	movs	r3, #2
 800686a:	e065      	b.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a2c      	ldr	r2, [pc, #176]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d004      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2b      	ldr	r2, [pc, #172]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d108      	bne.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80068a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80068b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d018      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e2:	d013      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a18      	ldr	r2, [pc, #96]	@ (800694c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00e      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a17      	ldr	r2, [pc, #92]	@ (8006950 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d009      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a12      	ldr	r2, [pc, #72]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a13      	ldr	r2, [pc, #76]	@ (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d10c      	bne.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	4313      	orrs	r3, r2
 800691c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40013400 	.word	0x40013400
 800694c:	40000400 	.word	0x40000400
 8006950:	40000800 	.word	0x40000800
 8006954:	40014000 	.word	0x40014000

08006958 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006968:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800696c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	b29a      	uxth	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800698e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006992:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	43db      	mvns	r3, r3
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	4013      	ands	r3, r2
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	1d3b      	adds	r3, r7, #4
 80069c6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b09d      	sub	sp, #116	@ 0x74
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a1e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	78db      	ldrb	r3, [r3, #3]
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d81f      	bhi.n	8006a6a <USB_ActivateEndpoint+0x72>
 8006a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <USB_ActivateEndpoint+0x38>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a41 	.word	0x08006a41
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a73 	.word	0x08006a73
 8006a3c:	08006a4f 	.word	0x08006a4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006a4c:	e012      	b.n	8006a74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a52:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006a56:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006a5a:	e00b      	b.n	8006a74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006a68:	e004      	b.n	8006a74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006a70:	e000      	b.n	8006a74 <USB_ActivateEndpoint+0x7c>
      break;
 8006a72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	441a      	add	r2, r3
 8006a7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	b21b      	sxth	r3, r3
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aae:	b21a      	sxth	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	b21b      	sxth	r3, r3
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	b21b      	sxth	r3, r3
 8006aba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006acc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	7b1b      	ldrb	r3, [r3, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f040 8178 	bne.w	8006dda <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 8084 	beq.w	8006bfc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	4413      	add	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00da      	lsls	r2, r3, #3
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	88db      	ldrh	r3, [r3, #6]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	827b      	strh	r3, [r7, #18]
 8006b36:	8a7b      	ldrh	r3, [r7, #18]
 8006b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01b      	beq.n	8006b78 <USB_ActivateEndpoint+0x180>
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b56:	823b      	strh	r3, [r7, #16]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	8a3b      	ldrh	r3, [r7, #16]
 8006b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	78db      	ldrb	r3, [r3, #3]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d020      	beq.n	8006bc2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b96:	81bb      	strh	r3, [r7, #12]
 8006b98:	89bb      	ldrh	r3, [r7, #12]
 8006b9a:	f083 0320 	eor.w	r3, r3, #32
 8006b9e:	81bb      	strh	r3, [r7, #12]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	89bb      	ldrh	r3, [r7, #12]
 8006bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	8013      	strh	r3, [r2, #0]
 8006bc0:	e2d5      	b.n	800716e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bd8:	81fb      	strh	r3, [r7, #14]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	441a      	add	r2, r3
 8006be4:	89fb      	ldrh	r3, [r7, #14]
 8006be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	8013      	strh	r3, [r2, #0]
 8006bfa:	e2b8      	b.n	800716e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	4413      	add	r3, r2
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	00da      	lsls	r2, r3, #3
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	4413      	add	r3, r2
 8006c1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	88db      	ldrh	r3, [r3, #6]
 8006c24:	085b      	lsrs	r3, r3, #1
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	4413      	add	r3, r2
 8006c42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	00da      	lsls	r2, r3, #3
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c6a:	d91d      	bls.n	8006ca8 <USB_ActivateEndpoint+0x2b0>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d102      	bne.n	8006c86 <USB_ActivateEndpoint+0x28e>
 8006c80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c82:	3b01      	subs	r3, #1
 8006c84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	029b      	lsls	r3, r3, #10
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4313      	orrs	r3, r2
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	e026      	b.n	8006cf6 <USB_ActivateEndpoint+0x2fe>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <USB_ActivateEndpoint+0x2ce>
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	e017      	b.n	8006cf6 <USB_ActivateEndpoint+0x2fe>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	085b      	lsrs	r3, r3, #1
 8006ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <USB_ActivateEndpoint+0x2e8>
 8006cda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cdc:	3301      	adds	r3, #1
 8006cde:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	029b      	lsls	r3, r3, #10
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01b      	beq.n	8006d46 <USB_ActivateEndpoint+0x34e>
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d24:	843b      	strh	r3, [r7, #32]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	8c3b      	ldrh	r3, [r7, #32]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d124      	bne.n	8006d98 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d64:	83bb      	strh	r3, [r7, #28]
 8006d66:	8bbb      	ldrh	r3, [r7, #28]
 8006d68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d6c:	83bb      	strh	r3, [r7, #28]
 8006d6e:	8bbb      	ldrh	r3, [r7, #28]
 8006d70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d74:	83bb      	strh	r3, [r7, #28]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	8bbb      	ldrh	r3, [r7, #28]
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]
 8006d96:	e1ea      	b.n	800716e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dae:	83fb      	strh	r3, [r7, #30]
 8006db0:	8bfb      	ldrh	r3, [r7, #30]
 8006db2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006db6:	83fb      	strh	r3, [r7, #30]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	441a      	add	r2, r3
 8006dc2:	8bfb      	ldrh	r3, [r7, #30]
 8006dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	8013      	strh	r3, [r2, #0]
 8006dd8:	e1c9      	b.n	800716e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	78db      	ldrb	r3, [r3, #3]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d11e      	bne.n	8006e20 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	441a      	add	r2, r3
 8006e06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006e0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e12:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	8013      	strh	r3, [r2, #0]
 8006e1e:	e01d      	b.n	8006e5c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e36:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	441a      	add	r2, r3
 8006e44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006e48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e6c:	4413      	add	r3, r2
 8006e6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	00da      	lsls	r2, r3, #3
 8006e76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	891b      	ldrh	r3, [r3, #8]
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea0:	4413      	add	r3, r2
 8006ea2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	00da      	lsls	r2, r3, #3
 8006eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eac:	4413      	add	r3, r2
 8006eae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	895b      	ldrh	r3, [r3, #10]
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ec2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f040 8093 	bne.w	8006ff4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006ede:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01b      	beq.n	8006f22 <USB_ActivateEndpoint+0x52a>
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	441a      	add	r2, r3
 8006f0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006f30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01b      	beq.n	8006f72 <USB_ActivateEndpoint+0x57a>
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f50:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	441a      	add	r2, r3
 8006f5c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f88:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f8a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006f8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f90:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f92:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006f94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f98:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	441a      	add	r2, r3
 8006fa4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	441a      	add	r2, r3
 8006fdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006fde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8013      	strh	r3, [r2, #0]
 8006ff2:	e0bc      	b.n	800716e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007004:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01d      	beq.n	800704c <USB_ActivateEndpoint+0x654>
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007026:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	441a      	add	r2, r3
 8007034:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007040:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007048:	b29b      	uxth	r3, r3
 800704a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800705c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01d      	beq.n	80070a4 <USB_ActivateEndpoint+0x6ac>
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800707a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	441a      	add	r2, r3
 800708c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800709c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	78db      	ldrb	r3, [r3, #3]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d024      	beq.n	80070f6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80070c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80070ca:	f083 0320 	eor.w	r3, r3, #32
 80070ce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	441a      	add	r2, r3
 80070dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80070e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	8013      	strh	r3, [r2, #0]
 80070f4:	e01d      	b.n	8007132 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	b29b      	uxth	r3, r3
 8007104:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800710c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	441a      	add	r2, r3
 800711a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800711e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800712a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800712e:	b29b      	uxth	r3, r3
 8007130:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007148:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800715a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800715e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800716a:	b29b      	uxth	r3, r3
 800716c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800716e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007172:	4618      	mov	r0, r3
 8007174:	3774      	adds	r7, #116	@ 0x74
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop

08007180 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007180:	b480      	push	{r7}
 8007182:	b08d      	sub	sp, #52	@ 0x34
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	7b1b      	ldrb	r3, [r3, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f040 808e 	bne.w	80072b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	785b      	ldrb	r3, [r3, #1]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d044      	beq.n	8007226 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	81bb      	strh	r3, [r7, #12]
 80071aa:	89bb      	ldrh	r3, [r7, #12]
 80071ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01b      	beq.n	80071ec <USB_DeactivateEndpoint+0x6c>
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ca:	817b      	strh	r3, [r7, #10]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	441a      	add	r2, r3
 80071d6:	897b      	ldrh	r3, [r7, #10]
 80071d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007202:	813b      	strh	r3, [r7, #8]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	441a      	add	r2, r3
 800720e:	893b      	ldrh	r3, [r7, #8]
 8007210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800721c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007220:	b29b      	uxth	r3, r3
 8007222:	8013      	strh	r3, [r2, #0]
 8007224:	e192      	b.n	800754c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	827b      	strh	r3, [r7, #18]
 8007234:	8a7b      	ldrh	r3, [r7, #18]
 8007236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d01b      	beq.n	8007276 <USB_DeactivateEndpoint+0xf6>
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007254:	823b      	strh	r3, [r7, #16]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	441a      	add	r2, r3
 8007260:	8a3b      	ldrh	r3, [r7, #16]
 8007262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800726a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800726e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007272:	b29b      	uxth	r3, r3
 8007274:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728c:	81fb      	strh	r3, [r7, #14]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	441a      	add	r2, r3
 8007298:	89fb      	ldrh	r3, [r7, #14]
 800729a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800729e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	8013      	strh	r3, [r2, #0]
 80072ae:	e14d      	b.n	800754c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f040 80a5 	bne.w	8007404 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	843b      	strh	r3, [r7, #32]
 80072c8:	8c3b      	ldrh	r3, [r7, #32]
 80072ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01b      	beq.n	800730a <USB_DeactivateEndpoint+0x18a>
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e8:	83fb      	strh	r3, [r7, #30]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	441a      	add	r2, r3
 80072f4:	8bfb      	ldrh	r3, [r7, #30]
 80072f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007306:	b29b      	uxth	r3, r3
 8007308:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	83bb      	strh	r3, [r7, #28]
 8007318:	8bbb      	ldrh	r3, [r7, #28]
 800731a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01b      	beq.n	800735a <USB_DeactivateEndpoint+0x1da>
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007338:	837b      	strh	r3, [r7, #26]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	441a      	add	r2, r3
 8007344:	8b7b      	ldrh	r3, [r7, #26]
 8007346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800734a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800734e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007352:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007356:	b29b      	uxth	r3, r3
 8007358:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800736c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007370:	833b      	strh	r3, [r7, #24]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	441a      	add	r2, r3
 800737c:	8b3b      	ldrh	r3, [r7, #24]
 800737e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800738a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800738e:	b29b      	uxth	r3, r3
 8007390:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a8:	82fb      	strh	r3, [r7, #22]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	441a      	add	r2, r3
 80073b4:	8afb      	ldrh	r3, [r7, #22]
 80073b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073e0:	82bb      	strh	r3, [r7, #20]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	441a      	add	r2, r3
 80073ec:	8abb      	ldrh	r3, [r7, #20]
 80073ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073fe:	b29b      	uxth	r3, r3
 8007400:	8013      	strh	r3, [r2, #0]
 8007402:	e0a3      	b.n	800754c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007412:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01b      	beq.n	8007454 <USB_DeactivateEndpoint+0x2d4>
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800742e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007432:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800744c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007450:	b29b      	uxth	r3, r3
 8007452:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007462:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01b      	beq.n	80074a4 <USB_DeactivateEndpoint+0x324>
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800747e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007482:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	441a      	add	r2, r3
 800748e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800749c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	441a      	add	r2, r3
 80074fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800750c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007510:	b29b      	uxth	r3, r3
 8007512:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	441a      	add	r2, r3
 8007536:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800753c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007548:	b29b      	uxth	r3, r3
 800754a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3734      	adds	r7, #52	@ 0x34
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b0c2      	sub	sp, #264	@ 0x108
 800755e:	af00      	add	r7, sp, #0
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007568:	6018      	str	r0, [r3, #0]
 800756a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007572:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b01      	cmp	r3, #1
 8007582:	f040 86b7 	bne.w	80082f4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699a      	ldr	r2, [r3, #24]
 8007592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d908      	bls.n	80075b4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80075a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80075b2:	e007      	b.n	80075c4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80075b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80075c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	7b1b      	ldrb	r3, [r3, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d13a      	bne.n	800764a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6959      	ldr	r1, [r3, #20]
 80075e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	88da      	ldrh	r2, [r3, #6]
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075fa:	6800      	ldr	r0, [r0, #0]
 80075fc:	f001 fc98 	bl	8008f30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007610:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800761a:	b29b      	uxth	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	4413      	add	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	00da      	lsls	r2, r3, #3
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	4413      	add	r3, r2
 8007636:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	f000 be1f 	b.w	8008288 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800764a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	78db      	ldrb	r3, [r3, #3]
 8007656:	2b02      	cmp	r3, #2
 8007658:	f040 8462 	bne.w	8007f20 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800765c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6a1a      	ldr	r2, [r3, #32]
 8007668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	429a      	cmp	r2, r3
 8007676:	f240 83df 	bls.w	8007e38 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800767a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	b29b      	uxth	r3, r3
 8007698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800769c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80076a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	441a      	add	r2, r3
 80076be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80076c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80076ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80076d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6a1a      	ldr	r2, [r3, #32]
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 81c7 	beq.w	8007aaa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	633b      	str	r3, [r7, #48]	@ 0x30
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d177      	bne.n	8007828 <USB_EPStartXfer+0x2ce>
 8007738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007752:	b29b      	uxth	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007758:	4413      	add	r3, r2
 800775a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800775c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	00da      	lsls	r2, r3, #3
 800776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776c:	4413      	add	r3, r2
 800776e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800777e:	b29a      	uxth	r2, r3
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	801a      	strh	r2, [r3, #0]
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007788:	2b3e      	cmp	r3, #62	@ 0x3e
 800778a:	d921      	bls.n	80077d0 <USB_EPStartXfer+0x276>
 800778c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007790:	095b      	lsrs	r3, r3, #5
 8007792:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <USB_EPStartXfer+0x252>
 80077a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80077a6:	3b01      	subs	r3, #1
 80077a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	029b      	lsls	r3, r3, #10
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	4313      	orrs	r3, r2
 80077be:	b29b      	uxth	r3, r3
 80077c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e050      	b.n	8007872 <USB_EPStartXfer+0x318>
 80077d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10a      	bne.n	80077ee <USB_EPStartXfer+0x294>
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	801a      	strh	r2, [r3, #0]
 80077ec:	e041      	b.n	8007872 <USB_EPStartXfer+0x318>
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <USB_EPStartXfer+0x2b4>
 8007804:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007808:	3301      	adds	r3, #1
 800780a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	b29a      	uxth	r2, r3
 8007814:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007818:	b29b      	uxth	r3, r3
 800781a:	029b      	lsls	r3, r3, #10
 800781c:	b29b      	uxth	r3, r3
 800781e:	4313      	orrs	r3, r2
 8007820:	b29a      	uxth	r2, r3
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	801a      	strh	r2, [r3, #0]
 8007826:	e024      	b.n	8007872 <USB_EPStartXfer+0x318>
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d11c      	bne.n	8007872 <USB_EPStartXfer+0x318>
 8007838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007846:	b29b      	uxth	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	4413      	add	r3, r2
 800784e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	00da      	lsls	r2, r3, #3
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	4413      	add	r3, r2
 8007862:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786c:	b29a      	uxth	r2, r3
 800786e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007870:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	895b      	ldrh	r3, [r3, #10]
 800787e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6959      	ldr	r1, [r3, #20]
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007892:	b29b      	uxth	r3, r3
 8007894:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007898:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800789c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078a0:	6800      	ldr	r0, [r0, #0]
 80078a2:	f001 fb45 	bl	8008f30 <USB_WritePMA>
            ep->xfer_buff += len;
 80078a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695a      	ldr	r2, [r3, #20]
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b6:	441a      	add	r2, r3
 80078b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6a1a      	ldr	r2, [r3, #32]
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d90f      	bls.n	8007900 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80078e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6a1a      	ldr	r2, [r3, #32]
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f0:	1ad2      	subs	r2, r2, r3
 80078f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	621a      	str	r2, [r3, #32]
 80078fe:	e00e      	b.n	800791e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2200      	movs	r2, #0
 800791c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800791e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	785b      	ldrb	r3, [r3, #1]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d177      	bne.n	8007a1e <USB_EPStartXfer+0x4c4>
 800792e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007948:	b29b      	uxth	r3, r3
 800794a:	461a      	mov	r2, r3
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	4413      	add	r3, r2
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	00da      	lsls	r2, r3, #3
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	4413      	add	r3, r2
 8007964:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007974:	b29a      	uxth	r2, r3
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	801a      	strh	r2, [r3, #0]
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007980:	d921      	bls.n	80079c6 <USB_EPStartXfer+0x46c>
 8007982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007986:	095b      	lsrs	r3, r3, #5
 8007988:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007990:	f003 031f 	and.w	r3, r3, #31
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <USB_EPStartXfer+0x448>
 8007998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800799c:	3b01      	subs	r3, #1
 800799e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	029b      	lsls	r3, r3, #10
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4313      	orrs	r3, r2
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079be:	b29a      	uxth	r2, r3
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	801a      	strh	r2, [r3, #0]
 80079c4:	e056      	b.n	8007a74 <USB_EPStartXfer+0x51a>
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <USB_EPStartXfer+0x48a>
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079dc:	b29a      	uxth	r2, r3
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	e047      	b.n	8007a74 <USB_EPStartXfer+0x51a>
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <USB_EPStartXfer+0x4aa>
 80079fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079fe:	3301      	adds	r3, #1
 8007a00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	029b      	lsls	r3, r3, #10
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	e02a      	b.n	8007a74 <USB_EPStartXfer+0x51a>
 8007a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d122      	bne.n	8007a74 <USB_EPStartXfer+0x51a>
 8007a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	623b      	str	r3, [r7, #32]
 8007a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	4413      	add	r3, r2
 8007a50:	623b      	str	r3, [r7, #32]
 8007a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	00da      	lsls	r2, r3, #3
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	4413      	add	r3, r2
 8007a64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a68:	61fb      	str	r3, [r7, #28]
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	891b      	ldrh	r3, [r3, #8]
 8007a80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6959      	ldr	r1, [r3, #20]
 8007a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007aa2:	6800      	ldr	r0, [r0, #0]
 8007aa4:	f001 fa44 	bl	8008f30 <USB_WritePMA>
 8007aa8:	e3ee      	b.n	8008288 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d177      	bne.n	8007baa <USB_EPStartXfer+0x650>
 8007aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ada:	4413      	add	r3, r2
 8007adc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	00da      	lsls	r2, r3, #3
 8007aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aee:	4413      	add	r3, r2
 8007af0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b04:	801a      	strh	r2, [r3, #0]
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b0c:	d921      	bls.n	8007b52 <USB_EPStartXfer+0x5f8>
 8007b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b12:	095b      	lsrs	r3, r3, #5
 8007b14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1c:	f003 031f 	and.w	r3, r3, #31
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <USB_EPStartXfer+0x5d4>
 8007b24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	029b      	lsls	r3, r3, #10
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	e056      	b.n	8007c00 <USB_EPStartXfer+0x6a6>
 8007b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <USB_EPStartXfer+0x616>
 8007b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b6c:	801a      	strh	r2, [r3, #0]
 8007b6e:	e047      	b.n	8007c00 <USB_EPStartXfer+0x6a6>
 8007b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b74:	085b      	lsrs	r3, r3, #1
 8007b76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d004      	beq.n	8007b90 <USB_EPStartXfer+0x636>
 8007b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	029b      	lsls	r3, r3, #10
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	e02a      	b.n	8007c00 <USB_EPStartXfer+0x6a6>
 8007baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d122      	bne.n	8007c00 <USB_EPStartXfer+0x6a6>
 8007bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bda:	4413      	add	r3, r2
 8007bdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	00da      	lsls	r2, r3, #3
 8007bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bee:	4413      	add	r3, r2
 8007bf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bfe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	891b      	ldrh	r3, [r3, #8]
 8007c0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6959      	ldr	r1, [r3, #20]
 8007c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c2e:	6800      	ldr	r0, [r0, #0]
 8007c30:	f001 f97e 	bl	8008f30 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	695a      	ldr	r2, [r3, #20]
 8007c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c44:	441a      	add	r2, r3
 8007c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6a1a      	ldr	r2, [r3, #32]
 8007c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d90f      	bls.n	8007c8e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6a1a      	ldr	r2, [r3, #32]
 8007c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	621a      	str	r2, [r3, #32]
 8007c8c:	e00e      	b.n	8007cac <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d177      	bne.n	8007db8 <USB_EPStartXfer+0x85e>
 8007cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce8:	4413      	add	r3, r2
 8007cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	00da      	lsls	r2, r3, #3
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d18:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d1a:	d921      	bls.n	8007d60 <USB_EPStartXfer+0x806>
 8007d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d20:	095b      	lsrs	r3, r3, #5
 8007d22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2a:	f003 031f 	and.w	r3, r3, #31
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d104      	bne.n	8007d3c <USB_EPStartXfer+0x7e2>
 8007d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d36:	3b01      	subs	r3, #1
 8007d38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	029b      	lsls	r3, r3, #10
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5c:	801a      	strh	r2, [r3, #0]
 8007d5e:	e050      	b.n	8007e02 <USB_EPStartXfer+0x8a8>
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10a      	bne.n	8007d7e <USB_EPStartXfer+0x824>
 8007d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7a:	801a      	strh	r2, [r3, #0]
 8007d7c:	e041      	b.n	8007e02 <USB_EPStartXfer+0x8a8>
 8007d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d004      	beq.n	8007d9e <USB_EPStartXfer+0x844>
 8007d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d98:	3301      	adds	r3, #1
 8007d9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	029b      	lsls	r3, r3, #10
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	4313      	orrs	r3, r2
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db4:	801a      	strh	r2, [r3, #0]
 8007db6:	e024      	b.n	8007e02 <USB_EPStartXfer+0x8a8>
 8007db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d11c      	bne.n	8007e02 <USB_EPStartXfer+0x8a8>
 8007dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	461a      	mov	r2, r3
 8007dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ddc:	4413      	add	r3, r2
 8007dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8007de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	00da      	lsls	r2, r3, #3
 8007dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007df0:	4413      	add	r3, r2
 8007df2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	895b      	ldrh	r3, [r3, #10]
 8007e0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6959      	ldr	r1, [r3, #20]
 8007e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e30:	6800      	ldr	r0, [r0, #0]
 8007e32:	f001 f87d 	bl	8008f30 <USB_WritePMA>
 8007e36:	e227      	b.n	8008288 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	441a      	add	r2, r3
 8007e8c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ec4:	4413      	add	r3, r2
 8007ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	00da      	lsls	r2, r3, #3
 8007ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ed8:	4413      	add	r3, r2
 8007eda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ede:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ee8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	891b      	ldrh	r3, [r3, #8]
 8007ef6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6959      	ldr	r1, [r3, #20]
 8007f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f18:	6800      	ldr	r0, [r0, #0]
 8007f1a:	f001 f809 	bl	8008f30 <USB_WritePMA>
 8007f1e:	e1b3      	b.n	8008288 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6a1a      	ldr	r2, [r3, #32]
 8007f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f30:	1ad2      	subs	r2, r2, r3
 8007f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 80c6 	beq.w	80080f2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d177      	bne.n	8008072 <USB_EPStartXfer+0xb18>
 8007f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fa2:	4413      	add	r3, r2
 8007fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	00da      	lsls	r2, r3, #3
 8007fb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fcc:	801a      	strh	r2, [r3, #0]
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fd4:	d921      	bls.n	800801a <USB_EPStartXfer+0xac0>
 8007fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fda:	095b      	lsrs	r3, r3, #5
 8007fdc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe4:	f003 031f 	and.w	r3, r3, #31
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d104      	bne.n	8007ff6 <USB_EPStartXfer+0xa9c>
 8007fec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008000:	b29b      	uxth	r3, r3
 8008002:	029b      	lsls	r3, r3, #10
 8008004:	b29b      	uxth	r3, r3
 8008006:	4313      	orrs	r3, r2
 8008008:	b29b      	uxth	r3, r3
 800800a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800800e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008012:	b29a      	uxth	r2, r3
 8008014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008016:	801a      	strh	r2, [r3, #0]
 8008018:	e050      	b.n	80080bc <USB_EPStartXfer+0xb62>
 800801a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <USB_EPStartXfer+0xade>
 8008022:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	b29b      	uxth	r3, r3
 8008028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800802c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008030:	b29a      	uxth	r2, r3
 8008032:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008034:	801a      	strh	r2, [r3, #0]
 8008036:	e041      	b.n	80080bc <USB_EPStartXfer+0xb62>
 8008038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803c:	085b      	lsrs	r3, r3, #1
 800803e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <USB_EPStartXfer+0xafe>
 800804e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008052:	3301      	adds	r3, #1
 8008054:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29a      	uxth	r2, r3
 800805e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008062:	b29b      	uxth	r3, r3
 8008064:	029b      	lsls	r3, r3, #10
 8008066:	b29b      	uxth	r3, r3
 8008068:	4313      	orrs	r3, r2
 800806a:	b29a      	uxth	r2, r3
 800806c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	e024      	b.n	80080bc <USB_EPStartXfer+0xb62>
 8008072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d11c      	bne.n	80080bc <USB_EPStartXfer+0xb62>
 8008082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008086:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008090:	b29b      	uxth	r3, r3
 8008092:	461a      	mov	r2, r3
 8008094:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008096:	4413      	add	r3, r2
 8008098:	673b      	str	r3, [r7, #112]	@ 0x70
 800809a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	00da      	lsls	r2, r3, #3
 80080a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080aa:	4413      	add	r3, r2
 80080ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80080b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80080bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	895b      	ldrh	r3, [r3, #10]
 80080c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6959      	ldr	r1, [r3, #20]
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80080e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80080e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80080ea:	6800      	ldr	r0, [r0, #0]
 80080ec:	f000 ff20 	bl	8008f30 <USB_WritePMA>
 80080f0:	e0ca      	b.n	8008288 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	785b      	ldrb	r3, [r3, #1]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d177      	bne.n	80081f2 <USB_EPStartXfer+0xc98>
 8008102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800810e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800811c:	b29b      	uxth	r3, r3
 800811e:	461a      	mov	r2, r3
 8008120:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008122:	4413      	add	r3, r2
 8008124:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	00da      	lsls	r2, r3, #3
 8008134:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008136:	4413      	add	r3, r2
 8008138:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800813c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800813e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008148:	b29a      	uxth	r2, r3
 800814a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008152:	2b3e      	cmp	r3, #62	@ 0x3e
 8008154:	d921      	bls.n	800819a <USB_EPStartXfer+0xc40>
 8008156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008164:	f003 031f 	and.w	r3, r3, #31
 8008168:	2b00      	cmp	r3, #0
 800816a:	d104      	bne.n	8008176 <USB_EPStartXfer+0xc1c>
 800816c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008170:	3b01      	subs	r3, #1
 8008172:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008176:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29a      	uxth	r2, r3
 800817c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008180:	b29b      	uxth	r3, r3
 8008182:	029b      	lsls	r3, r3, #10
 8008184:	b29b      	uxth	r3, r3
 8008186:	4313      	orrs	r3, r2
 8008188:	b29b      	uxth	r3, r3
 800818a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008192:	b29a      	uxth	r2, r3
 8008194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008196:	801a      	strh	r2, [r3, #0]
 8008198:	e05c      	b.n	8008254 <USB_EPStartXfer+0xcfa>
 800819a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10a      	bne.n	80081b8 <USB_EPStartXfer+0xc5e>
 80081a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081b4:	801a      	strh	r2, [r3, #0]
 80081b6:	e04d      	b.n	8008254 <USB_EPStartXfer+0xcfa>
 80081b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081bc:	085b      	lsrs	r3, r3, #1
 80081be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80081c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d004      	beq.n	80081d8 <USB_EPStartXfer+0xc7e>
 80081ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80081d2:	3301      	adds	r3, #1
 80081d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80081d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	b29a      	uxth	r2, r3
 80081de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	029b      	lsls	r3, r3, #10
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	4313      	orrs	r3, r2
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081ee:	801a      	strh	r2, [r3, #0]
 80081f0:	e030      	b.n	8008254 <USB_EPStartXfer+0xcfa>
 80081f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d128      	bne.n	8008254 <USB_EPStartXfer+0xcfa>
 8008202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800821e:	b29b      	uxth	r3, r3
 8008220:	461a      	mov	r2, r3
 8008222:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008226:	4413      	add	r3, r2
 8008228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800822c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	00da      	lsls	r2, r3, #3
 800823a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800823e:	4413      	add	r3, r2
 8008240:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824c:	b29a      	uxth	r2, r3
 800824e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008252:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	891b      	ldrh	r3, [r3, #8]
 8008260:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6959      	ldr	r1, [r3, #20]
 8008270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008274:	b29b      	uxth	r3, r3
 8008276:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800827a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800827e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008282:	6800      	ldr	r0, [r0, #0]
 8008284:	f000 fe54 	bl	8008f30 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800828c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ae:	817b      	strh	r3, [r7, #10]
 80082b0:	897b      	ldrh	r3, [r7, #10]
 80082b2:	f083 0310 	eor.w	r3, r3, #16
 80082b6:	817b      	strh	r3, [r7, #10]
 80082b8:	897b      	ldrh	r3, [r7, #10]
 80082ba:	f083 0320 	eor.w	r3, r3, #32
 80082be:	817b      	strh	r3, [r7, #10]
 80082c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	441a      	add	r2, r3
 80082da:	897b      	ldrh	r3, [r7, #10]
 80082dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	8013      	strh	r3, [r2, #0]
 80082f0:	f000 bcde 	b.w	8008cb0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	7b1b      	ldrb	r3, [r3, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	f040 80bb 	bne.w	800847c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	699a      	ldr	r2, [r3, #24]
 8008312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	429a      	cmp	r2, r3
 8008320:	d917      	bls.n	8008352 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699a      	ldr	r2, [r3, #24]
 800833e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	619a      	str	r2, [r3, #24]
 8008350:	e00e      	b.n	8008370 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2200      	movs	r2, #0
 800836e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800837e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800838c:	b29b      	uxth	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008394:	4413      	add	r3, r2
 8008396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800839a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	00da      	lsls	r2, r3, #3
 80083a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083ac:	4413      	add	r3, r2
 80083ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083c8:	801a      	strh	r2, [r3, #0]
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80083d0:	d924      	bls.n	800841c <USB_EPStartXfer+0xec2>
 80083d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <USB_EPStartXfer+0xe98>
 80083e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80083ec:	3b01      	subs	r3, #1
 80083ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80083fe:	b29b      	uxth	r3, r3
 8008400:	029b      	lsls	r3, r3, #10
 8008402:	b29b      	uxth	r3, r3
 8008404:	4313      	orrs	r3, r2
 8008406:	b29b      	uxth	r3, r3
 8008408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800840c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008410:	b29a      	uxth	r2, r3
 8008412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008416:	801a      	strh	r2, [r3, #0]
 8008418:	f000 bc10 	b.w	8008c3c <USB_EPStartXfer+0x16e2>
 800841c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10c      	bne.n	800843e <USB_EPStartXfer+0xee4>
 8008424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	b29b      	uxth	r3, r3
 800842c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008434:	b29a      	uxth	r2, r3
 8008436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	e3fe      	b.n	8008c3c <USB_EPStartXfer+0x16e2>
 800843e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008442:	085b      	lsrs	r3, r3, #1
 8008444:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <USB_EPStartXfer+0xf04>
 8008454:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008458:	3301      	adds	r3, #1
 800845a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800845e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29a      	uxth	r2, r3
 8008466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800846a:	b29b      	uxth	r3, r3
 800846c:	029b      	lsls	r3, r3, #10
 800846e:	b29b      	uxth	r3, r3
 8008470:	4313      	orrs	r3, r2
 8008472:	b29a      	uxth	r2, r3
 8008474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	e3df      	b.n	8008c3c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800847c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	78db      	ldrb	r3, [r3, #3]
 8008488:	2b02      	cmp	r3, #2
 800848a:	f040 8218 	bne.w	80088be <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800848e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	785b      	ldrb	r3, [r3, #1]
 800849a:	2b00      	cmp	r3, #0
 800849c:	f040 809d 	bne.w	80085da <USB_EPStartXfer+0x1080>
 80084a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084bc:	b29b      	uxth	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084c4:	4413      	add	r3, r2
 80084c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	00da      	lsls	r2, r3, #3
 80084d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084dc:	4413      	add	r3, r2
 80084de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084f8:	801a      	strh	r2, [r3, #0]
 80084fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	2b3e      	cmp	r3, #62	@ 0x3e
 8008508:	d92b      	bls.n	8008562 <USB_EPStartXfer+0x1008>
 800850a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800851c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f003 031f 	and.w	r3, r3, #31
 800852c:	2b00      	cmp	r3, #0
 800852e:	d104      	bne.n	800853a <USB_EPStartXfer+0xfe0>
 8008530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008534:	3b01      	subs	r3, #1
 8008536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800853a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29a      	uxth	r2, r3
 8008542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008546:	b29b      	uxth	r3, r3
 8008548:	029b      	lsls	r3, r3, #10
 800854a:	b29b      	uxth	r3, r3
 800854c:	4313      	orrs	r3, r2
 800854e:	b29b      	uxth	r3, r3
 8008550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008558:	b29a      	uxth	r2, r3
 800855a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800855e:	801a      	strh	r2, [r3, #0]
 8008560:	e070      	b.n	8008644 <USB_EPStartXfer+0x10ea>
 8008562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10c      	bne.n	800858c <USB_EPStartXfer+0x1032>
 8008572:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	b29b      	uxth	r3, r3
 800857a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800857e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008582:	b29a      	uxth	r2, r3
 8008584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008588:	801a      	strh	r2, [r3, #0]
 800858a:	e05b      	b.n	8008644 <USB_EPStartXfer+0x10ea>
 800858c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	085b      	lsrs	r3, r3, #1
 800859a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800859e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <USB_EPStartXfer+0x1062>
 80085b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b6:	3301      	adds	r3, #1
 80085b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	029b      	lsls	r3, r3, #10
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	4313      	orrs	r3, r2
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	e034      	b.n	8008644 <USB_EPStartXfer+0x10ea>
 80085da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d12c      	bne.n	8008644 <USB_EPStartXfer+0x10ea>
 80085ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008606:	b29b      	uxth	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800860e:	4413      	add	r3, r2
 8008610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	00da      	lsls	r2, r3, #3
 8008622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008626:	4413      	add	r3, r2
 8008628:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800862c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	b29a      	uxth	r2, r3
 800863e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008642:	801a      	strh	r2, [r3, #0]
 8008644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f040 809d 	bne.w	800879e <USB_EPStartXfer+0x1244>
 8008664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008680:	b29b      	uxth	r3, r3
 8008682:	461a      	mov	r2, r3
 8008684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008688:	4413      	add	r3, r2
 800868a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800868e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	00da      	lsls	r2, r3, #3
 800869c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086a0:	4413      	add	r3, r2
 80086a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80086aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80086cc:	d92b      	bls.n	8008726 <USB_EPStartXfer+0x11cc>
 80086ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80086e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	f003 031f 	and.w	r3, r3, #31
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <USB_EPStartXfer+0x11a4>
 80086f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f8:	3b01      	subs	r3, #1
 80086fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80086fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	b29a      	uxth	r2, r3
 8008706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800870a:	b29b      	uxth	r3, r3
 800870c:	029b      	lsls	r3, r3, #10
 800870e:	b29b      	uxth	r3, r3
 8008710:	4313      	orrs	r3, r2
 8008712:	b29b      	uxth	r3, r3
 8008714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800871c:	b29a      	uxth	r2, r3
 800871e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008722:	801a      	strh	r2, [r3, #0]
 8008724:	e069      	b.n	80087fa <USB_EPStartXfer+0x12a0>
 8008726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10c      	bne.n	8008750 <USB_EPStartXfer+0x11f6>
 8008736:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	b29b      	uxth	r3, r3
 800873e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008746:	b29a      	uxth	r2, r3
 8008748:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800874c:	801a      	strh	r2, [r3, #0]
 800874e:	e054      	b.n	80087fa <USB_EPStartXfer+0x12a0>
 8008750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <USB_EPStartXfer+0x1226>
 8008776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800877a:	3301      	adds	r3, #1
 800877c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008780:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29a      	uxth	r2, r3
 8008788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800878c:	b29b      	uxth	r3, r3
 800878e:	029b      	lsls	r3, r3, #10
 8008790:	b29b      	uxth	r3, r3
 8008792:	4313      	orrs	r3, r2
 8008794:	b29a      	uxth	r2, r3
 8008796:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800879a:	801a      	strh	r2, [r3, #0]
 800879c:	e02d      	b.n	80087fa <USB_EPStartXfer+0x12a0>
 800879e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	785b      	ldrb	r3, [r3, #1]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d125      	bne.n	80087fa <USB_EPStartXfer+0x12a0>
 80087ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087bc:	b29b      	uxth	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80087c4:	4413      	add	r3, r2
 80087c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80087ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	00da      	lsls	r2, r3, #3
 80087d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80087dc:	4413      	add	r3, r2
 80087de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80087fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 8218 	beq.w	8008c3c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800880c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800882c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <USB_EPStartXfer+0x12ea>
 8008838:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800883c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10d      	bne.n	8008860 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008844:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800884c:	2b00      	cmp	r3, #0
 800884e:	f040 81f5 	bne.w	8008c3c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008852:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	f040 81ee 	bne.w	8008c3c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008864:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008886:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800888a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	441a      	add	r2, r3
 80088a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80088a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	8013      	strh	r3, [r2, #0]
 80088bc:	e1be      	b.n	8008c3c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80088be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	78db      	ldrb	r3, [r3, #3]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	f040 81b4 	bne.w	8008c38 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80088d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699a      	ldr	r2, [r3, #24]
 80088dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d917      	bls.n	800891c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80088ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80088fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	699a      	ldr	r2, [r3, #24]
 8008908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800890c:	1ad2      	subs	r2, r2, r3
 800890e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	619a      	str	r2, [r3, #24]
 800891a:	e00e      	b.n	800893a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800891c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800892c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2200      	movs	r2, #0
 8008938:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800893a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800893e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f040 8085 	bne.w	8008a56 <USB_EPStartXfer+0x14fc>
 800894c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800895a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008968:	b29b      	uxth	r3, r3
 800896a:	461a      	mov	r2, r3
 800896c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008970:	4413      	add	r3, r2
 8008972:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800897a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	00da      	lsls	r2, r3, #3
 8008984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008988:	4413      	add	r3, r2
 800898a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800898e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008992:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800899e:	b29a      	uxth	r2, r3
 80089a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089a4:	801a      	strh	r2, [r3, #0]
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80089ac:	d923      	bls.n	80089f6 <USB_EPStartXfer+0x149c>
 80089ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80089b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d104      	bne.n	80089ce <USB_EPStartXfer+0x1474>
 80089c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089c8:	3b01      	subs	r3, #1
 80089ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80089ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089da:	b29b      	uxth	r3, r3
 80089dc:	029b      	lsls	r3, r3, #10
 80089de:	b29b      	uxth	r3, r3
 80089e0:	4313      	orrs	r3, r2
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089f2:	801a      	strh	r2, [r3, #0]
 80089f4:	e060      	b.n	8008ab8 <USB_EPStartXfer+0x155e>
 80089f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10c      	bne.n	8008a18 <USB_EPStartXfer+0x14be>
 80089fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a02:	881b      	ldrh	r3, [r3, #0]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a14:	801a      	strh	r2, [r3, #0]
 8008a16:	e04f      	b.n	8008ab8 <USB_EPStartXfer+0x155e>
 8008a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a1c:	085b      	lsrs	r3, r3, #1
 8008a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <USB_EPStartXfer+0x14de>
 8008a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a32:	3301      	adds	r3, #1
 8008a34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	029b      	lsls	r3, r3, #10
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a52:	801a      	strh	r2, [r3, #0]
 8008a54:	e030      	b.n	8008ab8 <USB_EPStartXfer+0x155e>
 8008a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d128      	bne.n	8008ab8 <USB_EPStartXfer+0x155e>
 8008a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	00da      	lsls	r2, r3, #3
 8008a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f040 8085 	bne.w	8008be2 <USB_EPStartXfer+0x1688>
 8008ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008adc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	461a      	mov	r2, r3
 8008af8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008afc:	4413      	add	r3, r2
 8008afe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	00da      	lsls	r2, r3, #3
 8008b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b14:	4413      	add	r3, r2
 8008b16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b30:	801a      	strh	r2, [r3, #0]
 8008b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b36:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b38:	d923      	bls.n	8008b82 <USB_EPStartXfer+0x1628>
 8008b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b3e:	095b      	lsrs	r3, r3, #5
 8008b40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b48:	f003 031f 	and.w	r3, r3, #31
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d104      	bne.n	8008b5a <USB_EPStartXfer+0x1600>
 8008b50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b54:	3b01      	subs	r3, #1
 8008b56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	029b      	lsls	r3, r3, #10
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	e05c      	b.n	8008c3c <USB_EPStartXfer+0x16e2>
 8008b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10c      	bne.n	8008ba4 <USB_EPStartXfer+0x164a>
 8008b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ba0:	801a      	strh	r2, [r3, #0]
 8008ba2:	e04b      	b.n	8008c3c <USB_EPStartXfer+0x16e2>
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba8:	085b      	lsrs	r3, r3, #1
 8008baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d004      	beq.n	8008bc4 <USB_EPStartXfer+0x166a>
 8008bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	029b      	lsls	r3, r3, #10
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	e02c      	b.n	8008c3c <USB_EPStartXfer+0x16e2>
 8008be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	785b      	ldrb	r3, [r3, #1]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d124      	bne.n	8008c3c <USB_EPStartXfer+0x16e2>
 8008bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	461a      	mov	r2, r3
 8008c04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008c08:	4413      	add	r3, r2
 8008c0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	00da      	lsls	r2, r3, #3
 8008c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008c20:	4413      	add	r3, r2
 8008c22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c34:	801a      	strh	r2, [r3, #0]
 8008c36:	e001      	b.n	8008c3c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e03a      	b.n	8008cb2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c62:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008c66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c6e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008c72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c76:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c7a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	441a      	add	r2, r3
 8008c98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	785b      	ldrb	r3, [r3, #1]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d020      	beq.n	8008d10 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ce4:	81bb      	strh	r3, [r7, #12]
 8008ce6:	89bb      	ldrh	r3, [r7, #12]
 8008ce8:	f083 0310 	eor.w	r3, r3, #16
 8008cec:	81bb      	strh	r3, [r7, #12]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	441a      	add	r2, r3
 8008cf8:	89bb      	ldrh	r3, [r7, #12]
 8008cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	8013      	strh	r3, [r2, #0]
 8008d0e:	e01f      	b.n	8008d50 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d26:	81fb      	strh	r3, [r7, #14]
 8008d28:	89fb      	ldrh	r3, [r7, #14]
 8008d2a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d2e:	81fb      	strh	r3, [r7, #14]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	441a      	add	r2, r3
 8008d3a:	89fb      	ldrh	r3, [r7, #14]
 8008d3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b087      	sub	sp, #28
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	7b1b      	ldrb	r3, [r3, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f040 809d 	bne.w	8008eac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	785b      	ldrb	r3, [r3, #1]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d04c      	beq.n	8008e14 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	823b      	strh	r3, [r7, #16]
 8008d88:	8a3b      	ldrh	r3, [r7, #16]
 8008d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d01b      	beq.n	8008dca <USB_EPClearStall+0x6c>
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da8:	81fb      	strh	r3, [r7, #14]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	441a      	add	r2, r3
 8008db4:	89fb      	ldrh	r3, [r7, #14]
 8008db6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	78db      	ldrb	r3, [r3, #3]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d06c      	beq.n	8008eac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008de8:	81bb      	strh	r3, [r7, #12]
 8008dea:	89bb      	ldrh	r3, [r7, #12]
 8008dec:	f083 0320 	eor.w	r3, r3, #32
 8008df0:	81bb      	strh	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	441a      	add	r2, r3
 8008dfc:	89bb      	ldrh	r3, [r7, #12]
 8008dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	8013      	strh	r3, [r2, #0]
 8008e12:	e04b      	b.n	8008eac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	82fb      	strh	r3, [r7, #22]
 8008e22:	8afb      	ldrh	r3, [r7, #22]
 8008e24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01b      	beq.n	8008e64 <USB_EPClearStall+0x106>
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	881b      	ldrh	r3, [r3, #0]
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e42:	82bb      	strh	r3, [r7, #20]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	441a      	add	r2, r3
 8008e4e:	8abb      	ldrh	r3, [r7, #20]
 8008e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e7a:	827b      	strh	r3, [r7, #18]
 8008e7c:	8a7b      	ldrh	r3, [r7, #18]
 8008e7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008e82:	827b      	strh	r3, [r7, #18]
 8008e84:	8a7b      	ldrh	r3, [r7, #18]
 8008e86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e8a:	827b      	strh	r3, [r7, #18]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	441a      	add	r2, r3
 8008e96:	8a7b      	ldrh	r3, [r7, #18]
 8008e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d103      	bne.n	8008ed4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2280      	movs	r2, #128	@ 0x80
 8008ed0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f22:	68fb      	ldr	r3, [r7, #12]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b08b      	sub	sp, #44	@ 0x2c
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	460b      	mov	r3, r1
 8008f40:	80fb      	strh	r3, [r7, #6]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f46:	88bb      	ldrh	r3, [r7, #4]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	085b      	lsrs	r3, r3, #1
 8008f4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f66:	e01b      	b.n	8008fa0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	3301      	adds	r3, #1
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	b21a      	sxth	r2, r3
 8008f78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	b21b      	sxth	r3, r3
 8008f80:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	8a7a      	ldrh	r2, [r7, #18]
 8008f86:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	3302      	adds	r3, #2
 8008f8c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	3301      	adds	r3, #1
 8008f92:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	3301      	adds	r3, #1
 8008f98:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e0      	bne.n	8008f68 <USB_WritePMA+0x38>
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	372c      	adds	r7, #44	@ 0x2c
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b08b      	sub	sp, #44	@ 0x2c
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	80fb      	strh	r3, [r7, #6]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008fca:	88bb      	ldrh	r3, [r7, #4]
 8008fcc:	085b      	lsrs	r3, r3, #1
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fda:	88fa      	ldrh	r2, [r7, #6]
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fe4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fea:	e018      	b.n	800901e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	3302      	adds	r3, #2
 8008ff8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	3301      	adds	r3, #1
 8009006:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	0a1b      	lsrs	r3, r3, #8
 800900c:	b2da      	uxtb	r2, r3
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	3301      	adds	r3, #1
 8009016:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	3b01      	subs	r3, #1
 800901c:	627b      	str	r3, [r7, #36]	@ 0x24
 800901e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e3      	bne.n	8008fec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009024:	88bb      	ldrh	r3, [r7, #4]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	b29b      	uxth	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d007      	beq.n	8009040 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	b29b      	uxth	r3, r3
 8009036:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	b2da      	uxtb	r2, r3
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	701a      	strb	r2, [r3, #0]
  }
}
 8009040:	bf00      	nop
 8009042:	372c      	adds	r7, #44	@ 0x2c
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009058:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800905c:	f002 f8fa 	bl	800b254 <USBD_static_malloc>
 8009060:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d105      	bne.n	8009074 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009070:	2302      	movs	r3, #2
 8009072:	e066      	b.n	8009142 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	7c1b      	ldrb	r3, [r3, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d119      	bne.n	80090b8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009084:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009088:	2202      	movs	r2, #2
 800908a:	2181      	movs	r1, #129	@ 0x81
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 ff88 	bl	800afa2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800909c:	2202      	movs	r2, #2
 800909e:	2101      	movs	r1, #1
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f001 ff7e 	bl	800afa2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2210      	movs	r2, #16
 80090b2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 80090b6:	e016      	b.n	80090e6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090b8:	2340      	movs	r3, #64	@ 0x40
 80090ba:	2202      	movs	r2, #2
 80090bc:	2181      	movs	r1, #129	@ 0x81
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 ff6f 	bl	800afa2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090ca:	2340      	movs	r3, #64	@ 0x40
 80090cc:	2202      	movs	r2, #2
 80090ce:	2101      	movs	r1, #1
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 ff66 	bl	800afa2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2210      	movs	r2, #16
 80090e2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80090e6:	2308      	movs	r3, #8
 80090e8:	2203      	movs	r2, #3
 80090ea:	2182      	movs	r1, #130	@ 0x82
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 ff58 	bl	800afa2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	7c1b      	ldrb	r3, [r3, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d109      	bne.n	8009130 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009126:	2101      	movs	r1, #1
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f002 f829 	bl	800b180 <USBD_LL_PrepareReceive>
 800912e:	e007      	b.n	8009140 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009136:	2340      	movs	r3, #64	@ 0x40
 8009138:	2101      	movs	r1, #1
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f002 f820 	bl	800b180 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009156:	2181      	movs	r1, #129	@ 0x81
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 ff48 	bl	800afee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009164:	2101      	movs	r1, #1
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 ff41 	bl	800afee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009174:	2182      	movs	r1, #130	@ 0x82
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 ff39 	bl	800afee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00e      	beq.n	80091b4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091a6:	4618      	mov	r0, r3
 80091a8:	f002 f862 	bl	800b270 <USBD_static_free>
    pdev->pClassData = NULL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e0af      	b.n	8009348 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d03f      	beq.n	8009274 <USBD_CDC_Setup+0xb4>
 80091f4:	2b20      	cmp	r3, #32
 80091f6:	f040 809f 	bne.w	8009338 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	88db      	ldrh	r3, [r3, #6]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d02e      	beq.n	8009260 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	b25b      	sxtb	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	da16      	bge.n	800923a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009218:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	88d2      	ldrh	r2, [r2, #6]
 800921e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	88db      	ldrh	r3, [r3, #6]
 8009224:	2b07      	cmp	r3, #7
 8009226:	bf28      	it	cs
 8009228:	2307      	movcs	r3, #7
 800922a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	89fa      	ldrh	r2, [r7, #14]
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 facd 	bl	800a7d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009238:	e085      	b.n	8009346 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	785a      	ldrb	r2, [r3, #1]
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	88db      	ldrh	r3, [r3, #6]
 8009248:	b2da      	uxtb	r2, r3
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009250:	6939      	ldr	r1, [r7, #16]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	88db      	ldrh	r3, [r3, #6]
 8009256:	461a      	mov	r2, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 fae6 	bl	800a82a <USBD_CtlPrepareRx>
      break;
 800925e:	e072      	b.n	8009346 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	7850      	ldrb	r0, [r2, #1]
 800926c:	2200      	movs	r2, #0
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	4798      	blx	r3
      break;
 8009272:	e068      	b.n	8009346 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	785b      	ldrb	r3, [r3, #1]
 8009278:	2b0b      	cmp	r3, #11
 800927a:	d852      	bhi.n	8009322 <USBD_CDC_Setup+0x162>
 800927c:	a201      	add	r2, pc, #4	@ (adr r2, 8009284 <USBD_CDC_Setup+0xc4>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	080092b5 	.word	0x080092b5
 8009288:	08009331 	.word	0x08009331
 800928c:	08009323 	.word	0x08009323
 8009290:	08009323 	.word	0x08009323
 8009294:	08009323 	.word	0x08009323
 8009298:	08009323 	.word	0x08009323
 800929c:	08009323 	.word	0x08009323
 80092a0:	08009323 	.word	0x08009323
 80092a4:	08009323 	.word	0x08009323
 80092a8:	08009323 	.word	0x08009323
 80092ac:	080092df 	.word	0x080092df
 80092b0:	08009309 	.word	0x08009309
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b03      	cmp	r3, #3
 80092be:	d107      	bne.n	80092d0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80092c0:	f107 030a 	add.w	r3, r7, #10
 80092c4:	2202      	movs	r2, #2
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fa82 	bl	800a7d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092ce:	e032      	b.n	8009336 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f001 fa0c 	bl	800a6f0 <USBD_CtlError>
            ret = USBD_FAIL;
 80092d8:	2303      	movs	r3, #3
 80092da:	75fb      	strb	r3, [r7, #23]
          break;
 80092dc:	e02b      	b.n	8009336 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d107      	bne.n	80092fa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80092ea:	f107 030d 	add.w	r3, r7, #13
 80092ee:	2201      	movs	r2, #1
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 fa6d 	bl	800a7d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092f8:	e01d      	b.n	8009336 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 f9f7 	bl	800a6f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009302:	2303      	movs	r3, #3
 8009304:	75fb      	strb	r3, [r7, #23]
          break;
 8009306:	e016      	b.n	8009336 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b03      	cmp	r3, #3
 8009312:	d00f      	beq.n	8009334 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 f9ea 	bl	800a6f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800931c:	2303      	movs	r3, #3
 800931e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009320:	e008      	b.n	8009334 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 f9e3 	bl	800a6f0 <USBD_CtlError>
          ret = USBD_FAIL;
 800932a:	2303      	movs	r3, #3
 800932c:	75fb      	strb	r3, [r7, #23]
          break;
 800932e:	e002      	b.n	8009336 <USBD_CDC_Setup+0x176>
          break;
 8009330:	bf00      	nop
 8009332:	e008      	b.n	8009346 <USBD_CDC_Setup+0x186>
          break;
 8009334:	bf00      	nop
      }
      break;
 8009336:	e006      	b.n	8009346 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f001 f9d8 	bl	800a6f0 <USBD_CtlError>
      ret = USBD_FAIL;
 8009340:	2303      	movs	r3, #3
 8009342:	75fb      	strb	r3, [r7, #23]
      break;
 8009344:	bf00      	nop
  }

  return (uint8_t)ret;
 8009346:	7dfb      	ldrb	r3, [r7, #23]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009362:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800936e:	2303      	movs	r3, #3
 8009370:	e04f      	b.n	8009412 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009378:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800937a:	78fa      	ldrb	r2, [r7, #3]
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	440b      	add	r3, r1
 8009388:	3318      	adds	r3, #24
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d029      	beq.n	80093e4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009390:	78fa      	ldrb	r2, [r7, #3]
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	3318      	adds	r3, #24
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	78f9      	ldrb	r1, [r7, #3]
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	460b      	mov	r3, r1
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	440b      	add	r3, r1
 80093ac:	00db      	lsls	r3, r3, #3
 80093ae:	4403      	add	r3, r0
 80093b0:	3320      	adds	r3, #32
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d110      	bne.n	80093e4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	3318      	adds	r3, #24
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093d6:	78f9      	ldrb	r1, [r7, #3]
 80093d8:	2300      	movs	r3, #0
 80093da:	2200      	movs	r2, #0
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 feae 	bl	800b13e <USBD_LL_Transmit>
 80093e2:	e015      	b.n	8009410 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800940c:	78fa      	ldrb	r2, [r7, #3]
 800940e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	460b      	mov	r3, r1
 8009424:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800942c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009438:	2303      	movs	r3, #3
 800943a:	e015      	b.n	8009468 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 febe 	bl	800b1c2 <USBD_LL_GetRxDataSize>
 8009446:	4602      	mov	r2, r0
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009462:	4611      	mov	r1, r2
 8009464:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800947e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009486:	2303      	movs	r3, #3
 8009488:	e01a      	b.n	80094c0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d014      	beq.n	80094be <USBD_CDC_EP0_RxReady+0x4e>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800949a:	2bff      	cmp	r3, #255	@ 0xff
 800949c:	d00f      	beq.n	80094be <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80094ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80094b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	22ff      	movs	r2, #255	@ 0xff
 80094ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2243      	movs	r2, #67	@ 0x43
 80094d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80094d6:	4b03      	ldr	r3, [pc, #12]	@ (80094e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	20000094 	.word	0x20000094

080094e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2243      	movs	r2, #67	@ 0x43
 80094f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80094f6:	4b03      	ldr	r3, [pc, #12]	@ (8009504 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	20000050 	.word	0x20000050

08009508 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2243      	movs	r2, #67	@ 0x43
 8009514:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009516:	4b03      	ldr	r3, [pc, #12]	@ (8009524 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	200000d8 	.word	0x200000d8

08009528 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	220a      	movs	r2, #10
 8009534:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009536:	4b03      	ldr	r3, [pc, #12]	@ (8009544 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	2000000c 	.word	0x2000000c

08009548 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d101      	bne.n	800955c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009558:	2303      	movs	r3, #3
 800955a:	e004      	b.n	8009566 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009572:	b480      	push	{r7}
 8009574:	b087      	sub	sp, #28
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009584:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800958c:	2303      	movs	r3, #3
 800958e:	e008      	b.n	80095a2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e004      	b.n	80095d4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80095f0:	2301      	movs	r3, #1
 80095f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80095fe:	2303      	movs	r3, #3
 8009600:	e01a      	b.n	8009638 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009608:	2b00      	cmp	r3, #0
 800960a:	d114      	bne.n	8009636 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2201      	movs	r2, #1
 8009610:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800962a:	2181      	movs	r1, #129	@ 0x81
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f001 fd86 	bl	800b13e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800964e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800965a:	2303      	movs	r3, #3
 800965c:	e016      	b.n	800968c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	7c1b      	ldrb	r3, [r3, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d109      	bne.n	800967a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800966c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009670:	2101      	movs	r1, #1
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fd84 	bl	800b180 <USBD_LL_PrepareReceive>
 8009678:	e007      	b.n	800968a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009680:	2340      	movs	r3, #64	@ 0x40
 8009682:	2101      	movs	r1, #1
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 fd7b 	bl	800b180 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	4613      	mov	r3, r2
 80096a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e01f      	b.n	80096ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	79fa      	ldrb	r2, [r7, #7]
 80096de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f001 fbe3 	bl	800aeac <USBD_LL_Init>
 80096e6:	4603      	mov	r3, r0
 80096e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096fe:	2300      	movs	r3, #0
 8009700:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009708:	2303      	movs	r3, #3
 800970a:	e016      	b.n	800973a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800971a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009728:	f107 020e 	add.w	r2, r7, #14
 800972c:	4610      	mov	r0, r2
 800972e:	4798      	blx	r3
 8009730:	4602      	mov	r2, r0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b082      	sub	sp, #8
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 fc0e 	bl	800af6c <USBD_LL_Start>
 8009750:	4603      	mov	r3, r0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800977c:	2303      	movs	r3, #3
 800977e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009786:	2b00      	cmp	r3, #0
 8009788:	d009      	beq.n	800979e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	78fa      	ldrb	r2, [r7, #3]
 8009794:	4611      	mov	r1, r2
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	4798      	blx	r3
 800979a:	4603      	mov	r3, r0
 800979c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d007      	beq.n	80097ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	78fa      	ldrb	r2, [r7, #3]
 80097c8:	4611      	mov	r1, r2
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	4798      	blx	r3
  }

  return USBD_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 ff46 	bl	800a67c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80097fe:	461a      	mov	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800980c:	f003 031f 	and.w	r3, r3, #31
 8009810:	2b02      	cmp	r3, #2
 8009812:	d01a      	beq.n	800984a <USBD_LL_SetupStage+0x72>
 8009814:	2b02      	cmp	r3, #2
 8009816:	d822      	bhi.n	800985e <USBD_LL_SetupStage+0x86>
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <USBD_LL_SetupStage+0x4a>
 800981c:	2b01      	cmp	r3, #1
 800981e:	d00a      	beq.n	8009836 <USBD_LL_SetupStage+0x5e>
 8009820:	e01d      	b.n	800985e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f9ee 	bl	8009c0c <USBD_StdDevReq>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
      break;
 8009834:	e020      	b.n	8009878 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa52 	bl	8009ce8 <USBD_StdItfReq>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]
      break;
 8009848:	e016      	b.n	8009878 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fa91 	bl	8009d7a <USBD_StdEPReq>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]
      break;
 800985c:	e00c      	b.n	8009878 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009864:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009868:	b2db      	uxtb	r3, r3
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 fbdd 	bl	800b02c <USBD_LL_StallEP>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]
      break;
 8009876:	bf00      	nop
  }

  return ret;
 8009878:	7bfb      	ldrb	r3, [r7, #15]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b086      	sub	sp, #24
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	460b      	mov	r3, r1
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d138      	bne.n	8009908 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800989c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d14a      	bne.n	800993e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d913      	bls.n	80098dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	689a      	ldr	r2, [r3, #8]
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	1ad2      	subs	r2, r2, r3
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	4293      	cmp	r3, r2
 80098cc:	bf28      	it	cs
 80098ce:	4613      	movcs	r3, r2
 80098d0:	461a      	mov	r2, r3
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f000 ffc5 	bl	800a864 <USBD_CtlContinueRx>
 80098da:	e030      	b.n	800993e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d10b      	bne.n	8009900 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 ffc0 	bl	800a886 <USBD_CtlSendStatus>
 8009906:	e01a      	b.n	800993e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b03      	cmp	r3, #3
 8009912:	d114      	bne.n	800993e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00e      	beq.n	800993e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	7afa      	ldrb	r2, [r7, #11]
 800992a:	4611      	mov	r1, r2
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	4798      	blx	r3
 8009930:	4603      	mov	r3, r0
 8009932:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800993a:	7dfb      	ldrb	r3, [r7, #23]
 800993c:	e000      	b.n	8009940 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	460b      	mov	r3, r1
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009956:	7afb      	ldrb	r3, [r7, #11]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d16b      	bne.n	8009a34 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3314      	adds	r3, #20
 8009960:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009968:	2b02      	cmp	r3, #2
 800996a:	d156      	bne.n	8009a1a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	689a      	ldr	r2, [r3, #8]
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	429a      	cmp	r2, r3
 8009976:	d914      	bls.n	80099a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	1ad2      	subs	r2, r2, r3
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	461a      	mov	r2, r3
 800998c:	6879      	ldr	r1, [r7, #4]
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 ff3a 	bl	800a808 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009994:	2300      	movs	r3, #0
 8009996:	2200      	movs	r2, #0
 8009998:	2100      	movs	r1, #0
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f001 fbf0 	bl	800b180 <USBD_LL_PrepareReceive>
 80099a0:	e03b      	b.n	8009a1a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d11c      	bne.n	80099e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d316      	bcc.n	80099e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d20f      	bcs.n	80099e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80099c8:	2200      	movs	r2, #0
 80099ca:	2100      	movs	r1, #0
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 ff1b 	bl	800a808 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099da:	2300      	movs	r3, #0
 80099dc:	2200      	movs	r2, #0
 80099de:	2100      	movs	r1, #0
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f001 fbcd 	bl	800b180 <USBD_LL_PrepareReceive>
 80099e6:	e018      	b.n	8009a1a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d10b      	bne.n	8009a0c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d005      	beq.n	8009a0c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a0c:	2180      	movs	r1, #128	@ 0x80
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f001 fb0c 	bl	800b02c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 ff49 	bl	800a8ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d122      	bne.n	8009a6a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f7ff fe98 	bl	800975a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009a32:	e01a      	b.n	8009a6a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d114      	bne.n	8009a6a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00e      	beq.n	8009a6a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	7afa      	ldrb	r2, [r7, #11]
 8009a56:	4611      	mov	r1, r2
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	4798      	blx	r3
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009a60:	7dfb      	ldrb	r3, [r7, #23]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009a66:	7dfb      	ldrb	r3, [r7, #23]
 8009a68:	e000      	b.n	8009a6c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e02f      	b.n	8009b08 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00f      	beq.n	8009ad2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d009      	beq.n	8009ad2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	6852      	ldr	r2, [r2, #4]
 8009aca:	b2d2      	uxtb	r2, r2
 8009acc:	4611      	mov	r1, r2
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ad2:	2340      	movs	r3, #64	@ 0x40
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 fa62 	bl	800afa2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2240      	movs	r2, #64	@ 0x40
 8009aea:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009aee:	2340      	movs	r3, #64	@ 0x40
 8009af0:	2200      	movs	r2, #0
 8009af2:	2180      	movs	r1, #128	@ 0x80
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 fa54 	bl	800afa2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2240      	movs	r2, #64	@ 0x40
 8009b04:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	78fa      	ldrb	r2, [r7, #3]
 8009b20:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2204      	movs	r2, #4
 8009b4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d106      	bne.n	8009b7e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e012      	b.n	8009bc8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d10b      	bne.n	8009bc6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	3301      	adds	r3, #1
 8009be6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009bee:	8a3b      	ldrh	r3, [r7, #16]
 8009bf0:	021b      	lsls	r3, r3, #8
 8009bf2:	b21a      	sxth	r2, r3
 8009bf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	b21b      	sxth	r3, r3
 8009bfc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009bfe:	89fb      	ldrh	r3, [r7, #14]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c22:	2b40      	cmp	r3, #64	@ 0x40
 8009c24:	d005      	beq.n	8009c32 <USBD_StdDevReq+0x26>
 8009c26:	2b40      	cmp	r3, #64	@ 0x40
 8009c28:	d853      	bhi.n	8009cd2 <USBD_StdDevReq+0xc6>
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00b      	beq.n	8009c46 <USBD_StdDevReq+0x3a>
 8009c2e:	2b20      	cmp	r3, #32
 8009c30:	d14f      	bne.n	8009cd2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	4798      	blx	r3
 8009c40:	4603      	mov	r3, r0
 8009c42:	73fb      	strb	r3, [r7, #15]
      break;
 8009c44:	e04a      	b.n	8009cdc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	785b      	ldrb	r3, [r3, #1]
 8009c4a:	2b09      	cmp	r3, #9
 8009c4c:	d83b      	bhi.n	8009cc6 <USBD_StdDevReq+0xba>
 8009c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c54 <USBD_StdDevReq+0x48>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009ca9 	.word	0x08009ca9
 8009c58:	08009cbd 	.word	0x08009cbd
 8009c5c:	08009cc7 	.word	0x08009cc7
 8009c60:	08009cb3 	.word	0x08009cb3
 8009c64:	08009cc7 	.word	0x08009cc7
 8009c68:	08009c87 	.word	0x08009c87
 8009c6c:	08009c7d 	.word	0x08009c7d
 8009c70:	08009cc7 	.word	0x08009cc7
 8009c74:	08009c9f 	.word	0x08009c9f
 8009c78:	08009c91 	.word	0x08009c91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f9de 	bl	800a040 <USBD_GetDescriptor>
          break;
 8009c84:	e024      	b.n	8009cd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fb6d 	bl	800a368 <USBD_SetAddress>
          break;
 8009c8e:	e01f      	b.n	8009cd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fbac 	bl	800a3f0 <USBD_SetConfig>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73fb      	strb	r3, [r7, #15]
          break;
 8009c9c:	e018      	b.n	8009cd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fc4b 	bl	800a53c <USBD_GetConfig>
          break;
 8009ca6:	e013      	b.n	8009cd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fc7c 	bl	800a5a8 <USBD_GetStatus>
          break;
 8009cb0:	e00e      	b.n	8009cd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fcab 	bl	800a610 <USBD_SetFeature>
          break;
 8009cba:	e009      	b.n	8009cd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fcba 	bl	800a638 <USBD_ClrFeature>
          break;
 8009cc4:	e004      	b.n	8009cd0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fd11 	bl	800a6f0 <USBD_CtlError>
          break;
 8009cce:	bf00      	nop
      }
      break;
 8009cd0:	e004      	b.n	8009cdc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fd0b 	bl	800a6f0 <USBD_CtlError>
      break;
 8009cda:	bf00      	nop
  }

  return ret;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop

08009ce8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cfe:	2b40      	cmp	r3, #64	@ 0x40
 8009d00:	d005      	beq.n	8009d0e <USBD_StdItfReq+0x26>
 8009d02:	2b40      	cmp	r3, #64	@ 0x40
 8009d04:	d82f      	bhi.n	8009d66 <USBD_StdItfReq+0x7e>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <USBD_StdItfReq+0x26>
 8009d0a:	2b20      	cmp	r3, #32
 8009d0c:	d12b      	bne.n	8009d66 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	3b01      	subs	r3, #1
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d81d      	bhi.n	8009d58 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	889b      	ldrh	r3, [r3, #4]
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d813      	bhi.n	8009d4e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	4798      	blx	r3
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	88db      	ldrh	r3, [r3, #6]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d110      	bne.n	8009d62 <USBD_StdItfReq+0x7a>
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10d      	bne.n	8009d62 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fd9d 	bl	800a886 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d4c:	e009      	b.n	8009d62 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fccd 	bl	800a6f0 <USBD_CtlError>
          break;
 8009d56:	e004      	b.n	8009d62 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fcc8 	bl	800a6f0 <USBD_CtlError>
          break;
 8009d60:	e000      	b.n	8009d64 <USBD_StdItfReq+0x7c>
          break;
 8009d62:	bf00      	nop
      }
      break;
 8009d64:	e004      	b.n	8009d70 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fcc1 	bl	800a6f0 <USBD_CtlError>
      break;
 8009d6e:	bf00      	nop
  }

  return ret;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	889b      	ldrh	r3, [r3, #4]
 8009d8c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d96:	2b40      	cmp	r3, #64	@ 0x40
 8009d98:	d007      	beq.n	8009daa <USBD_StdEPReq+0x30>
 8009d9a:	2b40      	cmp	r3, #64	@ 0x40
 8009d9c:	f200 8145 	bhi.w	800a02a <USBD_StdEPReq+0x2b0>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00c      	beq.n	8009dbe <USBD_StdEPReq+0x44>
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	f040 8140 	bne.w	800a02a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	4798      	blx	r3
 8009db8:	4603      	mov	r3, r0
 8009dba:	73fb      	strb	r3, [r7, #15]
      break;
 8009dbc:	e13a      	b.n	800a034 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	785b      	ldrb	r3, [r3, #1]
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d007      	beq.n	8009dd6 <USBD_StdEPReq+0x5c>
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	f300 8129 	bgt.w	800a01e <USBD_StdEPReq+0x2a4>
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d07f      	beq.n	8009ed0 <USBD_StdEPReq+0x156>
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d03c      	beq.n	8009e4e <USBD_StdEPReq+0xd4>
 8009dd4:	e123      	b.n	800a01e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d002      	beq.n	8009de8 <USBD_StdEPReq+0x6e>
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d016      	beq.n	8009e14 <USBD_StdEPReq+0x9a>
 8009de6:	e02c      	b.n	8009e42 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00d      	beq.n	8009e0a <USBD_StdEPReq+0x90>
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
 8009df0:	2b80      	cmp	r3, #128	@ 0x80
 8009df2:	d00a      	beq.n	8009e0a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 f917 	bl	800b02c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dfe:	2180      	movs	r1, #128	@ 0x80
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f001 f913 	bl	800b02c <USBD_LL_StallEP>
 8009e06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e08:	e020      	b.n	8009e4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fc6f 	bl	800a6f0 <USBD_CtlError>
              break;
 8009e12:	e01b      	b.n	8009e4c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	885b      	ldrh	r3, [r3, #2]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10e      	bne.n	8009e3a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00b      	beq.n	8009e3a <USBD_StdEPReq+0xc0>
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
 8009e24:	2b80      	cmp	r3, #128	@ 0x80
 8009e26:	d008      	beq.n	8009e3a <USBD_StdEPReq+0xc0>
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	88db      	ldrh	r3, [r3, #6]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d104      	bne.n	8009e3a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f8f9 	bl	800b02c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fd23 	bl	800a886 <USBD_CtlSendStatus>

              break;
 8009e40:	e004      	b.n	8009e4c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fc53 	bl	800a6f0 <USBD_CtlError>
              break;
 8009e4a:	bf00      	nop
          }
          break;
 8009e4c:	e0ec      	b.n	800a028 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d002      	beq.n	8009e60 <USBD_StdEPReq+0xe6>
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	d016      	beq.n	8009e8c <USBD_StdEPReq+0x112>
 8009e5e:	e030      	b.n	8009ec2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00d      	beq.n	8009e82 <USBD_StdEPReq+0x108>
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	2b80      	cmp	r3, #128	@ 0x80
 8009e6a:	d00a      	beq.n	8009e82 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 f8db 	bl	800b02c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e76:	2180      	movs	r1, #128	@ 0x80
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 f8d7 	bl	800b02c <USBD_LL_StallEP>
 8009e7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e80:	e025      	b.n	8009ece <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fc33 	bl	800a6f0 <USBD_CtlError>
              break;
 8009e8a:	e020      	b.n	8009ece <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	885b      	ldrh	r3, [r3, #2]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d11b      	bne.n	8009ecc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f001 f8e1 	bl	800b06a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fcec 	bl	800a886 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	4798      	blx	r3
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009ec0:	e004      	b.n	8009ecc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fc13 	bl	800a6f0 <USBD_CtlError>
              break;
 8009eca:	e000      	b.n	8009ece <USBD_StdEPReq+0x154>
              break;
 8009ecc:	bf00      	nop
          }
          break;
 8009ece:	e0ab      	b.n	800a028 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d002      	beq.n	8009ee2 <USBD_StdEPReq+0x168>
 8009edc:	2b03      	cmp	r3, #3
 8009ede:	d032      	beq.n	8009f46 <USBD_StdEPReq+0x1cc>
 8009ee0:	e097      	b.n	800a012 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d007      	beq.n	8009ef8 <USBD_StdEPReq+0x17e>
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	2b80      	cmp	r3, #128	@ 0x80
 8009eec:	d004      	beq.n	8009ef8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fbfd 	bl	800a6f0 <USBD_CtlError>
                break;
 8009ef6:	e091      	b.n	800a01c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	da0b      	bge.n	8009f18 <USBD_StdEPReq+0x19e>
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f06:	4613      	mov	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	3310      	adds	r3, #16
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	4413      	add	r3, r2
 8009f14:	3304      	adds	r3, #4
 8009f16:	e00b      	b.n	8009f30 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f18:	7bbb      	ldrb	r3, [r7, #14]
 8009f1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f1e:	4613      	mov	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4413      	add	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	3304      	adds	r3, #4
 8009f30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2200      	movs	r2, #0
 8009f36:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fc47 	bl	800a7d2 <USBD_CtlSendData>
              break;
 8009f44:	e06a      	b.n	800a01c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	da11      	bge.n	8009f72 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	f003 020f 	and.w	r2, r3, #15
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	4613      	mov	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	440b      	add	r3, r1
 8009f60:	3324      	adds	r3, #36	@ 0x24
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d117      	bne.n	8009f98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fbc0 	bl	800a6f0 <USBD_CtlError>
                  break;
 8009f70:	e054      	b.n	800a01c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
 8009f74:	f003 020f 	and.w	r2, r3, #15
 8009f78:	6879      	ldr	r1, [r7, #4]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	440b      	add	r3, r1
 8009f84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d104      	bne.n	8009f98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fbad 	bl	800a6f0 <USBD_CtlError>
                  break;
 8009f96:	e041      	b.n	800a01c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	da0b      	bge.n	8009fb8 <USBD_StdEPReq+0x23e>
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	3310      	adds	r3, #16
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	e00b      	b.n	8009fd0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	4413      	add	r3, r2
 8009fce:	3304      	adds	r3, #4
 8009fd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fd2:	7bbb      	ldrb	r3, [r7, #14]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <USBD_StdEPReq+0x264>
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
 8009fda:	2b80      	cmp	r3, #128	@ 0x80
 8009fdc:	d103      	bne.n	8009fe6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	e00e      	b.n	800a004 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 f85c 	bl	800b0a8 <USBD_LL_IsStallEP>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	e002      	b.n	800a004 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2200      	movs	r2, #0
 800a002:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2202      	movs	r2, #2
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fbe1 	bl	800a7d2 <USBD_CtlSendData>
              break;
 800a010:	e004      	b.n	800a01c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fb6b 	bl	800a6f0 <USBD_CtlError>
              break;
 800a01a:	bf00      	nop
          }
          break;
 800a01c:	e004      	b.n	800a028 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fb65 	bl	800a6f0 <USBD_CtlError>
          break;
 800a026:	bf00      	nop
      }
      break;
 800a028:	e004      	b.n	800a034 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fb5f 	bl	800a6f0 <USBD_CtlError>
      break;
 800a032:	bf00      	nop
  }

  return ret;
 800a034:	7bfb      	ldrb	r3, [r7, #15]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	885b      	ldrh	r3, [r3, #2]
 800a05a:	0a1b      	lsrs	r3, r3, #8
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	3b01      	subs	r3, #1
 800a060:	2b0e      	cmp	r3, #14
 800a062:	f200 8152 	bhi.w	800a30a <USBD_GetDescriptor+0x2ca>
 800a066:	a201      	add	r2, pc, #4	@ (adr r2, 800a06c <USBD_GetDescriptor+0x2c>)
 800a068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06c:	0800a0dd 	.word	0x0800a0dd
 800a070:	0800a0f5 	.word	0x0800a0f5
 800a074:	0800a135 	.word	0x0800a135
 800a078:	0800a30b 	.word	0x0800a30b
 800a07c:	0800a30b 	.word	0x0800a30b
 800a080:	0800a2ab 	.word	0x0800a2ab
 800a084:	0800a2d7 	.word	0x0800a2d7
 800a088:	0800a30b 	.word	0x0800a30b
 800a08c:	0800a30b 	.word	0x0800a30b
 800a090:	0800a30b 	.word	0x0800a30b
 800a094:	0800a30b 	.word	0x0800a30b
 800a098:	0800a30b 	.word	0x0800a30b
 800a09c:	0800a30b 	.word	0x0800a30b
 800a0a0:	0800a30b 	.word	0x0800a30b
 800a0a4:	0800a0a9 	.word	0x0800a0a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ae:	69db      	ldr	r3, [r3, #28]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00b      	beq.n	800a0cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	7c12      	ldrb	r2, [r2, #16]
 800a0c0:	f107 0108 	add.w	r1, r7, #8
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	4798      	blx	r3
 800a0c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0ca:	e126      	b.n	800a31a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fb0e 	bl	800a6f0 <USBD_CtlError>
        err++;
 800a0d4:	7afb      	ldrb	r3, [r7, #11]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	72fb      	strb	r3, [r7, #11]
      break;
 800a0da:	e11e      	b.n	800a31a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	7c12      	ldrb	r2, [r2, #16]
 800a0e8:	f107 0108 	add.w	r1, r7, #8
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4798      	blx	r3
 800a0f0:	60f8      	str	r0, [r7, #12]
      break;
 800a0f2:	e112      	b.n	800a31a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	7c1b      	ldrb	r3, [r3, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10d      	bne.n	800a118 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a104:	f107 0208 	add.w	r2, r7, #8
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
 800a10c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3301      	adds	r3, #1
 800a112:	2202      	movs	r2, #2
 800a114:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a116:	e100      	b.n	800a31a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a120:	f107 0208 	add.w	r2, r7, #8
 800a124:	4610      	mov	r0, r2
 800a126:	4798      	blx	r3
 800a128:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3301      	adds	r3, #1
 800a12e:	2202      	movs	r2, #2
 800a130:	701a      	strb	r2, [r3, #0]
      break;
 800a132:	e0f2      	b.n	800a31a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	885b      	ldrh	r3, [r3, #2]
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b05      	cmp	r3, #5
 800a13c:	f200 80ac 	bhi.w	800a298 <USBD_GetDescriptor+0x258>
 800a140:	a201      	add	r2, pc, #4	@ (adr r2, 800a148 <USBD_GetDescriptor+0x108>)
 800a142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a146:	bf00      	nop
 800a148:	0800a161 	.word	0x0800a161
 800a14c:	0800a195 	.word	0x0800a195
 800a150:	0800a1c9 	.word	0x0800a1c9
 800a154:	0800a1fd 	.word	0x0800a1fd
 800a158:	0800a231 	.word	0x0800a231
 800a15c:	0800a265 	.word	0x0800a265
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00b      	beq.n	800a184 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	7c12      	ldrb	r2, [r2, #16]
 800a178:	f107 0108 	add.w	r1, r7, #8
 800a17c:	4610      	mov	r0, r2
 800a17e:	4798      	blx	r3
 800a180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a182:	e091      	b.n	800a2a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fab2 	bl	800a6f0 <USBD_CtlError>
            err++;
 800a18c:	7afb      	ldrb	r3, [r7, #11]
 800a18e:	3301      	adds	r3, #1
 800a190:	72fb      	strb	r3, [r7, #11]
          break;
 800a192:	e089      	b.n	800a2a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00b      	beq.n	800a1b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	7c12      	ldrb	r2, [r2, #16]
 800a1ac:	f107 0108 	add.w	r1, r7, #8
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
 800a1b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1b6:	e077      	b.n	800a2a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fa98 	bl	800a6f0 <USBD_CtlError>
            err++;
 800a1c0:	7afb      	ldrb	r3, [r7, #11]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1c6:	e06f      	b.n	800a2a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00b      	beq.n	800a1ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	7c12      	ldrb	r2, [r2, #16]
 800a1e0:	f107 0108 	add.w	r1, r7, #8
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
 800a1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ea:	e05d      	b.n	800a2a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa7e 	bl	800a6f0 <USBD_CtlError>
            err++;
 800a1f4:	7afb      	ldrb	r3, [r7, #11]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1fa:	e055      	b.n	800a2a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	7c12      	ldrb	r2, [r2, #16]
 800a214:	f107 0108 	add.w	r1, r7, #8
 800a218:	4610      	mov	r0, r2
 800a21a:	4798      	blx	r3
 800a21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a21e:	e043      	b.n	800a2a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fa64 	bl	800a6f0 <USBD_CtlError>
            err++;
 800a228:	7afb      	ldrb	r3, [r7, #11]
 800a22a:	3301      	adds	r3, #1
 800a22c:	72fb      	strb	r3, [r7, #11]
          break;
 800a22e:	e03b      	b.n	800a2a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a236:	695b      	ldr	r3, [r3, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00b      	beq.n	800a254 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	7c12      	ldrb	r2, [r2, #16]
 800a248:	f107 0108 	add.w	r1, r7, #8
 800a24c:	4610      	mov	r0, r2
 800a24e:	4798      	blx	r3
 800a250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a252:	e029      	b.n	800a2a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fa4a 	bl	800a6f0 <USBD_CtlError>
            err++;
 800a25c:	7afb      	ldrb	r3, [r7, #11]
 800a25e:	3301      	adds	r3, #1
 800a260:	72fb      	strb	r3, [r7, #11]
          break;
 800a262:	e021      	b.n	800a2a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	7c12      	ldrb	r2, [r2, #16]
 800a27c:	f107 0108 	add.w	r1, r7, #8
 800a280:	4610      	mov	r0, r2
 800a282:	4798      	blx	r3
 800a284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a286:	e00f      	b.n	800a2a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fa30 	bl	800a6f0 <USBD_CtlError>
            err++;
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	3301      	adds	r3, #1
 800a294:	72fb      	strb	r3, [r7, #11]
          break;
 800a296:	e007      	b.n	800a2a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa28 	bl	800a6f0 <USBD_CtlError>
          err++;
 800a2a0:	7afb      	ldrb	r3, [r7, #11]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a2a6:	bf00      	nop
      }
      break;
 800a2a8:	e037      	b.n	800a31a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	7c1b      	ldrb	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d109      	bne.n	800a2c6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2ba:	f107 0208 	add.w	r2, r7, #8
 800a2be:	4610      	mov	r0, r2
 800a2c0:	4798      	blx	r3
 800a2c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2c4:	e029      	b.n	800a31a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa11 	bl	800a6f0 <USBD_CtlError>
        err++;
 800a2ce:	7afb      	ldrb	r3, [r7, #11]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2d4:	e021      	b.n	800a31a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	7c1b      	ldrb	r3, [r3, #16]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10d      	bne.n	800a2fa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e6:	f107 0208 	add.w	r2, r7, #8
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	4798      	blx	r3
 800a2ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	2207      	movs	r2, #7
 800a2f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2f8:	e00f      	b.n	800a31a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f9f7 	bl	800a6f0 <USBD_CtlError>
        err++;
 800a302:	7afb      	ldrb	r3, [r7, #11]
 800a304:	3301      	adds	r3, #1
 800a306:	72fb      	strb	r3, [r7, #11]
      break;
 800a308:	e007      	b.n	800a31a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f9ef 	bl	800a6f0 <USBD_CtlError>
      err++;
 800a312:	7afb      	ldrb	r3, [r7, #11]
 800a314:	3301      	adds	r3, #1
 800a316:	72fb      	strb	r3, [r7, #11]
      break;
 800a318:	bf00      	nop
  }

  if (err != 0U)
 800a31a:	7afb      	ldrb	r3, [r7, #11]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d11e      	bne.n	800a35e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	88db      	ldrh	r3, [r3, #6]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d016      	beq.n	800a356 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a328:	893b      	ldrh	r3, [r7, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00e      	beq.n	800a34c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	88da      	ldrh	r2, [r3, #6]
 800a332:	893b      	ldrh	r3, [r7, #8]
 800a334:	4293      	cmp	r3, r2
 800a336:	bf28      	it	cs
 800a338:	4613      	movcs	r3, r2
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a33e:	893b      	ldrh	r3, [r7, #8]
 800a340:	461a      	mov	r2, r3
 800a342:	68f9      	ldr	r1, [r7, #12]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fa44 	bl	800a7d2 <USBD_CtlSendData>
 800a34a:	e009      	b.n	800a360 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f9ce 	bl	800a6f0 <USBD_CtlError>
 800a354:	e004      	b.n	800a360 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fa95 	bl	800a886 <USBD_CtlSendStatus>
 800a35c:	e000      	b.n	800a360 <USBD_GetDescriptor+0x320>
    return;
 800a35e:	bf00      	nop
  }
}
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop

0800a368 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	889b      	ldrh	r3, [r3, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d131      	bne.n	800a3de <USBD_SetAddress+0x76>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	88db      	ldrh	r3, [r3, #6]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d12d      	bne.n	800a3de <USBD_SetAddress+0x76>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	885b      	ldrh	r3, [r3, #2]
 800a386:	2b7f      	cmp	r3, #127	@ 0x7f
 800a388:	d829      	bhi.n	800a3de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	885b      	ldrh	r3, [r3, #2]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a394:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d104      	bne.n	800a3ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f9a3 	bl	800a6f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3aa:	e01d      	b.n	800a3e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	7bfa      	ldrb	r2, [r7, #15]
 800a3b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fea1 	bl	800b100 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fa61 	bl	800a886 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d004      	beq.n	800a3d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3d2:	e009      	b.n	800a3e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3dc:	e004      	b.n	800a3e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f985 	bl	800a6f0 <USBD_CtlError>
  }
}
 800a3e6:	bf00      	nop
 800a3e8:	bf00      	nop
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	885b      	ldrh	r3, [r3, #2]
 800a402:	b2da      	uxtb	r2, r3
 800a404:	4b4c      	ldr	r3, [pc, #304]	@ (800a538 <USBD_SetConfig+0x148>)
 800a406:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a408:	4b4b      	ldr	r3, [pc, #300]	@ (800a538 <USBD_SetConfig+0x148>)
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d905      	bls.n	800a41c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f96c 	bl	800a6f0 <USBD_CtlError>
    return USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	e088      	b.n	800a52e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a422:	b2db      	uxtb	r3, r3
 800a424:	2b02      	cmp	r3, #2
 800a426:	d002      	beq.n	800a42e <USBD_SetConfig+0x3e>
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d025      	beq.n	800a478 <USBD_SetConfig+0x88>
 800a42c:	e071      	b.n	800a512 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a42e:	4b42      	ldr	r3, [pc, #264]	@ (800a538 <USBD_SetConfig+0x148>)
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d01c      	beq.n	800a470 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a436:	4b40      	ldr	r3, [pc, #256]	@ (800a538 <USBD_SetConfig+0x148>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a440:	4b3d      	ldr	r3, [pc, #244]	@ (800a538 <USBD_SetConfig+0x148>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7ff f992 	bl	8009770 <USBD_SetClassConfig>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a450:	7bfb      	ldrb	r3, [r7, #15]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d004      	beq.n	800a460 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f949 	bl	800a6f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a45e:	e065      	b.n	800a52c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 fa10 	bl	800a886 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2203      	movs	r2, #3
 800a46a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a46e:	e05d      	b.n	800a52c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fa08 	bl	800a886 <USBD_CtlSendStatus>
      break;
 800a476:	e059      	b.n	800a52c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a478:	4b2f      	ldr	r3, [pc, #188]	@ (800a538 <USBD_SetConfig+0x148>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d112      	bne.n	800a4a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2202      	movs	r2, #2
 800a484:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a488:	4b2b      	ldr	r3, [pc, #172]	@ (800a538 <USBD_SetConfig+0x148>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	461a      	mov	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a492:	4b29      	ldr	r3, [pc, #164]	@ (800a538 <USBD_SetConfig+0x148>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7ff f985 	bl	80097a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f9f1 	bl	800a886 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4a4:	e042      	b.n	800a52c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a4a6:	4b24      	ldr	r3, [pc, #144]	@ (800a538 <USBD_SetConfig+0x148>)
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d02a      	beq.n	800a50a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff f973 	bl	80097a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a4c2:	4b1d      	ldr	r3, [pc, #116]	@ (800a538 <USBD_SetConfig+0x148>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a538 <USBD_SetConfig+0x148>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff f94c 	bl	8009770 <USBD_SetClassConfig>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00f      	beq.n	800a502 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f903 	bl	800a6f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7ff f958 	bl	80097a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a500:	e014      	b.n	800a52c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f9bf 	bl	800a886 <USBD_CtlSendStatus>
      break;
 800a508:	e010      	b.n	800a52c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f9bb 	bl	800a886 <USBD_CtlSendStatus>
      break;
 800a510:	e00c      	b.n	800a52c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f8eb 	bl	800a6f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a51a:	4b07      	ldr	r3, [pc, #28]	@ (800a538 <USBD_SetConfig+0x148>)
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff f941 	bl	80097a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a526:	2303      	movs	r3, #3
 800a528:	73fb      	strb	r3, [r7, #15]
      break;
 800a52a:	bf00      	nop
  }

  return ret;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	200037a0 	.word	0x200037a0

0800a53c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	88db      	ldrh	r3, [r3, #6]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d004      	beq.n	800a558 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f8cd 	bl	800a6f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a556:	e023      	b.n	800a5a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b02      	cmp	r3, #2
 800a562:	dc02      	bgt.n	800a56a <USBD_GetConfig+0x2e>
 800a564:	2b00      	cmp	r3, #0
 800a566:	dc03      	bgt.n	800a570 <USBD_GetConfig+0x34>
 800a568:	e015      	b.n	800a596 <USBD_GetConfig+0x5a>
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d00b      	beq.n	800a586 <USBD_GetConfig+0x4a>
 800a56e:	e012      	b.n	800a596 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3308      	adds	r3, #8
 800a57a:	2201      	movs	r2, #1
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f927 	bl	800a7d2 <USBD_CtlSendData>
        break;
 800a584:	e00c      	b.n	800a5a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	3304      	adds	r3, #4
 800a58a:	2201      	movs	r2, #1
 800a58c:	4619      	mov	r1, r3
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f91f 	bl	800a7d2 <USBD_CtlSendData>
        break;
 800a594:	e004      	b.n	800a5a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f8a9 	bl	800a6f0 <USBD_CtlError>
        break;
 800a59e:	bf00      	nop
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d81e      	bhi.n	800a5fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	88db      	ldrh	r3, [r3, #6]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d004      	beq.n	800a5d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f890 	bl	800a6f0 <USBD_CtlError>
        break;
 800a5d0:	e01a      	b.n	800a608 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d005      	beq.n	800a5ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	f043 0202 	orr.w	r2, r3, #2
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	330c      	adds	r3, #12
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f8eb 	bl	800a7d2 <USBD_CtlSendData>
      break;
 800a5fc:	e004      	b.n	800a608 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f875 	bl	800a6f0 <USBD_CtlError>
      break;
 800a606:	bf00      	nop
  }
}
 800a608:	bf00      	nop
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	885b      	ldrh	r3, [r3, #2]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d106      	bne.n	800a630 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f92b 	bl	800a886 <USBD_CtlSendStatus>
  }
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	3b01      	subs	r3, #1
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d80b      	bhi.n	800a668 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	885b      	ldrh	r3, [r3, #2]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d10c      	bne.n	800a672 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f910 	bl	800a886 <USBD_CtlSendStatus>
      }
      break;
 800a666:	e004      	b.n	800a672 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f840 	bl	800a6f0 <USBD_CtlError>
      break;
 800a670:	e000      	b.n	800a674 <USBD_ClrFeature+0x3c>
      break;
 800a672:	bf00      	nop
  }
}
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	781a      	ldrb	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3301      	adds	r3, #1
 800a696:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	781a      	ldrb	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f7ff fa92 	bl	8009bd0 <SWAPBYTE>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f7ff fa85 	bl	8009bd0 <SWAPBYTE>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7ff fa78 	bl	8009bd0 <SWAPBYTE>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	80da      	strh	r2, [r3, #6]
}
 800a6e8:	bf00      	nop
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6fa:	2180      	movs	r1, #128	@ 0x80
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fc95 	bl	800b02c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a702:	2100      	movs	r1, #0
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fc91 	bl	800b02c <USBD_LL_StallEP>
}
 800a70a:	bf00      	nop
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b086      	sub	sp, #24
 800a716:	af00      	add	r7, sp, #0
 800a718:	60f8      	str	r0, [r7, #12]
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a71e:	2300      	movs	r3, #0
 800a720:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d036      	beq.n	800a796 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a72c:	6938      	ldr	r0, [r7, #16]
 800a72e:	f000 f836 	bl	800a79e <USBD_GetLen>
 800a732:	4603      	mov	r3, r0
 800a734:	3301      	adds	r3, #1
 800a736:	b29b      	uxth	r3, r3
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a740:	7dfb      	ldrb	r3, [r7, #23]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	4413      	add	r3, r2
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	7812      	ldrb	r2, [r2, #0]
 800a74a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a74c:	7dfb      	ldrb	r3, [r7, #23]
 800a74e:	3301      	adds	r3, #1
 800a750:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a752:	7dfb      	ldrb	r3, [r7, #23]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	4413      	add	r3, r2
 800a758:	2203      	movs	r2, #3
 800a75a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	3301      	adds	r3, #1
 800a760:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a762:	e013      	b.n	800a78c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a764:	7dfb      	ldrb	r3, [r7, #23]
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	4413      	add	r3, r2
 800a76a:	693a      	ldr	r2, [r7, #16]
 800a76c:	7812      	ldrb	r2, [r2, #0]
 800a76e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	3301      	adds	r3, #1
 800a774:	613b      	str	r3, [r7, #16]
    idx++;
 800a776:	7dfb      	ldrb	r3, [r7, #23]
 800a778:	3301      	adds	r3, #1
 800a77a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	4413      	add	r3, r2
 800a782:	2200      	movs	r2, #0
 800a784:	701a      	strb	r2, [r3, #0]
    idx++;
 800a786:	7dfb      	ldrb	r3, [r7, #23]
 800a788:	3301      	adds	r3, #1
 800a78a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1e7      	bne.n	800a764 <USBD_GetString+0x52>
 800a794:	e000      	b.n	800a798 <USBD_GetString+0x86>
    return;
 800a796:	bf00      	nop
  }
}
 800a798:	3718      	adds	r7, #24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b085      	sub	sp, #20
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a7ae:	e005      	b.n	800a7bc <USBD_GetLen+0x1e>
  {
    len++;
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1f5      	bne.n	800a7b0 <USBD_GetLen+0x12>
  }

  return len;
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	60f8      	str	r0, [r7, #12]
 800a7da:	60b9      	str	r1, [r7, #8]
 800a7dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 fca0 	bl	800b13e <USBD_LL_Transmit>

  return USBD_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	2100      	movs	r1, #0
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f000 fc8f 	bl	800b13e <USBD_LL_Transmit>

  return USBD_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	60b9      	str	r1, [r7, #8]
 800a834:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2203      	movs	r2, #3
 800a83a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	2100      	movs	r1, #0
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f000 fc93 	bl	800b180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	2100      	movs	r1, #0
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f000 fc82 	bl	800b180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2204      	movs	r2, #4
 800a892:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a896:	2300      	movs	r3, #0
 800a898:	2200      	movs	r2, #0
 800a89a:	2100      	movs	r1, #0
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fc4e 	bl	800b13e <USBD_LL_Transmit>

  return USBD_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2205      	movs	r2, #5
 800a8b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8bc:	2300      	movs	r3, #0
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fc5c 	bl	800b180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a8d8:	2200      	movs	r2, #0
 800a8da:	4912      	ldr	r1, [pc, #72]	@ (800a924 <MX_USB_Device_Init+0x50>)
 800a8dc:	4812      	ldr	r0, [pc, #72]	@ (800a928 <MX_USB_Device_Init+0x54>)
 800a8de:	f7fe fed9 	bl	8009694 <USBD_Init>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a8e8:	f7f6 f822 	bl	8000930 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a8ec:	490f      	ldr	r1, [pc, #60]	@ (800a92c <MX_USB_Device_Init+0x58>)
 800a8ee:	480e      	ldr	r0, [pc, #56]	@ (800a928 <MX_USB_Device_Init+0x54>)
 800a8f0:	f7fe ff00 	bl	80096f4 <USBD_RegisterClass>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a8fa:	f7f6 f819 	bl	8000930 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a8fe:	490c      	ldr	r1, [pc, #48]	@ (800a930 <MX_USB_Device_Init+0x5c>)
 800a900:	4809      	ldr	r0, [pc, #36]	@ (800a928 <MX_USB_Device_Init+0x54>)
 800a902:	f7fe fe21 	bl	8009548 <USBD_CDC_RegisterInterface>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a90c:	f7f6 f810 	bl	8000930 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a910:	4805      	ldr	r0, [pc, #20]	@ (800a928 <MX_USB_Device_Init+0x54>)
 800a912:	f7fe ff16 	bl	8009742 <USBD_Start>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d001      	beq.n	800a920 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a91c:	f7f6 f808 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a920:	bf00      	nop
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20000130 	.word	0x20000130
 800a928:	200037a4 	.word	0x200037a4
 800a92c:	20000018 	.word	0x20000018
 800a930:	2000011c 	.word	0x2000011c

0800a934 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a938:	2200      	movs	r2, #0
 800a93a:	4905      	ldr	r1, [pc, #20]	@ (800a950 <CDC_Init_FS+0x1c>)
 800a93c:	4805      	ldr	r0, [pc, #20]	@ (800a954 <CDC_Init_FS+0x20>)
 800a93e:	f7fe fe18 	bl	8009572 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a942:	4905      	ldr	r1, [pc, #20]	@ (800a958 <CDC_Init_FS+0x24>)
 800a944:	4803      	ldr	r0, [pc, #12]	@ (800a954 <CDC_Init_FS+0x20>)
 800a946:	f7fe fe32 	bl	80095ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a94a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	20003e74 	.word	0x20003e74
 800a954:	200037a4 	.word	0x200037a4
 800a958:	20003a74 	.word	0x20003a74

0800a95c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a960:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a962:	4618      	mov	r0, r3
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	4603      	mov	r3, r0
 800a974:	6039      	str	r1, [r7, #0]
 800a976:	71fb      	strb	r3, [r7, #7]
 800a978:	4613      	mov	r3, r2
 800a97a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	2b23      	cmp	r3, #35	@ 0x23
 800a980:	d84a      	bhi.n	800aa18 <CDC_Control_FS+0xac>
 800a982:	a201      	add	r2, pc, #4	@ (adr r2, 800a988 <CDC_Control_FS+0x1c>)
 800a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a988:	0800aa19 	.word	0x0800aa19
 800a98c:	0800aa19 	.word	0x0800aa19
 800a990:	0800aa19 	.word	0x0800aa19
 800a994:	0800aa19 	.word	0x0800aa19
 800a998:	0800aa19 	.word	0x0800aa19
 800a99c:	0800aa19 	.word	0x0800aa19
 800a9a0:	0800aa19 	.word	0x0800aa19
 800a9a4:	0800aa19 	.word	0x0800aa19
 800a9a8:	0800aa19 	.word	0x0800aa19
 800a9ac:	0800aa19 	.word	0x0800aa19
 800a9b0:	0800aa19 	.word	0x0800aa19
 800a9b4:	0800aa19 	.word	0x0800aa19
 800a9b8:	0800aa19 	.word	0x0800aa19
 800a9bc:	0800aa19 	.word	0x0800aa19
 800a9c0:	0800aa19 	.word	0x0800aa19
 800a9c4:	0800aa19 	.word	0x0800aa19
 800a9c8:	0800aa19 	.word	0x0800aa19
 800a9cc:	0800aa19 	.word	0x0800aa19
 800a9d0:	0800aa19 	.word	0x0800aa19
 800a9d4:	0800aa19 	.word	0x0800aa19
 800a9d8:	0800aa19 	.word	0x0800aa19
 800a9dc:	0800aa19 	.word	0x0800aa19
 800a9e0:	0800aa19 	.word	0x0800aa19
 800a9e4:	0800aa19 	.word	0x0800aa19
 800a9e8:	0800aa19 	.word	0x0800aa19
 800a9ec:	0800aa19 	.word	0x0800aa19
 800a9f0:	0800aa19 	.word	0x0800aa19
 800a9f4:	0800aa19 	.word	0x0800aa19
 800a9f8:	0800aa19 	.word	0x0800aa19
 800a9fc:	0800aa19 	.word	0x0800aa19
 800aa00:	0800aa19 	.word	0x0800aa19
 800aa04:	0800aa19 	.word	0x0800aa19
 800aa08:	0800aa19 	.word	0x0800aa19
 800aa0c:	0800aa19 	.word	0x0800aa19
 800aa10:	0800aa19 	.word	0x0800aa19
 800aa14:	0800aa19 	.word	0x0800aa19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa18:	bf00      	nop
  }

  return (USBD_OK);
 800aa1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	4805      	ldr	r0, [pc, #20]	@ (800aa4c <CDC_Receive_FS+0x24>)
 800aa36:	f7fe fdba 	bl	80095ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa3a:	4804      	ldr	r0, [pc, #16]	@ (800aa4c <CDC_Receive_FS+0x24>)
 800aa3c:	f7fe fe00 	bl	8009640 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aa40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	200037a4 	.word	0x200037a4

0800aa50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa60:	4b0d      	ldr	r3, [pc, #52]	@ (800aa98 <CDC_Transmit_FS+0x48>)
 800aa62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e00b      	b.n	800aa8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa76:	887b      	ldrh	r3, [r7, #2]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6879      	ldr	r1, [r7, #4]
 800aa7c:	4806      	ldr	r0, [pc, #24]	@ (800aa98 <CDC_Transmit_FS+0x48>)
 800aa7e:	f7fe fd78 	bl	8009572 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa82:	4805      	ldr	r0, [pc, #20]	@ (800aa98 <CDC_Transmit_FS+0x48>)
 800aa84:	f7fe fdac 	bl	80095e0 <USBD_CDC_TransmitPacket>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	200037a4 	.word	0x200037a4

0800aa9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aaae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	371c      	adds	r7, #28
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
	...

0800aac0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	4603      	mov	r3, r0
 800aac8:	6039      	str	r1, [r7, #0]
 800aaca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	2212      	movs	r2, #18
 800aad0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800aad2:	4b03      	ldr	r3, [pc, #12]	@ (800aae0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	20000150 	.word	0x20000150

0800aae4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	2204      	movs	r2, #4
 800aaf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aaf6:	4b03      	ldr	r3, [pc, #12]	@ (800ab04 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	20000164 	.word	0x20000164

0800ab08 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	6039      	str	r1, [r7, #0]
 800ab12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d105      	bne.n	800ab26 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	4907      	ldr	r1, [pc, #28]	@ (800ab3c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ab1e:	4808      	ldr	r0, [pc, #32]	@ (800ab40 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ab20:	f7ff fdf7 	bl	800a712 <USBD_GetString>
 800ab24:	e004      	b.n	800ab30 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	4904      	ldr	r1, [pc, #16]	@ (800ab3c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ab2a:	4805      	ldr	r0, [pc, #20]	@ (800ab40 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ab2c:	f7ff fdf1 	bl	800a712 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab30:	4b02      	ldr	r3, [pc, #8]	@ (800ab3c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20004274 	.word	0x20004274
 800ab40:	0800bc50 	.word	0x0800bc50

0800ab44 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	6039      	str	r1, [r7, #0]
 800ab4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	4904      	ldr	r1, [pc, #16]	@ (800ab64 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ab54:	4804      	ldr	r0, [pc, #16]	@ (800ab68 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ab56:	f7ff fddc 	bl	800a712 <USBD_GetString>
  return USBD_StrDesc;
 800ab5a:	4b02      	ldr	r3, [pc, #8]	@ (800ab64 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	20004274 	.word	0x20004274
 800ab68:	0800bc68 	.word	0x0800bc68

0800ab6c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	221a      	movs	r2, #26
 800ab7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab7e:	f000 f843 	bl	800ac08 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ab82:	4b02      	ldr	r3, [pc, #8]	@ (800ab8c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20000168 	.word	0x20000168

0800ab90 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	6039      	str	r1, [r7, #0]
 800ab9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d105      	bne.n	800abae <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	4907      	ldr	r1, [pc, #28]	@ (800abc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800aba6:	4808      	ldr	r0, [pc, #32]	@ (800abc8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800aba8:	f7ff fdb3 	bl	800a712 <USBD_GetString>
 800abac:	e004      	b.n	800abb8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	4904      	ldr	r1, [pc, #16]	@ (800abc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800abb2:	4805      	ldr	r0, [pc, #20]	@ (800abc8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800abb4:	f7ff fdad 	bl	800a712 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb8:	4b02      	ldr	r3, [pc, #8]	@ (800abc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20004274 	.word	0x20004274
 800abc8:	0800bc7c 	.word	0x0800bc7c

0800abcc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	6039      	str	r1, [r7, #0]
 800abd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d105      	bne.n	800abea <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	4907      	ldr	r1, [pc, #28]	@ (800ac00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800abe2:	4808      	ldr	r0, [pc, #32]	@ (800ac04 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800abe4:	f7ff fd95 	bl	800a712 <USBD_GetString>
 800abe8:	e004      	b.n	800abf4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	4904      	ldr	r1, [pc, #16]	@ (800ac00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800abee:	4805      	ldr	r0, [pc, #20]	@ (800ac04 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800abf0:	f7ff fd8f 	bl	800a712 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abf4:	4b02      	ldr	r3, [pc, #8]	@ (800ac00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	20004274 	.word	0x20004274
 800ac04:	0800bc88 	.word	0x0800bc88

0800ac08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ac4c <Get_SerialNum+0x44>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac14:	4b0e      	ldr	r3, [pc, #56]	@ (800ac50 <Get_SerialNum+0x48>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac54 <Get_SerialNum+0x4c>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4413      	add	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d009      	beq.n	800ac42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac2e:	2208      	movs	r2, #8
 800ac30:	4909      	ldr	r1, [pc, #36]	@ (800ac58 <Get_SerialNum+0x50>)
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 f814 	bl	800ac60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac38:	2204      	movs	r2, #4
 800ac3a:	4908      	ldr	r1, [pc, #32]	@ (800ac5c <Get_SerialNum+0x54>)
 800ac3c:	68b8      	ldr	r0, [r7, #8]
 800ac3e:	f000 f80f 	bl	800ac60 <IntToUnicode>
  }
}
 800ac42:	bf00      	nop
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	1fff7590 	.word	0x1fff7590
 800ac50:	1fff7594 	.word	0x1fff7594
 800ac54:	1fff7598 	.word	0x1fff7598
 800ac58:	2000016a 	.word	0x2000016a
 800ac5c:	2000017a 	.word	0x2000017a

0800ac60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b087      	sub	sp, #28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac72:	2300      	movs	r3, #0
 800ac74:	75fb      	strb	r3, [r7, #23]
 800ac76:	e027      	b.n	800acc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	0f1b      	lsrs	r3, r3, #28
 800ac7c:	2b09      	cmp	r3, #9
 800ac7e:	d80b      	bhi.n	800ac98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	0f1b      	lsrs	r3, r3, #28
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	7dfb      	ldrb	r3, [r7, #23]
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	440b      	add	r3, r1
 800ac90:	3230      	adds	r2, #48	@ 0x30
 800ac92:	b2d2      	uxtb	r2, r2
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	e00a      	b.n	800acae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	0f1b      	lsrs	r3, r3, #28
 800ac9c:	b2da      	uxtb	r2, r3
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	005b      	lsls	r3, r3, #1
 800aca2:	4619      	mov	r1, r3
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	440b      	add	r3, r1
 800aca8:	3237      	adds	r2, #55	@ 0x37
 800acaa:	b2d2      	uxtb	r2, r2
 800acac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	011b      	lsls	r3, r3, #4
 800acb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800acb4:	7dfb      	ldrb	r3, [r7, #23]
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	3301      	adds	r3, #1
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	4413      	add	r3, r2
 800acbe:	2200      	movs	r2, #0
 800acc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	3301      	adds	r3, #1
 800acc6:	75fb      	strb	r3, [r7, #23]
 800acc8:	7dfa      	ldrb	r2, [r7, #23]
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	429a      	cmp	r2, r3
 800acce:	d3d3      	bcc.n	800ac78 <IntToUnicode+0x18>
  }
}
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	371c      	adds	r7, #28
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
	...

0800ace0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b094      	sub	sp, #80	@ 0x50
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ace8:	f107 030c 	add.w	r3, r7, #12
 800acec:	2244      	movs	r2, #68	@ 0x44
 800acee:	2100      	movs	r1, #0
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fb19 	bl	800b328 <memset>
  if(pcdHandle->Instance==USB)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a15      	ldr	r2, [pc, #84]	@ (800ad50 <HAL_PCD_MspInit+0x70>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d122      	bne.n	800ad46 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ad00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ad04:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ad06:	2300      	movs	r3, #0
 800ad08:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ad0a:	f107 030c 	add.w	r3, r7, #12
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fb fa5a 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ad1a:	f7f5 fe09 	bl	8000930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ad1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad54 <HAL_PCD_MspInit+0x74>)
 800ad20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad22:	4a0c      	ldr	r2, [pc, #48]	@ (800ad54 <HAL_PCD_MspInit+0x74>)
 800ad24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ad28:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad54 <HAL_PCD_MspInit+0x74>)
 800ad2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad32:	60bb      	str	r3, [r7, #8]
 800ad34:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ad36:	2200      	movs	r2, #0
 800ad38:	2100      	movs	r1, #0
 800ad3a:	2014      	movs	r0, #20
 800ad3c:	f7f7 fe2f 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ad40:	2014      	movs	r0, #20
 800ad42:	f7f7 fe46 	bl	80029d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ad46:	bf00      	nop
 800ad48:	3750      	adds	r7, #80	@ 0x50
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	40005c00 	.word	0x40005c00
 800ad54:	40021000 	.word	0x40021000

0800ad58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4610      	mov	r0, r2
 800ad70:	f7fe fd32 	bl	80097d8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ad74:	bf00      	nop
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ad8e:	78fa      	ldrb	r2, [r7, #3]
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	4613      	mov	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4413      	add	r3, r2
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	440b      	add	r3, r1
 800ad9c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	78fb      	ldrb	r3, [r7, #3]
 800ada4:	4619      	mov	r1, r3
 800ada6:	f7fe fd6c 	bl	8009882 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b082      	sub	sp, #8
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800adc4:	78fa      	ldrb	r2, [r7, #3]
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	4613      	mov	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4413      	add	r3, r2
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	440b      	add	r3, r1
 800add2:	3324      	adds	r3, #36	@ 0x24
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	4619      	mov	r1, r3
 800adda:	f7fe fdb5 	bl	8009948 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800adde:	bf00      	nop
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b082      	sub	sp, #8
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fe fec9 	bl	8009b8c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	795b      	ldrb	r3, [r3, #5]
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d001      	beq.n	800ae1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae16:	f7f5 fd8b 	bl	8000930 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae20:	7bfa      	ldrb	r2, [r7, #15]
 800ae22:	4611      	mov	r1, r2
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fe fe73 	bl	8009b10 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fe fe1f 	bl	8009a74 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ae36:	bf00      	nop
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
	...

0800ae40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe fe6e 	bl	8009b30 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	7a5b      	ldrb	r3, [r3, #9]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d005      	beq.n	800ae68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae5c:	4b04      	ldr	r3, [pc, #16]	@ (800ae70 <HAL_PCD_SuspendCallback+0x30>)
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	4a03      	ldr	r2, [pc, #12]	@ (800ae70 <HAL_PCD_SuspendCallback+0x30>)
 800ae62:	f043 0306 	orr.w	r3, r3, #6
 800ae66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	e000ed00 	.word	0xe000ed00

0800ae74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	7a5b      	ldrb	r3, [r3, #9]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d007      	beq.n	800ae94 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae84:	4b08      	ldr	r3, [pc, #32]	@ (800aea8 <HAL_PCD_ResumeCallback+0x34>)
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	4a07      	ldr	r2, [pc, #28]	@ (800aea8 <HAL_PCD_ResumeCallback+0x34>)
 800ae8a:	f023 0306 	bic.w	r3, r3, #6
 800ae8e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ae90:	f000 f9f8 	bl	800b284 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fe fe5e 	bl	8009b5c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800aea0:	bf00      	nop
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	e000ed00 	.word	0xe000ed00

0800aeac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800aeb4:	4a2b      	ldr	r2, [pc, #172]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a29      	ldr	r2, [pc, #164]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aec0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800aec4:	4b27      	ldr	r3, [pc, #156]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aec6:	4a28      	ldr	r2, [pc, #160]	@ (800af68 <USBD_LL_Init+0xbc>)
 800aec8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aeca:	4b26      	ldr	r3, [pc, #152]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aecc:	2208      	movs	r2, #8
 800aece:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aed0:	4b24      	ldr	r3, [pc, #144]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aed2:	2202      	movs	r2, #2
 800aed4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aed6:	4b23      	ldr	r3, [pc, #140]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aed8:	2202      	movs	r2, #2
 800aeda:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800aedc:	4b21      	ldr	r3, [pc, #132]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aede:	2200      	movs	r2, #0
 800aee0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aee2:	4b20      	ldr	r3, [pc, #128]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aee8:	4b1e      	ldr	r3, [pc, #120]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aeee:	4b1d      	ldr	r3, [pc, #116]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aef4:	481b      	ldr	r0, [pc, #108]	@ (800af64 <USBD_LL_Init+0xb8>)
 800aef6:	f7f8 fe7e 	bl	8003bf6 <HAL_PCD_Init>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800af00:	f7f5 fd16 	bl	8000930 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800af0a:	2318      	movs	r3, #24
 800af0c:	2200      	movs	r2, #0
 800af0e:	2100      	movs	r1, #0
 800af10:	f7fa fb37 	bl	8005582 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800af1a:	2358      	movs	r3, #88	@ 0x58
 800af1c:	2200      	movs	r2, #0
 800af1e:	2180      	movs	r1, #128	@ 0x80
 800af20:	f7fa fb2f 	bl	8005582 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800af2a:	23c0      	movs	r3, #192	@ 0xc0
 800af2c:	2200      	movs	r2, #0
 800af2e:	2181      	movs	r1, #129	@ 0x81
 800af30:	f7fa fb27 	bl	8005582 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800af3a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800af3e:	2200      	movs	r2, #0
 800af40:	2101      	movs	r1, #1
 800af42:	f7fa fb1e 	bl	8005582 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800af4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af50:	2200      	movs	r2, #0
 800af52:	2182      	movs	r1, #130	@ 0x82
 800af54:	f7fa fb15 	bl	8005582 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20004474 	.word	0x20004474
 800af68:	40005c00 	.word	0x40005c00

0800af6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800af82:	4618      	mov	r0, r3
 800af84:	f7f8 ff05 	bl	8003d92 <HAL_PCD_Start>
 800af88:	4603      	mov	r3, r0
 800af8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 f97e 	bl	800b290 <USBD_Get_USB_Status>
 800af94:	4603      	mov	r3, r0
 800af96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af98:	7bbb      	ldrb	r3, [r7, #14]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	4608      	mov	r0, r1
 800afac:	4611      	mov	r1, r2
 800afae:	461a      	mov	r2, r3
 800afb0:	4603      	mov	r3, r0
 800afb2:	70fb      	strb	r3, [r7, #3]
 800afb4:	460b      	mov	r3, r1
 800afb6:	70bb      	strb	r3, [r7, #2]
 800afb8:	4613      	mov	r3, r2
 800afba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800afca:	78bb      	ldrb	r3, [r7, #2]
 800afcc:	883a      	ldrh	r2, [r7, #0]
 800afce:	78f9      	ldrb	r1, [r7, #3]
 800afd0:	f7f9 f84c 	bl	800406c <HAL_PCD_EP_Open>
 800afd4:	4603      	mov	r3, r0
 800afd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afd8:	7bfb      	ldrb	r3, [r7, #15]
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 f958 	bl	800b290 <USBD_Get_USB_Status>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b084      	sub	sp, #16
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	460b      	mov	r3, r1
 800aff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b008:	78fa      	ldrb	r2, [r7, #3]
 800b00a:	4611      	mov	r1, r2
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7f9 f88a 	bl	8004126 <HAL_PCD_EP_Close>
 800b012:	4603      	mov	r3, r0
 800b014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b016:	7bfb      	ldrb	r3, [r7, #15]
 800b018:	4618      	mov	r0, r3
 800b01a:	f000 f939 	bl	800b290 <USBD_Get_USB_Status>
 800b01e:	4603      	mov	r3, r0
 800b020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b022:	7bbb      	ldrb	r3, [r7, #14]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b046:	78fa      	ldrb	r2, [r7, #3]
 800b048:	4611      	mov	r1, r2
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7f9 f933 	bl	80042b6 <HAL_PCD_EP_SetStall>
 800b050:	4603      	mov	r3, r0
 800b052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	4618      	mov	r0, r3
 800b058:	f000 f91a 	bl	800b290 <USBD_Get_USB_Status>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b060:	7bbb      	ldrb	r3, [r7, #14]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	460b      	mov	r3, r1
 800b074:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b084:	78fa      	ldrb	r2, [r7, #3]
 800b086:	4611      	mov	r1, r2
 800b088:	4618      	mov	r0, r3
 800b08a:	f7f9 f966 	bl	800435a <HAL_PCD_EP_ClrStall>
 800b08e:	4603      	mov	r3, r0
 800b090:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b092:	7bfb      	ldrb	r3, [r7, #15]
 800b094:	4618      	mov	r0, r3
 800b096:	f000 f8fb 	bl	800b290 <USBD_Get_USB_Status>
 800b09a:	4603      	mov	r3, r0
 800b09c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b0ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b0bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	da0b      	bge.n	800b0dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0ca:	68f9      	ldr	r1, [r7, #12]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	00db      	lsls	r3, r3, #3
 800b0d4:	440b      	add	r3, r1
 800b0d6:	3312      	adds	r3, #18
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	e00b      	b.n	800b0f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b0dc:	78fb      	ldrb	r3, [r7, #3]
 800b0de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0e2:	68f9      	ldr	r1, [r7, #12]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	00db      	lsls	r3, r3, #3
 800b0ec:	440b      	add	r3, r1
 800b0ee:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b0f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b11a:	78fa      	ldrb	r2, [r7, #3]
 800b11c:	4611      	mov	r1, r2
 800b11e:	4618      	mov	r0, r3
 800b120:	f7f8 ff80 	bl	8004024 <HAL_PCD_SetAddress>
 800b124:	4603      	mov	r3, r0
 800b126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b128:	7bfb      	ldrb	r3, [r7, #15]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 f8b0 	bl	800b290 <USBD_Get_USB_Status>
 800b130:	4603      	mov	r3, r0
 800b132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b134:	7bbb      	ldrb	r3, [r7, #14]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b086      	sub	sp, #24
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	607a      	str	r2, [r7, #4]
 800b148:	603b      	str	r3, [r7, #0]
 800b14a:	460b      	mov	r3, r1
 800b14c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b15c:	7af9      	ldrb	r1, [r7, #11]
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	f7f9 f871 	bl	8004248 <HAL_PCD_EP_Transmit>
 800b166:	4603      	mov	r3, r0
 800b168:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 f88f 	bl	800b290 <USBD_Get_USB_Status>
 800b172:	4603      	mov	r3, r0
 800b174:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b176:	7dbb      	ldrb	r3, [r7, #22]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	607a      	str	r2, [r7, #4]
 800b18a:	603b      	str	r3, [r7, #0]
 800b18c:	460b      	mov	r3, r1
 800b18e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b19e:	7af9      	ldrb	r1, [r7, #11]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	f7f9 f807 	bl	80041b6 <HAL_PCD_EP_Receive>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ac:	7dfb      	ldrb	r3, [r7, #23]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 f86e 	bl	800b290 <USBD_Get_USB_Status>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b082      	sub	sp, #8
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b1d4:	78fa      	ldrb	r2, [r7, #3]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7f9 f81d 	bl	8004218 <HAL_PCD_EP_GetRxCount>
 800b1de:	4603      	mov	r3, r0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b1f4:	78fb      	ldrb	r3, [r7, #3]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d002      	beq.n	800b200 <HAL_PCDEx_LPM_Callback+0x18>
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d013      	beq.n	800b226 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b1fe:	e023      	b.n	800b248 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	7a5b      	ldrb	r3, [r3, #9]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d007      	beq.n	800b218 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b208:	f000 f83c 	bl	800b284 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b20c:	4b10      	ldr	r3, [pc, #64]	@ (800b250 <HAL_PCDEx_LPM_Callback+0x68>)
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	4a0f      	ldr	r2, [pc, #60]	@ (800b250 <HAL_PCDEx_LPM_Callback+0x68>)
 800b212:	f023 0306 	bic.w	r3, r3, #6
 800b216:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe fc9c 	bl	8009b5c <USBD_LL_Resume>
    break;
 800b224:	e010      	b.n	800b248 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fe fc7f 	bl	8009b30 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	7a5b      	ldrb	r3, [r3, #9]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d005      	beq.n	800b246 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b23a:	4b05      	ldr	r3, [pc, #20]	@ (800b250 <HAL_PCDEx_LPM_Callback+0x68>)
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	4a04      	ldr	r2, [pc, #16]	@ (800b250 <HAL_PCDEx_LPM_Callback+0x68>)
 800b240:	f043 0306 	orr.w	r3, r3, #6
 800b244:	6113      	str	r3, [r2, #16]
    break;
 800b246:	bf00      	nop
}
 800b248:	bf00      	nop
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	e000ed00 	.word	0xe000ed00

0800b254 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b25c:	4b03      	ldr	r3, [pc, #12]	@ (800b26c <USBD_static_malloc+0x18>)
}
 800b25e:	4618      	mov	r0, r3
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	20004750 	.word	0x20004750

0800b270 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]

}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b288:	f7f5 f888 	bl	800039c <SystemClock_Config>
}
 800b28c:	bf00      	nop
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b29e:	79fb      	ldrb	r3, [r7, #7]
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d817      	bhi.n	800b2d4 <USBD_Get_USB_Status+0x44>
 800b2a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2ac <USBD_Get_USB_Status+0x1c>)
 800b2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2aa:	bf00      	nop
 800b2ac:	0800b2bd 	.word	0x0800b2bd
 800b2b0:	0800b2c3 	.word	0x0800b2c3
 800b2b4:	0800b2c9 	.word	0x0800b2c9
 800b2b8:	0800b2cf 	.word	0x0800b2cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c0:	e00b      	b.n	800b2da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c6:	e008      	b.n	800b2da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b2cc:	e005      	b.n	800b2da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d2:	e002      	b.n	800b2da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d8:	bf00      	nop
  }
  return usb_status;
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <siprintf>:
 800b2e8:	b40e      	push	{r1, r2, r3}
 800b2ea:	b500      	push	{lr}
 800b2ec:	b09c      	sub	sp, #112	@ 0x70
 800b2ee:	ab1d      	add	r3, sp, #116	@ 0x74
 800b2f0:	9002      	str	r0, [sp, #8]
 800b2f2:	9006      	str	r0, [sp, #24]
 800b2f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b2f8:	4809      	ldr	r0, [pc, #36]	@ (800b320 <siprintf+0x38>)
 800b2fa:	9107      	str	r1, [sp, #28]
 800b2fc:	9104      	str	r1, [sp, #16]
 800b2fe:	4909      	ldr	r1, [pc, #36]	@ (800b324 <siprintf+0x3c>)
 800b300:	f853 2b04 	ldr.w	r2, [r3], #4
 800b304:	9105      	str	r1, [sp, #20]
 800b306:	6800      	ldr	r0, [r0, #0]
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	a902      	add	r1, sp, #8
 800b30c:	f000 f994 	bl	800b638 <_svfiprintf_r>
 800b310:	9b02      	ldr	r3, [sp, #8]
 800b312:	2200      	movs	r2, #0
 800b314:	701a      	strb	r2, [r3, #0]
 800b316:	b01c      	add	sp, #112	@ 0x70
 800b318:	f85d eb04 	ldr.w	lr, [sp], #4
 800b31c:	b003      	add	sp, #12
 800b31e:	4770      	bx	lr
 800b320:	20000184 	.word	0x20000184
 800b324:	ffff0208 	.word	0xffff0208

0800b328 <memset>:
 800b328:	4402      	add	r2, r0
 800b32a:	4603      	mov	r3, r0
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d100      	bne.n	800b332 <memset+0xa>
 800b330:	4770      	bx	lr
 800b332:	f803 1b01 	strb.w	r1, [r3], #1
 800b336:	e7f9      	b.n	800b32c <memset+0x4>

0800b338 <__errno>:
 800b338:	4b01      	ldr	r3, [pc, #4]	@ (800b340 <__errno+0x8>)
 800b33a:	6818      	ldr	r0, [r3, #0]
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	20000184 	.word	0x20000184

0800b344 <__libc_init_array>:
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	4d0d      	ldr	r5, [pc, #52]	@ (800b37c <__libc_init_array+0x38>)
 800b348:	4c0d      	ldr	r4, [pc, #52]	@ (800b380 <__libc_init_array+0x3c>)
 800b34a:	1b64      	subs	r4, r4, r5
 800b34c:	10a4      	asrs	r4, r4, #2
 800b34e:	2600      	movs	r6, #0
 800b350:	42a6      	cmp	r6, r4
 800b352:	d109      	bne.n	800b368 <__libc_init_array+0x24>
 800b354:	4d0b      	ldr	r5, [pc, #44]	@ (800b384 <__libc_init_array+0x40>)
 800b356:	4c0c      	ldr	r4, [pc, #48]	@ (800b388 <__libc_init_array+0x44>)
 800b358:	f000 fc66 	bl	800bc28 <_init>
 800b35c:	1b64      	subs	r4, r4, r5
 800b35e:	10a4      	asrs	r4, r4, #2
 800b360:	2600      	movs	r6, #0
 800b362:	42a6      	cmp	r6, r4
 800b364:	d105      	bne.n	800b372 <__libc_init_array+0x2e>
 800b366:	bd70      	pop	{r4, r5, r6, pc}
 800b368:	f855 3b04 	ldr.w	r3, [r5], #4
 800b36c:	4798      	blx	r3
 800b36e:	3601      	adds	r6, #1
 800b370:	e7ee      	b.n	800b350 <__libc_init_array+0xc>
 800b372:	f855 3b04 	ldr.w	r3, [r5], #4
 800b376:	4798      	blx	r3
 800b378:	3601      	adds	r6, #1
 800b37a:	e7f2      	b.n	800b362 <__libc_init_array+0x1e>
 800b37c:	0800bce4 	.word	0x0800bce4
 800b380:	0800bce4 	.word	0x0800bce4
 800b384:	0800bce4 	.word	0x0800bce4
 800b388:	0800bce8 	.word	0x0800bce8

0800b38c <__retarget_lock_acquire_recursive>:
 800b38c:	4770      	bx	lr

0800b38e <__retarget_lock_release_recursive>:
 800b38e:	4770      	bx	lr

0800b390 <_free_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4605      	mov	r5, r0
 800b394:	2900      	cmp	r1, #0
 800b396:	d041      	beq.n	800b41c <_free_r+0x8c>
 800b398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b39c:	1f0c      	subs	r4, r1, #4
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	bfb8      	it	lt
 800b3a2:	18e4      	addlt	r4, r4, r3
 800b3a4:	f000 f8e0 	bl	800b568 <__malloc_lock>
 800b3a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b420 <_free_r+0x90>)
 800b3aa:	6813      	ldr	r3, [r2, #0]
 800b3ac:	b933      	cbnz	r3, 800b3bc <_free_r+0x2c>
 800b3ae:	6063      	str	r3, [r4, #4]
 800b3b0:	6014      	str	r4, [r2, #0]
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3b8:	f000 b8dc 	b.w	800b574 <__malloc_unlock>
 800b3bc:	42a3      	cmp	r3, r4
 800b3be:	d908      	bls.n	800b3d2 <_free_r+0x42>
 800b3c0:	6820      	ldr	r0, [r4, #0]
 800b3c2:	1821      	adds	r1, r4, r0
 800b3c4:	428b      	cmp	r3, r1
 800b3c6:	bf01      	itttt	eq
 800b3c8:	6819      	ldreq	r1, [r3, #0]
 800b3ca:	685b      	ldreq	r3, [r3, #4]
 800b3cc:	1809      	addeq	r1, r1, r0
 800b3ce:	6021      	streq	r1, [r4, #0]
 800b3d0:	e7ed      	b.n	800b3ae <_free_r+0x1e>
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	b10b      	cbz	r3, 800b3dc <_free_r+0x4c>
 800b3d8:	42a3      	cmp	r3, r4
 800b3da:	d9fa      	bls.n	800b3d2 <_free_r+0x42>
 800b3dc:	6811      	ldr	r1, [r2, #0]
 800b3de:	1850      	adds	r0, r2, r1
 800b3e0:	42a0      	cmp	r0, r4
 800b3e2:	d10b      	bne.n	800b3fc <_free_r+0x6c>
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	4401      	add	r1, r0
 800b3e8:	1850      	adds	r0, r2, r1
 800b3ea:	4283      	cmp	r3, r0
 800b3ec:	6011      	str	r1, [r2, #0]
 800b3ee:	d1e0      	bne.n	800b3b2 <_free_r+0x22>
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	6053      	str	r3, [r2, #4]
 800b3f6:	4408      	add	r0, r1
 800b3f8:	6010      	str	r0, [r2, #0]
 800b3fa:	e7da      	b.n	800b3b2 <_free_r+0x22>
 800b3fc:	d902      	bls.n	800b404 <_free_r+0x74>
 800b3fe:	230c      	movs	r3, #12
 800b400:	602b      	str	r3, [r5, #0]
 800b402:	e7d6      	b.n	800b3b2 <_free_r+0x22>
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	1821      	adds	r1, r4, r0
 800b408:	428b      	cmp	r3, r1
 800b40a:	bf04      	itt	eq
 800b40c:	6819      	ldreq	r1, [r3, #0]
 800b40e:	685b      	ldreq	r3, [r3, #4]
 800b410:	6063      	str	r3, [r4, #4]
 800b412:	bf04      	itt	eq
 800b414:	1809      	addeq	r1, r1, r0
 800b416:	6021      	streq	r1, [r4, #0]
 800b418:	6054      	str	r4, [r2, #4]
 800b41a:	e7ca      	b.n	800b3b2 <_free_r+0x22>
 800b41c:	bd38      	pop	{r3, r4, r5, pc}
 800b41e:	bf00      	nop
 800b420:	20004ab4 	.word	0x20004ab4

0800b424 <sbrk_aligned>:
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	4e0f      	ldr	r6, [pc, #60]	@ (800b464 <sbrk_aligned+0x40>)
 800b428:	460c      	mov	r4, r1
 800b42a:	6831      	ldr	r1, [r6, #0]
 800b42c:	4605      	mov	r5, r0
 800b42e:	b911      	cbnz	r1, 800b436 <sbrk_aligned+0x12>
 800b430:	f000 fba6 	bl	800bb80 <_sbrk_r>
 800b434:	6030      	str	r0, [r6, #0]
 800b436:	4621      	mov	r1, r4
 800b438:	4628      	mov	r0, r5
 800b43a:	f000 fba1 	bl	800bb80 <_sbrk_r>
 800b43e:	1c43      	adds	r3, r0, #1
 800b440:	d103      	bne.n	800b44a <sbrk_aligned+0x26>
 800b442:	f04f 34ff 	mov.w	r4, #4294967295
 800b446:	4620      	mov	r0, r4
 800b448:	bd70      	pop	{r4, r5, r6, pc}
 800b44a:	1cc4      	adds	r4, r0, #3
 800b44c:	f024 0403 	bic.w	r4, r4, #3
 800b450:	42a0      	cmp	r0, r4
 800b452:	d0f8      	beq.n	800b446 <sbrk_aligned+0x22>
 800b454:	1a21      	subs	r1, r4, r0
 800b456:	4628      	mov	r0, r5
 800b458:	f000 fb92 	bl	800bb80 <_sbrk_r>
 800b45c:	3001      	adds	r0, #1
 800b45e:	d1f2      	bne.n	800b446 <sbrk_aligned+0x22>
 800b460:	e7ef      	b.n	800b442 <sbrk_aligned+0x1e>
 800b462:	bf00      	nop
 800b464:	20004ab0 	.word	0x20004ab0

0800b468 <_malloc_r>:
 800b468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b46c:	1ccd      	adds	r5, r1, #3
 800b46e:	f025 0503 	bic.w	r5, r5, #3
 800b472:	3508      	adds	r5, #8
 800b474:	2d0c      	cmp	r5, #12
 800b476:	bf38      	it	cc
 800b478:	250c      	movcc	r5, #12
 800b47a:	2d00      	cmp	r5, #0
 800b47c:	4606      	mov	r6, r0
 800b47e:	db01      	blt.n	800b484 <_malloc_r+0x1c>
 800b480:	42a9      	cmp	r1, r5
 800b482:	d904      	bls.n	800b48e <_malloc_r+0x26>
 800b484:	230c      	movs	r3, #12
 800b486:	6033      	str	r3, [r6, #0]
 800b488:	2000      	movs	r0, #0
 800b48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b48e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b564 <_malloc_r+0xfc>
 800b492:	f000 f869 	bl	800b568 <__malloc_lock>
 800b496:	f8d8 3000 	ldr.w	r3, [r8]
 800b49a:	461c      	mov	r4, r3
 800b49c:	bb44      	cbnz	r4, 800b4f0 <_malloc_r+0x88>
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	f7ff ffbf 	bl	800b424 <sbrk_aligned>
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	d158      	bne.n	800b55e <_malloc_r+0xf6>
 800b4ac:	f8d8 4000 	ldr.w	r4, [r8]
 800b4b0:	4627      	mov	r7, r4
 800b4b2:	2f00      	cmp	r7, #0
 800b4b4:	d143      	bne.n	800b53e <_malloc_r+0xd6>
 800b4b6:	2c00      	cmp	r4, #0
 800b4b8:	d04b      	beq.n	800b552 <_malloc_r+0xea>
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	4639      	mov	r1, r7
 800b4be:	4630      	mov	r0, r6
 800b4c0:	eb04 0903 	add.w	r9, r4, r3
 800b4c4:	f000 fb5c 	bl	800bb80 <_sbrk_r>
 800b4c8:	4581      	cmp	r9, r0
 800b4ca:	d142      	bne.n	800b552 <_malloc_r+0xea>
 800b4cc:	6821      	ldr	r1, [r4, #0]
 800b4ce:	1a6d      	subs	r5, r5, r1
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7ff ffa6 	bl	800b424 <sbrk_aligned>
 800b4d8:	3001      	adds	r0, #1
 800b4da:	d03a      	beq.n	800b552 <_malloc_r+0xea>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	442b      	add	r3, r5
 800b4e0:	6023      	str	r3, [r4, #0]
 800b4e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	bb62      	cbnz	r2, 800b544 <_malloc_r+0xdc>
 800b4ea:	f8c8 7000 	str.w	r7, [r8]
 800b4ee:	e00f      	b.n	800b510 <_malloc_r+0xa8>
 800b4f0:	6822      	ldr	r2, [r4, #0]
 800b4f2:	1b52      	subs	r2, r2, r5
 800b4f4:	d420      	bmi.n	800b538 <_malloc_r+0xd0>
 800b4f6:	2a0b      	cmp	r2, #11
 800b4f8:	d917      	bls.n	800b52a <_malloc_r+0xc2>
 800b4fa:	1961      	adds	r1, r4, r5
 800b4fc:	42a3      	cmp	r3, r4
 800b4fe:	6025      	str	r5, [r4, #0]
 800b500:	bf18      	it	ne
 800b502:	6059      	strne	r1, [r3, #4]
 800b504:	6863      	ldr	r3, [r4, #4]
 800b506:	bf08      	it	eq
 800b508:	f8c8 1000 	streq.w	r1, [r8]
 800b50c:	5162      	str	r2, [r4, r5]
 800b50e:	604b      	str	r3, [r1, #4]
 800b510:	4630      	mov	r0, r6
 800b512:	f000 f82f 	bl	800b574 <__malloc_unlock>
 800b516:	f104 000b 	add.w	r0, r4, #11
 800b51a:	1d23      	adds	r3, r4, #4
 800b51c:	f020 0007 	bic.w	r0, r0, #7
 800b520:	1ac2      	subs	r2, r0, r3
 800b522:	bf1c      	itt	ne
 800b524:	1a1b      	subne	r3, r3, r0
 800b526:	50a3      	strne	r3, [r4, r2]
 800b528:	e7af      	b.n	800b48a <_malloc_r+0x22>
 800b52a:	6862      	ldr	r2, [r4, #4]
 800b52c:	42a3      	cmp	r3, r4
 800b52e:	bf0c      	ite	eq
 800b530:	f8c8 2000 	streq.w	r2, [r8]
 800b534:	605a      	strne	r2, [r3, #4]
 800b536:	e7eb      	b.n	800b510 <_malloc_r+0xa8>
 800b538:	4623      	mov	r3, r4
 800b53a:	6864      	ldr	r4, [r4, #4]
 800b53c:	e7ae      	b.n	800b49c <_malloc_r+0x34>
 800b53e:	463c      	mov	r4, r7
 800b540:	687f      	ldr	r7, [r7, #4]
 800b542:	e7b6      	b.n	800b4b2 <_malloc_r+0x4a>
 800b544:	461a      	mov	r2, r3
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	42a3      	cmp	r3, r4
 800b54a:	d1fb      	bne.n	800b544 <_malloc_r+0xdc>
 800b54c:	2300      	movs	r3, #0
 800b54e:	6053      	str	r3, [r2, #4]
 800b550:	e7de      	b.n	800b510 <_malloc_r+0xa8>
 800b552:	230c      	movs	r3, #12
 800b554:	6033      	str	r3, [r6, #0]
 800b556:	4630      	mov	r0, r6
 800b558:	f000 f80c 	bl	800b574 <__malloc_unlock>
 800b55c:	e794      	b.n	800b488 <_malloc_r+0x20>
 800b55e:	6005      	str	r5, [r0, #0]
 800b560:	e7d6      	b.n	800b510 <_malloc_r+0xa8>
 800b562:	bf00      	nop
 800b564:	20004ab4 	.word	0x20004ab4

0800b568 <__malloc_lock>:
 800b568:	4801      	ldr	r0, [pc, #4]	@ (800b570 <__malloc_lock+0x8>)
 800b56a:	f7ff bf0f 	b.w	800b38c <__retarget_lock_acquire_recursive>
 800b56e:	bf00      	nop
 800b570:	20004aac 	.word	0x20004aac

0800b574 <__malloc_unlock>:
 800b574:	4801      	ldr	r0, [pc, #4]	@ (800b57c <__malloc_unlock+0x8>)
 800b576:	f7ff bf0a 	b.w	800b38e <__retarget_lock_release_recursive>
 800b57a:	bf00      	nop
 800b57c:	20004aac 	.word	0x20004aac

0800b580 <__ssputs_r>:
 800b580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b584:	688e      	ldr	r6, [r1, #8]
 800b586:	461f      	mov	r7, r3
 800b588:	42be      	cmp	r6, r7
 800b58a:	680b      	ldr	r3, [r1, #0]
 800b58c:	4682      	mov	sl, r0
 800b58e:	460c      	mov	r4, r1
 800b590:	4690      	mov	r8, r2
 800b592:	d82d      	bhi.n	800b5f0 <__ssputs_r+0x70>
 800b594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b598:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b59c:	d026      	beq.n	800b5ec <__ssputs_r+0x6c>
 800b59e:	6965      	ldr	r5, [r4, #20]
 800b5a0:	6909      	ldr	r1, [r1, #16]
 800b5a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5a6:	eba3 0901 	sub.w	r9, r3, r1
 800b5aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5ae:	1c7b      	adds	r3, r7, #1
 800b5b0:	444b      	add	r3, r9
 800b5b2:	106d      	asrs	r5, r5, #1
 800b5b4:	429d      	cmp	r5, r3
 800b5b6:	bf38      	it	cc
 800b5b8:	461d      	movcc	r5, r3
 800b5ba:	0553      	lsls	r3, r2, #21
 800b5bc:	d527      	bpl.n	800b60e <__ssputs_r+0x8e>
 800b5be:	4629      	mov	r1, r5
 800b5c0:	f7ff ff52 	bl	800b468 <_malloc_r>
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	b360      	cbz	r0, 800b622 <__ssputs_r+0xa2>
 800b5c8:	6921      	ldr	r1, [r4, #16]
 800b5ca:	464a      	mov	r2, r9
 800b5cc:	f000 fae8 	bl	800bba0 <memcpy>
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b5d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5da:	81a3      	strh	r3, [r4, #12]
 800b5dc:	6126      	str	r6, [r4, #16]
 800b5de:	6165      	str	r5, [r4, #20]
 800b5e0:	444e      	add	r6, r9
 800b5e2:	eba5 0509 	sub.w	r5, r5, r9
 800b5e6:	6026      	str	r6, [r4, #0]
 800b5e8:	60a5      	str	r5, [r4, #8]
 800b5ea:	463e      	mov	r6, r7
 800b5ec:	42be      	cmp	r6, r7
 800b5ee:	d900      	bls.n	800b5f2 <__ssputs_r+0x72>
 800b5f0:	463e      	mov	r6, r7
 800b5f2:	6820      	ldr	r0, [r4, #0]
 800b5f4:	4632      	mov	r2, r6
 800b5f6:	4641      	mov	r1, r8
 800b5f8:	f000 faa8 	bl	800bb4c <memmove>
 800b5fc:	68a3      	ldr	r3, [r4, #8]
 800b5fe:	1b9b      	subs	r3, r3, r6
 800b600:	60a3      	str	r3, [r4, #8]
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	4433      	add	r3, r6
 800b606:	6023      	str	r3, [r4, #0]
 800b608:	2000      	movs	r0, #0
 800b60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60e:	462a      	mov	r2, r5
 800b610:	f000 fad4 	bl	800bbbc <_realloc_r>
 800b614:	4606      	mov	r6, r0
 800b616:	2800      	cmp	r0, #0
 800b618:	d1e0      	bne.n	800b5dc <__ssputs_r+0x5c>
 800b61a:	6921      	ldr	r1, [r4, #16]
 800b61c:	4650      	mov	r0, sl
 800b61e:	f7ff feb7 	bl	800b390 <_free_r>
 800b622:	230c      	movs	r3, #12
 800b624:	f8ca 3000 	str.w	r3, [sl]
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b62e:	81a3      	strh	r3, [r4, #12]
 800b630:	f04f 30ff 	mov.w	r0, #4294967295
 800b634:	e7e9      	b.n	800b60a <__ssputs_r+0x8a>
	...

0800b638 <_svfiprintf_r>:
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	4698      	mov	r8, r3
 800b63e:	898b      	ldrh	r3, [r1, #12]
 800b640:	061b      	lsls	r3, r3, #24
 800b642:	b09d      	sub	sp, #116	@ 0x74
 800b644:	4607      	mov	r7, r0
 800b646:	460d      	mov	r5, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	d510      	bpl.n	800b66e <_svfiprintf_r+0x36>
 800b64c:	690b      	ldr	r3, [r1, #16]
 800b64e:	b973      	cbnz	r3, 800b66e <_svfiprintf_r+0x36>
 800b650:	2140      	movs	r1, #64	@ 0x40
 800b652:	f7ff ff09 	bl	800b468 <_malloc_r>
 800b656:	6028      	str	r0, [r5, #0]
 800b658:	6128      	str	r0, [r5, #16]
 800b65a:	b930      	cbnz	r0, 800b66a <_svfiprintf_r+0x32>
 800b65c:	230c      	movs	r3, #12
 800b65e:	603b      	str	r3, [r7, #0]
 800b660:	f04f 30ff 	mov.w	r0, #4294967295
 800b664:	b01d      	add	sp, #116	@ 0x74
 800b666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66a:	2340      	movs	r3, #64	@ 0x40
 800b66c:	616b      	str	r3, [r5, #20]
 800b66e:	2300      	movs	r3, #0
 800b670:	9309      	str	r3, [sp, #36]	@ 0x24
 800b672:	2320      	movs	r3, #32
 800b674:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b678:	f8cd 800c 	str.w	r8, [sp, #12]
 800b67c:	2330      	movs	r3, #48	@ 0x30
 800b67e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b81c <_svfiprintf_r+0x1e4>
 800b682:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b686:	f04f 0901 	mov.w	r9, #1
 800b68a:	4623      	mov	r3, r4
 800b68c:	469a      	mov	sl, r3
 800b68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b692:	b10a      	cbz	r2, 800b698 <_svfiprintf_r+0x60>
 800b694:	2a25      	cmp	r2, #37	@ 0x25
 800b696:	d1f9      	bne.n	800b68c <_svfiprintf_r+0x54>
 800b698:	ebba 0b04 	subs.w	fp, sl, r4
 800b69c:	d00b      	beq.n	800b6b6 <_svfiprintf_r+0x7e>
 800b69e:	465b      	mov	r3, fp
 800b6a0:	4622      	mov	r2, r4
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	f7ff ff6b 	bl	800b580 <__ssputs_r>
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	f000 80a7 	beq.w	800b7fe <_svfiprintf_r+0x1c6>
 800b6b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6b2:	445a      	add	r2, fp
 800b6b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 809f 	beq.w	800b7fe <_svfiprintf_r+0x1c6>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6ca:	f10a 0a01 	add.w	sl, sl, #1
 800b6ce:	9304      	str	r3, [sp, #16]
 800b6d0:	9307      	str	r3, [sp, #28]
 800b6d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6d8:	4654      	mov	r4, sl
 800b6da:	2205      	movs	r2, #5
 800b6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e0:	484e      	ldr	r0, [pc, #312]	@ (800b81c <_svfiprintf_r+0x1e4>)
 800b6e2:	f7f4 fd9d 	bl	8000220 <memchr>
 800b6e6:	9a04      	ldr	r2, [sp, #16]
 800b6e8:	b9d8      	cbnz	r0, 800b722 <_svfiprintf_r+0xea>
 800b6ea:	06d0      	lsls	r0, r2, #27
 800b6ec:	bf44      	itt	mi
 800b6ee:	2320      	movmi	r3, #32
 800b6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6f4:	0711      	lsls	r1, r2, #28
 800b6f6:	bf44      	itt	mi
 800b6f8:	232b      	movmi	r3, #43	@ 0x2b
 800b6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b702:	2b2a      	cmp	r3, #42	@ 0x2a
 800b704:	d015      	beq.n	800b732 <_svfiprintf_r+0xfa>
 800b706:	9a07      	ldr	r2, [sp, #28]
 800b708:	4654      	mov	r4, sl
 800b70a:	2000      	movs	r0, #0
 800b70c:	f04f 0c0a 	mov.w	ip, #10
 800b710:	4621      	mov	r1, r4
 800b712:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b716:	3b30      	subs	r3, #48	@ 0x30
 800b718:	2b09      	cmp	r3, #9
 800b71a:	d94b      	bls.n	800b7b4 <_svfiprintf_r+0x17c>
 800b71c:	b1b0      	cbz	r0, 800b74c <_svfiprintf_r+0x114>
 800b71e:	9207      	str	r2, [sp, #28]
 800b720:	e014      	b.n	800b74c <_svfiprintf_r+0x114>
 800b722:	eba0 0308 	sub.w	r3, r0, r8
 800b726:	fa09 f303 	lsl.w	r3, r9, r3
 800b72a:	4313      	orrs	r3, r2
 800b72c:	9304      	str	r3, [sp, #16]
 800b72e:	46a2      	mov	sl, r4
 800b730:	e7d2      	b.n	800b6d8 <_svfiprintf_r+0xa0>
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	1d19      	adds	r1, r3, #4
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	9103      	str	r1, [sp, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	bfbb      	ittet	lt
 800b73e:	425b      	neglt	r3, r3
 800b740:	f042 0202 	orrlt.w	r2, r2, #2
 800b744:	9307      	strge	r3, [sp, #28]
 800b746:	9307      	strlt	r3, [sp, #28]
 800b748:	bfb8      	it	lt
 800b74a:	9204      	strlt	r2, [sp, #16]
 800b74c:	7823      	ldrb	r3, [r4, #0]
 800b74e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b750:	d10a      	bne.n	800b768 <_svfiprintf_r+0x130>
 800b752:	7863      	ldrb	r3, [r4, #1]
 800b754:	2b2a      	cmp	r3, #42	@ 0x2a
 800b756:	d132      	bne.n	800b7be <_svfiprintf_r+0x186>
 800b758:	9b03      	ldr	r3, [sp, #12]
 800b75a:	1d1a      	adds	r2, r3, #4
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	9203      	str	r2, [sp, #12]
 800b760:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b764:	3402      	adds	r4, #2
 800b766:	9305      	str	r3, [sp, #20]
 800b768:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b82c <_svfiprintf_r+0x1f4>
 800b76c:	7821      	ldrb	r1, [r4, #0]
 800b76e:	2203      	movs	r2, #3
 800b770:	4650      	mov	r0, sl
 800b772:	f7f4 fd55 	bl	8000220 <memchr>
 800b776:	b138      	cbz	r0, 800b788 <_svfiprintf_r+0x150>
 800b778:	9b04      	ldr	r3, [sp, #16]
 800b77a:	eba0 000a 	sub.w	r0, r0, sl
 800b77e:	2240      	movs	r2, #64	@ 0x40
 800b780:	4082      	lsls	r2, r0
 800b782:	4313      	orrs	r3, r2
 800b784:	3401      	adds	r4, #1
 800b786:	9304      	str	r3, [sp, #16]
 800b788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78c:	4824      	ldr	r0, [pc, #144]	@ (800b820 <_svfiprintf_r+0x1e8>)
 800b78e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b792:	2206      	movs	r2, #6
 800b794:	f7f4 fd44 	bl	8000220 <memchr>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d036      	beq.n	800b80a <_svfiprintf_r+0x1d2>
 800b79c:	4b21      	ldr	r3, [pc, #132]	@ (800b824 <_svfiprintf_r+0x1ec>)
 800b79e:	bb1b      	cbnz	r3, 800b7e8 <_svfiprintf_r+0x1b0>
 800b7a0:	9b03      	ldr	r3, [sp, #12]
 800b7a2:	3307      	adds	r3, #7
 800b7a4:	f023 0307 	bic.w	r3, r3, #7
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	9303      	str	r3, [sp, #12]
 800b7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ae:	4433      	add	r3, r6
 800b7b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7b2:	e76a      	b.n	800b68a <_svfiprintf_r+0x52>
 800b7b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	2001      	movs	r0, #1
 800b7bc:	e7a8      	b.n	800b710 <_svfiprintf_r+0xd8>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	3401      	adds	r4, #1
 800b7c2:	9305      	str	r3, [sp, #20]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	f04f 0c0a 	mov.w	ip, #10
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7d0:	3a30      	subs	r2, #48	@ 0x30
 800b7d2:	2a09      	cmp	r2, #9
 800b7d4:	d903      	bls.n	800b7de <_svfiprintf_r+0x1a6>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d0c6      	beq.n	800b768 <_svfiprintf_r+0x130>
 800b7da:	9105      	str	r1, [sp, #20]
 800b7dc:	e7c4      	b.n	800b768 <_svfiprintf_r+0x130>
 800b7de:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e7f0      	b.n	800b7ca <_svfiprintf_r+0x192>
 800b7e8:	ab03      	add	r3, sp, #12
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b828 <_svfiprintf_r+0x1f0>)
 800b7f0:	a904      	add	r1, sp, #16
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	f3af 8000 	nop.w
 800b7f8:	1c42      	adds	r2, r0, #1
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	d1d6      	bne.n	800b7ac <_svfiprintf_r+0x174>
 800b7fe:	89ab      	ldrh	r3, [r5, #12]
 800b800:	065b      	lsls	r3, r3, #25
 800b802:	f53f af2d 	bmi.w	800b660 <_svfiprintf_r+0x28>
 800b806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b808:	e72c      	b.n	800b664 <_svfiprintf_r+0x2c>
 800b80a:	ab03      	add	r3, sp, #12
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	462a      	mov	r2, r5
 800b810:	4b05      	ldr	r3, [pc, #20]	@ (800b828 <_svfiprintf_r+0x1f0>)
 800b812:	a904      	add	r1, sp, #16
 800b814:	4638      	mov	r0, r7
 800b816:	f000 f879 	bl	800b90c <_printf_i>
 800b81a:	e7ed      	b.n	800b7f8 <_svfiprintf_r+0x1c0>
 800b81c:	0800bca8 	.word	0x0800bca8
 800b820:	0800bcb2 	.word	0x0800bcb2
 800b824:	00000000 	.word	0x00000000
 800b828:	0800b581 	.word	0x0800b581
 800b82c:	0800bcae 	.word	0x0800bcae

0800b830 <_printf_common>:
 800b830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b834:	4616      	mov	r6, r2
 800b836:	4698      	mov	r8, r3
 800b838:	688a      	ldr	r2, [r1, #8]
 800b83a:	690b      	ldr	r3, [r1, #16]
 800b83c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b840:	4293      	cmp	r3, r2
 800b842:	bfb8      	it	lt
 800b844:	4613      	movlt	r3, r2
 800b846:	6033      	str	r3, [r6, #0]
 800b848:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b84c:	4607      	mov	r7, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	b10a      	cbz	r2, 800b856 <_printf_common+0x26>
 800b852:	3301      	adds	r3, #1
 800b854:	6033      	str	r3, [r6, #0]
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	0699      	lsls	r1, r3, #26
 800b85a:	bf42      	ittt	mi
 800b85c:	6833      	ldrmi	r3, [r6, #0]
 800b85e:	3302      	addmi	r3, #2
 800b860:	6033      	strmi	r3, [r6, #0]
 800b862:	6825      	ldr	r5, [r4, #0]
 800b864:	f015 0506 	ands.w	r5, r5, #6
 800b868:	d106      	bne.n	800b878 <_printf_common+0x48>
 800b86a:	f104 0a19 	add.w	sl, r4, #25
 800b86e:	68e3      	ldr	r3, [r4, #12]
 800b870:	6832      	ldr	r2, [r6, #0]
 800b872:	1a9b      	subs	r3, r3, r2
 800b874:	42ab      	cmp	r3, r5
 800b876:	dc26      	bgt.n	800b8c6 <_printf_common+0x96>
 800b878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b87c:	6822      	ldr	r2, [r4, #0]
 800b87e:	3b00      	subs	r3, #0
 800b880:	bf18      	it	ne
 800b882:	2301      	movne	r3, #1
 800b884:	0692      	lsls	r2, r2, #26
 800b886:	d42b      	bmi.n	800b8e0 <_printf_common+0xb0>
 800b888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b88c:	4641      	mov	r1, r8
 800b88e:	4638      	mov	r0, r7
 800b890:	47c8      	blx	r9
 800b892:	3001      	adds	r0, #1
 800b894:	d01e      	beq.n	800b8d4 <_printf_common+0xa4>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	6922      	ldr	r2, [r4, #16]
 800b89a:	f003 0306 	and.w	r3, r3, #6
 800b89e:	2b04      	cmp	r3, #4
 800b8a0:	bf02      	ittt	eq
 800b8a2:	68e5      	ldreq	r5, [r4, #12]
 800b8a4:	6833      	ldreq	r3, [r6, #0]
 800b8a6:	1aed      	subeq	r5, r5, r3
 800b8a8:	68a3      	ldr	r3, [r4, #8]
 800b8aa:	bf0c      	ite	eq
 800b8ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8b0:	2500      	movne	r5, #0
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	bfc4      	itt	gt
 800b8b6:	1a9b      	subgt	r3, r3, r2
 800b8b8:	18ed      	addgt	r5, r5, r3
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	341a      	adds	r4, #26
 800b8be:	42b5      	cmp	r5, r6
 800b8c0:	d11a      	bne.n	800b8f8 <_printf_common+0xc8>
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e008      	b.n	800b8d8 <_printf_common+0xa8>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	4652      	mov	r2, sl
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	47c8      	blx	r9
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	d103      	bne.n	800b8dc <_printf_common+0xac>
 800b8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8dc:	3501      	adds	r5, #1
 800b8de:	e7c6      	b.n	800b86e <_printf_common+0x3e>
 800b8e0:	18e1      	adds	r1, r4, r3
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	2030      	movs	r0, #48	@ 0x30
 800b8e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8ea:	4422      	add	r2, r4
 800b8ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8f4:	3302      	adds	r3, #2
 800b8f6:	e7c7      	b.n	800b888 <_printf_common+0x58>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	4641      	mov	r1, r8
 800b8fe:	4638      	mov	r0, r7
 800b900:	47c8      	blx	r9
 800b902:	3001      	adds	r0, #1
 800b904:	d0e6      	beq.n	800b8d4 <_printf_common+0xa4>
 800b906:	3601      	adds	r6, #1
 800b908:	e7d9      	b.n	800b8be <_printf_common+0x8e>
	...

0800b90c <_printf_i>:
 800b90c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b910:	7e0f      	ldrb	r7, [r1, #24]
 800b912:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b914:	2f78      	cmp	r7, #120	@ 0x78
 800b916:	4691      	mov	r9, r2
 800b918:	4680      	mov	r8, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	469a      	mov	sl, r3
 800b91e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b922:	d807      	bhi.n	800b934 <_printf_i+0x28>
 800b924:	2f62      	cmp	r7, #98	@ 0x62
 800b926:	d80a      	bhi.n	800b93e <_printf_i+0x32>
 800b928:	2f00      	cmp	r7, #0
 800b92a:	f000 80d2 	beq.w	800bad2 <_printf_i+0x1c6>
 800b92e:	2f58      	cmp	r7, #88	@ 0x58
 800b930:	f000 80b9 	beq.w	800baa6 <_printf_i+0x19a>
 800b934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b93c:	e03a      	b.n	800b9b4 <_printf_i+0xa8>
 800b93e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b942:	2b15      	cmp	r3, #21
 800b944:	d8f6      	bhi.n	800b934 <_printf_i+0x28>
 800b946:	a101      	add	r1, pc, #4	@ (adr r1, 800b94c <_printf_i+0x40>)
 800b948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b94c:	0800b9a5 	.word	0x0800b9a5
 800b950:	0800b9b9 	.word	0x0800b9b9
 800b954:	0800b935 	.word	0x0800b935
 800b958:	0800b935 	.word	0x0800b935
 800b95c:	0800b935 	.word	0x0800b935
 800b960:	0800b935 	.word	0x0800b935
 800b964:	0800b9b9 	.word	0x0800b9b9
 800b968:	0800b935 	.word	0x0800b935
 800b96c:	0800b935 	.word	0x0800b935
 800b970:	0800b935 	.word	0x0800b935
 800b974:	0800b935 	.word	0x0800b935
 800b978:	0800bab9 	.word	0x0800bab9
 800b97c:	0800b9e3 	.word	0x0800b9e3
 800b980:	0800ba73 	.word	0x0800ba73
 800b984:	0800b935 	.word	0x0800b935
 800b988:	0800b935 	.word	0x0800b935
 800b98c:	0800badb 	.word	0x0800badb
 800b990:	0800b935 	.word	0x0800b935
 800b994:	0800b9e3 	.word	0x0800b9e3
 800b998:	0800b935 	.word	0x0800b935
 800b99c:	0800b935 	.word	0x0800b935
 800b9a0:	0800ba7b 	.word	0x0800ba7b
 800b9a4:	6833      	ldr	r3, [r6, #0]
 800b9a6:	1d1a      	adds	r2, r3, #4
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6032      	str	r2, [r6, #0]
 800b9ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e09d      	b.n	800baf4 <_printf_i+0x1e8>
 800b9b8:	6833      	ldr	r3, [r6, #0]
 800b9ba:	6820      	ldr	r0, [r4, #0]
 800b9bc:	1d19      	adds	r1, r3, #4
 800b9be:	6031      	str	r1, [r6, #0]
 800b9c0:	0606      	lsls	r6, r0, #24
 800b9c2:	d501      	bpl.n	800b9c8 <_printf_i+0xbc>
 800b9c4:	681d      	ldr	r5, [r3, #0]
 800b9c6:	e003      	b.n	800b9d0 <_printf_i+0xc4>
 800b9c8:	0645      	lsls	r5, r0, #25
 800b9ca:	d5fb      	bpl.n	800b9c4 <_printf_i+0xb8>
 800b9cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	da03      	bge.n	800b9dc <_printf_i+0xd0>
 800b9d4:	232d      	movs	r3, #45	@ 0x2d
 800b9d6:	426d      	negs	r5, r5
 800b9d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9dc:	4859      	ldr	r0, [pc, #356]	@ (800bb44 <_printf_i+0x238>)
 800b9de:	230a      	movs	r3, #10
 800b9e0:	e011      	b.n	800ba06 <_printf_i+0xfa>
 800b9e2:	6821      	ldr	r1, [r4, #0]
 800b9e4:	6833      	ldr	r3, [r6, #0]
 800b9e6:	0608      	lsls	r0, r1, #24
 800b9e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9ec:	d402      	bmi.n	800b9f4 <_printf_i+0xe8>
 800b9ee:	0649      	lsls	r1, r1, #25
 800b9f0:	bf48      	it	mi
 800b9f2:	b2ad      	uxthmi	r5, r5
 800b9f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9f6:	4853      	ldr	r0, [pc, #332]	@ (800bb44 <_printf_i+0x238>)
 800b9f8:	6033      	str	r3, [r6, #0]
 800b9fa:	bf14      	ite	ne
 800b9fc:	230a      	movne	r3, #10
 800b9fe:	2308      	moveq	r3, #8
 800ba00:	2100      	movs	r1, #0
 800ba02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba06:	6866      	ldr	r6, [r4, #4]
 800ba08:	60a6      	str	r6, [r4, #8]
 800ba0a:	2e00      	cmp	r6, #0
 800ba0c:	bfa2      	ittt	ge
 800ba0e:	6821      	ldrge	r1, [r4, #0]
 800ba10:	f021 0104 	bicge.w	r1, r1, #4
 800ba14:	6021      	strge	r1, [r4, #0]
 800ba16:	b90d      	cbnz	r5, 800ba1c <_printf_i+0x110>
 800ba18:	2e00      	cmp	r6, #0
 800ba1a:	d04b      	beq.n	800bab4 <_printf_i+0x1a8>
 800ba1c:	4616      	mov	r6, r2
 800ba1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba22:	fb03 5711 	mls	r7, r3, r1, r5
 800ba26:	5dc7      	ldrb	r7, [r0, r7]
 800ba28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba2c:	462f      	mov	r7, r5
 800ba2e:	42bb      	cmp	r3, r7
 800ba30:	460d      	mov	r5, r1
 800ba32:	d9f4      	bls.n	800ba1e <_printf_i+0x112>
 800ba34:	2b08      	cmp	r3, #8
 800ba36:	d10b      	bne.n	800ba50 <_printf_i+0x144>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	07df      	lsls	r7, r3, #31
 800ba3c:	d508      	bpl.n	800ba50 <_printf_i+0x144>
 800ba3e:	6923      	ldr	r3, [r4, #16]
 800ba40:	6861      	ldr	r1, [r4, #4]
 800ba42:	4299      	cmp	r1, r3
 800ba44:	bfde      	ittt	le
 800ba46:	2330      	movle	r3, #48	@ 0x30
 800ba48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba50:	1b92      	subs	r2, r2, r6
 800ba52:	6122      	str	r2, [r4, #16]
 800ba54:	f8cd a000 	str.w	sl, [sp]
 800ba58:	464b      	mov	r3, r9
 800ba5a:	aa03      	add	r2, sp, #12
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	4640      	mov	r0, r8
 800ba60:	f7ff fee6 	bl	800b830 <_printf_common>
 800ba64:	3001      	adds	r0, #1
 800ba66:	d14a      	bne.n	800bafe <_printf_i+0x1f2>
 800ba68:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6c:	b004      	add	sp, #16
 800ba6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	f043 0320 	orr.w	r3, r3, #32
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	4833      	ldr	r0, [pc, #204]	@ (800bb48 <_printf_i+0x23c>)
 800ba7c:	2778      	movs	r7, #120	@ 0x78
 800ba7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	6831      	ldr	r1, [r6, #0]
 800ba86:	061f      	lsls	r7, r3, #24
 800ba88:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba8c:	d402      	bmi.n	800ba94 <_printf_i+0x188>
 800ba8e:	065f      	lsls	r7, r3, #25
 800ba90:	bf48      	it	mi
 800ba92:	b2ad      	uxthmi	r5, r5
 800ba94:	6031      	str	r1, [r6, #0]
 800ba96:	07d9      	lsls	r1, r3, #31
 800ba98:	bf44      	itt	mi
 800ba9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ba9e:	6023      	strmi	r3, [r4, #0]
 800baa0:	b11d      	cbz	r5, 800baaa <_printf_i+0x19e>
 800baa2:	2310      	movs	r3, #16
 800baa4:	e7ac      	b.n	800ba00 <_printf_i+0xf4>
 800baa6:	4827      	ldr	r0, [pc, #156]	@ (800bb44 <_printf_i+0x238>)
 800baa8:	e7e9      	b.n	800ba7e <_printf_i+0x172>
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	f023 0320 	bic.w	r3, r3, #32
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	e7f6      	b.n	800baa2 <_printf_i+0x196>
 800bab4:	4616      	mov	r6, r2
 800bab6:	e7bd      	b.n	800ba34 <_printf_i+0x128>
 800bab8:	6833      	ldr	r3, [r6, #0]
 800baba:	6825      	ldr	r5, [r4, #0]
 800babc:	6961      	ldr	r1, [r4, #20]
 800babe:	1d18      	adds	r0, r3, #4
 800bac0:	6030      	str	r0, [r6, #0]
 800bac2:	062e      	lsls	r6, r5, #24
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	d501      	bpl.n	800bacc <_printf_i+0x1c0>
 800bac8:	6019      	str	r1, [r3, #0]
 800baca:	e002      	b.n	800bad2 <_printf_i+0x1c6>
 800bacc:	0668      	lsls	r0, r5, #25
 800bace:	d5fb      	bpl.n	800bac8 <_printf_i+0x1bc>
 800bad0:	8019      	strh	r1, [r3, #0]
 800bad2:	2300      	movs	r3, #0
 800bad4:	6123      	str	r3, [r4, #16]
 800bad6:	4616      	mov	r6, r2
 800bad8:	e7bc      	b.n	800ba54 <_printf_i+0x148>
 800bada:	6833      	ldr	r3, [r6, #0]
 800badc:	1d1a      	adds	r2, r3, #4
 800bade:	6032      	str	r2, [r6, #0]
 800bae0:	681e      	ldr	r6, [r3, #0]
 800bae2:	6862      	ldr	r2, [r4, #4]
 800bae4:	2100      	movs	r1, #0
 800bae6:	4630      	mov	r0, r6
 800bae8:	f7f4 fb9a 	bl	8000220 <memchr>
 800baec:	b108      	cbz	r0, 800baf2 <_printf_i+0x1e6>
 800baee:	1b80      	subs	r0, r0, r6
 800baf0:	6060      	str	r0, [r4, #4]
 800baf2:	6863      	ldr	r3, [r4, #4]
 800baf4:	6123      	str	r3, [r4, #16]
 800baf6:	2300      	movs	r3, #0
 800baf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bafc:	e7aa      	b.n	800ba54 <_printf_i+0x148>
 800bafe:	6923      	ldr	r3, [r4, #16]
 800bb00:	4632      	mov	r2, r6
 800bb02:	4649      	mov	r1, r9
 800bb04:	4640      	mov	r0, r8
 800bb06:	47d0      	blx	sl
 800bb08:	3001      	adds	r0, #1
 800bb0a:	d0ad      	beq.n	800ba68 <_printf_i+0x15c>
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	079b      	lsls	r3, r3, #30
 800bb10:	d413      	bmi.n	800bb3a <_printf_i+0x22e>
 800bb12:	68e0      	ldr	r0, [r4, #12]
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	4298      	cmp	r0, r3
 800bb18:	bfb8      	it	lt
 800bb1a:	4618      	movlt	r0, r3
 800bb1c:	e7a6      	b.n	800ba6c <_printf_i+0x160>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	4632      	mov	r2, r6
 800bb22:	4649      	mov	r1, r9
 800bb24:	4640      	mov	r0, r8
 800bb26:	47d0      	blx	sl
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d09d      	beq.n	800ba68 <_printf_i+0x15c>
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	68e3      	ldr	r3, [r4, #12]
 800bb30:	9903      	ldr	r1, [sp, #12]
 800bb32:	1a5b      	subs	r3, r3, r1
 800bb34:	42ab      	cmp	r3, r5
 800bb36:	dcf2      	bgt.n	800bb1e <_printf_i+0x212>
 800bb38:	e7eb      	b.n	800bb12 <_printf_i+0x206>
 800bb3a:	2500      	movs	r5, #0
 800bb3c:	f104 0619 	add.w	r6, r4, #25
 800bb40:	e7f5      	b.n	800bb2e <_printf_i+0x222>
 800bb42:	bf00      	nop
 800bb44:	0800bcb9 	.word	0x0800bcb9
 800bb48:	0800bcca 	.word	0x0800bcca

0800bb4c <memmove>:
 800bb4c:	4288      	cmp	r0, r1
 800bb4e:	b510      	push	{r4, lr}
 800bb50:	eb01 0402 	add.w	r4, r1, r2
 800bb54:	d902      	bls.n	800bb5c <memmove+0x10>
 800bb56:	4284      	cmp	r4, r0
 800bb58:	4623      	mov	r3, r4
 800bb5a:	d807      	bhi.n	800bb6c <memmove+0x20>
 800bb5c:	1e43      	subs	r3, r0, #1
 800bb5e:	42a1      	cmp	r1, r4
 800bb60:	d008      	beq.n	800bb74 <memmove+0x28>
 800bb62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb6a:	e7f8      	b.n	800bb5e <memmove+0x12>
 800bb6c:	4402      	add	r2, r0
 800bb6e:	4601      	mov	r1, r0
 800bb70:	428a      	cmp	r2, r1
 800bb72:	d100      	bne.n	800bb76 <memmove+0x2a>
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb7e:	e7f7      	b.n	800bb70 <memmove+0x24>

0800bb80 <_sbrk_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	4d06      	ldr	r5, [pc, #24]	@ (800bb9c <_sbrk_r+0x1c>)
 800bb84:	2300      	movs	r3, #0
 800bb86:	4604      	mov	r4, r0
 800bb88:	4608      	mov	r0, r1
 800bb8a:	602b      	str	r3, [r5, #0]
 800bb8c:	f7f5 f8c8 	bl	8000d20 <_sbrk>
 800bb90:	1c43      	adds	r3, r0, #1
 800bb92:	d102      	bne.n	800bb9a <_sbrk_r+0x1a>
 800bb94:	682b      	ldr	r3, [r5, #0]
 800bb96:	b103      	cbz	r3, 800bb9a <_sbrk_r+0x1a>
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	20004aa8 	.word	0x20004aa8

0800bba0 <memcpy>:
 800bba0:	440a      	add	r2, r1
 800bba2:	4291      	cmp	r1, r2
 800bba4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bba8:	d100      	bne.n	800bbac <memcpy+0xc>
 800bbaa:	4770      	bx	lr
 800bbac:	b510      	push	{r4, lr}
 800bbae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbb6:	4291      	cmp	r1, r2
 800bbb8:	d1f9      	bne.n	800bbae <memcpy+0xe>
 800bbba:	bd10      	pop	{r4, pc}

0800bbbc <_realloc_r>:
 800bbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc0:	4680      	mov	r8, r0
 800bbc2:	4615      	mov	r5, r2
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	b921      	cbnz	r1, 800bbd2 <_realloc_r+0x16>
 800bbc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbcc:	4611      	mov	r1, r2
 800bbce:	f7ff bc4b 	b.w	800b468 <_malloc_r>
 800bbd2:	b92a      	cbnz	r2, 800bbe0 <_realloc_r+0x24>
 800bbd4:	f7ff fbdc 	bl	800b390 <_free_r>
 800bbd8:	2400      	movs	r4, #0
 800bbda:	4620      	mov	r0, r4
 800bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe0:	f000 f81a 	bl	800bc18 <_malloc_usable_size_r>
 800bbe4:	4285      	cmp	r5, r0
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	d802      	bhi.n	800bbf0 <_realloc_r+0x34>
 800bbea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bbee:	d8f4      	bhi.n	800bbda <_realloc_r+0x1e>
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	f7ff fc38 	bl	800b468 <_malloc_r>
 800bbf8:	4607      	mov	r7, r0
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d0ec      	beq.n	800bbd8 <_realloc_r+0x1c>
 800bbfe:	42b5      	cmp	r5, r6
 800bc00:	462a      	mov	r2, r5
 800bc02:	4621      	mov	r1, r4
 800bc04:	bf28      	it	cs
 800bc06:	4632      	movcs	r2, r6
 800bc08:	f7ff ffca 	bl	800bba0 <memcpy>
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	4640      	mov	r0, r8
 800bc10:	f7ff fbbe 	bl	800b390 <_free_r>
 800bc14:	463c      	mov	r4, r7
 800bc16:	e7e0      	b.n	800bbda <_realloc_r+0x1e>

0800bc18 <_malloc_usable_size_r>:
 800bc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc1c:	1f18      	subs	r0, r3, #4
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	bfbc      	itt	lt
 800bc22:	580b      	ldrlt	r3, [r1, r0]
 800bc24:	18c0      	addlt	r0, r0, r3
 800bc26:	4770      	bx	lr

0800bc28 <_init>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	bf00      	nop
 800bc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2e:	bc08      	pop	{r3}
 800bc30:	469e      	mov	lr, r3
 800bc32:	4770      	bx	lr

0800bc34 <_fini>:
 800bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc36:	bf00      	nop
 800bc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc3a:	bc08      	pop	{r3}
 800bc3c:	469e      	mov	lr, r3
 800bc3e:	4770      	bx	lr
