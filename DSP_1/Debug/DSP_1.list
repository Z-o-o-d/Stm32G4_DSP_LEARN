
DSP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800c3dc  0800c3dc  0000d3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4a4  0800c4a4  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4a4  0800c4a4  0000d4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4ac  0800c4ac  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4ac  0800c4ac  0000d4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c4b0  0800c4b0  0000d4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c4b4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035d4  200001d4  0800c688  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037a8  0800c688  0000e7a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000244e2  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005786  00000000  00000000  000326e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  00037e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001694  00000000  00000000  00039c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263ce  00000000  00000000  0003b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029170  00000000  00000000  00061672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7625  00000000  00000000  0008a7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171e07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ff8  00000000  00000000  00171e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00179e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c3c4 	.word	0x0800c3c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800c3c4 	.word	0x0800c3c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2220      	movs	r2, #32
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f00b fa81 	bl	800bac4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000674 <MX_ADC2_Init+0xc4>)
 80005c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000678 <MX_ADC2_Init+0xc8>)
 80005c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000674 <MX_ADC2_Init+0xc4>)
 80005ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005d0:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <MX_ADC2_Init+0xc4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d6:	4b27      	ldr	r3, [pc, #156]	@ (8000674 <MX_ADC2_Init+0xc4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80005dc:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <MX_ADC2_Init+0xc4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e2:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <MX_ADC2_Init+0xc4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <MX_ADC2_Init+0xc4>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC2_Init+0xc4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC2_Init+0xc4>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <MX_ADC2_Init+0xc4>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC2_Init+0xc4>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC2_Init+0xc4>)
 800060a:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800060e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000610:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <MX_ADC2_Init+0xc4>)
 8000612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000616:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <MX_ADC2_Init+0xc4>)
 800061a:	2201      	movs	r2, #1
 800061c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC2_Init+0xc4>)
 8000622:	2200      	movs	r2, #0
 8000624:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000626:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <MX_ADC2_Init+0xc4>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800062e:	4811      	ldr	r0, [pc, #68]	@ (8000674 <MX_ADC2_Init+0xc4>)
 8000630:	f001 f810 	bl	8001654 <HAL_ADC_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800063a:	f000 fa68 	bl	8000b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_ADC2_Init+0xcc>)
 8000640:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000642:	2306      	movs	r3, #6
 8000644:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064a:	237f      	movs	r3, #127	@ 0x7f
 800064c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800064e:	2304      	movs	r3, #4
 8000650:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	@ (8000674 <MX_ADC2_Init+0xc4>)
 800065c:	f001 fa50 	bl	8001b00 <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000666:	f000 fa52 	bl	8000b0e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200001f0 	.word	0x200001f0
 8000678:	50000100 	.word	0x50000100
 800067c:	cb8c0000 	.word	0xcb8c0000

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2244      	movs	r2, #68	@ 0x44
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f00b fa17 	bl	800bac4 <memset>
  if(adcHandle->Instance==ADC2)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a27      	ldr	r2, [pc, #156]	@ (8000738 <HAL_ADC_MspInit+0xb8>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d146      	bne.n	800072e <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006aa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4618      	mov	r0, r3
 80006b2:	f005 fb19 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 80006bc:	f000 fa27 	bl	8000b0e <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006c0:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <HAL_ADC_MspInit+0xbc>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c4:	4a1d      	ldr	r2, [pc, #116]	@ (800073c <HAL_ADC_MspInit+0xbc>)
 80006c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <HAL_ADC_MspInit+0xbc>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 80006da:	4a1a      	ldr	r2, [pc, #104]	@ (8000744 <HAL_ADC_MspInit+0xc4>)
 80006dc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 80006e0:	2224      	movs	r2, #36	@ 0x24
 80006e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e4:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80006f0:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 80006f2:	2280      	movs	r2, #128	@ 0x80
 80006f4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 80006f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006fc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 8000700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000704:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000712:	480b      	ldr	r0, [pc, #44]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 8000714:	f002 fa1a 	bl	8002b4c <HAL_DMA_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 800071e:	f000 f9f6 	bl	8000b0e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a06      	ldr	r2, [pc, #24]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 8000726:	655a      	str	r2, [r3, #84]	@ 0x54
 8000728:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <HAL_ADC_MspInit+0xc0>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	@ 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	50000100 	.word	0x50000100
 800073c:	40021000 	.word	0x40021000
 8000740:	2000025c 	.word	0x2000025c
 8000744:	40020008 	.word	0x40020008

08000748 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_CORDIC_Init+0x20>)
 800074e:	4a07      	ldr	r2, [pc, #28]	@ (800076c <MX_CORDIC_Init+0x24>)
 8000750:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_CORDIC_Init+0x20>)
 8000754:	f001 fede 	bl	8002514 <HAL_CORDIC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800075e:	f000 f9d6 	bl	8000b0e <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200002bc 	.word	0x200002bc
 800076c:	40020c00 	.word	0x40020c00

08000770 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <HAL_CORDIC_MspInit+0x38>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d10b      	bne.n	800079a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_CORDIC_MspInit+0x3c>)
 8000784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000786:	4a09      	ldr	r2, [pc, #36]	@ (80007ac <HAL_CORDIC_MspInit+0x3c>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6493      	str	r3, [r2, #72]	@ 0x48
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <HAL_CORDIC_MspInit+0x3c>)
 8000790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	40021000 	.word	0x40021000

080007b0 <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2230      	movs	r2, #48	@ 0x30
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f00b f981 	bl	800bac4 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80007c2:	4b16      	ldr	r3, [pc, #88]	@ (800081c <MX_DAC3_Init+0x6c>)
 80007c4:	4a16      	ldr	r2, [pc, #88]	@ (8000820 <MX_DAC3_Init+0x70>)
 80007c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80007c8:	4814      	ldr	r0, [pc, #80]	@ (800081c <MX_DAC3_Init+0x6c>)
 80007ca:	f001 ffe4 	bl	8002796 <HAL_DAC_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 80007d4:	f000 f99b 	bl	8000b0e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80007d8:	2302      	movs	r3, #2
 80007da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80007f0:	2302      	movs	r3, #2
 80007f2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	@ (800081c <MX_DAC3_Init+0x6c>)
 8000804:	f001 ffea 	bl	80027dc <HAL_DAC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800080e:	f000 f97e 	bl	8000b0e <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3730      	adds	r7, #48	@ 0x30
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200002e4 	.word	0x200002e4
 8000820:	50001000 	.word	0x50001000

08000824 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <HAL_DAC_MspInit+0x38>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d10b      	bne.n	800084e <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <HAL_DAC_MspInit+0x3c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <HAL_DAC_MspInit+0x3c>)
 800083c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <HAL_DAC_MspInit+0x3c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	50001000 	.word	0x50001000
 8000860:	40021000 	.word	0x40021000

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_DMA_Init+0x50>)
 800086c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800086e:	4a11      	ldr	r2, [pc, #68]	@ (80008b4 <MX_DMA_Init+0x50>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6493      	str	r3, [r2, #72]	@ 0x48
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_DMA_Init+0x50>)
 8000878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_DMA_Init+0x50>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000886:	4a0b      	ldr	r2, [pc, #44]	@ (80008b4 <MX_DMA_Init+0x50>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6493      	str	r3, [r2, #72]	@ 0x48
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_DMA_Init+0x50>)
 8000890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	200b      	movs	r0, #11
 80008a0:	f001 ff45 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008a4:	200b      	movs	r0, #11
 80008a6:	f001 ff5c 	bl	8002762 <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_FMAC_Init+0x20>)
 80008be:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <MX_FMAC_Init+0x24>)
 80008c0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_FMAC_Init+0x20>)
 80008c4:	f002 fbb4 	bl	8003030 <HAL_FMAC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80008ce:	f000 f91e 	bl	8000b0e <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200002f8 	.word	0x200002f8
 80008dc:	40021400 	.word	0x40021400

080008e0 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <HAL_FMAC_MspInit+0x38>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d10b      	bne.n	800090a <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80008f2:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <HAL_FMAC_MspInit+0x3c>)
 80008f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008f6:	4a09      	ldr	r2, [pc, #36]	@ (800091c <HAL_FMAC_MspInit+0x3c>)
 80008f8:	f043 0310 	orr.w	r3, r3, #16
 80008fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80008fe:	4b07      	ldr	r3, [pc, #28]	@ (800091c <HAL_FMAC_MspInit+0x3c>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40021400 	.word	0x40021400
 800091c:	40021000 	.word	0x40021000

08000920 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000936:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a22      	ldr	r2, [pc, #136]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0320 	and.w	r3, r3, #32
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a1c      	ldr	r2, [pc, #112]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4a16      	ldr	r2, [pc, #88]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_GPIO_Init+0xa4>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2103      	movs	r1, #3
 800099a:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <MX_GPIO_Init+0xa8>)
 800099c:	f002 fd76 	bl	800348c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009a0:	2303      	movs	r3, #3
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_GPIO_Init+0xa8>)
 80009b8:	f002 fbe6 	bl	8003188 <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	@ 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	48000400 	.word	0x48000400

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 fb42 	bl	800105a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f84f 	bl	8000a78 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f7ff ffa1 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 80009de:	f7ff ff41 	bl	8000864 <MX_DMA_Init>
  MX_ADC2_Init();
 80009e2:	f7ff fde5 	bl	80005b0 <MX_ADC2_Init>
  MX_DAC3_Init();
 80009e6:	f7ff fee3 	bl	80007b0 <MX_DAC3_Init>
  MX_OPAMP1_Init();
 80009ea:	f000 f897 	bl	8000b1c <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80009ee:	f000 f8bb 	bl	8000b68 <MX_OPAMP3_Init>
  MX_USB_Device_Init();
 80009f2:	f00a fb3d 	bl	800b070 <MX_USB_Device_Init>
  MX_FMAC_Init();
 80009f6:	f7ff ff5f 	bl	80008b8 <MX_FMAC_Init>
  MX_CORDIC_Init();
 80009fa:	f7ff fea5 	bl	8000748 <MX_CORDIC_Init>
  MX_TIM6_Init();
 80009fe:	f000 f9eb 	bl	8000dd8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000a02:	f000 fa3f 	bl	8000e84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 8000a06:	4815      	ldr	r0, [pc, #84]	@ (8000a5c <main+0x90>)
 8000a08:	f002 fe28 	bl	800365c <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8000a0c:	4814      	ldr	r0, [pc, #80]	@ (8000a60 <main+0x94>)
 8000a0e:	f002 fe25 	bl	800365c <HAL_OPAMP_Start>

  HAL_Delay(100);
 8000a12:	2064      	movs	r0, #100	@ 0x64
 8000a14:	f000 fb92 	bl	800113c <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc2,ADC_BUFFER, 1024);
 8000a18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a1c:	4911      	ldr	r1, [pc, #68]	@ (8000a64 <main+0x98>)
 8000a1e:	4812      	ldr	r0, [pc, #72]	@ (8000a68 <main+0x9c>)
 8000a20:	f000 ff9c 	bl	800195c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8000a24:	4811      	ldr	r0, [pc, #68]	@ (8000a6c <main+0xa0>)
 8000a26:	f005 fba7 	bl	8006178 <HAL_TIM_Base_Start>
  while(1){
//	  HAL_ADC_StartSampling(&hadc2);
//	  HAL_ADC_Start(&hadc2);


	  for (int i = 0; i < 1024; i++) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	e00f      	b.n	8000a50 <main+0x84>
	  sprintf(CDC_BUFFER,"IN: %d \r\n",ADC_BUFFER[i]);
 8000a30:	4a0c      	ldr	r2, [pc, #48]	@ (8000a64 <main+0x98>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	490d      	ldr	r1, [pc, #52]	@ (8000a70 <main+0xa4>)
 8000a3c:	480d      	ldr	r0, [pc, #52]	@ (8000a74 <main+0xa8>)
 8000a3e:	f00b f821 	bl	800ba84 <siprintf>
	  CDC_Transmit_FS(CDC_BUFFER, 20);
 8000a42:	2114      	movs	r1, #20
 8000a44:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <main+0xa8>)
 8000a46:	f00a fbd1 	bl	800b1ec <CDC_Transmit_FS>
	  for (int i = 0; i < 1024; i++) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a56:	dbeb      	blt.n	8000a30 <main+0x64>
 8000a58:	e7e7      	b.n	8000a2a <main+0x5e>
 8000a5a:	bf00      	nop
 8000a5c:	20002330 	.word	0x20002330
 8000a60:	2000236c 	.word	0x2000236c
 8000a64:	20001330 	.word	0x20001330
 8000a68:	200001f0 	.word	0x200001f0
 8000a6c:	200023ac 	.word	0x200023ac
 8000a70:	0800c3dc 	.word	0x0800c3dc
 8000a74:	20000330 	.word	0x20000330

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	@ 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	2238      	movs	r2, #56	@ 0x38
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00b f81c 	bl	800bac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f004 fb42 	bl	8005124 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2321      	movs	r3, #33	@ 0x21
 8000aa2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aa8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000aba:	2355      	movs	r3, #85	@ 0x55
 8000abc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 fbdc 	bl	800528c <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ada:	f000 f818 	bl	8000b0e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2104      	movs	r1, #4
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 feda 	bl	80058b0 <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b02:	f000 f804 	bl	8000b0e <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3750      	adds	r7, #80	@ 0x50
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp1;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_OPAMP1_Init+0x44>)
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <MX_OPAMP1_Init+0x48>)
 8000b24:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_OPAMP1_Init+0x44>)
 8000b28:	2280      	movs	r2, #128	@ 0x80
 8000b2a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_OPAMP1_Init+0x44>)
 8000b2e:	2260      	movs	r2, #96	@ 0x60
 8000b30:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <MX_OPAMP1_Init+0x44>)
 8000b34:	220c      	movs	r2, #12
 8000b36:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_OPAMP1_Init+0x44>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <MX_OPAMP1_Init+0x44>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_OPAMP1_Init+0x44>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_OPAMP1_Init+0x44>)
 8000b4c:	f002 fcb6 	bl	80034bc <HAL_OPAMP_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000b56:	f7ff ffda 	bl	8000b0e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20002330 	.word	0x20002330
 8000b64:	40010300 	.word	0x40010300

08000b68 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_OPAMP3_Init+0x50>)
 8000b6e:	4a13      	ldr	r2, [pc, #76]	@ (8000bbc <MX_OPAMP3_Init+0x54>)
 8000b70:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_OPAMP3_Init+0x50>)
 8000b74:	2280      	movs	r2, #128	@ 0x80
 8000b76:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_OPAMP3_Init+0x50>)
 8000b7a:	2240      	movs	r2, #64	@ 0x40
 8000b7c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_OPAMP3_Init+0x50>)
 8000b80:	2208      	movs	r2, #8
 8000b82:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_OPAMP3_Init+0x50>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <MX_OPAMP3_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000b90:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_OPAMP3_Init+0x50>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <MX_OPAMP3_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <MX_OPAMP3_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_OPAMP3_Init+0x50>)
 8000ba4:	f002 fc8a 	bl	80034bc <HAL_OPAMP_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_OPAMP3_Init+0x4a>
  {
    Error_Handler();
 8000bae:	f7ff ffae 	bl	8000b0e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000236c 	.word	0x2000236c
 8000bbc:	40010308 	.word	0x40010308

08000bc0 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8000c5c <HAL_OPAMP_MspInit+0x9c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d119      	bne.n	8000c16 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <HAL_OPAMP_MspInit+0xa0>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c60 <HAL_OPAMP_MspInit+0xa0>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bee:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <HAL_OPAMP_MspInit+0xa0>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c10:	f002 faba 	bl	8003188 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8000c14:	e01d      	b.n	8000c52 <HAL_OPAMP_MspInit+0x92>
  else if(opampHandle->Instance==OPAMP3)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <HAL_OPAMP_MspInit+0xa4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d118      	bne.n	8000c52 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_OPAMP_MspInit+0xa0>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c24:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <HAL_OPAMP_MspInit+0xa0>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <HAL_OPAMP_MspInit+0xa0>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4e:	f002 fa9b 	bl	8003188 <HAL_GPIO_Init>
}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	@ 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40010300 	.word	0x40010300
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010308 	.word	0x40010308

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8000c9e:	2020      	movs	r0, #32
 8000ca0:	f000 fa6e 	bl	8001180 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000ca4:	f000 fa94 	bl	80011d0 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 fa7d 	bl	80011a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cae:	f004 fadd 	bl	800526c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d16:	f000 f9f3 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <DMA1_Channel1_IRQHandler+0x10>)
 8000d26:	f002 f834 	bl	8002d92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000025c 	.word	0x2000025c

08000d34 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <USB_LP_IRQHandler+0x10>)
 8000d3a:	f002 fdb0 	bl	800389e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20003164 	.word	0x20003164

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f00a feac 	bl	800bad4 <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20008000 	.word	0x20008000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	200023a8 	.word	0x200023a8
 8000db0:	200037a8 	.word	0x200037a8

08000db4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_TIM6_Init+0x64>)
 8000dea:	4a15      	ldr	r2, [pc, #84]	@ (8000e40 <MX_TIM6_Init+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170-1;
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <MX_TIM6_Init+0x64>)
 8000df0:	22a9      	movs	r2, #169	@ 0xa9
 8000df2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <MX_TIM6_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <MX_TIM6_Init+0x64>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <MX_TIM6_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e06:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_TIM6_Init+0x64>)
 8000e08:	f005 f95e 	bl	80060c8 <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e12:	f7ff fe7c 	bl	8000b0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e16:	2320      	movs	r3, #32
 8000e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <MX_TIM6_Init+0x64>)
 8000e24:	f005 faa6 	bl	8006374 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e2e:	f7ff fe6e 	bl	8000b0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200023ac 	.word	0x200023ac
 8000e40:	40001000 	.word	0x40001000

08000e44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_TIM_Base_MspInit+0x38>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10b      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_TIM_Base_MspInit+0x3c>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5a:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <HAL_TIM_Base_MspInit+0x3c>)
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <HAL_TIM_Base_MspInit+0x3c>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40001000 	.word	0x40001000
 8000e80:	40021000 	.word	0x40021000

08000e84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <MX_USART1_UART_Init+0x94>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ecc:	4811      	ldr	r0, [pc, #68]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ece:	f005 fad3 	bl	8006478 <HAL_UART_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ed8:	f7ff fe19 	bl	8000b0e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ee0:	f006 f83e 	bl	8006f60 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eea:	f7ff fe10 	bl	8000b0e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4808      	ldr	r0, [pc, #32]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ef2:	f006 f873 	bl	8006fdc <HAL_UARTEx_SetRxFifoThreshold>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f7ff fe07 	bl	8000b0e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_USART1_UART_Init+0x90>)
 8000f02:	f005 fff4 	bl	8006eee <HAL_UARTEx_DisableFifoMode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f7ff fdff 	bl	8000b0e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200023f8 	.word	0x200023f8
 8000f18:	40013800 	.word	0x40013800

08000f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b09c      	sub	sp, #112	@ 0x70
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	2244      	movs	r2, #68	@ 0x44
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f00a fdc1 	bl	800bac4 <memset>
  if(uartHandle->Instance==USART1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a2d      	ldr	r2, [pc, #180]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d153      	bne.n	8000ff4 <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 fec5 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f64:	f7ff fdd3 	bl	8000b0e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f68:	4b25      	ldr	r3, [pc, #148]	@ (8001000 <HAL_UART_MspInit+0xe4>)
 8000f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6c:	4a24      	ldr	r2, [pc, #144]	@ (8001000 <HAL_UART_MspInit+0xe4>)
 8000f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f72:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f74:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <HAL_UART_MspInit+0xe4>)
 8000f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <HAL_UART_MspInit+0xe4>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f84:	4a1e      	ldr	r2, [pc, #120]	@ (8001000 <HAL_UART_MspInit+0xe4>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_UART_MspInit+0xe4>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_UART_MspInit+0xe4>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	4a18      	ldr	r2, [pc, #96]	@ (8001000 <HAL_UART_MspInit+0xe4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_UART_MspInit+0xe4>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480e      	ldr	r0, [pc, #56]	@ (8001004 <HAL_UART_MspInit+0xe8>)
 8000fcc:	f002 f8dc 	bl	8003188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff0:	f002 f8ca 	bl	8003188 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3770      	adds	r7, #112	@ 0x70
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40021000 	.word	0x40021000
 8001004:	48000800 	.word	0x48000800

08001008 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001008:	480d      	ldr	r0, [pc, #52]	@ (8001040 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800100a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800100c:	f7ff fed2 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <LoopForever+0x6>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	@ (8001048 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <LoopForever+0xe>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	@ (8001054 <LoopForever+0x16>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f00a fd53 	bl	800bae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103a:	f7ff fcc7 	bl	80009cc <main>

0800103e <LoopForever>:

LoopForever:
    b LoopForever
 800103e:	e7fe      	b.n	800103e <LoopForever>
  ldr   r0, =_estack
 8001040:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800104c:	0800c4b4 	.word	0x0800c4b4
  ldr r2, =_sbss
 8001050:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001054:	200037a8 	.word	0x200037a8

08001058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC1_2_IRQHandler>

0800105a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f001 fb57 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f80e 	bl	800108c <HAL_InitTick>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e001      	b.n	8001080 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800107c:	f7ff fdf4 	bl	8000c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001080:	79fb      	ldrb	r3, [r7, #7]

}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_InitTick+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d022      	beq.n	80010e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_InitTick+0x6c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <HAL_InitTick+0x68>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fb62 	bl	800277e <HAL_SYSTICK_Config>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10f      	bne.n	80010e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d809      	bhi.n	80010da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c6:	2200      	movs	r2, #0
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295
 80010ce:	f001 fb2e 	bl	800272e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <HAL_InitTick+0x70>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e007      	b.n	80010ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e004      	b.n	80010ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e001      	b.n	80010ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_IncTick+0x1c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <HAL_IncTick+0x20>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4413      	add	r3, r2
 800110e:	4a03      	ldr	r2, [pc, #12]	@ (800111c <HAL_IncTick+0x1c>)
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	2000248c 	.word	0x2000248c
 8001120:	20000008 	.word	0x20000008

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000248c 	.word	0x2000248c

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d004      	beq.n	8001160 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_Delay+0x40>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001160:	bf00      	nop
 8001162:	f7ff ffdf 	bl	8001124 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	429a      	cmp	r2, r3
 8001170:	d8f7      	bhi.n	8001162 <HAL_Delay+0x26>
  {
  }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000008 	.word	0x20000008

08001180 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001190:	4904      	ldr	r1, [pc, #16]	@ (80011a4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4313      	orrs	r3, r2
 8001196:	600b      	str	r3, [r1, #0]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40010030 	.word	0x40010030

080011a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 0202 	bic.w	r2, r3, #2
 80011b8:	4904      	ldr	r1, [pc, #16]	@ (80011cc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4313      	orrs	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40010030 	.word	0x40010030

080011d0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0e      	ldr	r2, [pc, #56]	@ (8001214 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80011e2:	f7ff ff9f 	bl	8001124 <HAL_GetTick>
 80011e6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80011e8:	e008      	b.n	80011fc <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80011ea:	f7ff ff9b 	bl	8001124 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b0a      	cmp	r3, #10
 80011f6:	d901      	bls.n	80011fc <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e006      	b.n	800120a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40010030 	.word	0x40010030

08001218 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	609a      	str	r2, [r3, #8]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3360      	adds	r3, #96	@ 0x60
 8001292:	461a      	mov	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <LL_ADC_SetOffset+0x44>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	03fff000 	.word	0x03fff000

080012c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3360      	adds	r3, #96	@ 0x60
 80012d6:	461a      	mov	r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3360      	adds	r3, #96	@ 0x60
 8001304:	461a      	mov	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	431a      	orrs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800132a:	b480      	push	{r7}
 800132c:	b087      	sub	sp, #28
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3360      	adds	r3, #96	@ 0x60
 800133a:	461a      	mov	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	431a      	orrs	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001354:	bf00      	nop
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3360      	adds	r3, #96	@ 0x60
 8001370:	461a      	mov	r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800138a:	bf00      	nop
 800138c:	371c      	adds	r7, #28
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	615a      	str	r2, [r3, #20]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b087      	sub	sp, #28
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3330      	adds	r3, #48	@ 0x30
 80013f2:	461a      	mov	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	4413      	add	r3, r2
 8001400:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	211f      	movs	r1, #31
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	401a      	ands	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0e9b      	lsrs	r3, r3, #26
 800141a:	f003 011f 	and.w	r1, r3, #31
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	431a      	orrs	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800143a:	b480      	push	{r7}
 800143c:	b087      	sub	sp, #28
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3314      	adds	r3, #20
 800144a:	461a      	mov	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	0e5b      	lsrs	r3, r3, #25
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	4413      	add	r3, r2
 8001458:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	0d1b      	lsrs	r3, r3, #20
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	2107      	movs	r1, #7
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	401a      	ands	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	0d1b      	lsrs	r3, r3, #20
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	431a      	orrs	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001484:	bf00      	nop
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0318 	and.w	r3, r3, #24
 80014b2:	4908      	ldr	r1, [pc, #32]	@ (80014d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014b4:	40d9      	lsrs	r1, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	400b      	ands	r3, r1
 80014ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014be:	431a      	orrs	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	0007ffff 	.word	0x0007ffff

080014d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 031f 	and.w	r3, r3, #31
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001504:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6093      	str	r3, [r2, #8]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800152c:	d101      	bne.n	8001532 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001550:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001554:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800157c:	d101      	bne.n	8001582 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <LL_ADC_IsEnabled+0x18>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <LL_ADC_IsEnabled+0x1a>
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015f2:	f043 0204 	orr.w	r2, r3, #4
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b04      	cmp	r3, #4
 8001618:	d101      	bne.n	800161e <LL_ADC_REG_IsConversionOngoing+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b08      	cmp	r3, #8
 800163e:	d101      	bne.n	8001644 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b089      	sub	sp, #36	@ 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e167      	b.n	800193e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d109      	bne.n	8001690 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7fe ffff 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff3f 	bl	8001518 <LL_ADC_IsDeepPowerDownEnabled>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff25 	bl	80014f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff5a 	bl	8001568 <LL_ADC_IsInternalRegulatorEnabled>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d115      	bne.n	80016e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff3e 	bl	8001540 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001948 <HAL_ADC_Init+0x2f4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	4aa0      	ldr	r2, [pc, #640]	@ (800194c <HAL_ADC_Init+0x2f8>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	3301      	adds	r3, #1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016d8:	e002      	b.n	80016e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3b01      	subs	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff3c 	bl	8001568 <LL_ADC_IsInternalRegulatorEnabled>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10d      	bne.n	8001712 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fa:	f043 0210 	orr.w	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff75 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 800171c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 8100 	bne.w	800192c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80fc 	bne.w	800192c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001738:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800173c:	f043 0202 	orr.w	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff35 	bl	80015b8 <LL_ADC_IsEnabled>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d111      	bne.n	8001778 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001754:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001758:	f7ff ff2e 	bl	80015b8 <LL_ADC_IsEnabled>
 800175c:	4604      	mov	r4, r0
 800175e:	487c      	ldr	r0, [pc, #496]	@ (8001950 <HAL_ADC_Init+0x2fc>)
 8001760:	f7ff ff2a 	bl	80015b8 <LL_ADC_IsEnabled>
 8001764:	4603      	mov	r3, r0
 8001766:	4323      	orrs	r3, r4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4619      	mov	r1, r3
 8001772:	4878      	ldr	r0, [pc, #480]	@ (8001954 <HAL_ADC_Init+0x300>)
 8001774:	f7ff fd50 	bl	8001218 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7f5b      	ldrb	r3, [r3, #29]
 800177c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001782:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001788:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800178e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001796:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d106      	bne.n	80017b4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017aa:	3b01      	subs	r3, #1
 80017ac:	045b      	lsls	r3, r3, #17
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d009      	beq.n	80017d0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	4b60      	ldr	r3, [pc, #384]	@ (8001958 <HAL_ADC_Init+0x304>)
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	69b9      	ldr	r1, [r7, #24]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff14 	bl	800162c <LL_ADC_INJ_IsConversionOngoing>
 8001804:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d16d      	bne.n	80018e8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d16a      	bne.n	80018e8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001816:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800181e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800182e:	f023 0302 	bic.w	r3, r3, #2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	69b9      	ldr	r1, [r7, #24]
 8001838:	430b      	orrs	r3, r1
 800183a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d017      	beq.n	8001874 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001852:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800185c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001860:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6911      	ldr	r1, [r2, #16]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	430b      	orrs	r3, r1
 800186e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001872:	e013      	b.n	800189c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001882:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001894:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001898:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d118      	bne.n	80018d8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018bc:	4311      	orrs	r1, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018c8:	430a      	orrs	r2, r1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0201 	orr.w	r2, r2, #1
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	e007      	b.n	80018e8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10c      	bne.n	800190a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f023 010f 	bic.w	r1, r3, #15
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	1e5a      	subs	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	631a      	str	r2, [r3, #48]	@ 0x30
 8001908:	e007      	b.n	800191a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 020f 	bic.w	r2, r2, #15
 8001918:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	65da      	str	r2, [r3, #92]	@ 0x5c
 800192a:	e007      	b.n	800193c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001930:	f043 0210 	orr.w	r2, r3, #16
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800193c:	7ffb      	ldrb	r3, [r7, #31]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	@ 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000
 800194c:	053e2d63 	.word	0x053e2d63
 8001950:	50000100 	.word	0x50000100
 8001954:	50000300 	.word	0x50000300
 8001958:	fff04007 	.word	0xfff04007

0800195c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001968:	4851      	ldr	r0, [pc, #324]	@ (8001ab0 <HAL_ADC_Start_DMA+0x154>)
 800196a:	f7ff fdb5 	bl	80014d8 <LL_ADC_GetMultimode>
 800196e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fe46 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	f040 808f 	bne.w	8001aa0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_ADC_Start_DMA+0x34>
 800198c:	2302      	movs	r3, #2
 800198e:	e08a      	b.n	8001aa6 <HAL_ADC_Start_DMA+0x14a>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d002      	beq.n	80019aa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b09      	cmp	r3, #9
 80019a8:	d173      	bne.n	8001a92 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 fc98 	bl	80022e0 <ADC_Enable>
 80019b0:	4603      	mov	r3, r0
 80019b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d166      	bne.n	8001a88 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a38      	ldr	r2, [pc, #224]	@ (8001ab4 <HAL_ADC_Start_DMA+0x158>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d002      	beq.n	80019de <HAL_ADC_Start_DMA+0x82>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	e001      	b.n	80019e2 <HAL_ADC_Start_DMA+0x86>
 80019de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d002      	beq.n	80019f0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d105      	bne.n	80019fc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0c:	f023 0206 	bic.w	r2, r3, #6
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a14:	e002      	b.n	8001a1c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a20:	4a25      	ldr	r2, [pc, #148]	@ (8001ab8 <HAL_ADC_Start_DMA+0x15c>)
 8001a22:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a28:	4a24      	ldr	r2, [pc, #144]	@ (8001abc <HAL_ADC_Start_DMA+0x160>)
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a30:	4a23      	ldr	r2, [pc, #140]	@ (8001ac0 <HAL_ADC_Start_DMA+0x164>)
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	221c      	movs	r2, #28
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0210 	orr.w	r2, r2, #16
 8001a52:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3340      	adds	r3, #64	@ 0x40
 8001a6e:	4619      	mov	r1, r3
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f001 f912 	bl	8002c9c <HAL_DMA_Start_IT>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fdac 	bl	80015de <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001a86:	e00d      	b.n	8001aa4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001a90:	e008      	b.n	8001aa4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001a9e:	e001      	b.n	8001aa4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	50000300 	.word	0x50000300
 8001ab4:	50000100 	.word	0x50000100
 8001ab8:	080023ed 	.word	0x080023ed
 8001abc:	080024c5 	.word	0x080024c5
 8001ac0:	080024e1 	.word	0x080024e1

08001ac4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0b6      	sub	sp, #216	@ 0xd8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x22>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e3c8      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x7b4>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fd69 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 83ad 	bne.w	8002296 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f7ff fc4a 	bl	80013e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fd57 	bl	8001606 <LL_ADC_REG_IsConversionOngoing>
 8001b58:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fd63 	bl	800162c <LL_ADC_INJ_IsConversionOngoing>
 8001b66:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 81d9 	bne.w	8001f26 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 81d4 	bne.w	8001f26 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b86:	d10f      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2200      	movs	r2, #0
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7ff fc51 	bl	800143a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fbf8 	bl	8001396 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ba6:	e00e      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f7ff fc40 	bl	800143a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fbe8 	bl	8001396 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d022      	beq.n	8001c2e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6919      	ldr	r1, [r3, #16]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001bf8:	f7ff fb42 	bl	8001280 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6919      	ldr	r1, [r3, #16]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f7ff fb8e 	bl	800132a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x124>
 8001c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c22:	e000      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x126>
 8001c24:	2300      	movs	r3, #0
 8001c26:	461a      	mov	r2, r3
 8001c28:	f7ff fb9a 	bl	8001360 <LL_ADC_SetOffsetSaturation>
 8001c2c:	e17b      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fb47 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x15a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fb3c 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	e01e      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x198>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fb31 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e004      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001c8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x1b0>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	e018      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x1e2>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e004      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fb00 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fae4 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10a      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x220>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fad9 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	f003 021f 	and.w	r2, r3, #31
 8001d1e:	e01e      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x25e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff face 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e004      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x276>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	e018      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x2a8>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e004      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001d9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d106      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2200      	movs	r2, #0
 8001db2:	2101      	movs	r1, #1
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fa9d 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2102      	movs	r1, #2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fa81 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10a      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x2e6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fa76 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	0e9b      	lsrs	r3, r3, #26
 8001de0:	f003 021f 	and.w	r2, r3, #31
 8001de4:	e01e      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x324>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2102      	movs	r1, #2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fa6b 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e004      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x33c>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	e016      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x36a>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	e004      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d106      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	2102      	movs	r1, #2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fa3c 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2103      	movs	r1, #3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fa20 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x3a8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2103      	movs	r1, #3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fa15 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	f003 021f 	and.w	r2, r3, #31
 8001ea6:	e017      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x3d8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2103      	movs	r1, #3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fa0a 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001ec0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ec2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	e003      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x3f0>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	e011      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x414>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001efe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001f08:	2320      	movs	r3, #32
 8001f0a:	e003      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d106      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2103      	movs	r1, #3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f9e7 	bl	80012f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fb44 	bl	80015b8 <LL_ADC_IsEnabled>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 8140 	bne.w	80021b8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	461a      	mov	r2, r3
 8001f46:	f7ff faa3 	bl	8001490 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a8f      	ldr	r2, [pc, #572]	@ (800218c <HAL_ADC_ConfigChannel+0x68c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	f040 8131 	bne.w	80021b8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10b      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x47e>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	bf94      	ite	ls
 8001f76:	2301      	movls	r3, #1
 8001f78:	2300      	movhi	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	e019      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x4b2>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f8e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001f96:	2320      	movs	r3, #32
 8001f98:	e003      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001f9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2b09      	cmp	r3, #9
 8001faa:	bf94      	ite	ls
 8001fac:	2301      	movls	r3, #1
 8001fae:	2300      	movhi	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d079      	beq.n	80020aa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d107      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x4d2>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	3301      	adds	r3, #1
 8001fca:	069b      	lsls	r3, r3, #26
 8001fcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fd0:	e015      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x4fe>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fe2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001fea:	2320      	movs	r3, #32
 8001fec:	e003      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	069b      	lsls	r3, r3, #26
 8001ffa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_ADC_ConfigChannel+0x51e>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0e9b      	lsrs	r3, r3, #26
 8002010:	3301      	adds	r3, #1
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	e017      	b.n	800204e <HAL_ADC_ConfigChannel+0x54e>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800202c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800202e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002036:	2320      	movs	r3, #32
 8002038:	e003      	b.n	8002042 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800203a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2101      	movs	r1, #1
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	ea42 0103 	orr.w	r1, r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10a      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x574>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0e9b      	lsrs	r3, r3, #26
 8002064:	3301      	adds	r3, #1
 8002066:	f003 021f 	and.w	r2, r3, #31
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	051b      	lsls	r3, r3, #20
 8002072:	e018      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x5a6>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002084:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800208c:	2320      	movs	r3, #32
 800208e:	e003      	b.n	8002098 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	3301      	adds	r3, #1
 800209a:	f003 021f 	and.w	r2, r3, #31
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a6:	430b      	orrs	r3, r1
 80020a8:	e081      	b.n	80021ae <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x5c6>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0e9b      	lsrs	r3, r3, #26
 80020bc:	3301      	adds	r3, #1
 80020be:	069b      	lsls	r3, r3, #26
 80020c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020c4:	e015      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x5f2>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80020d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80020d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80020de:	2320      	movs	r3, #32
 80020e0:	e003      	b.n	80020ea <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80020e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	069b      	lsls	r3, r3, #26
 80020ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x612>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	0e9b      	lsrs	r3, r3, #26
 8002104:	3301      	adds	r3, #1
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	e017      	b.n	8002142 <HAL_ADC_ConfigChannel+0x642>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	61fb      	str	r3, [r7, #28]
  return result;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800212a:	2320      	movs	r3, #32
 800212c:	e003      	b.n	8002136 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	ea42 0103 	orr.w	r1, r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <HAL_ADC_ConfigChannel+0x66e>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0e9b      	lsrs	r3, r3, #26
 8002158:	3301      	adds	r3, #1
 800215a:	f003 021f 	and.w	r2, r3, #31
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	3b1e      	subs	r3, #30
 8002166:	051b      	lsls	r3, r3, #20
 8002168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800216c:	e01e      	b.n	80021ac <HAL_ADC_ConfigChannel+0x6ac>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	613b      	str	r3, [r7, #16]
  return result;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d104      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002186:	2320      	movs	r3, #32
 8002188:	e006      	b.n	8002198 <HAL_ADC_ConfigChannel+0x698>
 800218a:	bf00      	nop
 800218c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f003 021f 	and.w	r2, r3, #31
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	3b1e      	subs	r3, #30
 80021a6:	051b      	lsls	r3, r3, #20
 80021a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7ff f941 	bl	800143a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b3f      	ldr	r3, [pc, #252]	@ (80022bc <HAL_ADC_ConfigChannel+0x7bc>)
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d071      	beq.n	80022a8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c4:	483e      	ldr	r0, [pc, #248]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7c0>)
 80021c6:	f7ff f84d 	bl	8001264 <LL_ADC_GetCommonPathInternalCh>
 80021ca:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a3c      	ldr	r2, [pc, #240]	@ (80022c4 <HAL_ADC_ConfigChannel+0x7c4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d004      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x6e2>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a3a      	ldr	r2, [pc, #232]	@ (80022c8 <HAL_ADC_ConfigChannel+0x7c8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d127      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d121      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021f6:	d157      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002200:	4619      	mov	r1, r3
 8002202:	482f      	ldr	r0, [pc, #188]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002204:	f7ff f81b 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002208:	4b30      	ldr	r3, [pc, #192]	@ (80022cc <HAL_ADC_ConfigChannel+0x7cc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	4a30      	ldr	r2, [pc, #192]	@ (80022d0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002222:	e002      	b.n	800222a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3b01      	subs	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002230:	e03a      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a27      	ldr	r2, [pc, #156]	@ (80022d4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d113      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800223c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10d      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a22      	ldr	r2, [pc, #136]	@ (80022d8 <HAL_ADC_ConfigChannel+0x7d8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02a      	beq.n	80022a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800225a:	4619      	mov	r1, r3
 800225c:	4818      	ldr	r0, [pc, #96]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7c0>)
 800225e:	f7fe ffee 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002262:	e021      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1c      	ldr	r2, [pc, #112]	@ (80022dc <HAL_ADC_ConfigChannel+0x7dc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d11c      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800226e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a16      	ldr	r2, [pc, #88]	@ (80022d8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d011      	beq.n	80022a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002288:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800228c:	4619      	mov	r1, r3
 800228e:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002290:	f7fe ffd5 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
 8002294:	e008      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229a:	f043 0220 	orr.w	r2, r3, #32
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80022b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	37d8      	adds	r7, #216	@ 0xd8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	80080000 	.word	0x80080000
 80022c0:	50000300 	.word	0x50000300
 80022c4:	c3210000 	.word	0xc3210000
 80022c8:	90c00010 	.word	0x90c00010
 80022cc:	20000000 	.word	0x20000000
 80022d0:	053e2d63 	.word	0x053e2d63
 80022d4:	c7520000 	.word	0xc7520000
 80022d8:	50000100 	.word	0x50000100
 80022dc:	cb840000 	.word	0xcb840000

080022e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f961 	bl	80015b8 <LL_ADC_IsEnabled>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d169      	bne.n	80023d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	4b36      	ldr	r3, [pc, #216]	@ (80023dc <ADC_Enable+0xfc>)
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00d      	beq.n	8002326 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230e:	f043 0210 	orr.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e055      	b.n	80023d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f930 	bl	8001590 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002330:	482b      	ldr	r0, [pc, #172]	@ (80023e0 <ADC_Enable+0x100>)
 8002332:	f7fe ff97 	bl	8001264 <LL_ADC_GetCommonPathInternalCh>
 8002336:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002340:	4b28      	ldr	r3, [pc, #160]	@ (80023e4 <ADC_Enable+0x104>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	4a28      	ldr	r2, [pc, #160]	@ (80023e8 <ADC_Enable+0x108>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800235a:	e002      	b.n	8002362 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	3b01      	subs	r3, #1
 8002360:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002368:	f7fe fedc 	bl	8001124 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800236e:	e028      	b.n	80023c2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff f91f 	bl	80015b8 <LL_ADC_IsEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d104      	bne.n	800238a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f903 	bl	8001590 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800238a:	f7fe fecb 	bl	8001124 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d914      	bls.n	80023c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d00d      	beq.n	80023c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023aa:	f043 0210 	orr.w	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e007      	b.n	80023d2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d1cf      	bne.n	8002370 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	8000003f 	.word	0x8000003f
 80023e0:	50000300 	.word	0x50000300
 80023e4:	20000000 	.word	0x20000000
 80023e8:	053e2d63 	.word	0x053e2d63

080023ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002402:	2b00      	cmp	r3, #0
 8002404:	d14b      	bne.n	800249e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d021      	beq.n	8002464 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe ffc9 	bl	80013bc <LL_ADC_REG_IsTriggerSourceSWStart>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d032      	beq.n	8002496 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d12b      	bne.n	8002496 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002442:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11f      	bne.n	8002496 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002462:	e018      	b.n	8002496 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d111      	bne.n	8002496 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002476:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002482:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff fb14 	bl	8001ac4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800249c:	e00e      	b.n	80024bc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff fb1e 	bl	8001aec <HAL_ADC_ErrorCallback>
}
 80024b0:	e004      	b.n	80024bc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
}
 80024bc:	bf00      	nop
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f7ff fb00 	bl	8001ad8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fe:	f043 0204 	orr.w	r2, r3, #4
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff faf0 	bl	8001aec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e023      	b.n	800256e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe f918 	bl	8000770 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4907      	ldr	r1, [pc, #28]	@ (8002614 <__NVIC_EnableIRQ+0x38>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	490c      	ldr	r1, [pc, #48]	@ (8002664 <__NVIC_SetPriority+0x4c>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	440b      	add	r3, r1
 800263c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002640:	e00a      	b.n	8002658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4908      	ldr	r1, [pc, #32]	@ (8002668 <__NVIC_SetPriority+0x50>)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3b04      	subs	r3, #4
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	440b      	add	r3, r1
 8002656:	761a      	strb	r2, [r3, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	@ 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf28      	it	cs
 800268a:	2304      	movcs	r3, #4
 800268c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3304      	adds	r3, #4
 8002692:	2b06      	cmp	r3, #6
 8002694:	d902      	bls.n	800269c <NVIC_EncodePriority+0x30>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3b03      	subs	r3, #3
 800269a:	e000      	b.n	800269e <NVIC_EncodePriority+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43d9      	mvns	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	4313      	orrs	r3, r2
         );
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	@ 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff8e 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	@ (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff29 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800273c:	f7ff ff40 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 8002740:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff90 	bl	800266c <NVIC_EncodePriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff5f 	bl	8002618 <__NVIC_SetPriority>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff33 	bl	80025dc <__NVIC_EnableIRQ>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ffa4 	bl	80026d4 <SysTick_Config>
 800278c:	4603      	mov	r3, r0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e014      	b.n	80027d2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	791b      	ldrb	r3, [r3, #4]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d105      	bne.n	80027be <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fe f833 	bl	8000824 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_DAC_ConfigChannel+0x1c>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e19e      	b.n	8002b3a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	795b      	ldrb	r3, [r3, #5]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_DAC_ConfigChannel+0x2c>
 8002804:	2302      	movs	r3, #2
 8002806:	e198      	b.n	8002b3a <HAL_DAC_ConfigChannel+0x35e>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2202      	movs	r2, #2
 8002812:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d17a      	bne.n	8002912 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800281c:	f7fe fc82 	bl	8001124 <HAL_GetTick>
 8002820:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d13d      	bne.n	80028a4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002828:	e018      	b.n	800285c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800282a:	f7fe fc7b 	bl	8001124 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d911      	bls.n	800285c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f043 0208 	orr.w	r2, r3, #8
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2203      	movs	r2, #3
 8002856:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e16e      	b.n	8002b3a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1df      	bne.n	800282a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002872:	641a      	str	r2, [r3, #64]	@ 0x40
 8002874:	e020      	b.n	80028b8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002876:	f7fe fc55 	bl	8001124 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d90f      	bls.n	80028a4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288a:	2b00      	cmp	r3, #0
 800288c:	da0a      	bge.n	80028a4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f043 0208 	orr.w	r2, r3, #8
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2203      	movs	r2, #3
 800289e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e14a      	b.n	8002b3a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	dbe3      	blt.n	8002876 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	ea02 0103 	and.w	r1, r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	409a      	lsls	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	21ff      	movs	r1, #255	@ 0xff
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	ea02 0103 	and.w	r1, r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	409a      	lsls	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d11d      	bne.n	8002956 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002932:	4013      	ands	r3, r2
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294a:	4313      	orrs	r3, r2
 800294c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002954:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2207      	movs	r2, #7
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296e:	4013      	ands	r3, r2
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
 800297e:	e00f      	b.n	80029a0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d102      	bne.n	800298e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002988:	2301      	movs	r3, #1
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	e008      	b.n	80029a0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002996:	2301      	movs	r3, #1
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	e001      	b.n	80029a0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	6a3a      	ldr	r2, [r7, #32]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c2:	4013      	ands	r3, r2
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	791b      	ldrb	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_DAC_ConfigChannel+0x1f8>
 80029ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029d2:	e000      	b.n	80029d6 <HAL_DAC_ConfigChannel+0x1fa>
 80029d4:	2300      	movs	r3, #0
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ee:	4013      	ands	r3, r2
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	795b      	ldrb	r3, [r3, #5]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d102      	bne.n	8002a00 <HAL_DAC_ConfigChannel+0x224>
 80029fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029fe:	e000      	b.n	8002a02 <HAL_DAC_ConfigChannel+0x226>
 8002a00:	2300      	movs	r3, #0
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d114      	bne.n	8002a42 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002a18:	f003 f8e8 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8002a1c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4a48      	ldr	r2, [pc, #288]	@ (8002b44 <HAL_DAC_ConfigChannel+0x368>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d904      	bls.n	8002a30 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2e:	e00f      	b.n	8002a50 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4a45      	ldr	r2, [pc, #276]	@ (8002b48 <HAL_DAC_ConfigChannel+0x36c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d90a      	bls.n	8002a4e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a40:	e006      	b.n	8002a50 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4c:	e000      	b.n	8002a50 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002a4e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	400a      	ands	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aba:	4313      	orrs	r3, r2
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6819      	ldr	r1, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	22c0      	movs	r2, #192	@ 0xc0
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	400a      	ands	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	ea02 0103 	and.w	r1, r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002b38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3728      	adds	r7, #40	@ 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	09896800 	.word	0x09896800
 8002b48:	04c4b400 	.word	0x04c4b400

08002b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e08d      	b.n	8002c7a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b47      	ldr	r3, [pc, #284]	@ (8002c84 <HAL_DMA_Init+0x138>)
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d80f      	bhi.n	8002b8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b45      	ldr	r3, [pc, #276]	@ (8002c88 <HAL_DMA_Init+0x13c>)
 8002b72:	4413      	add	r3, r2
 8002b74:	4a45      	ldr	r2, [pc, #276]	@ (8002c8c <HAL_DMA_Init+0x140>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	009a      	lsls	r2, r3, #2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a42      	ldr	r2, [pc, #264]	@ (8002c90 <HAL_DMA_Init+0x144>)
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b88:	e00e      	b.n	8002ba8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b40      	ldr	r3, [pc, #256]	@ (8002c94 <HAL_DMA_Init+0x148>)
 8002b92:	4413      	add	r3, r2
 8002b94:	4a3d      	ldr	r2, [pc, #244]	@ (8002c8c <HAL_DMA_Init+0x140>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	009a      	lsls	r2, r3, #2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a3c      	ldr	r2, [pc, #240]	@ (8002c98 <HAL_DMA_Init+0x14c>)
 8002ba6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f9b6 	bl	8002f6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c08:	d102      	bne.n	8002c10 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c24:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_DMA_Init+0x104>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d80c      	bhi.n	8002c50 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f9d6 	bl	8002fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	e008      	b.n	8002c62 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40020407 	.word	0x40020407
 8002c88:	bffdfff8 	.word	0xbffdfff8
 8002c8c:	cccccccd 	.word	0xcccccccd
 8002c90:	40020000 	.word	0x40020000
 8002c94:	bffdfbf8 	.word	0xbffdfbf8
 8002c98:	40020400 	.word	0x40020400

08002c9c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_DMA_Start_IT+0x20>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e066      	b.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d155      	bne.n	8002d7c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f8fb 	bl	8002ef0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 020e 	orr.w	r2, r2, #14
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e00f      	b.n	8002d34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 020a 	orr.w	r2, r2, #10
 8002d32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d50:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d68:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e005      	b.n	8002d88 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
 8002d86:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	2204      	movs	r2, #4
 8002db4:	409a      	lsls	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d026      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x7a>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d021      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0204 	bic.w	r2, r2, #4
 8002de4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	f003 021f 	and.w	r2, r3, #31
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	2104      	movs	r1, #4
 8002df4:	fa01 f202 	lsl.w	r2, r1, r2
 8002df8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d071      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e0a:	e06c      	b.n	8002ee6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	2202      	movs	r2, #2
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02e      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d029      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 020a 	bic.w	r2, r2, #10
 8002e46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d038      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e7c:	e033      	b.n	8002ee6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2208      	movs	r2, #8
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d02a      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d025      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 020e 	bic.w	r2, r2, #14
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ee6:	bf00      	nop
 8002ee8:	bf00      	nop
}
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	f003 021f 	and.w	r2, r3, #31
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	2101      	movs	r1, #1
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d108      	bne.n	8002f50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f4e:	e007      	b.n	8002f60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	60da      	str	r2, [r3, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d802      	bhi.n	8002f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002f80:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	e001      	b.n	8002f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002f88:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	3b08      	subs	r3, #8
 8002f96:	4a12      	ldr	r2, [pc, #72]	@ (8002fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	009a      	lsls	r2, r3, #2
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	461a      	mov	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8002fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002fb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40020407 	.word	0x40020407
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020820 	.word	0x40020820
 8002fe0:	cccccccd 	.word	0xcccccccd
 8002fe4:	40020880 	.word	0x40020880

08002fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a08      	ldr	r2, [pc, #32]	@ (800302c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800300a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3b01      	subs	r3, #1
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	2201      	movs	r2, #1
 8003016:	409a      	lsls	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	1000823f 	.word	0x1000823f
 800302c:	40020940 	.word	0x40020940

08003030 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e033      	b.n	80030aa <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fc42 	bl	80008e0 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f854 	bl	8003110 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f822 	bl	80030b2 <FMAC_Reset>
 800306e:	4603      	mov	r3, r0
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10c      	bne.n	800308e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003078:	f043 0210 	orr.w	r2, r3, #16
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	22a0      	movs	r2, #160	@ 0xa0
 8003084:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e008      	b.n	80030a0 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ba:	f7fe f833 	bl	8001124 <HAL_GetTick>
 80030be:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030ce:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80030d0:	e00f      	b.n	80030f2 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80030d2:	f7fe f827 	bl	8001124 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80030e0:	d907      	bls.n	80030f2 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00a      	b.n	8003108 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e8      	bne.n	80030d2 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f807 	bl	800312c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f81b 	bl	800315a <FMAC_ResetOutputStateAndDataPointers>
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003196:	e15a      	b.n	800344e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	2101      	movs	r1, #1
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 814c 	beq.w	8003448 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d005      	beq.n	80031c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d130      	bne.n	800322a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fe:	2201      	movs	r2, #1
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f003 0201 	and.w	r2, r3, #1
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b03      	cmp	r3, #3
 8003234:	d017      	beq.n	8003266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d123      	bne.n	80032ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	08da      	lsrs	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3208      	adds	r2, #8
 800327a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800327e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	220f      	movs	r2, #15
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	6939      	ldr	r1, [r7, #16]
 80032b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	2203      	movs	r2, #3
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 0203 	and.w	r2, r3, #3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80a6 	beq.w	8003448 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fc:	4b5b      	ldr	r3, [pc, #364]	@ (800346c <HAL_GPIO_Init+0x2e4>)
 80032fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003300:	4a5a      	ldr	r2, [pc, #360]	@ (800346c <HAL_GPIO_Init+0x2e4>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6613      	str	r3, [r2, #96]	@ 0x60
 8003308:	4b58      	ldr	r3, [pc, #352]	@ (800346c <HAL_GPIO_Init+0x2e4>)
 800330a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003314:	4a56      	ldr	r2, [pc, #344]	@ (8003470 <HAL_GPIO_Init+0x2e8>)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	3302      	adds	r3, #2
 800331c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	220f      	movs	r2, #15
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800333e:	d01f      	beq.n	8003380 <HAL_GPIO_Init+0x1f8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a4c      	ldr	r2, [pc, #304]	@ (8003474 <HAL_GPIO_Init+0x2ec>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d019      	beq.n	800337c <HAL_GPIO_Init+0x1f4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a4b      	ldr	r2, [pc, #300]	@ (8003478 <HAL_GPIO_Init+0x2f0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_GPIO_Init+0x1f0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a4a      	ldr	r2, [pc, #296]	@ (800347c <HAL_GPIO_Init+0x2f4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00d      	beq.n	8003374 <HAL_GPIO_Init+0x1ec>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a49      	ldr	r2, [pc, #292]	@ (8003480 <HAL_GPIO_Init+0x2f8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <HAL_GPIO_Init+0x1e8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a48      	ldr	r2, [pc, #288]	@ (8003484 <HAL_GPIO_Init+0x2fc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d101      	bne.n	800336c <HAL_GPIO_Init+0x1e4>
 8003368:	2305      	movs	r3, #5
 800336a:	e00a      	b.n	8003382 <HAL_GPIO_Init+0x1fa>
 800336c:	2306      	movs	r3, #6
 800336e:	e008      	b.n	8003382 <HAL_GPIO_Init+0x1fa>
 8003370:	2304      	movs	r3, #4
 8003372:	e006      	b.n	8003382 <HAL_GPIO_Init+0x1fa>
 8003374:	2303      	movs	r3, #3
 8003376:	e004      	b.n	8003382 <HAL_GPIO_Init+0x1fa>
 8003378:	2302      	movs	r3, #2
 800337a:	e002      	b.n	8003382 <HAL_GPIO_Init+0x1fa>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_GPIO_Init+0x1fa>
 8003380:	2300      	movs	r3, #0
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	f002 0203 	and.w	r2, r2, #3
 8003388:	0092      	lsls	r2, r2, #2
 800338a:	4093      	lsls	r3, r2
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003392:	4937      	ldr	r1, [pc, #220]	@ (8003470 <HAL_GPIO_Init+0x2e8>)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	3302      	adds	r3, #2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033a0:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <HAL_GPIO_Init+0x300>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033c4:	4a30      	ldr	r2, [pc, #192]	@ (8003488 <HAL_GPIO_Init+0x300>)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003488 <HAL_GPIO_Init+0x300>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033ee:	4a26      	ldr	r2, [pc, #152]	@ (8003488 <HAL_GPIO_Init+0x300>)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033f4:	4b24      	ldr	r3, [pc, #144]	@ (8003488 <HAL_GPIO_Init+0x300>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003418:	4a1b      	ldr	r2, [pc, #108]	@ (8003488 <HAL_GPIO_Init+0x300>)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800341e:	4b1a      	ldr	r3, [pc, #104]	@ (8003488 <HAL_GPIO_Init+0x300>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003442:	4a11      	ldr	r2, [pc, #68]	@ (8003488 <HAL_GPIO_Init+0x300>)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3301      	adds	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	f47f ae9d 	bne.w	8003198 <HAL_GPIO_Init+0x10>
  }
}
 800345e:	bf00      	nop
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40021000 	.word	0x40021000
 8003470:	40010000 	.word	0x40010000
 8003474:	48000400 	.word	0x48000400
 8003478:	48000800 	.word	0x48000800
 800347c:	48000c00 	.word	0x48000c00
 8003480:	48001000 	.word	0x48001000
 8003484:	48001400 	.word	0x48001400
 8003488:	40010400 	.word	0x40010400

0800348c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
 8003498:	4613      	mov	r3, r2
 800349a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800349c:	787b      	ldrb	r3, [r7, #1]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034a2:	887a      	ldrh	r2, [r7, #2]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034a8:	e002      	b.n	80034b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0bb      	b.n	800364a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d101      	bne.n	80034e2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0b3      	b.n	800364a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d101      	bne.n	80034f2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0ab      	b.n	800364a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f2:	4b58      	ldr	r3, [pc, #352]	@ (8003654 <HAL_OPAMP_Init+0x198>)
 80034f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f6:	4a57      	ldr	r2, [pc, #348]	@ (8003654 <HAL_OPAMP_Init+0x198>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80034fe:	4b55      	ldr	r3, [pc, #340]	@ (8003654 <HAL_OPAMP_Init+0x198>)
 8003500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fb4e 	bl	8000bc0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d003      	beq.n	8003534 <HAL_OPAMP_Init+0x78>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b60      	cmp	r3, #96	@ 0x60
 8003532:	d133      	bne.n	800359c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 0110 	bic.w	r1, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b41      	ldr	r3, [pc, #260]	@ (8003658 <HAL_OPAMP_Init+0x19c>)
 8003552:	4013      	ands	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6851      	ldr	r1, [r2, #4]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6892      	ldr	r2, [r2, #8]
 800355c:	4311      	orrs	r1, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6912      	ldr	r2, [r2, #16]
 8003562:	430a      	orrs	r2, r1
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	7d09      	ldrb	r1, [r1, #20]
 8003568:	2901      	cmp	r1, #1
 800356a:	d102      	bne.n	8003572 <HAL_OPAMP_Init+0xb6>
 800356c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003570:	e000      	b.n	8003574 <HAL_OPAMP_Init+0xb8>
 8003572:	2100      	movs	r1, #0
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800357a:	4311      	orrs	r1, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003586:	04d2      	lsls	r2, r2, #19
 8003588:	4311      	orrs	r1, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800358e:	0612      	lsls	r2, r2, #24
 8003590:	4311      	orrs	r1, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	430b      	orrs	r3, r1
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e035      	b.n	8003608 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 0110 	bic.w	r1, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b27      	ldr	r3, [pc, #156]	@ (8003658 <HAL_OPAMP_Init+0x19c>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6851      	ldr	r1, [r2, #4]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6892      	ldr	r2, [r2, #8]
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6912      	ldr	r2, [r2, #16]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	7d09      	ldrb	r1, [r1, #20]
 80035d6:	2901      	cmp	r1, #1
 80035d8:	d102      	bne.n	80035e0 <HAL_OPAMP_Init+0x124>
 80035da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035de:	e000      	b.n	80035e2 <HAL_OPAMP_Init+0x126>
 80035e0:	2100      	movs	r1, #0
 80035e2:	4311      	orrs	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035e8:	4311      	orrs	r1, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035f4:	04d2      	lsls	r2, r2, #19
 80035f6:	4311      	orrs	r1, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035fc:	0612      	lsls	r2, r2, #24
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	430b      	orrs	r3, r1
 8003606:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	db10      	blt.n	8003634 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699a      	ldr	r2, [r3, #24]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d103      	bne.n	8003648 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	e0003e11 	.word	0xe0003e11

0800365c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	e01d      	b.n	80036b0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b05      	cmp	r3, #5
 800367e:	d102      	bne.n	8003686 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e014      	b.n	80036b0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10c      	bne.n	80036ac <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2204      	movs	r2, #4
 80036a6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80036aa:	e001      	b.n	80036b0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0c0      	b.n	8003852 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f007 fec9 	bl	800b47c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2203      	movs	r2, #3
 80036ee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f003 fd13 	bl	8007122 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e03e      	b.n	8003780 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	3311      	adds	r3, #17
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003716:	7bfa      	ldrb	r2, [r7, #15]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	440b      	add	r3, r1
 8003724:	3310      	adds	r3, #16
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	3313      	adds	r3, #19
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	3320      	adds	r3, #32
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	440b      	add	r3, r1
 8003760:	3324      	adds	r3, #36	@ 0x24
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	440b      	add	r3, r1
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	3301      	adds	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	791b      	ldrb	r3, [r3, #4]
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	429a      	cmp	r2, r3
 8003788:	d3bb      	bcc.n	8003702 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	e044      	b.n	800381a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	440b      	add	r3, r1
 800379e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	440b      	add	r3, r1
 80037b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	440b      	add	r3, r1
 80037ca:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	440b      	add	r3, r1
 80037f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	440b      	add	r3, r1
 800380c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	3301      	adds	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	791b      	ldrb	r3, [r3, #4]
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	429a      	cmp	r2, r3
 8003822:	d3b5      	bcc.n	8003790 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003830:	f003 fc92 	bl	8007158 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7a9b      	ldrb	r3, [r3, #10]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d102      	bne.n	8003850 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f001 fc40 	bl	80050d0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_PCD_Start+0x16>
 800386c:	2302      	movs	r3, #2
 800386e:	e012      	b.n	8003896 <HAL_PCD_Start+0x3c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f003 fc39 	bl	80070f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f005 fef9 	bl	800967e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f005 fefe 	bl	80096ac <USB_ReadInterrupts>
 80038b0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fb04 	bl	8003eca <PCD_EP_ISR_Handler>

    return;
 80038c2:	e110      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d013      	beq.n	80038f6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e0:	b292      	uxth	r2, r2
 80038e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f007 fe59 	bl	800b59e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80038ec:	2100      	movs	r1, #0
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8fc 	bl	8003aec <HAL_PCD_SetAddress>

    return;
 80038f4:	e0f7      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00c      	beq.n	800391a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003908:	b29a      	uxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003912:	b292      	uxth	r2, r2
 8003914:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003918:	e0e5      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800392c:	b29a      	uxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003936:	b292      	uxth	r2, r2
 8003938:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800393c:	e0d3      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d034      	beq.n	80039b2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0204 	bic.w	r2, r2, #4
 800395a:	b292      	uxth	r2, r2
 800395c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003968:	b29a      	uxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0208 	bic.w	r2, r2, #8
 8003972:	b292      	uxth	r2, r2
 8003974:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800398a:	2100      	movs	r1, #0
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f007 fff9 	bl	800b984 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f007 fe3c 	bl	800b610 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039aa:	b292      	uxth	r2, r2
 80039ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039b0:	e099      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d027      	beq.n	8003a0c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0208 	orr.w	r2, r2, #8
 80039ce:	b292      	uxth	r2, r2
 80039d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039dc:	b29a      	uxth	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e6:	b292      	uxth	r2, r2
 80039e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0204 	orr.w	r2, r2, #4
 80039fe:	b292      	uxth	r2, r2
 8003a00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f007 fde9 	bl	800b5dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a0a:	e06c      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d040      	beq.n	8003a98 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d12b      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0204 	orr.w	r2, r2, #4
 8003a4a:	b292      	uxth	r2, r2
 8003a4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0208 	orr.w	r2, r2, #8
 8003a62:	b292      	uxth	r2, r2
 8003a64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	089b      	lsrs	r3, r3, #2
 8003a7c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a86:	2101      	movs	r1, #1
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f007 ff7b 	bl	800b984 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003a8e:	e02a      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f007 fda3 	bl	800b5dc <HAL_PCD_SuspendCallback>
    return;
 8003a96:	e026      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00f      	beq.n	8003ac2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ab4:	b292      	uxth	r2, r2
 8003ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f007 fd61 	bl	800b582 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003ac0:	e011      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00c      	beq.n	8003ae6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ade:	b292      	uxth	r2, r2
 8003ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003ae4:	bf00      	nop
  }
}
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_PCD_SetAddress+0x1a>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e012      	b.n	8003b2c <HAL_PCD_SetAddress+0x40>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f005 fd9a 	bl	8009656 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	461a      	mov	r2, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	70fb      	strb	r3, [r7, #3]
 8003b46:	460b      	mov	r3, r1
 8003b48:	803b      	strh	r3, [r7, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	da0e      	bge.n	8003b78 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	f003 0207 	and.w	r2, r3, #7
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	3310      	adds	r3, #16
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	705a      	strb	r2, [r3, #1]
 8003b76:	e00e      	b.n	8003b96 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 0207 	and.w	r2, r3, #7
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ba2:	883a      	ldrh	r2, [r7, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	78ba      	ldrb	r2, [r7, #2]
 8003bac:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bae:	78bb      	ldrb	r3, [r7, #2]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d102      	bne.n	8003bba <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_PCD_EP_Open+0x94>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e00e      	b.n	8003be6 <HAL_PCD_EP_Open+0xb2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68f9      	ldr	r1, [r7, #12]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 fadc 	bl	8007194 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003be4:	7afb      	ldrb	r3, [r7, #11]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da0e      	bge.n	8003c20 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	f003 0207 	and.w	r2, r3, #7
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	3310      	adds	r3, #16
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	705a      	strb	r2, [r3, #1]
 8003c1e:	e00e      	b.n	8003c3e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	f003 0207 	and.w	r2, r3, #7
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_PCD_EP_Close+0x6a>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e00e      	b.n	8003c76 <HAL_PCD_EP_Close+0x88>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f003 fe58 	bl	800791c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	7afb      	ldrb	r3, [r7, #11]
 8003c90:	f003 0207 	and.w	r2, r3, #7
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cbe:	7afb      	ldrb	r3, [r7, #11]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6979      	ldr	r1, [r7, #20]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 f810 	bl	8007cf6 <USB_EPStartXfer>

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	f003 0207 	and.w	r2, r3, #7
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	f003 0207 	and.w	r2, r3, #7
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	3310      	adds	r3, #16
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2200      	movs	r2, #0
 8003d54:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6979      	ldr	r1, [r7, #20]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f003 ffc1 	bl	8007cf6 <USB_EPStartXfer>

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	7912      	ldrb	r2, [r2, #4]
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e03e      	b.n	8003e1a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	da0e      	bge.n	8003dc2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	f003 0207 	and.w	r2, r3, #7
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	3310      	adds	r3, #16
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4413      	add	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	705a      	strb	r2, [r3, #1]
 8003dc0:	e00c      	b.n	8003ddc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_PCD_EP_SetStall+0x7e>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e00e      	b.n	8003e1a <HAL_PCD_EP_SetStall+0x9c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f005 fb24 	bl	8009458 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	7912      	ldrb	r2, [r2, #4]
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e040      	b.n	8003ec2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	da0e      	bge.n	8003e66 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	f003 0207 	and.w	r2, r3, #7
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	3310      	adds	r3, #16
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	705a      	strb	r2, [r3, #1]
 8003e64:	e00e      	b.n	8003e84 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 0207 	and.w	r2, r3, #7
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_PCD_EP_ClrStall+0x82>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e00e      	b.n	8003ec2 <HAL_PCD_EP_ClrStall+0xa0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68f9      	ldr	r1, [r7, #12]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f005 fb21 	bl	80094fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b096      	sub	sp, #88	@ 0x58
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ed2:	e3ad      	b.n	8004630 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003edc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ee0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003eee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 816f 	bne.w	80041d6 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003ef8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d14c      	bne.n	8003f9e <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f14:	81fb      	strh	r3, [r7, #14]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	89fb      	ldrh	r3, [r7, #14]
 8003f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3310      	adds	r3, #16
 8003f2c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	4413      	add	r3, r2
 8003f48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	441a      	add	r2, r3
 8003f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f62:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f64:	2100      	movs	r1, #0
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f007 faf1 	bl	800b54e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7b1b      	ldrb	r3, [r3, #12]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 835c 	beq.w	8004630 <PCD_EP_ISR_Handler+0x766>
 8003f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 8357 	bne.w	8004630 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	7b1b      	ldrb	r3, [r3, #12]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	731a      	strb	r2, [r3, #12]
 8003f9c:	e348      	b.n	8004630 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fa4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003fb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d032      	beq.n	8004022 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f005 fbaa 	bl	8009750 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b29a      	uxth	r2, r3
 8004004:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004008:	4013      	ands	r3, r2
 800400a:	823b      	strh	r3, [r7, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	8a3a      	ldrh	r2, [r7, #16]
 8004012:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004016:	b292      	uxth	r2, r2
 8004018:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f007 fa6a 	bl	800b4f4 <HAL_PCD_SetupStageCallback>
 8004020:	e306      	b.n	8004630 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004022:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004026:	2b00      	cmp	r3, #0
 8004028:	f280 8302 	bge.w	8004630 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	b29a      	uxth	r2, r3
 8004034:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004038:	4013      	ands	r3, r2
 800403a:	83fb      	strh	r3, [r7, #30]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	8bfa      	ldrh	r2, [r7, #30]
 8004042:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004046:	b292      	uxth	r2, r2
 8004048:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	4413      	add	r3, r2
 8004064:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800406e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004070:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d019      	beq.n	80040ae <PCD_EP_ISR_Handler+0x1e4>
 800407a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d015      	beq.n	80040ae <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004088:	6959      	ldr	r1, [r3, #20]
 800408a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800408c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004090:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004092:	b29b      	uxth	r3, r3
 8004094:	f005 fb5c 	bl	8009750 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	441a      	add	r2, r3
 80040a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80040a6:	2100      	movs	r1, #0
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f007 fa35 	bl	800b518 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80040b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f040 82b5 	bne.w	8004630 <PCD_EP_ISR_Handler+0x766>
 80040c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80040ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040d2:	f000 82ad 	beq.w	8004630 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	4413      	add	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004100:	b29a      	uxth	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b3e      	cmp	r3, #62	@ 0x3e
 800410c:	d91d      	bls.n	800414a <PCD_EP_ISR_Handler+0x280>
 800410e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	647b      	str	r3, [r7, #68]	@ 0x44
 8004116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <PCD_EP_ISR_Handler+0x25e>
 8004122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004124:	3b01      	subs	r3, #1
 8004126:	647b      	str	r3, [r7, #68]	@ 0x44
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29a      	uxth	r2, r3
 800412e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004130:	b29b      	uxth	r3, r3
 8004132:	029b      	lsls	r3, r3, #10
 8004134:	b29b      	uxth	r3, r3
 8004136:	4313      	orrs	r3, r2
 8004138:	b29b      	uxth	r3, r3
 800413a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800413e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004142:	b29a      	uxth	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	801a      	strh	r2, [r3, #0]
 8004148:	e026      	b.n	8004198 <PCD_EP_ISR_Handler+0x2ce>
 800414a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <PCD_EP_ISR_Handler+0x29e>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800415c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004160:	b29a      	uxth	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	e017      	b.n	8004198 <PCD_EP_ISR_Handler+0x2ce>
 8004168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <PCD_EP_ISR_Handler+0x2b8>
 800417c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417e:	3301      	adds	r3, #1
 8004180:	647b      	str	r3, [r7, #68]	@ 0x44
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29a      	uxth	r2, r3
 8004188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800418a:	b29b      	uxth	r3, r3
 800418c:	029b      	lsls	r3, r3, #10
 800418e:	b29b      	uxth	r3, r3
 8004190:	4313      	orrs	r3, r2
 8004192:	b29a      	uxth	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a8:	827b      	strh	r3, [r7, #18]
 80041aa:	8a7b      	ldrh	r3, [r7, #18]
 80041ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80041b0:	827b      	strh	r3, [r7, #18]
 80041b2:	8a7b      	ldrh	r3, [r7, #18]
 80041b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80041b8:	827b      	strh	r3, [r7, #18]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	8a7b      	ldrh	r3, [r7, #18]
 80041c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]
 80041d4:	e22c      	b.n	8004630 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80041ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f280 80f6 	bge.w	80043e0 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29a      	uxth	r2, r3
 8004206:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800420a:	4013      	ands	r3, r2
 800420c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004222:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004226:	b292      	uxth	r2, r2
 8004228:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800422a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004242:	7b1b      	ldrb	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d123      	bne.n	8004290 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004250:	b29b      	uxth	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	4413      	add	r3, r2
 8004262:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004270:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 808e 	beq.w	8004396 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004280:	6959      	ldr	r1, [r3, #20]
 8004282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004284:	88da      	ldrh	r2, [r3, #6]
 8004286:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800428a:	f005 fa61 	bl	8009750 <USB_ReadPMA>
 800428e:	e082      	b.n	8004396 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004292:	78db      	ldrb	r3, [r3, #3]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d10a      	bne.n	80042ae <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004298:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800429c:	461a      	mov	r2, r3
 800429e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f9d3 	bl	800464c <HAL_PCD_EP_DB_Receive>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80042ac:	e073      	b.n	8004396 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	441a      	add	r2, r3
 80042da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80042de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d022      	beq.n	8004352 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004314:	b29b      	uxth	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	4413      	add	r3, r2
 8004326:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004330:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004334:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02c      	beq.n	8004396 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004342:	6959      	ldr	r1, [r3, #20]
 8004344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004346:	891a      	ldrh	r2, [r3, #8]
 8004348:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800434c:	f005 fa00 	bl	8009750 <USB_ReadPMA>
 8004350:	e021      	b.n	8004396 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800435a:	b29b      	uxth	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	4413      	add	r3, r2
 800436c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004376:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800437a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800437e:	2b00      	cmp	r3, #0
 8004380:	d009      	beq.n	8004396 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004388:	6959      	ldr	r1, [r3, #20]
 800438a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438c:	895a      	ldrh	r2, [r3, #10]
 800438e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004392:	f005 f9dd 	bl	8009750 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004398:	69da      	ldr	r2, [r3, #28]
 800439a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800439e:	441a      	add	r2, r3
 80043a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80043a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80043ac:	441a      	add	r2, r3
 80043ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80043b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <PCD_EP_ISR_Handler+0x4fc>
 80043ba:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80043be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d206      	bcs.n	80043d4 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80043c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f007 f8a3 	bl	800b518 <HAL_PCD_DataOutStageCallback>
 80043d2:	e005      	b.n	80043e0 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043da:	4618      	mov	r0, r3
 80043dc:	f003 fc8b 	bl	8007cf6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80043e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8121 	beq.w	8004630 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80043ee:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	3310      	adds	r3, #16
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4413      	add	r3, r2
 8004400:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	441a      	add	r2, r3
 800442e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443a:	b29b      	uxth	r3, r3
 800443c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800443e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004440:	78db      	ldrb	r3, [r3, #3]
 8004442:	2b01      	cmp	r3, #1
 8004444:	f040 80a2 	bne.w	800458c <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8004448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444a:	2200      	movs	r2, #0
 800444c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800444e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004450:	7b1b      	ldrb	r3, [r3, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8093 	beq.w	800457e <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004458:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800445c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d046      	beq.n	80044f2 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d126      	bne.n	80044ba <PCD_EP_ISR_Handler+0x5f0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800447a:	b29b      	uxth	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	4413      	add	r3, r2
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
 8004484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	00da      	lsls	r2, r3, #3
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	4413      	add	r3, r2
 800448e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	e061      	b.n	800457e <PCD_EP_ISR_Handler+0x6b4>
 80044ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d15d      	bne.n	800457e <PCD_EP_ISR_Handler+0x6b4>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	4413      	add	r3, r2
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	00da      	lsls	r2, r3, #3
 80044e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e2:	4413      	add	r3, r2
 80044e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	2200      	movs	r2, #0
 80044ee:	801a      	strh	r2, [r3, #0]
 80044f0:	e045      	b.n	800457e <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d126      	bne.n	800454e <PCD_EP_ISR_Handler+0x684>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	637b      	str	r3, [r7, #52]	@ 0x34
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800450e:	b29b      	uxth	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004514:	4413      	add	r3, r2
 8004516:	637b      	str	r3, [r7, #52]	@ 0x34
 8004518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	00da      	lsls	r2, r3, #3
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004520:	4413      	add	r3, r2
 8004522:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004526:	633b      	str	r3, [r7, #48]	@ 0x30
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004532:	b29a      	uxth	r2, r3
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	801a      	strh	r2, [r3, #0]
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004546:	b29a      	uxth	r2, r3
 8004548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	e017      	b.n	800457e <PCD_EP_ISR_Handler+0x6b4>
 800454e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004550:	785b      	ldrb	r3, [r3, #1]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d113      	bne.n	800457e <PCD_EP_ISR_Handler+0x6b4>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800455e:	b29b      	uxth	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004564:	4413      	add	r3, r2
 8004566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	00da      	lsls	r2, r3, #3
 800456e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004570:	4413      	add	r3, r2
 8004572:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004576:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457a:	2200      	movs	r2, #0
 800457c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800457e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f006 ffe2 	bl	800b54e <HAL_PCD_DataInStageCallback>
 800458a:	e051      	b.n	8004630 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800458c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d144      	bne.n	8004622 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045bc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80045c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d907      	bls.n	80045dc <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80045cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80045d4:	1ad2      	subs	r2, r2, r3
 80045d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d8:	619a      	str	r2, [r3, #24]
 80045da:	e002      	b.n	80045e2 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80045dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045de:	2200      	movs	r2, #0
 80045e0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80045e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	4619      	mov	r1, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f006 ffac 	bl	800b54e <HAL_PCD_DataInStageCallback>
 80045f6:	e01b      	b.n	8004630 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80045f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004600:	441a      	add	r2, r3
 8004602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004604:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004608:	69da      	ldr	r2, [r3, #28]
 800460a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800460e:	441a      	add	r2, r3
 8004610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004612:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800461a:	4618      	mov	r0, r3
 800461c:	f003 fb6b 	bl	8007cf6 <USB_EPStartXfer>
 8004620:	e006      	b.n	8004630 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004622:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004626:	461a      	mov	r2, r3
 8004628:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f917 	bl	800485e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004638:	b29b      	uxth	r3, r3
 800463a:	b21b      	sxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	f6ff ac49 	blt.w	8003ed4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3758      	adds	r7, #88	@ 0x58
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	4613      	mov	r3, r2
 8004658:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d07c      	beq.n	800475e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800466c:	b29b      	uxth	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	4413      	add	r3, r2
 800467e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004688:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	8b7b      	ldrh	r3, [r7, #26]
 8004690:	429a      	cmp	r2, r3
 8004692:	d306      	bcc.n	80046a2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	8b7b      	ldrh	r3, [r7, #26]
 800469a:	1ad2      	subs	r2, r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	619a      	str	r2, [r3, #24]
 80046a0:	e002      	b.n	80046a8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2200      	movs	r2, #0
 80046a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d123      	bne.n	80046f8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	833b      	strh	r3, [r7, #24]
 80046cc:	8b3b      	ldrh	r3, [r7, #24]
 80046ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046d2:	833b      	strh	r3, [r7, #24]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	441a      	add	r2, r3
 80046e2:	8b3b      	ldrh	r3, [r7, #24]
 80046e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01f      	beq.n	8004742 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471c:	82fb      	strh	r3, [r7, #22]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	8afb      	ldrh	r3, [r7, #22]
 800472e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800473a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004742:	8b7b      	ldrh	r3, [r7, #26]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8085 	beq.w	8004854 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6959      	ldr	r1, [r3, #20]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	891a      	ldrh	r2, [r3, #8]
 8004756:	8b7b      	ldrh	r3, [r7, #26]
 8004758:	f004 fffa 	bl	8009750 <USB_ReadPMA>
 800475c:	e07a      	b.n	8004854 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	4413      	add	r3, r2
 8004778:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004782:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	8b7b      	ldrh	r3, [r7, #26]
 800478a:	429a      	cmp	r2, r3
 800478c:	d306      	bcc.n	800479c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	8b7b      	ldrh	r3, [r7, #26]
 8004794:	1ad2      	subs	r2, r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	619a      	str	r2, [r3, #24]
 800479a:	e002      	b.n	80047a2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2200      	movs	r2, #0
 80047a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d123      	bne.n	80047f2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c4:	83fb      	strh	r3, [r7, #30]
 80047c6:	8bfb      	ldrh	r3, [r7, #30]
 80047c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80047cc:	83fb      	strh	r3, [r7, #30]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	8bfb      	ldrh	r3, [r7, #30]
 80047de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d11f      	bne.n	800483c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004816:	83bb      	strh	r3, [r7, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	8bbb      	ldrh	r3, [r7, #28]
 8004828:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800482c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004830:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004834:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004838:	b29b      	uxth	r3, r3
 800483a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800483c:	8b7b      	ldrh	r3, [r7, #26]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6959      	ldr	r1, [r3, #20]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	895a      	ldrh	r2, [r3, #10]
 800484e:	8b7b      	ldrh	r3, [r7, #26]
 8004850:	f004 ff7e 	bl	8009750 <USB_ReadPMA>
    }
  }

  return count;
 8004854:	8b7b      	ldrh	r3, [r7, #26]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b0a4      	sub	sp, #144	@ 0x90
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	4613      	mov	r3, r2
 800486a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 81db 	beq.w	8004c2e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004880:	b29b      	uxth	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4413      	add	r3, r2
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	4413      	add	r3, r2
 8004892:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800489c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d907      	bls.n	80048bc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	699a      	ldr	r2, [r3, #24]
 80048b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048b4:	1ad2      	subs	r2, r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	619a      	str	r2, [r3, #24]
 80048ba:	e002      	b.n	80048c2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2200      	movs	r2, #0
 80048c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 80b9 	bne.w	8004a3e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d126      	bne.n	8004922 <HAL_PCD_EP_DB_Transmit+0xc4>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e8:	4413      	add	r3, r2
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	00da      	lsls	r2, r3, #3
 80048f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f4:	4413      	add	r3, r2
 80048f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80048fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004906:	b29a      	uxth	r2, r3
 8004908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491a:	b29a      	uxth	r2, r3
 800491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	e01a      	b.n	8004958 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	785b      	ldrb	r3, [r3, #1]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d116      	bne.n	8004958 <HAL_PCD_EP_DB_Transmit+0xfa>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004938:	b29b      	uxth	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493e:	4413      	add	r3, r2
 8004940:	637b      	str	r3, [r7, #52]	@ 0x34
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	00da      	lsls	r2, r3, #3
 8004948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494a:	4413      	add	r3, r2
 800494c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004950:	633b      	str	r3, [r7, #48]	@ 0x30
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	2200      	movs	r2, #0
 8004956:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	627b      	str	r3, [r7, #36]	@ 0x24
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d126      	bne.n	80049b4 <HAL_PCD_EP_DB_Transmit+0x156>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	00da      	lsls	r2, r3, #3
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004998:	b29a      	uxth	r2, r3
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e017      	b.n	80049e4 <HAL_PCD_EP_DB_Transmit+0x186>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d113      	bne.n	80049e4 <HAL_PCD_EP_DB_Transmit+0x186>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	4413      	add	r3, r2
 80049cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	00da      	lsls	r2, r3, #3
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	4413      	add	r3, r2
 80049d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049dc:	623b      	str	r3, [r7, #32]
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	2200      	movs	r2, #0
 80049e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	4619      	mov	r1, r3
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f006 fdaf 	bl	800b54e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 82fa 	beq.w	8004ff0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a16:	82fb      	strh	r3, [r7, #22]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	441a      	add	r2, r3
 8004a26:	8afb      	ldrh	r3, [r7, #22]
 8004a28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	8013      	strh	r3, [r2, #0]
 8004a3c:	e2d8      	b.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d021      	beq.n	8004a8c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a62:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	f040 82ac 	bne.w	8004ff0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	69da      	ldr	r2, [r3, #28]
 8004aaa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004aae:	441a      	add	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d30b      	bcc.n	8004ad8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad0:	1ad2      	subs	r2, r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	621a      	str	r2, [r3, #32]
 8004ad6:	e017      	b.n	8004b08 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d108      	bne.n	8004af2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004ae0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ae4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004af0:	e00a      	b.n	8004b08 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2200      	movs	r2, #0
 8004b06:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d165      	bne.n	8004bdc <HAL_PCD_EP_DB_Transmit+0x37e>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b24:	4413      	add	r3, r2
 8004b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	00da      	lsls	r2, r3, #3
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b30:	4413      	add	r3, r2
 8004b32:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b4e:	d91d      	bls.n	8004b8c <HAL_PCD_EP_DB_Transmit+0x32e>
 8004b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d102      	bne.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x30c>
 8004b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b66:	3b01      	subs	r3, #1
 8004b68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	029b      	lsls	r3, r3, #10
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	e044      	b.n	8004c16 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <HAL_PCD_EP_DB_Transmit+0x34c>
 8004b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba6:	801a      	strh	r2, [r3, #0]
 8004ba8:	e035      	b.n	8004c16 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_PCD_EP_DB_Transmit+0x366>
 8004bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	029b      	lsls	r3, r3, #10
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	e01c      	b.n	8004c16 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d118      	bne.n	8004c16 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bf8:	4413      	add	r3, r2
 8004bfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	00da      	lsls	r2, r3, #3
 8004c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c04:	4413      	add	r3, r2
 8004c06:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c14:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	6959      	ldr	r1, [r3, #20]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	891a      	ldrh	r2, [r3, #8]
 8004c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f004 fd50 	bl	80096cc <USB_WritePMA>
 8004c2c:	e1e0      	b.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4413      	add	r3, r2
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	4413      	add	r3, r2
 8004c48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c52:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d307      	bcc.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c6a:	1ad2      	subs	r2, r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	619a      	str	r2, [r3, #24]
 8004c70:	e002      	b.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2200      	movs	r2, #0
 8004c76:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 80c0 	bne.w	8004e02 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	785b      	ldrb	r3, [r3, #1]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d126      	bne.n	8004cd8 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c9e:	4413      	add	r3, r2
 8004ca0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	00da      	lsls	r2, r3, #3
 8004ca8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004caa:	4413      	add	r3, r2
 8004cac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004cb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cc0:	801a      	strh	r2, [r3, #0]
 8004cc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cd4:	801a      	strh	r2, [r3, #0]
 8004cd6:	e01a      	b.n	8004d0e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d116      	bne.n	8004d0e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cf4:	4413      	add	r3, r2
 8004cf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	00da      	lsls	r2, r3, #3
 8004cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d00:	4413      	add	r3, r2
 8004d02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d06:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d12b      	bne.n	8004d74 <HAL_PCD_EP_DB_Transmit+0x516>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d30:	4413      	add	r3, r2
 8004d32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	00da      	lsls	r2, r3, #3
 8004d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	e017      	b.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x546>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	785b      	ldrb	r3, [r3, #1]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d113      	bne.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x546>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d8a:	4413      	add	r3, r2
 8004d8c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	00da      	lsls	r2, r3, #3
 8004d94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d96:	4413      	add	r3, r2
 8004d98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004da0:	2200      	movs	r2, #0
 8004da2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	4619      	mov	r1, r3
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f006 fbcf 	bl	800b54e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004db0:	88fb      	ldrh	r3, [r7, #6]
 8004db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 811a 	bne.w	8004ff0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004df4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	8013      	strh	r3, [r2, #0]
 8004e00:	e0f6      	b.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d121      	bne.n	8004e50 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	441a      	add	r2, r3
 8004e38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	f040 80ca 	bne.w	8004ff0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e64:	441a      	add	r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e72:	441a      	add	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d30b      	bcc.n	8004e9c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e94:	1ad2      	subs	r2, r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	621a      	str	r2, [r3, #32]
 8004e9a:	e017      	b.n	8004ecc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d108      	bne.n	8004eb6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004ea4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ea8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004eb4:	e00a      	b.n	8004ecc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	785b      	ldrb	r3, [r3, #1]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d165      	bne.n	8004fa6 <HAL_PCD_EP_DB_Transmit+0x748>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eee:	4413      	add	r3, r2
 8004ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	00da      	lsls	r2, r3, #3
 8004ef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004efa:	4413      	add	r3, r2
 8004efc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f16:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f18:	d91d      	bls.n	8004f56 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004f2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f30:	3b01      	subs	r3, #1
 8004f32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	029b      	lsls	r3, r3, #10
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	4313      	orrs	r3, r2
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	e041      	b.n	8004fda <HAL_PCD_EP_DB_Transmit+0x77c>
 8004f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <HAL_PCD_EP_DB_Transmit+0x716>
 8004f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	e032      	b.n	8004fda <HAL_PCD_EP_DB_Transmit+0x77c>
 8004f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_PCD_EP_DB_Transmit+0x730>
 8004f88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	029b      	lsls	r3, r3, #10
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	e019      	b.n	8004fda <HAL_PCD_EP_DB_Transmit+0x77c>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d115      	bne.n	8004fda <HAL_PCD_EP_DB_Transmit+0x77c>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fbc:	4413      	add	r3, r2
 8004fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	00da      	lsls	r2, r3, #3
 8004fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc8:	4413      	add	r3, r2
 8004fca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fd8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6959      	ldr	r1, [r3, #20]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	895a      	ldrh	r2, [r3, #10]
 8004fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f004 fb6e 	bl	80096cc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005006:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800500a:	82bb      	strh	r3, [r7, #20]
 800500c:	8abb      	ldrh	r3, [r7, #20]
 800500e:	f083 0310 	eor.w	r3, r3, #16
 8005012:	82bb      	strh	r3, [r7, #20]
 8005014:	8abb      	ldrh	r3, [r7, #20]
 8005016:	f083 0320 	eor.w	r3, r3, #32
 800501a:	82bb      	strh	r3, [r7, #20]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	441a      	add	r2, r3
 800502a:	8abb      	ldrh	r3, [r7, #20]
 800502c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800503c:	b29b      	uxth	r3, r3
 800503e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3790      	adds	r7, #144	@ 0x90
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	817b      	strh	r3, [r7, #10]
 8005058:	4613      	mov	r3, r2
 800505a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800505c:	897b      	ldrh	r3, [r7, #10]
 800505e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005068:	897b      	ldrh	r3, [r7, #10]
 800506a:	f003 0207 	and.w	r2, r3, #7
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	3310      	adds	r3, #16
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	e009      	b.n	8005094 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005080:	897a      	ldrh	r2, [r7, #10]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005094:	893b      	ldrh	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d107      	bne.n	80050aa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2200      	movs	r2, #0
 800509e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	80da      	strh	r2, [r3, #6]
 80050a8:	e00b      	b.n	80050c2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2201      	movs	r2, #1
 80050ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	0c1b      	lsrs	r3, r3, #16
 80050bc:	b29a      	uxth	r2, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005108:	b29b      	uxth	r3, r3
 800510a:	f043 0302 	orr.w	r3, r3, #2
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d141      	bne.n	80051b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005132:	4b4b      	ldr	r3, [pc, #300]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800513a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513e:	d131      	bne.n	80051a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005140:	4b47      	ldr	r3, [pc, #284]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005146:	4a46      	ldr	r2, [pc, #280]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800514c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005150:	4b43      	ldr	r3, [pc, #268]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005158:	4a41      	ldr	r2, [pc, #260]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800515e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005160:	4b40      	ldr	r3, [pc, #256]	@ (8005264 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2232      	movs	r2, #50	@ 0x32
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	4a3f      	ldr	r2, [pc, #252]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800516c:	fba2 2303 	umull	r2, r3, r2, r3
 8005170:	0c9b      	lsrs	r3, r3, #18
 8005172:	3301      	adds	r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005176:	e002      	b.n	800517e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3b01      	subs	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800517e:	4b38      	ldr	r3, [pc, #224]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518a:	d102      	bne.n	8005192 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f2      	bne.n	8005178 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005192:	4b33      	ldr	r3, [pc, #204]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800519e:	d158      	bne.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e057      	b.n	8005254 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051b4:	e04d      	b.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051bc:	d141      	bne.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051be:	4b28      	ldr	r3, [pc, #160]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ca:	d131      	bne.n	8005230 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051cc:	4b24      	ldr	r3, [pc, #144]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051d2:	4a23      	ldr	r2, [pc, #140]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051dc:	4b20      	ldr	r3, [pc, #128]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005264 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2232      	movs	r2, #50	@ 0x32
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	0c9b      	lsrs	r3, r3, #18
 80051fe:	3301      	adds	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005202:	e002      	b.n	800520a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3b01      	subs	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800520a:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005216:	d102      	bne.n	800521e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f2      	bne.n	8005204 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800521e:	4b10      	ldr	r3, [pc, #64]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522a:	d112      	bne.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e011      	b.n	8005254 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005230:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005236:	4a0a      	ldr	r2, [pc, #40]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800523c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005240:	e007      	b.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005242:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800524a:	4a05      	ldr	r2, [pc, #20]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005250:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40007000 	.word	0x40007000
 8005264:	20000000 	.word	0x20000000
 8005268:	431bde83 	.word	0x431bde83

0800526c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	4a04      	ldr	r2, [pc, #16]	@ (8005288 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005276:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800527a:	6093      	str	r3, [r2, #8]
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40007000 	.word	0x40007000

0800528c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e2fe      	b.n	800589c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d075      	beq.n	8005396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052aa:	4b97      	ldr	r3, [pc, #604]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b4:	4b94      	ldr	r3, [pc, #592]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_OscConfig+0x3e>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d002      	beq.n	80052d0 <HAL_RCC_OscConfig+0x44>
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d10b      	bne.n	80052e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	4b8d      	ldr	r3, [pc, #564]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05b      	beq.n	8005394 <HAL_RCC_OscConfig+0x108>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d157      	bne.n	8005394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e2d9      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f0:	d106      	bne.n	8005300 <HAL_RCC_OscConfig+0x74>
 80052f2:	4b85      	ldr	r3, [pc, #532]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a84      	ldr	r2, [pc, #528]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e01d      	b.n	800533c <HAL_RCC_OscConfig+0xb0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x98>
 800530a:	4b7f      	ldr	r3, [pc, #508]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a7e      	ldr	r2, [pc, #504]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	4b7c      	ldr	r3, [pc, #496]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a7b      	ldr	r2, [pc, #492]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0xb0>
 8005324:	4b78      	ldr	r3, [pc, #480]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a77      	ldr	r2, [pc, #476]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 800532a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	4b75      	ldr	r3, [pc, #468]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a74      	ldr	r2, [pc, #464]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800533a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fb feee 	bl	8001124 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800534c:	f7fb feea 	bl	8001124 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	@ 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e29e      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800535e:	4b6a      	ldr	r3, [pc, #424]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0xc0>
 800536a:	e014      	b.n	8005396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fb feda 	bl	8001124 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005374:	f7fb fed6 	bl	8001124 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	@ 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e28a      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005386:	4b60      	ldr	r3, [pc, #384]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0xe8>
 8005392:	e000      	b.n	8005396 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d075      	beq.n	800548e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a2:	4b59      	ldr	r3, [pc, #356]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053ac:	4b56      	ldr	r3, [pc, #344]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d102      	bne.n	80053c2 <HAL_RCC_OscConfig+0x136>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d002      	beq.n	80053c8 <HAL_RCC_OscConfig+0x13c>
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d11f      	bne.n	8005408 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_OscConfig+0x154>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e25d      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e0:	4b49      	ldr	r3, [pc, #292]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	4946      	ldr	r1, [pc, #280]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053f4:	4b45      	ldr	r3, [pc, #276]	@ (800550c <HAL_RCC_OscConfig+0x280>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fb fe47 	bl	800108c <HAL_InitTick>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d043      	beq.n	800548c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e249      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d023      	beq.n	8005458 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005410:	4b3d      	ldr	r3, [pc, #244]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a3c      	ldr	r2, [pc, #240]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800541a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fb fe82 	bl	8001124 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005424:	f7fb fe7e 	bl	8001124 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e232      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005436:	4b34      	ldr	r3, [pc, #208]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005442:	4b31      	ldr	r3, [pc, #196]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	061b      	lsls	r3, r3, #24
 8005450:	492d      	ldr	r1, [pc, #180]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005452:	4313      	orrs	r3, r2
 8005454:	604b      	str	r3, [r1, #4]
 8005456:	e01a      	b.n	800548e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005458:	4b2b      	ldr	r3, [pc, #172]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a2a      	ldr	r2, [pc, #168]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 800545e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fb fe5e 	bl	8001124 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800546c:	f7fb fe5a 	bl	8001124 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e20e      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800547e:	4b22      	ldr	r3, [pc, #136]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x1e0>
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800548c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d041      	beq.n	800551e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01c      	beq.n	80054dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a2:	4b19      	ldr	r3, [pc, #100]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80054a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a8:	4a17      	ldr	r2, [pc, #92]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b2:	f7fb fe37 	bl	8001124 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ba:	f7fb fe33 	bl	8001124 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e1e7      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80054ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0ef      	beq.n	80054ba <HAL_RCC_OscConfig+0x22e>
 80054da:	e020      	b.n	800551e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80054de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e2:	4a09      	ldr	r2, [pc, #36]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ec:	f7fb fe1a 	bl	8001124 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054f2:	e00d      	b.n	8005510 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f4:	f7fb fe16 	bl	8001124 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d906      	bls.n	8005510 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e1ca      	b.n	800589c <HAL_RCC_OscConfig+0x610>
 8005506:	bf00      	nop
 8005508:	40021000 	.word	0x40021000
 800550c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005510:	4b8c      	ldr	r3, [pc, #560]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ea      	bne.n	80054f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80a6 	beq.w	8005678 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552c:	2300      	movs	r3, #0
 800552e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005530:	4b84      	ldr	r3, [pc, #528]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_OscConfig+0x2b4>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <HAL_RCC_OscConfig+0x2b6>
 8005540:	2300      	movs	r3, #0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00d      	beq.n	8005562 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005546:	4b7f      	ldr	r3, [pc, #508]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554a:	4a7e      	ldr	r2, [pc, #504]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005550:	6593      	str	r3, [r2, #88]	@ 0x58
 8005552:	4b7c      	ldr	r3, [pc, #496]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800555e:	2301      	movs	r3, #1
 8005560:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005562:	4b79      	ldr	r3, [pc, #484]	@ (8005748 <HAL_RCC_OscConfig+0x4bc>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d118      	bne.n	80055a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800556e:	4b76      	ldr	r3, [pc, #472]	@ (8005748 <HAL_RCC_OscConfig+0x4bc>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a75      	ldr	r2, [pc, #468]	@ (8005748 <HAL_RCC_OscConfig+0x4bc>)
 8005574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557a:	f7fb fdd3 	bl	8001124 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005582:	f7fb fdcf 	bl	8001124 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e183      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005594:	4b6c      	ldr	r3, [pc, #432]	@ (8005748 <HAL_RCC_OscConfig+0x4bc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d108      	bne.n	80055ba <HAL_RCC_OscConfig+0x32e>
 80055a8:	4b66      	ldr	r3, [pc, #408]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ae:	4a65      	ldr	r2, [pc, #404]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055b8:	e024      	b.n	8005604 <HAL_RCC_OscConfig+0x378>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d110      	bne.n	80055e4 <HAL_RCC_OscConfig+0x358>
 80055c2:	4b60      	ldr	r3, [pc, #384]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c8:	4a5e      	ldr	r2, [pc, #376]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055ca:	f043 0304 	orr.w	r3, r3, #4
 80055ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d8:	4a5a      	ldr	r2, [pc, #360]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055e2:	e00f      	b.n	8005604 <HAL_RCC_OscConfig+0x378>
 80055e4:	4b57      	ldr	r3, [pc, #348]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ea:	4a56      	ldr	r2, [pc, #344]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055f4:	4b53      	ldr	r3, [pc, #332]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fa:	4a52      	ldr	r2, [pc, #328]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055fc:	f023 0304 	bic.w	r3, r3, #4
 8005600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d016      	beq.n	800563a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fb fd8a 	bl	8001124 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005612:	e00a      	b.n	800562a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005614:	f7fb fd86 	bl	8001124 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e138      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562a:	4b46      	ldr	r3, [pc, #280]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0ed      	beq.n	8005614 <HAL_RCC_OscConfig+0x388>
 8005638:	e015      	b.n	8005666 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563a:	f7fb fd73 	bl	8001124 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005640:	e00a      	b.n	8005658 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005642:	f7fb fd6f 	bl	8001124 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e121      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005658:	4b3a      	ldr	r3, [pc, #232]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1ed      	bne.n	8005642 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005666:	7ffb      	ldrb	r3, [r7, #31]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d105      	bne.n	8005678 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800566c:	4b35      	ldr	r3, [pc, #212]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800566e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005670:	4a34      	ldr	r2, [pc, #208]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005676:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d03c      	beq.n	80056fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01c      	beq.n	80056c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800568c:	4b2d      	ldr	r3, [pc, #180]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800568e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005692:	4a2c      	ldr	r2, [pc, #176]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569c:	f7fb fd42 	bl	8001124 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a4:	f7fb fd3e 	bl	8001124 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e0f2      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056b6:	4b23      	ldr	r3, [pc, #140]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80056b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ef      	beq.n	80056a4 <HAL_RCC_OscConfig+0x418>
 80056c4:	e01b      	b.n	80056fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80056c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d6:	f7fb fd25 	bl	8001124 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056de:	f7fb fd21 	bl	8001124 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0d5      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056f0:	4b14      	ldr	r3, [pc, #80]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80056f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1ef      	bne.n	80056de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80c9 	beq.w	800589a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005708:	4b0e      	ldr	r3, [pc, #56]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 030c 	and.w	r3, r3, #12
 8005710:	2b0c      	cmp	r3, #12
 8005712:	f000 8083 	beq.w	800581c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d15e      	bne.n	80057dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571e:	4b09      	ldr	r3, [pc, #36]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a08      	ldr	r2, [pc, #32]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005724:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572a:	f7fb fcfb 	bl	8001124 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005730:	e00c      	b.n	800574c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005732:	f7fb fcf7 	bl	8001124 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d905      	bls.n	800574c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e0ab      	b.n	800589c <HAL_RCC_OscConfig+0x610>
 8005744:	40021000 	.word	0x40021000
 8005748:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574c:	4b55      	ldr	r3, [pc, #340]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1ec      	bne.n	8005732 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005758:	4b52      	ldr	r3, [pc, #328]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	4b52      	ldr	r3, [pc, #328]	@ (80058a8 <HAL_RCC_OscConfig+0x61c>)
 800575e:	4013      	ands	r3, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6a11      	ldr	r1, [r2, #32]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005768:	3a01      	subs	r2, #1
 800576a:	0112      	lsls	r2, r2, #4
 800576c:	4311      	orrs	r1, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005772:	0212      	lsls	r2, r2, #8
 8005774:	4311      	orrs	r1, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800577a:	0852      	lsrs	r2, r2, #1
 800577c:	3a01      	subs	r2, #1
 800577e:	0552      	lsls	r2, r2, #21
 8005780:	4311      	orrs	r1, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005786:	0852      	lsrs	r2, r2, #1
 8005788:	3a01      	subs	r2, #1
 800578a:	0652      	lsls	r2, r2, #25
 800578c:	4311      	orrs	r1, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005792:	06d2      	lsls	r2, r2, #27
 8005794:	430a      	orrs	r2, r1
 8005796:	4943      	ldr	r1, [pc, #268]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 8005798:	4313      	orrs	r3, r2
 800579a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579c:	4b41      	ldr	r3, [pc, #260]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a40      	ldr	r2, [pc, #256]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057a8:	4b3e      	ldr	r3, [pc, #248]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4a3d      	ldr	r2, [pc, #244]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fb fcb6 	bl	8001124 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057bc:	f7fb fcb2 	bl	8001124 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e066      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ce:	4b35      	ldr	r3, [pc, #212]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x530>
 80057da:	e05e      	b.n	800589a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057dc:	4b31      	ldr	r3, [pc, #196]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a30      	ldr	r2, [pc, #192]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fb fc9c 	bl	8001124 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fb fc98 	bl	8001124 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e04c      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005802:	4b28      	ldr	r3, [pc, #160]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800580e:	4b25      	ldr	r3, [pc, #148]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	4924      	ldr	r1, [pc, #144]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 8005814:	4b25      	ldr	r3, [pc, #148]	@ (80058ac <HAL_RCC_OscConfig+0x620>)
 8005816:	4013      	ands	r3, r2
 8005818:	60cb      	str	r3, [r1, #12]
 800581a:	e03e      	b.n	800589a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e039      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005828:	4b1e      	ldr	r3, [pc, #120]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f003 0203 	and.w	r2, r3, #3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	429a      	cmp	r2, r3
 800583a:	d12c      	bne.n	8005896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	3b01      	subs	r3, #1
 8005848:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584a:	429a      	cmp	r2, r3
 800584c:	d123      	bne.n	8005896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d11b      	bne.n	8005896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005868:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800586a:	429a      	cmp	r2, r3
 800586c:	d113      	bne.n	8005896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	3b01      	subs	r3, #1
 800587c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800587e:	429a      	cmp	r2, r3
 8005880:	d109      	bne.n	8005896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	3b01      	subs	r3, #1
 8005890:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d001      	beq.n	800589a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40021000 	.word	0x40021000
 80058a8:	019f800c 	.word	0x019f800c
 80058ac:	feeefffc 	.word	0xfeeefffc

080058b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e11e      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058c8:	4b91      	ldr	r3, [pc, #580]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d910      	bls.n	80058f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d6:	4b8e      	ldr	r3, [pc, #568]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f023 020f 	bic.w	r2, r3, #15
 80058de:	498c      	ldr	r1, [pc, #560]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b8a      	ldr	r3, [pc, #552]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e106      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d073      	beq.n	80059ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d129      	bne.n	8005960 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590c:	4b81      	ldr	r3, [pc, #516]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0f4      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800591c:	f000 f99e 	bl	8005c5c <RCC_GetSysClockFreqFromPLLSource>
 8005920:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4a7c      	ldr	r2, [pc, #496]	@ (8005b18 <HAL_RCC_ClockConfig+0x268>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d93f      	bls.n	80059aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800592a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800593e:	2b00      	cmp	r3, #0
 8005940:	d033      	beq.n	80059aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005946:	2b00      	cmp	r3, #0
 8005948:	d12f      	bne.n	80059aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800594a:	4b72      	ldr	r3, [pc, #456]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005952:	4a70      	ldr	r2, [pc, #448]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005958:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800595a:	2380      	movs	r3, #128	@ 0x80
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e024      	b.n	80059aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d107      	bne.n	8005978 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005968:	4b6a      	ldr	r3, [pc, #424]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0c6      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005978:	4b66      	ldr	r3, [pc, #408]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0be      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005988:	f000 f8ce 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 800598c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4a61      	ldr	r2, [pc, #388]	@ (8005b18 <HAL_RCC_ClockConfig+0x268>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d909      	bls.n	80059aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005996:	4b5f      	ldr	r3, [pc, #380]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800599e:	4a5d      	ldr	r2, [pc, #372]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 80059a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80059a6:	2380      	movs	r3, #128	@ 0x80
 80059a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 0203 	bic.w	r2, r3, #3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	4957      	ldr	r1, [pc, #348]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059bc:	f7fb fbb2 	bl	8001124 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c2:	e00a      	b.n	80059da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c4:	f7fb fbae 	bl	8001124 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e095      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059da:	4b4e      	ldr	r3, [pc, #312]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 020c 	and.w	r2, r3, #12
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d1eb      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d023      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a04:	4b43      	ldr	r3, [pc, #268]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4a42      	ldr	r2, [pc, #264]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a24:	4a3b      	ldr	r2, [pc, #236]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a2c:	4b39      	ldr	r3, [pc, #228]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4936      	ldr	r1, [pc, #216]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b80      	cmp	r3, #128	@ 0x80
 8005a44:	d105      	bne.n	8005a52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a46:	4b33      	ldr	r3, [pc, #204]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	4a32      	ldr	r2, [pc, #200]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a52:	4b2f      	ldr	r3, [pc, #188]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d21d      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a60:	4b2b      	ldr	r3, [pc, #172]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f023 020f 	bic.w	r2, r3, #15
 8005a68:	4929      	ldr	r1, [pc, #164]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a70:	f7fb fb58 	bl	8001124 <HAL_GetTick>
 8005a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	e00a      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a78:	f7fb fb54 	bl	8001124 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e03b      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8e:	4b20      	ldr	r3, [pc, #128]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1ed      	bne.n	8005a78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4917      	ldr	r1, [pc, #92]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ac6:	4b13      	ldr	r3, [pc, #76]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	490f      	ldr	r1, [pc, #60]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ada:	f000 f825 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	091b      	lsrs	r3, r3, #4
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	490c      	ldr	r1, [pc, #48]	@ (8005b1c <HAL_RCC_ClockConfig+0x26c>)
 8005aec:	5ccb      	ldrb	r3, [r1, r3]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	fa22 f303 	lsr.w	r3, r2, r3
 8005af6:	4a0a      	ldr	r2, [pc, #40]	@ (8005b20 <HAL_RCC_ClockConfig+0x270>)
 8005af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005afa:	4b0a      	ldr	r3, [pc, #40]	@ (8005b24 <HAL_RCC_ClockConfig+0x274>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fb fac4 	bl	800108c <HAL_InitTick>
 8005b04:	4603      	mov	r3, r0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40022000 	.word	0x40022000
 8005b14:	40021000 	.word	0x40021000
 8005b18:	04c4b400 	.word	0x04c4b400
 8005b1c:	0800c430 	.word	0x0800c430
 8005b20:	20000000 	.word	0x20000000
 8005b24:	20000004 	.word	0x20000004

08005b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d102      	bne.n	8005b40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	e047      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b40:	4b27      	ldr	r3, [pc, #156]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 030c 	and.w	r3, r3, #12
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d102      	bne.n	8005b52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b4c:	4b26      	ldr	r3, [pc, #152]	@ (8005be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	e03e      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b52:	4b23      	ldr	r3, [pc, #140]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 030c 	and.w	r3, r3, #12
 8005b5a:	2b0c      	cmp	r3, #12
 8005b5c:	d136      	bne.n	8005bcc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b5e:	4b20      	ldr	r3, [pc, #128]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b68:	4b1d      	ldr	r3, [pc, #116]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	3301      	adds	r3, #1
 8005b74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d10c      	bne.n	8005b96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	4a16      	ldr	r2, [pc, #88]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b86:	68d2      	ldr	r2, [r2, #12]
 8005b88:	0a12      	lsrs	r2, r2, #8
 8005b8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	617b      	str	r3, [r7, #20]
      break;
 8005b94:	e00c      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b96:	4a13      	ldr	r2, [pc, #76]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	4a10      	ldr	r2, [pc, #64]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ba0:	68d2      	ldr	r2, [r2, #12]
 8005ba2:	0a12      	lsrs	r2, r2, #8
 8005ba4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ba8:	fb02 f303 	mul.w	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]
      break;
 8005bae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	0e5b      	lsrs	r3, r3, #25
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	e001      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bd0:	693b      	ldr	r3, [r7, #16]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40021000 	.word	0x40021000
 8005be4:	00f42400 	.word	0x00f42400
 8005be8:	007a1200 	.word	0x007a1200

08005bec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf0:	4b03      	ldr	r3, [pc, #12]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000000 	.word	0x20000000

08005c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c08:	f7ff fff0 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4904      	ldr	r1, [pc, #16]	@ (8005c2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	0800c440 	.word	0x0800c440

08005c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c34:	f7ff ffda 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	0adb      	lsrs	r3, r3, #11
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	4904      	ldr	r1, [pc, #16]	@ (8005c58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c46:	5ccb      	ldrb	r3, [r1, r3]
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40021000 	.word	0x40021000
 8005c58:	0800c440 	.word	0x0800c440

08005c5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c62:	4b1e      	ldr	r3, [pc, #120]	@ (8005cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d10c      	bne.n	8005c9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c80:	4a17      	ldr	r2, [pc, #92]	@ (8005ce0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	4a14      	ldr	r2, [pc, #80]	@ (8005cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c8a:	68d2      	ldr	r2, [r2, #12]
 8005c8c:	0a12      	lsrs	r2, r2, #8
 8005c8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	617b      	str	r3, [r7, #20]
    break;
 8005c98:	e00c      	b.n	8005cb4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c9a:	4a12      	ldr	r2, [pc, #72]	@ (8005ce4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8005cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ca4:	68d2      	ldr	r2, [r2, #12]
 8005ca6:	0a12      	lsrs	r2, r2, #8
 8005ca8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cac:	fb02 f303 	mul.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]
    break;
 8005cb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cb4:	4b09      	ldr	r3, [pc, #36]	@ (8005cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	0e5b      	lsrs	r3, r3, #25
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005cce:	687b      	ldr	r3, [r7, #4]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	007a1200 	.word	0x007a1200
 8005ce4:	00f42400 	.word	0x00f42400

08005ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8098 	beq.w	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d06:	2300      	movs	r3, #0
 8005d08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0a:	4b43      	ldr	r3, [pc, #268]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10d      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d16:	4b40      	ldr	r3, [pc, #256]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d22:	4b3d      	ldr	r3, [pc, #244]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d2a:	60bb      	str	r3, [r7, #8]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d32:	4b3a      	ldr	r3, [pc, #232]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a39      	ldr	r2, [pc, #228]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d3e:	f7fb f9f1 	bl	8001124 <HAL_GetTick>
 8005d42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d44:	e009      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d46:	f7fb f9ed 	bl	8001124 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d902      	bls.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	74fb      	strb	r3, [r7, #19]
        break;
 8005d58:	e005      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d5a:	4b30      	ldr	r3, [pc, #192]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0ef      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d66:	7cfb      	ldrb	r3, [r7, #19]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d159      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01e      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d019      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d88:	4b23      	ldr	r3, [pc, #140]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d94:	4b20      	ldr	r3, [pc, #128]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005da4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005daa:	4a1b      	ldr	r2, [pc, #108]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005db4:	4a18      	ldr	r2, [pc, #96]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d016      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc6:	f7fb f9ad 	bl	8001124 <HAL_GetTick>
 8005dca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dcc:	e00b      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dce:	f7fb f9a9 	bl	8001124 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d902      	bls.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	74fb      	strb	r3, [r7, #19]
            break;
 8005de4:	e006      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0ec      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005df4:	7cfb      	ldrb	r3, [r7, #19]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dfa:	4b07      	ldr	r3, [pc, #28]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	4903      	ldr	r1, [pc, #12]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e10:	e008      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e12:	7cfb      	ldrb	r3, [r7, #19]
 8005e14:	74bb      	strb	r3, [r7, #18]
 8005e16:	e005      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e20:	7cfb      	ldrb	r3, [r7, #19]
 8005e22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e24:	7c7b      	ldrb	r3, [r7, #17]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d105      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2a:	4ba6      	ldr	r3, [pc, #664]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2e:	4aa5      	ldr	r2, [pc, #660]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e42:	4ba0      	ldr	r3, [pc, #640]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e48:	f023 0203 	bic.w	r2, r3, #3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	499c      	ldr	r1, [pc, #624]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e64:	4b97      	ldr	r3, [pc, #604]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6a:	f023 020c 	bic.w	r2, r3, #12
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	4994      	ldr	r1, [pc, #592]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e86:	4b8f      	ldr	r3, [pc, #572]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	498b      	ldr	r1, [pc, #556]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ea8:	4b86      	ldr	r3, [pc, #536]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	4983      	ldr	r1, [pc, #524]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eca:	4b7e      	ldr	r3, [pc, #504]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	497a      	ldr	r1, [pc, #488]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eec:	4b75      	ldr	r3, [pc, #468]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	4972      	ldr	r1, [pc, #456]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	4969      	ldr	r1, [pc, #420]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f30:	4b64      	ldr	r3, [pc, #400]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	4961      	ldr	r1, [pc, #388]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f52:	4b5c      	ldr	r3, [pc, #368]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	4958      	ldr	r1, [pc, #352]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d015      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f74:	4b53      	ldr	r3, [pc, #332]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	4950      	ldr	r1, [pc, #320]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f94:	4b4b      	ldr	r3, [pc, #300]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4a4a      	ldr	r2, [pc, #296]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d015      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fac:	4b45      	ldr	r3, [pc, #276]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fba:	4942      	ldr	r1, [pc, #264]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fca:	d105      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fd6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d015      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fe4:	4b37      	ldr	r3, [pc, #220]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff2:	4934      	ldr	r1, [pc, #208]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006002:	d105      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006004:	4b2f      	ldr	r3, [pc, #188]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4a2e      	ldr	r2, [pc, #184]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800600e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d015      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800601c:	4b29      	ldr	r3, [pc, #164]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006022:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602a:	4926      	ldr	r1, [pc, #152]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800603a:	d105      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800603c:	4b21      	ldr	r3, [pc, #132]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a20      	ldr	r2, [pc, #128]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006046:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006054:	4b1b      	ldr	r3, [pc, #108]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006062:	4918      	ldr	r1, [pc, #96]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006072:	d105      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006074:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4a12      	ldr	r2, [pc, #72]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800607e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d015      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800608c:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006092:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609a:	490a      	ldr	r1, [pc, #40]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060aa:	d105      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060ac:	4b05      	ldr	r3, [pc, #20]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4a04      	ldr	r2, [pc, #16]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80060b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40021000 	.word	0x40021000

080060c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e049      	b.n	800616e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fa fea8 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f000 f898 	bl	800623c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d001      	beq.n	8006190 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e042      	b.n	8006216 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a21      	ldr	r2, [pc, #132]	@ (8006224 <HAL_TIM_Base_Start+0xac>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d018      	beq.n	80061d4 <HAL_TIM_Base_Start+0x5c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061aa:	d013      	beq.n	80061d4 <HAL_TIM_Base_Start+0x5c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006228 <HAL_TIM_Base_Start+0xb0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00e      	beq.n	80061d4 <HAL_TIM_Base_Start+0x5c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1c      	ldr	r2, [pc, #112]	@ (800622c <HAL_TIM_Base_Start+0xb4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d009      	beq.n	80061d4 <HAL_TIM_Base_Start+0x5c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006230 <HAL_TIM_Base_Start+0xb8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d004      	beq.n	80061d4 <HAL_TIM_Base_Start+0x5c>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a19      	ldr	r2, [pc, #100]	@ (8006234 <HAL_TIM_Base_Start+0xbc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d115      	bne.n	8006200 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	4b17      	ldr	r3, [pc, #92]	@ (8006238 <HAL_TIM_Base_Start+0xc0>)
 80061dc:	4013      	ands	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b06      	cmp	r3, #6
 80061e4:	d015      	beq.n	8006212 <HAL_TIM_Base_Start+0x9a>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ec:	d011      	beq.n	8006212 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0201 	orr.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fe:	e008      	b.n	8006212 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e000      	b.n	8006214 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40013400 	.word	0x40013400
 8006234:	40014000 	.word	0x40014000
 8006238:	00010007 	.word	0x00010007

0800623c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a42      	ldr	r2, [pc, #264]	@ (8006358 <TIM_Base_SetConfig+0x11c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00f      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800625a:	d00b      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a3f      	ldr	r2, [pc, #252]	@ (800635c <TIM_Base_SetConfig+0x120>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d007      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a3e      	ldr	r2, [pc, #248]	@ (8006360 <TIM_Base_SetConfig+0x124>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3d      	ldr	r2, [pc, #244]	@ (8006364 <TIM_Base_SetConfig+0x128>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d108      	bne.n	8006286 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a33      	ldr	r2, [pc, #204]	@ (8006358 <TIM_Base_SetConfig+0x11c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d01b      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006294:	d017      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a30      	ldr	r2, [pc, #192]	@ (800635c <TIM_Base_SetConfig+0x120>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006360 <TIM_Base_SetConfig+0x124>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00f      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006364 <TIM_Base_SetConfig+0x128>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00b      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006368 <TIM_Base_SetConfig+0x12c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d007      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2c      	ldr	r2, [pc, #176]	@ (800636c <TIM_Base_SetConfig+0x130>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d003      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006370 <TIM_Base_SetConfig+0x134>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d108      	bne.n	80062d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a16      	ldr	r2, [pc, #88]	@ (8006358 <TIM_Base_SetConfig+0x11c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00f      	beq.n	8006324 <TIM_Base_SetConfig+0xe8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a17      	ldr	r2, [pc, #92]	@ (8006364 <TIM_Base_SetConfig+0x128>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_Base_SetConfig+0xe8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a16      	ldr	r2, [pc, #88]	@ (8006368 <TIM_Base_SetConfig+0x12c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_Base_SetConfig+0xe8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a15      	ldr	r2, [pc, #84]	@ (800636c <TIM_Base_SetConfig+0x130>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_Base_SetConfig+0xe8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a14      	ldr	r2, [pc, #80]	@ (8006370 <TIM_Base_SetConfig+0x134>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d103      	bne.n	800632c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b01      	cmp	r3, #1
 800633c:	d105      	bne.n	800634a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f023 0201 	bic.w	r2, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	611a      	str	r2, [r3, #16]
  }
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40013400 	.word	0x40013400
 8006368:	40014000 	.word	0x40014000
 800636c:	40014400 	.word	0x40014400
 8006370:	40014800 	.word	0x40014800

08006374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006388:	2302      	movs	r3, #2
 800638a:	e065      	b.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d004      	beq.n	80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a2b      	ldr	r2, [pc, #172]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d108      	bne.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d018      	beq.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006402:	d013      	beq.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a18      	ldr	r2, [pc, #96]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00e      	beq.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d009      	beq.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a12      	ldr	r2, [pc, #72]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a13      	ldr	r2, [pc, #76]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d10c      	bne.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006432:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	4313      	orrs	r3, r2
 800643c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40013400 	.word	0x40013400
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800
 8006474:	40014000 	.word	0x40014000

08006478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e042      	b.n	8006510 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fa fd3d 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2224      	movs	r2, #36	@ 0x24
 80064a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0201 	bic.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 faf4 	bl	8006ab0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f825 	bl	8006518 <UART_SetConfig>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e01b      	b.n	8006510 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fb73 	bl	8006bf4 <UART_CheckIdleState>
 800650e:	4603      	mov	r3, r0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800651c:	b08c      	sub	sp, #48	@ 0x30
 800651e:	af00      	add	r7, sp, #0
 8006520:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	431a      	orrs	r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	431a      	orrs	r2, r3
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	4313      	orrs	r3, r2
 800653e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4bab      	ldr	r3, [pc, #684]	@ (80067f4 <UART_SetConfig+0x2dc>)
 8006548:	4013      	ands	r3, r2
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	6812      	ldr	r2, [r2, #0]
 800654e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006550:	430b      	orrs	r3, r1
 8006552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4aa0      	ldr	r2, [pc, #640]	@ (80067f8 <UART_SetConfig+0x2e0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006580:	4313      	orrs	r3, r2
 8006582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800658e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006598:	430b      	orrs	r3, r1
 800659a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	f023 010f 	bic.w	r1, r3, #15
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a91      	ldr	r2, [pc, #580]	@ (80067fc <UART_SetConfig+0x2e4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d125      	bne.n	8006608 <UART_SetConfig+0xf0>
 80065bc:	4b90      	ldr	r3, [pc, #576]	@ (8006800 <UART_SetConfig+0x2e8>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d81a      	bhi.n	8006600 <UART_SetConfig+0xe8>
 80065ca:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <UART_SetConfig+0xb8>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	080065e1 	.word	0x080065e1
 80065d4:	080065f1 	.word	0x080065f1
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	080065f9 	.word	0x080065f9
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065e6:	e0d6      	b.n	8006796 <UART_SetConfig+0x27e>
 80065e8:	2302      	movs	r3, #2
 80065ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ee:	e0d2      	b.n	8006796 <UART_SetConfig+0x27e>
 80065f0:	2304      	movs	r3, #4
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065f6:	e0ce      	b.n	8006796 <UART_SetConfig+0x27e>
 80065f8:	2308      	movs	r3, #8
 80065fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065fe:	e0ca      	b.n	8006796 <UART_SetConfig+0x27e>
 8006600:	2310      	movs	r3, #16
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006606:	e0c6      	b.n	8006796 <UART_SetConfig+0x27e>
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a7d      	ldr	r2, [pc, #500]	@ (8006804 <UART_SetConfig+0x2ec>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d138      	bne.n	8006684 <UART_SetConfig+0x16c>
 8006612:	4b7b      	ldr	r3, [pc, #492]	@ (8006800 <UART_SetConfig+0x2e8>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006618:	f003 030c 	and.w	r3, r3, #12
 800661c:	2b0c      	cmp	r3, #12
 800661e:	d82d      	bhi.n	800667c <UART_SetConfig+0x164>
 8006620:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <UART_SetConfig+0x110>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	0800665d 	.word	0x0800665d
 800662c:	0800667d 	.word	0x0800667d
 8006630:	0800667d 	.word	0x0800667d
 8006634:	0800667d 	.word	0x0800667d
 8006638:	0800666d 	.word	0x0800666d
 800663c:	0800667d 	.word	0x0800667d
 8006640:	0800667d 	.word	0x0800667d
 8006644:	0800667d 	.word	0x0800667d
 8006648:	08006665 	.word	0x08006665
 800664c:	0800667d 	.word	0x0800667d
 8006650:	0800667d 	.word	0x0800667d
 8006654:	0800667d 	.word	0x0800667d
 8006658:	08006675 	.word	0x08006675
 800665c:	2300      	movs	r3, #0
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006662:	e098      	b.n	8006796 <UART_SetConfig+0x27e>
 8006664:	2302      	movs	r3, #2
 8006666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800666a:	e094      	b.n	8006796 <UART_SetConfig+0x27e>
 800666c:	2304      	movs	r3, #4
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006672:	e090      	b.n	8006796 <UART_SetConfig+0x27e>
 8006674:	2308      	movs	r3, #8
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800667a:	e08c      	b.n	8006796 <UART_SetConfig+0x27e>
 800667c:	2310      	movs	r3, #16
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006682:	e088      	b.n	8006796 <UART_SetConfig+0x27e>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a5f      	ldr	r2, [pc, #380]	@ (8006808 <UART_SetConfig+0x2f0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d125      	bne.n	80066da <UART_SetConfig+0x1c2>
 800668e:	4b5c      	ldr	r3, [pc, #368]	@ (8006800 <UART_SetConfig+0x2e8>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006694:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006698:	2b30      	cmp	r3, #48	@ 0x30
 800669a:	d016      	beq.n	80066ca <UART_SetConfig+0x1b2>
 800669c:	2b30      	cmp	r3, #48	@ 0x30
 800669e:	d818      	bhi.n	80066d2 <UART_SetConfig+0x1ba>
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d00a      	beq.n	80066ba <UART_SetConfig+0x1a2>
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d814      	bhi.n	80066d2 <UART_SetConfig+0x1ba>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <UART_SetConfig+0x19a>
 80066ac:	2b10      	cmp	r3, #16
 80066ae:	d008      	beq.n	80066c2 <UART_SetConfig+0x1aa>
 80066b0:	e00f      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80066b2:	2300      	movs	r3, #0
 80066b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b8:	e06d      	b.n	8006796 <UART_SetConfig+0x27e>
 80066ba:	2302      	movs	r3, #2
 80066bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c0:	e069      	b.n	8006796 <UART_SetConfig+0x27e>
 80066c2:	2304      	movs	r3, #4
 80066c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c8:	e065      	b.n	8006796 <UART_SetConfig+0x27e>
 80066ca:	2308      	movs	r3, #8
 80066cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d0:	e061      	b.n	8006796 <UART_SetConfig+0x27e>
 80066d2:	2310      	movs	r3, #16
 80066d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d8:	e05d      	b.n	8006796 <UART_SetConfig+0x27e>
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a4b      	ldr	r2, [pc, #300]	@ (800680c <UART_SetConfig+0x2f4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d125      	bne.n	8006730 <UART_SetConfig+0x218>
 80066e4:	4b46      	ldr	r3, [pc, #280]	@ (8006800 <UART_SetConfig+0x2e8>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80066f0:	d016      	beq.n	8006720 <UART_SetConfig+0x208>
 80066f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80066f4:	d818      	bhi.n	8006728 <UART_SetConfig+0x210>
 80066f6:	2b80      	cmp	r3, #128	@ 0x80
 80066f8:	d00a      	beq.n	8006710 <UART_SetConfig+0x1f8>
 80066fa:	2b80      	cmp	r3, #128	@ 0x80
 80066fc:	d814      	bhi.n	8006728 <UART_SetConfig+0x210>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <UART_SetConfig+0x1f0>
 8006702:	2b40      	cmp	r3, #64	@ 0x40
 8006704:	d008      	beq.n	8006718 <UART_SetConfig+0x200>
 8006706:	e00f      	b.n	8006728 <UART_SetConfig+0x210>
 8006708:	2300      	movs	r3, #0
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670e:	e042      	b.n	8006796 <UART_SetConfig+0x27e>
 8006710:	2302      	movs	r3, #2
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006716:	e03e      	b.n	8006796 <UART_SetConfig+0x27e>
 8006718:	2304      	movs	r3, #4
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671e:	e03a      	b.n	8006796 <UART_SetConfig+0x27e>
 8006720:	2308      	movs	r3, #8
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006726:	e036      	b.n	8006796 <UART_SetConfig+0x27e>
 8006728:	2310      	movs	r3, #16
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672e:	e032      	b.n	8006796 <UART_SetConfig+0x27e>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a30      	ldr	r2, [pc, #192]	@ (80067f8 <UART_SetConfig+0x2e0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d12a      	bne.n	8006790 <UART_SetConfig+0x278>
 800673a:	4b31      	ldr	r3, [pc, #196]	@ (8006800 <UART_SetConfig+0x2e8>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006740:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006744:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006748:	d01a      	beq.n	8006780 <UART_SetConfig+0x268>
 800674a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800674e:	d81b      	bhi.n	8006788 <UART_SetConfig+0x270>
 8006750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006754:	d00c      	beq.n	8006770 <UART_SetConfig+0x258>
 8006756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800675a:	d815      	bhi.n	8006788 <UART_SetConfig+0x270>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <UART_SetConfig+0x250>
 8006760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006764:	d008      	beq.n	8006778 <UART_SetConfig+0x260>
 8006766:	e00f      	b.n	8006788 <UART_SetConfig+0x270>
 8006768:	2300      	movs	r3, #0
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676e:	e012      	b.n	8006796 <UART_SetConfig+0x27e>
 8006770:	2302      	movs	r3, #2
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006776:	e00e      	b.n	8006796 <UART_SetConfig+0x27e>
 8006778:	2304      	movs	r3, #4
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677e:	e00a      	b.n	8006796 <UART_SetConfig+0x27e>
 8006780:	2308      	movs	r3, #8
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006786:	e006      	b.n	8006796 <UART_SetConfig+0x27e>
 8006788:	2310      	movs	r3, #16
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678e:	e002      	b.n	8006796 <UART_SetConfig+0x27e>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a17      	ldr	r2, [pc, #92]	@ (80067f8 <UART_SetConfig+0x2e0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	f040 80a8 	bne.w	80068f2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d834      	bhi.n	8006814 <UART_SetConfig+0x2fc>
 80067aa:	a201      	add	r2, pc, #4	@ (adr r2, 80067b0 <UART_SetConfig+0x298>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	08006815 	.word	0x08006815
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	08006815 	.word	0x08006815
 80067c0:	080067e3 	.word	0x080067e3
 80067c4:	08006815 	.word	0x08006815
 80067c8:	08006815 	.word	0x08006815
 80067cc:	08006815 	.word	0x08006815
 80067d0:	080067eb 	.word	0x080067eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d4:	f7ff fa16 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 80067d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067da:	e021      	b.n	8006820 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006810 <UART_SetConfig+0x2f8>)
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067e0:	e01e      	b.n	8006820 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e2:	f7ff f9a1 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 80067e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067e8:	e01a      	b.n	8006820 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067f0:	e016      	b.n	8006820 <UART_SetConfig+0x308>
 80067f2:	bf00      	nop
 80067f4:	cfff69f3 	.word	0xcfff69f3
 80067f8:	40008000 	.word	0x40008000
 80067fc:	40013800 	.word	0x40013800
 8006800:	40021000 	.word	0x40021000
 8006804:	40004400 	.word	0x40004400
 8006808:	40004800 	.word	0x40004800
 800680c:	40004c00 	.word	0x40004c00
 8006810:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800681e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 812a 	beq.w	8006a7c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682c:	4a9e      	ldr	r2, [pc, #632]	@ (8006aa8 <UART_SetConfig+0x590>)
 800682e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006832:	461a      	mov	r2, r3
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	fbb3 f3f2 	udiv	r3, r3, r2
 800683a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	4413      	add	r3, r2
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	429a      	cmp	r2, r3
 800684a:	d305      	bcc.n	8006858 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	429a      	cmp	r2, r3
 8006856:	d903      	bls.n	8006860 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800685e:	e10d      	b.n	8006a7c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	2200      	movs	r2, #0
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	60fa      	str	r2, [r7, #12]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	4a8e      	ldr	r2, [pc, #568]	@ (8006aa8 <UART_SetConfig+0x590>)
 800686e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006872:	b29b      	uxth	r3, r3
 8006874:	2200      	movs	r2, #0
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006882:	f7f9 fd1d 	bl	80002c0 <__aeabi_uldivmod>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	020b      	lsls	r3, r1, #8
 8006898:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800689c:	0202      	lsls	r2, r0, #8
 800689e:	6979      	ldr	r1, [r7, #20]
 80068a0:	6849      	ldr	r1, [r1, #4]
 80068a2:	0849      	lsrs	r1, r1, #1
 80068a4:	2000      	movs	r0, #0
 80068a6:	460c      	mov	r4, r1
 80068a8:	4605      	mov	r5, r0
 80068aa:	eb12 0804 	adds.w	r8, r2, r4
 80068ae:	eb43 0905 	adc.w	r9, r3, r5
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	469a      	mov	sl, r3
 80068ba:	4693      	mov	fp, r2
 80068bc:	4652      	mov	r2, sl
 80068be:	465b      	mov	r3, fp
 80068c0:	4640      	mov	r0, r8
 80068c2:	4649      	mov	r1, r9
 80068c4:	f7f9 fcfc 	bl	80002c0 <__aeabi_uldivmod>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4613      	mov	r3, r2
 80068ce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068d6:	d308      	bcc.n	80068ea <UART_SetConfig+0x3d2>
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068de:	d204      	bcs.n	80068ea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6a3a      	ldr	r2, [r7, #32]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	e0c8      	b.n	8006a7c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068f0:	e0c4      	b.n	8006a7c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068fa:	d167      	bne.n	80069cc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80068fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006900:	2b08      	cmp	r3, #8
 8006902:	d828      	bhi.n	8006956 <UART_SetConfig+0x43e>
 8006904:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x3f4>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006931 	.word	0x08006931
 8006910:	08006939 	.word	0x08006939
 8006914:	08006941 	.word	0x08006941
 8006918:	08006957 	.word	0x08006957
 800691c:	08006947 	.word	0x08006947
 8006920:	08006957 	.word	0x08006957
 8006924:	08006957 	.word	0x08006957
 8006928:	08006957 	.word	0x08006957
 800692c:	0800694f 	.word	0x0800694f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006930:	f7ff f968 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8006934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006936:	e014      	b.n	8006962 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006938:	f7ff f97a 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 800693c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800693e:	e010      	b.n	8006962 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006940:	4b5a      	ldr	r3, [pc, #360]	@ (8006aac <UART_SetConfig+0x594>)
 8006942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006944:	e00d      	b.n	8006962 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006946:	f7ff f8ef 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 800694a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800694c:	e009      	b.n	8006962 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006954:	e005      	b.n	8006962 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 8089 	beq.w	8006a7c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696e:	4a4e      	ldr	r2, [pc, #312]	@ (8006aa8 <UART_SetConfig+0x590>)
 8006970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006974:	461a      	mov	r2, r3
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	fbb3 f3f2 	udiv	r3, r3, r2
 800697c:	005a      	lsls	r2, r3, #1
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	085b      	lsrs	r3, r3, #1
 8006984:	441a      	add	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	fbb2 f3f3 	udiv	r3, r2, r3
 800698e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	2b0f      	cmp	r3, #15
 8006994:	d916      	bls.n	80069c4 <UART_SetConfig+0x4ac>
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800699c:	d212      	bcs.n	80069c4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f023 030f 	bic.w	r3, r3, #15
 80069a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	8bfb      	ldrh	r3, [r7, #30]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	8bfa      	ldrh	r2, [r7, #30]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	e05b      	b.n	8006a7c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069ca:	e057      	b.n	8006a7c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d828      	bhi.n	8006a26 <UART_SetConfig+0x50e>
 80069d4:	a201      	add	r2, pc, #4	@ (adr r2, 80069dc <UART_SetConfig+0x4c4>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	08006a01 	.word	0x08006a01
 80069e0:	08006a09 	.word	0x08006a09
 80069e4:	08006a11 	.word	0x08006a11
 80069e8:	08006a27 	.word	0x08006a27
 80069ec:	08006a17 	.word	0x08006a17
 80069f0:	08006a27 	.word	0x08006a27
 80069f4:	08006a27 	.word	0x08006a27
 80069f8:	08006a27 	.word	0x08006a27
 80069fc:	08006a1f 	.word	0x08006a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a00:	f7ff f900 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8006a04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a06:	e014      	b.n	8006a32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a08:	f7ff f912 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 8006a0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a0e:	e010      	b.n	8006a32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a10:	4b26      	ldr	r3, [pc, #152]	@ (8006aac <UART_SetConfig+0x594>)
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a14:	e00d      	b.n	8006a32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a16:	f7ff f887 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8006a1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a1c:	e009      	b.n	8006a32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a24:	e005      	b.n	8006a32 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a30:	bf00      	nop
    }

    if (pclk != 0U)
 8006a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d021      	beq.n	8006a7c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa8 <UART_SetConfig+0x590>)
 8006a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	441a      	add	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	2b0f      	cmp	r3, #15
 8006a60:	d909      	bls.n	8006a76 <UART_SetConfig+0x55e>
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a68:	d205      	bcs.n	8006a76 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60da      	str	r2, [r3, #12]
 8006a74:	e002      	b.n	8006a7c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2200      	movs	r2, #0
 8006a96:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006a98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3730      	adds	r7, #48	@ 0x30
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aa6:	bf00      	nop
 8006aa8:	0800c448 	.word	0x0800c448
 8006aac:	00f42400 	.word	0x00f42400

08006ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01a      	beq.n	8006bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bae:	d10a      	bne.n	8006bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  }
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b098      	sub	sp, #96	@ 0x60
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c04:	f7fa fa8e 	bl	8001124 <HAL_GetTick>
 8006c08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d12f      	bne.n	8006c78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c20:	2200      	movs	r2, #0
 8006c22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f88e 	bl	8006d48 <UART_WaitOnFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d022      	beq.n	8006c78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e6      	bne.n	8006c32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e063      	b.n	8006d40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d149      	bne.n	8006d1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f857 	bl	8006d48 <UART_WaitOnFlagUntilTimeout>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d03c      	beq.n	8006d1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	623b      	str	r3, [r7, #32]
   return(result);
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e6      	bne.n	8006ca0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	e853 3f00 	ldrex	r3, [r3]
 8006ce0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3308      	adds	r3, #8
 8006cf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cf2:	61fa      	str	r2, [r7, #28]
 8006cf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf6:	69b9      	ldr	r1, [r7, #24]
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	617b      	str	r3, [r7, #20]
   return(result);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1e5      	bne.n	8006cd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e012      	b.n	8006d40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3758      	adds	r7, #88	@ 0x58
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d58:	e04f      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d04b      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d62:	f7fa f9df 	bl	8001124 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d302      	bcc.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e04e      	b.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d037      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b80      	cmp	r3, #128	@ 0x80
 8006d8e:	d034      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b40      	cmp	r3, #64	@ 0x40
 8006d94:	d031      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d110      	bne.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2208      	movs	r2, #8
 8006daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 f838 	bl	8006e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2208      	movs	r2, #8
 8006db6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e029      	b.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd4:	d111      	bne.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 f81e 	bl	8006e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e00f      	b.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69da      	ldr	r2, [r3, #28]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4013      	ands	r3, r2
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	bf0c      	ite	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d0a0      	beq.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b095      	sub	sp, #84	@ 0x54
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e6      	bne.n	8006e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e3      	bne.n	8006e5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d118      	bne.n	8006ece <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f023 0310 	bic.w	r3, r3, #16
 8006eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6979      	ldr	r1, [r7, #20]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e6      	bne.n	8006e9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ee2:	bf00      	nop
 8006ee4:	3754      	adds	r7, #84	@ 0x54
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e027      	b.n	8006f54 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2224      	movs	r2, #36	@ 0x24
 8006f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0201 	bic.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e02d      	b.n	8006fd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2224      	movs	r2, #36	@ 0x24
 8006f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0201 	bic.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f84f 	bl	8007058 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	e02d      	b.n	8007050 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2224      	movs	r2, #36	@ 0x24
 8007000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0201 	bic.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f811 	bl	8007058 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007064:	2b00      	cmp	r3, #0
 8007066:	d108      	bne.n	800707a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007078:	e031      	b.n	80070de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800707a:	2308      	movs	r3, #8
 800707c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800707e:	2308      	movs	r3, #8
 8007080:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	0e5b      	lsrs	r3, r3, #25
 800708a:	b2db      	uxtb	r3, r3
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	0f5b      	lsrs	r3, r3, #29
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	7b3a      	ldrb	r2, [r7, #12]
 80070a6:	4911      	ldr	r1, [pc, #68]	@ (80070ec <UARTEx_SetNbDataToProcess+0x94>)
 80070a8:	5c8a      	ldrb	r2, [r1, r2]
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070ae:	7b3a      	ldrb	r2, [r7, #12]
 80070b0:	490f      	ldr	r1, [pc, #60]	@ (80070f0 <UARTEx_SetNbDataToProcess+0x98>)
 80070b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	7b7a      	ldrb	r2, [r7, #13]
 80070c4:	4909      	ldr	r1, [pc, #36]	@ (80070ec <UARTEx_SetNbDataToProcess+0x94>)
 80070c6:	5c8a      	ldrb	r2, [r1, r2]
 80070c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070cc:	7b7a      	ldrb	r2, [r7, #13]
 80070ce:	4908      	ldr	r1, [pc, #32]	@ (80070f0 <UARTEx_SetNbDataToProcess+0x98>)
 80070d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070de:	bf00      	nop
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	0800c460 	.word	0x0800c460
 80070f0:	0800c468 	.word	0x0800c468

080070f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007104:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007108:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	b29a      	uxth	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800712a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800712e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	b29b      	uxth	r3, r3
 800713c:	43db      	mvns	r3, r3
 800713e:	b29b      	uxth	r3, r3
 8007140:	4013      	ands	r3, r2
 8007142:	b29a      	uxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	1d3b      	adds	r3, r7, #4
 8007162:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2201      	movs	r2, #1
 800716a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007194:	b480      	push	{r7}
 8007196:	b09d      	sub	sp, #116	@ 0x74
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80071b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	78db      	ldrb	r3, [r3, #3]
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d81f      	bhi.n	8007206 <USB_ActivateEndpoint+0x72>
 80071c6:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <USB_ActivateEndpoint+0x38>)
 80071c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	080071f9 	.word	0x080071f9
 80071d4:	0800720f 	.word	0x0800720f
 80071d8:	080071eb 	.word	0x080071eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80071dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80071e8:	e012      	b.n	8007210 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80071ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071ee:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80071f2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80071f6:	e00b      	b.n	8007210 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80071f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007200:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007204:	e004      	b.n	8007210 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800720c:	e000      	b.n	8007210 <USB_ActivateEndpoint+0x7c>
      break;
 800720e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	441a      	add	r2, r3
 800721a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800721e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800722a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800722e:	b29b      	uxth	r3, r3
 8007230:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	b21b      	sxth	r3, r3
 8007242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724a:	b21a      	sxth	r2, r3
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	b21b      	sxth	r3, r3
 8007252:	4313      	orrs	r3, r2
 8007254:	b21b      	sxth	r3, r3
 8007256:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800726c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007278:	b29b      	uxth	r3, r3
 800727a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	7b1b      	ldrb	r3, [r3, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	f040 8178 	bne.w	8007576 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 8084 	beq.w	8007398 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	61bb      	str	r3, [r7, #24]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800729a:	b29b      	uxth	r3, r3
 800729c:	461a      	mov	r2, r3
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	4413      	add	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	00da      	lsls	r2, r3, #3
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	88db      	ldrh	r3, [r3, #6]
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	827b      	strh	r3, [r7, #18]
 80072d2:	8a7b      	ldrh	r3, [r7, #18]
 80072d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01b      	beq.n	8007314 <USB_ActivateEndpoint+0x180>
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f2:	823b      	strh	r3, [r7, #16]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	441a      	add	r2, r3
 80072fe:	8a3b      	ldrh	r3, [r7, #16]
 8007300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800730c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007310:	b29b      	uxth	r3, r3
 8007312:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	78db      	ldrb	r3, [r3, #3]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d020      	beq.n	800735e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800732e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007332:	81bb      	strh	r3, [r7, #12]
 8007334:	89bb      	ldrh	r3, [r7, #12]
 8007336:	f083 0320 	eor.w	r3, r3, #32
 800733a:	81bb      	strh	r3, [r7, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	441a      	add	r2, r3
 8007346:	89bb      	ldrh	r3, [r7, #12]
 8007348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800734c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007350:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007358:	b29b      	uxth	r3, r3
 800735a:	8013      	strh	r3, [r2, #0]
 800735c:	e2d5      	b.n	800790a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007374:	81fb      	strh	r3, [r7, #14]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	441a      	add	r2, r3
 8007380:	89fb      	ldrh	r3, [r7, #14]
 8007382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800738a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800738e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007392:	b29b      	uxth	r3, r3
 8007394:	8013      	strh	r3, [r2, #0]
 8007396:	e2b8      	b.n	800790a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	633b      	str	r3, [r7, #48]	@ 0x30
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	4413      	add	r3, r2
 80073aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	00da      	lsls	r2, r3, #3
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	4413      	add	r3, r2
 80073b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	88db      	ldrh	r3, [r3, #6]
 80073c0:	085b      	lsrs	r3, r3, #1
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073dc:	4413      	add	r3, r2
 80073de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	00da      	lsls	r2, r3, #3
 80073e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e8:	4413      	add	r3, r2
 80073ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b3e      	cmp	r3, #62	@ 0x3e
 8007406:	d91d      	bls.n	8007444 <USB_ActivateEndpoint+0x2b0>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	f003 031f 	and.w	r3, r3, #31
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <USB_ActivateEndpoint+0x28e>
 800741c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800741e:	3b01      	subs	r3, #1
 8007420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29a      	uxth	r2, r3
 8007428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800742a:	b29b      	uxth	r3, r3
 800742c:	029b      	lsls	r3, r3, #10
 800742e:	b29b      	uxth	r3, r3
 8007430:	4313      	orrs	r3, r2
 8007432:	b29b      	uxth	r3, r3
 8007434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743c:	b29a      	uxth	r2, r3
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	801a      	strh	r2, [r3, #0]
 8007442:	e026      	b.n	8007492 <USB_ActivateEndpoint+0x2fe>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <USB_ActivateEndpoint+0x2ce>
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745a:	b29a      	uxth	r2, r3
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	e017      	b.n	8007492 <USB_ActivateEndpoint+0x2fe>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <USB_ActivateEndpoint+0x2e8>
 8007476:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007478:	3301      	adds	r3, #1
 800747a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800747c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29a      	uxth	r2, r3
 8007482:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007484:	b29b      	uxth	r3, r3
 8007486:	029b      	lsls	r3, r3, #10
 8007488:	b29b      	uxth	r3, r3
 800748a:	4313      	orrs	r3, r2
 800748c:	b29a      	uxth	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80074a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80074a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01b      	beq.n	80074e2 <USB_ActivateEndpoint+0x34e>
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c0:	843b      	strh	r3, [r7, #32]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	441a      	add	r2, r3
 80074cc:	8c3b      	ldrh	r3, [r7, #32]
 80074ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074de:	b29b      	uxth	r3, r3
 80074e0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d124      	bne.n	8007534 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007500:	83bb      	strh	r3, [r7, #28]
 8007502:	8bbb      	ldrh	r3, [r7, #28]
 8007504:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007508:	83bb      	strh	r3, [r7, #28]
 800750a:	8bbb      	ldrh	r3, [r7, #28]
 800750c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007510:	83bb      	strh	r3, [r7, #28]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	441a      	add	r2, r3
 800751c:	8bbb      	ldrh	r3, [r7, #28]
 800751e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800752a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800752e:	b29b      	uxth	r3, r3
 8007530:	8013      	strh	r3, [r2, #0]
 8007532:	e1ea      	b.n	800790a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800754a:	83fb      	strh	r3, [r7, #30]
 800754c:	8bfb      	ldrh	r3, [r7, #30]
 800754e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007552:	83fb      	strh	r3, [r7, #30]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	441a      	add	r2, r3
 800755e:	8bfb      	ldrh	r3, [r7, #30]
 8007560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800756c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007570:	b29b      	uxth	r3, r3
 8007572:	8013      	strh	r3, [r2, #0]
 8007574:	e1c9      	b.n	800790a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	78db      	ldrb	r3, [r3, #3]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d11e      	bne.n	80075bc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007594:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	441a      	add	r2, r3
 80075a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80075a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075ae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80075b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	8013      	strh	r3, [r2, #0]
 80075ba:	e01d      	b.n	80075f8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80075ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	441a      	add	r2, r3
 80075e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80075e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007602:	b29b      	uxth	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007608:	4413      	add	r3, r2
 800760a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	00da      	lsls	r2, r3, #3
 8007612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007614:	4413      	add	r3, r2
 8007616:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800761a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	891b      	ldrh	r3, [r3, #8]
 8007620:	085b      	lsrs	r3, r3, #1
 8007622:	b29b      	uxth	r3, r3
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800762a:	801a      	strh	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007636:	b29b      	uxth	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800763c:	4413      	add	r3, r2
 800763e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	00da      	lsls	r2, r3, #3
 8007646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007648:	4413      	add	r3, r2
 800764a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800764e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	895b      	ldrh	r3, [r3, #10]
 8007654:	085b      	lsrs	r3, r3, #1
 8007656:	b29b      	uxth	r3, r3
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800765e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	785b      	ldrb	r3, [r3, #1]
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 8093 	bne.w	8007790 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800767a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800767e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01b      	beq.n	80076be <USB_ActivateEndpoint+0x52a>
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	b29b      	uxth	r3, r3
 8007694:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800769c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	441a      	add	r2, r3
 80076a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80076aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80076cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80076ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d01b      	beq.n	800770e <USB_ActivateEndpoint+0x57a>
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	441a      	add	r2, r3
 80076f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80076fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007706:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800770a:	b29b      	uxth	r3, r3
 800770c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007724:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007726:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007728:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800772c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800772e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007730:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007734:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	441a      	add	r2, r3
 8007740:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800774a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800774e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007752:	b29b      	uxth	r3, r3
 8007754:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	b29b      	uxth	r3, r3
 8007764:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800776c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	441a      	add	r2, r3
 8007778:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800777a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800777e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778a:	b29b      	uxth	r3, r3
 800778c:	8013      	strh	r3, [r2, #0]
 800778e:	e0bc      	b.n	800790a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80077a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80077a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01d      	beq.n	80077e8 <USB_ActivateEndpoint+0x654>
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	441a      	add	r2, r3
 80077d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80077d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80077f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80077fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01d      	beq.n	8007840 <USB_ActivateEndpoint+0x6ac>
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	441a      	add	r2, r3
 8007828:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800782c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007838:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800783c:	b29b      	uxth	r3, r3
 800783e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	78db      	ldrb	r3, [r3, #3]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d024      	beq.n	8007892 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800785a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800785e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007862:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007866:	f083 0320 	eor.w	r3, r3, #32
 800786a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	441a      	add	r2, r3
 8007878:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800787c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800788c:	b29b      	uxth	r3, r3
 800788e:	8013      	strh	r3, [r2, #0]
 8007890:	e01d      	b.n	80078ce <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078a8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	441a      	add	r2, r3
 80078b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80078ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	441a      	add	r2, r3
 80078f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80078f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007906:	b29b      	uxth	r3, r3
 8007908:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800790a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800790e:	4618      	mov	r0, r3
 8007910:	3774      	adds	r7, #116	@ 0x74
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop

0800791c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800791c:	b480      	push	{r7}
 800791e:	b08d      	sub	sp, #52	@ 0x34
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	7b1b      	ldrb	r3, [r3, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f040 808e 	bne.w	8007a4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d044      	beq.n	80079c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	81bb      	strh	r3, [r7, #12]
 8007946:	89bb      	ldrh	r3, [r7, #12]
 8007948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01b      	beq.n	8007988 <USB_DeactivateEndpoint+0x6c>
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007966:	817b      	strh	r3, [r7, #10]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	441a      	add	r2, r3
 8007972:	897b      	ldrh	r3, [r7, #10]
 8007974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800797c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007980:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007984:	b29b      	uxth	r3, r3
 8007986:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800799a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800799e:	813b      	strh	r3, [r7, #8]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	441a      	add	r2, r3
 80079aa:	893b      	ldrh	r3, [r7, #8]
 80079ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079bc:	b29b      	uxth	r3, r3
 80079be:	8013      	strh	r3, [r2, #0]
 80079c0:	e192      	b.n	8007ce8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	827b      	strh	r3, [r7, #18]
 80079d0:	8a7b      	ldrh	r3, [r7, #18]
 80079d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d01b      	beq.n	8007a12 <USB_DeactivateEndpoint+0xf6>
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f0:	823b      	strh	r3, [r7, #16]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	441a      	add	r2, r3
 80079fc:	8a3b      	ldrh	r3, [r7, #16]
 80079fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a28:	81fb      	strh	r3, [r7, #14]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	441a      	add	r2, r3
 8007a34:	89fb      	ldrh	r3, [r7, #14]
 8007a36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	8013      	strh	r3, [r2, #0]
 8007a4a:	e14d      	b.n	8007ce8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f040 80a5 	bne.w	8007ba0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	843b      	strh	r3, [r7, #32]
 8007a64:	8c3b      	ldrh	r3, [r7, #32]
 8007a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01b      	beq.n	8007aa6 <USB_DeactivateEndpoint+0x18a>
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a84:	83fb      	strh	r3, [r7, #30]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	8bfb      	ldrh	r3, [r7, #30]
 8007a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	83bb      	strh	r3, [r7, #28]
 8007ab4:	8bbb      	ldrh	r3, [r7, #28]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d01b      	beq.n	8007af6 <USB_DeactivateEndpoint+0x1da>
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ad4:	837b      	strh	r3, [r7, #26]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	441a      	add	r2, r3
 8007ae0:	8b7b      	ldrh	r3, [r7, #26]
 8007ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0c:	833b      	strh	r3, [r7, #24]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	441a      	add	r2, r3
 8007b18:	8b3b      	ldrh	r3, [r7, #24]
 8007b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b44:	82fb      	strh	r3, [r7, #22]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	441a      	add	r2, r3
 8007b50:	8afb      	ldrh	r3, [r7, #22]
 8007b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b7c:	82bb      	strh	r3, [r7, #20]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	441a      	add	r2, r3
 8007b88:	8abb      	ldrh	r3, [r7, #20]
 8007b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	8013      	strh	r3, [r2, #0]
 8007b9e:	e0a3      	b.n	8007ce8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007bae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01b      	beq.n	8007bf0 <USB_DeactivateEndpoint+0x2d4>
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	441a      	add	r2, r3
 8007bda:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007be4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007bfe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d01b      	beq.n	8007c40 <USB_DeactivateEndpoint+0x324>
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	441a      	add	r2, r3
 8007c2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c56:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	441a      	add	r2, r3
 8007c62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	441a      	add	r2, r3
 8007c9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cc6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	441a      	add	r2, r3
 8007cd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007cd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3734      	adds	r7, #52	@ 0x34
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b0c2      	sub	sp, #264	@ 0x108
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d04:	6018      	str	r0, [r3, #0]
 8007d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	f040 86b7 	bne.w	8008a90 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699a      	ldr	r2, [r3, #24]
 8007d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d908      	bls.n	8007d50 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007d4e:	e007      	b.n	8007d60 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	7b1b      	ldrb	r3, [r3, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d13a      	bne.n	8007de6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6959      	ldr	r1, [r3, #20]
 8007d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	88da      	ldrh	r2, [r3, #6]
 8007d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d92:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d96:	6800      	ldr	r0, [r0, #0]
 8007d98:	f001 fc98 	bl	80096cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	613b      	str	r3, [r7, #16]
 8007da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	613b      	str	r3, [r7, #16]
 8007dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	00da      	lsls	r2, r3, #3
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	f000 be1f 	b.w	8008a24 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	78db      	ldrb	r3, [r3, #3]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	f040 8462 	bne.w	80086bc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6a1a      	ldr	r2, [r3, #32]
 8007e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	f240 83df 	bls.w	80085d4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e3c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	441a      	add	r2, r3
 8007e5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e66:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6a1a      	ldr	r2, [r3, #32]
 8007e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e82:	1ad2      	subs	r2, r2, r3
 8007e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 81c7 	beq.w	8008246 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	785b      	ldrb	r3, [r3, #1]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d177      	bne.n	8007fc4 <USB_EPStartXfer+0x2ce>
 8007ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef4:	4413      	add	r3, r2
 8007ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	00da      	lsls	r2, r3, #3
 8007f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f08:	4413      	add	r3, r2
 8007f0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f24:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f26:	d921      	bls.n	8007f6c <USB_EPStartXfer+0x276>
 8007f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2c:	095b      	lsrs	r3, r3, #5
 8007f2e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f36:	f003 031f 	and.w	r3, r3, #31
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d104      	bne.n	8007f48 <USB_EPStartXfer+0x252>
 8007f3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007f42:	3b01      	subs	r3, #1
 8007f44:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	029b      	lsls	r3, r3, #10
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	801a      	strh	r2, [r3, #0]
 8007f6a:	e050      	b.n	800800e <USB_EPStartXfer+0x318>
 8007f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <USB_EPStartXfer+0x294>
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f86:	801a      	strh	r2, [r3, #0]
 8007f88:	e041      	b.n	800800e <USB_EPStartXfer+0x318>
 8007f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <USB_EPStartXfer+0x2b4>
 8007fa0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	029b      	lsls	r3, r3, #10
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	e024      	b.n	800800e <USB_EPStartXfer+0x318>
 8007fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	785b      	ldrb	r3, [r3, #1]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d11c      	bne.n	800800e <USB_EPStartXfer+0x318>
 8007fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	4413      	add	r3, r2
 8007fea:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	00da      	lsls	r2, r3, #3
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008008:	b29a      	uxth	r2, r3
 800800a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800800e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	895b      	ldrh	r3, [r3, #10]
 800801a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800801e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6959      	ldr	r1, [r3, #20]
 800802a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802e:	b29b      	uxth	r3, r3
 8008030:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008034:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008038:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800803c:	6800      	ldr	r0, [r0, #0]
 800803e:	f001 fb45 	bl	80096cc <USB_WritePMA>
            ep->xfer_buff += len;
 8008042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695a      	ldr	r2, [r3, #20]
 800804e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008052:	441a      	add	r2, r3
 8008054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6a1a      	ldr	r2, [r3, #32]
 800806c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	429a      	cmp	r2, r3
 800807a:	d90f      	bls.n	800809c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800807c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6a1a      	ldr	r2, [r3, #32]
 8008088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808c:	1ad2      	subs	r2, r2, r3
 800808e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	621a      	str	r2, [r3, #32]
 800809a:	e00e      	b.n	80080ba <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800809c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80080ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2200      	movs	r2, #0
 80080b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d177      	bne.n	80081ba <USB_EPStartXfer+0x4c4>
 80080ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	4413      	add	r3, r2
 80080ec:	61bb      	str	r3, [r7, #24]
 80080ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	00da      	lsls	r2, r3, #3
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	4413      	add	r3, r2
 8008100:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008110:	b29a      	uxth	r2, r3
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811a:	2b3e      	cmp	r3, #62	@ 0x3e
 800811c:	d921      	bls.n	8008162 <USB_EPStartXfer+0x46c>
 800811e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008122:	095b      	lsrs	r3, r3, #5
 8008124:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	2b00      	cmp	r3, #0
 8008132:	d104      	bne.n	800813e <USB_EPStartXfer+0x448>
 8008134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008138:	3b01      	subs	r3, #1
 800813a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29a      	uxth	r2, r3
 8008144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008148:	b29b      	uxth	r3, r3
 800814a:	029b      	lsls	r3, r3, #10
 800814c:	b29b      	uxth	r3, r3
 800814e:	4313      	orrs	r3, r2
 8008150:	b29b      	uxth	r3, r3
 8008152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800815a:	b29a      	uxth	r2, r3
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	801a      	strh	r2, [r3, #0]
 8008160:	e056      	b.n	8008210 <USB_EPStartXfer+0x51a>
 8008162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10a      	bne.n	8008180 <USB_EPStartXfer+0x48a>
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	b29b      	uxth	r3, r3
 8008170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008178:	b29a      	uxth	r2, r3
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	801a      	strh	r2, [r3, #0]
 800817e:	e047      	b.n	8008210 <USB_EPStartXfer+0x51a>
 8008180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008184:	085b      	lsrs	r3, r3, #1
 8008186:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800818a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d004      	beq.n	80081a0 <USB_EPStartXfer+0x4aa>
 8008196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800819a:	3301      	adds	r3, #1
 800819c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	029b      	lsls	r3, r3, #10
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	4313      	orrs	r3, r2
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	801a      	strh	r2, [r3, #0]
 80081b8:	e02a      	b.n	8008210 <USB_EPStartXfer+0x51a>
 80081ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	785b      	ldrb	r3, [r3, #1]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d122      	bne.n	8008210 <USB_EPStartXfer+0x51a>
 80081ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	623b      	str	r3, [r7, #32]
 80081d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	461a      	mov	r2, r3
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	4413      	add	r3, r2
 80081ec:	623b      	str	r3, [r7, #32]
 80081ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	00da      	lsls	r2, r3, #3
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	4413      	add	r3, r2
 8008200:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008204:	61fb      	str	r3, [r7, #28]
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820a:	b29a      	uxth	r2, r3
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	891b      	ldrh	r3, [r3, #8]
 800821c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6959      	ldr	r1, [r3, #20]
 800822c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008230:	b29b      	uxth	r3, r3
 8008232:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008236:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800823a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800823e:	6800      	ldr	r0, [r0, #0]
 8008240:	f001 fa44 	bl	80096cc <USB_WritePMA>
 8008244:	e3ee      	b.n	8008a24 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	785b      	ldrb	r3, [r3, #1]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d177      	bne.n	8008346 <USB_EPStartXfer+0x650>
 8008256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008270:	b29b      	uxth	r3, r3
 8008272:	461a      	mov	r2, r3
 8008274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008276:	4413      	add	r3, r2
 8008278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800827a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	00da      	lsls	r2, r3, #3
 8008288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800828a:	4413      	add	r3, r2
 800828c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008290:	647b      	str	r3, [r7, #68]	@ 0x44
 8008292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	b29b      	uxth	r3, r3
 8008298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800829c:	b29a      	uxth	r2, r3
 800829e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80082a8:	d921      	bls.n	80082ee <USB_EPStartXfer+0x5f8>
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ae:	095b      	lsrs	r3, r3, #5
 80082b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80082b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b8:	f003 031f 	and.w	r3, r3, #31
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d104      	bne.n	80082ca <USB_EPStartXfer+0x5d4>
 80082c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80082c4:	3b01      	subs	r3, #1
 80082c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80082ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	029b      	lsls	r3, r3, #10
 80082d8:	b29b      	uxth	r3, r3
 80082da:	4313      	orrs	r3, r2
 80082dc:	b29b      	uxth	r3, r3
 80082de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ea:	801a      	strh	r2, [r3, #0]
 80082ec:	e056      	b.n	800839c <USB_EPStartXfer+0x6a6>
 80082ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10a      	bne.n	800830c <USB_EPStartXfer+0x616>
 80082f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008304:	b29a      	uxth	r2, r3
 8008306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008308:	801a      	strh	r2, [r3, #0]
 800830a:	e047      	b.n	800839c <USB_EPStartXfer+0x6a6>
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008310:	085b      	lsrs	r3, r3, #1
 8008312:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d004      	beq.n	800832c <USB_EPStartXfer+0x636>
 8008322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008326:	3301      	adds	r3, #1
 8008328:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800832c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b29a      	uxth	r2, r3
 8008332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008336:	b29b      	uxth	r3, r3
 8008338:	029b      	lsls	r3, r3, #10
 800833a:	b29b      	uxth	r3, r3
 800833c:	4313      	orrs	r3, r2
 800833e:	b29a      	uxth	r2, r3
 8008340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008342:	801a      	strh	r2, [r3, #0]
 8008344:	e02a      	b.n	800839c <USB_EPStartXfer+0x6a6>
 8008346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	785b      	ldrb	r3, [r3, #1]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d122      	bne.n	800839c <USB_EPStartXfer+0x6a6>
 8008356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	653b      	str	r3, [r7, #80]	@ 0x50
 8008362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008370:	b29b      	uxth	r3, r3
 8008372:	461a      	mov	r2, r3
 8008374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008376:	4413      	add	r3, r2
 8008378:	653b      	str	r3, [r7, #80]	@ 0x50
 800837a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	00da      	lsls	r2, r3, #3
 8008388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800838a:	4413      	add	r3, r2
 800838c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008396:	b29a      	uxth	r2, r3
 8008398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800839a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800839c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	891b      	ldrh	r3, [r3, #8]
 80083a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6959      	ldr	r1, [r3, #20]
 80083b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80083c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80083c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	f001 f97e 	bl	80096cc <USB_WritePMA>
            ep->xfer_buff += len;
 80083d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695a      	ldr	r2, [r3, #20]
 80083dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e0:	441a      	add	r2, r3
 80083e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80083ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6a1a      	ldr	r2, [r3, #32]
 80083fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	429a      	cmp	r2, r3
 8008408:	d90f      	bls.n	800842a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800840a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6a1a      	ldr	r2, [r3, #32]
 8008416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841a:	1ad2      	subs	r2, r2, r3
 800841c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	621a      	str	r2, [r3, #32]
 8008428:	e00e      	b.n	8008448 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800842a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800843a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2200      	movs	r2, #0
 8008446:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	643b      	str	r3, [r7, #64]	@ 0x40
 8008454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	785b      	ldrb	r3, [r3, #1]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d177      	bne.n	8008554 <USB_EPStartXfer+0x85e>
 8008464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008468:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008474:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800847e:	b29b      	uxth	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008484:	4413      	add	r3, r2
 8008486:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	00da      	lsls	r2, r3, #3
 8008496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008498:	4413      	add	r3, r2
 800849a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800849e:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ae:	801a      	strh	r2, [r3, #0]
 80084b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80084b6:	d921      	bls.n	80084fc <USB_EPStartXfer+0x806>
 80084b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084bc:	095b      	lsrs	r3, r3, #5
 80084be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80084c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d104      	bne.n	80084d8 <USB_EPStartXfer+0x7e2>
 80084ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d2:	3b01      	subs	r3, #1
 80084d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80084d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29a      	uxth	r2, r3
 80084de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	029b      	lsls	r3, r3, #10
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	4313      	orrs	r3, r2
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f8:	801a      	strh	r2, [r3, #0]
 80084fa:	e050      	b.n	800859e <USB_EPStartXfer+0x8a8>
 80084fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10a      	bne.n	800851a <USB_EPStartXfer+0x824>
 8008504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008506:	881b      	ldrh	r3, [r3, #0]
 8008508:	b29b      	uxth	r3, r3
 800850a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008512:	b29a      	uxth	r2, r3
 8008514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	e041      	b.n	800859e <USB_EPStartXfer+0x8a8>
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851e:	085b      	lsrs	r3, r3, #1
 8008520:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d004      	beq.n	800853a <USB_EPStartXfer+0x844>
 8008530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008534:	3301      	adds	r3, #1
 8008536:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800853a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	b29a      	uxth	r2, r3
 8008540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008544:	b29b      	uxth	r3, r3
 8008546:	029b      	lsls	r3, r3, #10
 8008548:	b29b      	uxth	r3, r3
 800854a:	4313      	orrs	r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008550:	801a      	strh	r2, [r3, #0]
 8008552:	e024      	b.n	800859e <USB_EPStartXfer+0x8a8>
 8008554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	785b      	ldrb	r3, [r3, #1]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d11c      	bne.n	800859e <USB_EPStartXfer+0x8a8>
 8008564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008568:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008572:	b29b      	uxth	r3, r3
 8008574:	461a      	mov	r2, r3
 8008576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008578:	4413      	add	r3, r2
 800857a:	643b      	str	r3, [r7, #64]	@ 0x40
 800857c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	00da      	lsls	r2, r3, #3
 800858a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800858c:	4413      	add	r3, r2
 800858e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008598:	b29a      	uxth	r2, r3
 800859a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800859c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800859e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	895b      	ldrh	r3, [r3, #10]
 80085aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6959      	ldr	r1, [r3, #20]
 80085ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80085c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80085c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80085cc:	6800      	ldr	r0, [r0, #0]
 80085ce:	f001 f87d 	bl	80096cc <USB_WritePMA>
 80085d2:	e227      	b.n	8008a24 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80085d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80085e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800860a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800860e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	441a      	add	r2, r3
 8008628:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800862c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800863c:	b29b      	uxth	r3, r3
 800863e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800864c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800865a:	b29b      	uxth	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008660:	4413      	add	r3, r2
 8008662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	00da      	lsls	r2, r3, #3
 8008672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008674:	4413      	add	r3, r2
 8008676:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800867a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800867c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008680:	b29a      	uxth	r2, r3
 8008682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008684:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	891b      	ldrh	r3, [r3, #8]
 8008692:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6959      	ldr	r1, [r3, #20]
 80086a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086ac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80086b0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80086b4:	6800      	ldr	r0, [r0, #0]
 80086b6:	f001 f809 	bl	80096cc <USB_WritePMA>
 80086ba:	e1b3      	b.n	8008a24 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80086bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6a1a      	ldr	r2, [r3, #32]
 80086c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086cc:	1ad2      	subs	r2, r2, r3
 80086ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80086da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 80c6 	beq.w	800888e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	673b      	str	r3, [r7, #112]	@ 0x70
 800870e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d177      	bne.n	800880e <USB_EPStartXfer+0xb18>
 800871e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	66bb      	str	r3, [r7, #104]	@ 0x68
 800872a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008738:	b29b      	uxth	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800873e:	4413      	add	r3, r2
 8008740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	00da      	lsls	r2, r3, #3
 8008750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008752:	4413      	add	r3, r2
 8008754:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008758:	667b      	str	r3, [r7, #100]	@ 0x64
 800875a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29b      	uxth	r3, r3
 8008760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008764:	b29a      	uxth	r2, r3
 8008766:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008768:	801a      	strh	r2, [r3, #0]
 800876a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800876e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008770:	d921      	bls.n	80087b6 <USB_EPStartXfer+0xac0>
 8008772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008776:	095b      	lsrs	r3, r3, #5
 8008778:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008780:	f003 031f 	and.w	r3, r3, #31
 8008784:	2b00      	cmp	r3, #0
 8008786:	d104      	bne.n	8008792 <USB_EPStartXfer+0xa9c>
 8008788:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800878c:	3b01      	subs	r3, #1
 800878e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	b29a      	uxth	r2, r3
 8008798:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800879c:	b29b      	uxth	r3, r3
 800879e:	029b      	lsls	r3, r3, #10
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	4313      	orrs	r3, r2
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	e050      	b.n	8008858 <USB_EPStartXfer+0xb62>
 80087b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10a      	bne.n	80087d4 <USB_EPStartXfer+0xade>
 80087be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087d0:	801a      	strh	r2, [r3, #0]
 80087d2:	e041      	b.n	8008858 <USB_EPStartXfer+0xb62>
 80087d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d8:	085b      	lsrs	r3, r3, #1
 80087da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80087de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d004      	beq.n	80087f4 <USB_EPStartXfer+0xafe>
 80087ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80087ee:	3301      	adds	r3, #1
 80087f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80087f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80087fe:	b29b      	uxth	r3, r3
 8008800:	029b      	lsls	r3, r3, #10
 8008802:	b29b      	uxth	r3, r3
 8008804:	4313      	orrs	r3, r2
 8008806:	b29a      	uxth	r2, r3
 8008808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	e024      	b.n	8008858 <USB_EPStartXfer+0xb62>
 800880e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d11c      	bne.n	8008858 <USB_EPStartXfer+0xb62>
 800881e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800882c:	b29b      	uxth	r3, r3
 800882e:	461a      	mov	r2, r3
 8008830:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008832:	4413      	add	r3, r2
 8008834:	673b      	str	r3, [r7, #112]	@ 0x70
 8008836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	00da      	lsls	r2, r3, #3
 8008844:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008846:	4413      	add	r3, r2
 8008848:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800884c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800884e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008852:	b29a      	uxth	r2, r3
 8008854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008856:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800885c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	895b      	ldrh	r3, [r3, #10]
 8008864:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6959      	ldr	r1, [r3, #20]
 8008874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008878:	b29b      	uxth	r3, r3
 800887a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800887e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008882:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008886:	6800      	ldr	r0, [r0, #0]
 8008888:	f000 ff20 	bl	80096cc <USB_WritePMA>
 800888c:	e0ca      	b.n	8008a24 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800888e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d177      	bne.n	800898e <USB_EPStartXfer+0xc98>
 800889e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	461a      	mov	r2, r3
 80088bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80088be:	4413      	add	r3, r2
 80088c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	00da      	lsls	r2, r3, #3
 80088d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80088d2:	4413      	add	r3, r2
 80088d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088e8:	801a      	strh	r2, [r3, #0]
 80088ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80088f0:	d921      	bls.n	8008936 <USB_EPStartXfer+0xc40>
 80088f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f6:	095b      	lsrs	r3, r3, #5
 80088f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80088fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008900:	f003 031f 	and.w	r3, r3, #31
 8008904:	2b00      	cmp	r3, #0
 8008906:	d104      	bne.n	8008912 <USB_EPStartXfer+0xc1c>
 8008908:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800890c:	3b01      	subs	r3, #1
 800890e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	b29a      	uxth	r2, r3
 8008918:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800891c:	b29b      	uxth	r3, r3
 800891e:	029b      	lsls	r3, r3, #10
 8008920:	b29b      	uxth	r3, r3
 8008922:	4313      	orrs	r3, r2
 8008924:	b29b      	uxth	r3, r3
 8008926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800892a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800892e:	b29a      	uxth	r2, r3
 8008930:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	e05c      	b.n	80089f0 <USB_EPStartXfer+0xcfa>
 8008936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <USB_EPStartXfer+0xc5e>
 800893e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	b29b      	uxth	r3, r3
 8008944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800894c:	b29a      	uxth	r2, r3
 800894e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008950:	801a      	strh	r2, [r3, #0]
 8008952:	e04d      	b.n	80089f0 <USB_EPStartXfer+0xcfa>
 8008954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800895e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <USB_EPStartXfer+0xc7e>
 800896a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800896e:	3301      	adds	r3, #1
 8008970:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b29a      	uxth	r2, r3
 800897a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800897e:	b29b      	uxth	r3, r3
 8008980:	029b      	lsls	r3, r3, #10
 8008982:	b29b      	uxth	r3, r3
 8008984:	4313      	orrs	r3, r2
 8008986:	b29a      	uxth	r2, r3
 8008988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	e030      	b.n	80089f0 <USB_EPStartXfer+0xcfa>
 800898e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	785b      	ldrb	r3, [r3, #1]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d128      	bne.n	80089f0 <USB_EPStartXfer+0xcfa>
 800899e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089c2:	4413      	add	r3, r2
 80089c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	00da      	lsls	r2, r3, #3
 80089d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089da:	4413      	add	r3, r2
 80089dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	891b      	ldrh	r3, [r3, #8]
 80089fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6959      	ldr	r1, [r3, #20]
 8008a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a16:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a1a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a1e:	6800      	ldr	r0, [r0, #0]
 8008a20:	f000 fe54 	bl	80096cc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a4a:	817b      	strh	r3, [r7, #10]
 8008a4c:	897b      	ldrh	r3, [r7, #10]
 8008a4e:	f083 0310 	eor.w	r3, r3, #16
 8008a52:	817b      	strh	r3, [r7, #10]
 8008a54:	897b      	ldrh	r3, [r7, #10]
 8008a56:	f083 0320 	eor.w	r3, r3, #32
 8008a5a:	817b      	strh	r3, [r7, #10]
 8008a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	441a      	add	r2, r3
 8008a76:	897b      	ldrh	r3, [r7, #10]
 8008a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	8013      	strh	r3, [r2, #0]
 8008a8c:	f000 bcde 	b.w	800944c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	7b1b      	ldrb	r3, [r3, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f040 80bb 	bne.w	8008c18 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	699a      	ldr	r2, [r3, #24]
 8008aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d917      	bls.n	8008aee <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	699a      	ldr	r2, [r3, #24]
 8008ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ade:	1ad2      	subs	r2, r2, r3
 8008ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	619a      	str	r2, [r3, #24]
 8008aec:	e00e      	b.n	8008b0c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b30:	4413      	add	r3, r2
 8008b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	00da      	lsls	r2, r3, #3
 8008b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b48:	4413      	add	r3, r2
 8008b4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b64:	801a      	strh	r2, [r3, #0]
 8008b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b6c:	d924      	bls.n	8008bb8 <USB_EPStartXfer+0xec2>
 8008b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b7c:	f003 031f 	and.w	r3, r3, #31
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d104      	bne.n	8008b8e <USB_EPStartXfer+0xe98>
 8008b84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	029b      	lsls	r3, r3, #10
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bb2:	801a      	strh	r2, [r3, #0]
 8008bb4:	f000 bc10 	b.w	80093d8 <USB_EPStartXfer+0x16e2>
 8008bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10c      	bne.n	8008bda <USB_EPStartXfer+0xee4>
 8008bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bd6:	801a      	strh	r2, [r3, #0]
 8008bd8:	e3fe      	b.n	80093d8 <USB_EPStartXfer+0x16e2>
 8008bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d004      	beq.n	8008bfa <USB_EPStartXfer+0xf04>
 8008bf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	029b      	lsls	r3, r3, #10
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c14:	801a      	strh	r2, [r3, #0]
 8008c16:	e3df      	b.n	80093d8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	78db      	ldrb	r3, [r3, #3]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	f040 8218 	bne.w	800905a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f040 809d 	bne.w	8008d76 <USB_EPStartXfer+0x1080>
 8008c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c60:	4413      	add	r3, r2
 8008c62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	00da      	lsls	r2, r3, #3
 8008c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c78:	4413      	add	r3, r2
 8008c7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ca4:	d92b      	bls.n	8008cfe <USB_EPStartXfer+0x1008>
 8008ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	095b      	lsrs	r3, r3, #5
 8008cb4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f003 031f 	and.w	r3, r3, #31
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d104      	bne.n	8008cd6 <USB_EPStartXfer+0xfe0>
 8008ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	029b      	lsls	r3, r3, #10
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cfa:	801a      	strh	r2, [r3, #0]
 8008cfc:	e070      	b.n	8008de0 <USB_EPStartXfer+0x10ea>
 8008cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10c      	bne.n	8008d28 <USB_EPStartXfer+0x1032>
 8008d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d24:	801a      	strh	r2, [r3, #0]
 8008d26:	e05b      	b.n	8008de0 <USB_EPStartXfer+0x10ea>
 8008d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	085b      	lsrs	r3, r3, #1
 8008d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d004      	beq.n	8008d58 <USB_EPStartXfer+0x1062>
 8008d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d52:	3301      	adds	r3, #1
 8008d54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d5c:	881b      	ldrh	r3, [r3, #0]
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	029b      	lsls	r3, r3, #10
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d72:	801a      	strh	r2, [r3, #0]
 8008d74:	e034      	b.n	8008de0 <USB_EPStartXfer+0x10ea>
 8008d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	785b      	ldrb	r3, [r3, #1]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d12c      	bne.n	8008de0 <USB_EPStartXfer+0x10ea>
 8008d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008daa:	4413      	add	r3, r2
 8008dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	00da      	lsls	r2, r3, #3
 8008dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	785b      	ldrb	r3, [r3, #1]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f040 809d 	bne.w	8008f3a <USB_EPStartXfer+0x1244>
 8008e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e24:	4413      	add	r3, r2
 8008e26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	00da      	lsls	r2, r3, #3
 8008e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e58:	801a      	strh	r2, [r3, #0]
 8008e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e68:	d92b      	bls.n	8008ec2 <USB_EPStartXfer+0x11cc>
 8008e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	095b      	lsrs	r3, r3, #5
 8008e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	f003 031f 	and.w	r3, r3, #31
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d104      	bne.n	8008e9a <USB_EPStartXfer+0x11a4>
 8008e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e94:	3b01      	subs	r3, #1
 8008e96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	029b      	lsls	r3, r3, #10
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	4313      	orrs	r3, r2
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ebe:	801a      	strh	r2, [r3, #0]
 8008ec0:	e069      	b.n	8008f96 <USB_EPStartXfer+0x12a0>
 8008ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10c      	bne.n	8008eec <USB_EPStartXfer+0x11f6>
 8008ed2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ee8:	801a      	strh	r2, [r3, #0]
 8008eea:	e054      	b.n	8008f96 <USB_EPStartXfer+0x12a0>
 8008eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	085b      	lsrs	r3, r3, #1
 8008efa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d004      	beq.n	8008f1c <USB_EPStartXfer+0x1226>
 8008f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f16:	3301      	adds	r3, #1
 8008f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	029b      	lsls	r3, r3, #10
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f36:	801a      	strh	r2, [r3, #0]
 8008f38:	e02d      	b.n	8008f96 <USB_EPStartXfer+0x12a0>
 8008f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d125      	bne.n	8008f96 <USB_EPStartXfer+0x12a0>
 8008f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f60:	4413      	add	r3, r2
 8008f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	00da      	lsls	r2, r3, #3
 8008f74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f78:	4413      	add	r3, r2
 8008f7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f94:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 8218 	beq.w	80093d8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008fc8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d005      	beq.n	8008fe0 <USB_EPStartXfer+0x12ea>
 8008fd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10d      	bne.n	8008ffc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008fe0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f040 81f5 	bne.w	80093d8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008fee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f040 81ee 	bne.w	80093d8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800900a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29b      	uxth	r3, r3
 800901a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800901e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009022:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800902a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	441a      	add	r2, r3
 8009040:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800904c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009050:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009054:	b29b      	uxth	r3, r3
 8009056:	8013      	strh	r3, [r2, #0]
 8009058:	e1be      	b.n	80093d8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800905a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	78db      	ldrb	r3, [r3, #3]
 8009066:	2b01      	cmp	r3, #1
 8009068:	f040 81b4 	bne.w	80093d4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800906c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	699a      	ldr	r2, [r3, #24]
 8009078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800907c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	429a      	cmp	r2, r3
 8009086:	d917      	bls.n	80090b8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800909c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	699a      	ldr	r2, [r3, #24]
 80090a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a8:	1ad2      	subs	r2, r2, r3
 80090aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	619a      	str	r2, [r3, #24]
 80090b6:	e00e      	b.n	80090d6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80090b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80090c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80090d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	785b      	ldrb	r3, [r3, #1]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f040 8085 	bne.w	80091f2 <USB_EPStartXfer+0x14fc>
 80090e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009104:	b29b      	uxth	r3, r3
 8009106:	461a      	mov	r2, r3
 8009108:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800910c:	4413      	add	r3, r2
 800910e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	00da      	lsls	r2, r3, #3
 8009120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009124:	4413      	add	r3, r2
 8009126:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800912a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800912e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	b29b      	uxth	r3, r3
 8009136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800913a:	b29a      	uxth	r2, r3
 800913c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009140:	801a      	strh	r2, [r3, #0]
 8009142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009146:	2b3e      	cmp	r3, #62	@ 0x3e
 8009148:	d923      	bls.n	8009192 <USB_EPStartXfer+0x149c>
 800914a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800914e:	095b      	lsrs	r3, r3, #5
 8009150:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009158:	f003 031f 	and.w	r3, r3, #31
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <USB_EPStartXfer+0x1474>
 8009160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009164:	3b01      	subs	r3, #1
 8009166:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800916a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	b29a      	uxth	r2, r3
 8009172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009176:	b29b      	uxth	r3, r3
 8009178:	029b      	lsls	r3, r3, #10
 800917a:	b29b      	uxth	r3, r3
 800917c:	4313      	orrs	r3, r2
 800917e:	b29b      	uxth	r3, r3
 8009180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009188:	b29a      	uxth	r2, r3
 800918a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800918e:	801a      	strh	r2, [r3, #0]
 8009190:	e060      	b.n	8009254 <USB_EPStartXfer+0x155e>
 8009192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10c      	bne.n	80091b4 <USB_EPStartXfer+0x14be>
 800919a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	e04f      	b.n	8009254 <USB_EPStartXfer+0x155e>
 80091b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b8:	085b      	lsrs	r3, r3, #1
 80091ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80091be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d004      	beq.n	80091d4 <USB_EPStartXfer+0x14de>
 80091ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ce:	3301      	adds	r3, #1
 80091d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80091d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29a      	uxth	r2, r3
 80091dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	029b      	lsls	r3, r3, #10
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	4313      	orrs	r3, r2
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80091ee:	801a      	strh	r2, [r3, #0]
 80091f0:	e030      	b.n	8009254 <USB_EPStartXfer+0x155e>
 80091f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	785b      	ldrb	r3, [r3, #1]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d128      	bne.n	8009254 <USB_EPStartXfer+0x155e>
 8009202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800921e:	b29b      	uxth	r3, r3
 8009220:	461a      	mov	r2, r3
 8009222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009226:	4413      	add	r3, r2
 8009228:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800922c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	00da      	lsls	r2, r3, #3
 800923a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800923e:	4413      	add	r3, r2
 8009240:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800924c:	b29a      	uxth	r2, r3
 800924e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009252:	801a      	strh	r2, [r3, #0]
 8009254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	785b      	ldrb	r3, [r3, #1]
 800926e:	2b00      	cmp	r3, #0
 8009270:	f040 8085 	bne.w	800937e <USB_EPStartXfer+0x1688>
 8009274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009290:	b29b      	uxth	r3, r3
 8009292:	461a      	mov	r2, r3
 8009294:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009298:	4413      	add	r3, r2
 800929a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800929e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	00da      	lsls	r2, r3, #3
 80092ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80092b0:	4413      	add	r3, r2
 80092b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80092b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092cc:	801a      	strh	r2, [r3, #0]
 80092ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80092d4:	d923      	bls.n	800931e <USB_EPStartXfer+0x1628>
 80092d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092e4:	f003 031f 	and.w	r3, r3, #31
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <USB_EPStartXfer+0x1600>
 80092ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092f0:	3b01      	subs	r3, #1
 80092f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009302:	b29b      	uxth	r3, r3
 8009304:	029b      	lsls	r3, r3, #10
 8009306:	b29b      	uxth	r3, r3
 8009308:	4313      	orrs	r3, r2
 800930a:	b29b      	uxth	r3, r3
 800930c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009314:	b29a      	uxth	r2, r3
 8009316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800931a:	801a      	strh	r2, [r3, #0]
 800931c:	e05c      	b.n	80093d8 <USB_EPStartXfer+0x16e2>
 800931e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10c      	bne.n	8009340 <USB_EPStartXfer+0x164a>
 8009326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29b      	uxth	r3, r3
 800932e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009336:	b29a      	uxth	r2, r3
 8009338:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800933c:	801a      	strh	r2, [r3, #0]
 800933e:	e04b      	b.n	80093d8 <USB_EPStartXfer+0x16e2>
 8009340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800934a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d004      	beq.n	8009360 <USB_EPStartXfer+0x166a>
 8009356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800935a:	3301      	adds	r3, #1
 800935c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009360:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29a      	uxth	r2, r3
 8009368:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800936c:	b29b      	uxth	r3, r3
 800936e:	029b      	lsls	r3, r3, #10
 8009370:	b29b      	uxth	r3, r3
 8009372:	4313      	orrs	r3, r2
 8009374:	b29a      	uxth	r2, r3
 8009376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800937a:	801a      	strh	r2, [r3, #0]
 800937c:	e02c      	b.n	80093d8 <USB_EPStartXfer+0x16e2>
 800937e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	785b      	ldrb	r3, [r3, #1]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d124      	bne.n	80093d8 <USB_EPStartXfer+0x16e2>
 800938e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800939c:	b29b      	uxth	r3, r3
 800939e:	461a      	mov	r2, r3
 80093a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80093a4:	4413      	add	r3, r2
 80093a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	00da      	lsls	r2, r3, #3
 80093b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80093bc:	4413      	add	r3, r2
 80093be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	e001      	b.n	80093d8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e03a      	b.n	800944e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093fe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009402:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009406:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800940a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800940e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009412:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009416:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800941a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	441a      	add	r2, r3
 8009434:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800943c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009448:	b29b      	uxth	r3, r3
 800944a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	785b      	ldrb	r3, [r3, #1]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d020      	beq.n	80094ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	b29b      	uxth	r3, r3
 8009478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800947c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009480:	81bb      	strh	r3, [r7, #12]
 8009482:	89bb      	ldrh	r3, [r7, #12]
 8009484:	f083 0310 	eor.w	r3, r3, #16
 8009488:	81bb      	strh	r3, [r7, #12]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	441a      	add	r2, r3
 8009494:	89bb      	ldrh	r3, [r7, #12]
 8009496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800949a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800949e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	8013      	strh	r3, [r2, #0]
 80094aa:	e01f      	b.n	80094ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094c2:	81fb      	strh	r3, [r7, #14]
 80094c4:	89fb      	ldrh	r3, [r7, #14]
 80094c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80094ca:	81fb      	strh	r3, [r7, #14]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	441a      	add	r2, r3
 80094d6:	89fb      	ldrh	r3, [r7, #14]
 80094d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b087      	sub	sp, #28
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	7b1b      	ldrb	r3, [r3, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f040 809d 	bne.w	8009648 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	785b      	ldrb	r3, [r3, #1]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d04c      	beq.n	80095b0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	823b      	strh	r3, [r7, #16]
 8009524:	8a3b      	ldrh	r3, [r7, #16]
 8009526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01b      	beq.n	8009566 <USB_EPClearStall+0x6c>
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	b29b      	uxth	r3, r3
 800953c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009544:	81fb      	strh	r3, [r7, #14]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	441a      	add	r2, r3
 8009550:	89fb      	ldrh	r3, [r7, #14]
 8009552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800955a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800955e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009562:	b29b      	uxth	r3, r3
 8009564:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	78db      	ldrb	r3, [r3, #3]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d06c      	beq.n	8009648 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	b29b      	uxth	r3, r3
 800957c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009584:	81bb      	strh	r3, [r7, #12]
 8009586:	89bb      	ldrh	r3, [r7, #12]
 8009588:	f083 0320 	eor.w	r3, r3, #32
 800958c:	81bb      	strh	r3, [r7, #12]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	441a      	add	r2, r3
 8009598:	89bb      	ldrh	r3, [r7, #12]
 800959a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800959e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	8013      	strh	r3, [r2, #0]
 80095ae:	e04b      	b.n	8009648 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	82fb      	strh	r3, [r7, #22]
 80095be:	8afb      	ldrh	r3, [r7, #22]
 80095c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01b      	beq.n	8009600 <USB_EPClearStall+0x106>
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095de:	82bb      	strh	r3, [r7, #20]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	441a      	add	r2, r3
 80095ea:	8abb      	ldrh	r3, [r7, #20]
 80095ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	b29b      	uxth	r3, r3
 800960e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009616:	827b      	strh	r3, [r7, #18]
 8009618:	8a7b      	ldrh	r3, [r7, #18]
 800961a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800961e:	827b      	strh	r3, [r7, #18]
 8009620:	8a7b      	ldrh	r3, [r7, #18]
 8009622:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009626:	827b      	strh	r3, [r7, #18]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	441a      	add	r2, r3
 8009632:	8a7b      	ldrh	r3, [r7, #18]
 8009634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800963c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009644:	b29b      	uxth	r3, r3
 8009646:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009662:	78fb      	ldrb	r3, [r7, #3]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d103      	bne.n	8009670 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2280      	movs	r2, #128	@ 0x80
 800966c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800968c:	b29b      	uxth	r3, r3
 800968e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009696:	b29a      	uxth	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80096be:	68fb      	ldr	r3, [r7, #12]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b08b      	sub	sp, #44	@ 0x2c
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	4611      	mov	r1, r2
 80096d8:	461a      	mov	r2, r3
 80096da:	460b      	mov	r3, r1
 80096dc:	80fb      	strh	r3, [r7, #6]
 80096de:	4613      	mov	r3, r2
 80096e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80096e2:	88bb      	ldrh	r3, [r7, #4]
 80096e4:	3301      	adds	r3, #1
 80096e6:	085b      	lsrs	r3, r3, #1
 80096e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096f2:	88fa      	ldrh	r2, [r7, #6]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096fc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	627b      	str	r3, [r7, #36]	@ 0x24
 8009702:	e01b      	b.n	800973c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	3301      	adds	r3, #1
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	021b      	lsls	r3, r3, #8
 8009712:	b21a      	sxth	r2, r3
 8009714:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009718:	4313      	orrs	r3, r2
 800971a:	b21b      	sxth	r3, r3
 800971c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	8a7a      	ldrh	r2, [r7, #18]
 8009722:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	3302      	adds	r3, #2
 8009728:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	3301      	adds	r3, #1
 800972e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	3301      	adds	r3, #1
 8009734:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009738:	3b01      	subs	r3, #1
 800973a:	627b      	str	r3, [r7, #36]	@ 0x24
 800973c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1e0      	bne.n	8009704 <USB_WritePMA+0x38>
  }
}
 8009742:	bf00      	nop
 8009744:	bf00      	nop
 8009746:	372c      	adds	r7, #44	@ 0x2c
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009750:	b480      	push	{r7}
 8009752:	b08b      	sub	sp, #44	@ 0x2c
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	4611      	mov	r1, r2
 800975c:	461a      	mov	r2, r3
 800975e:	460b      	mov	r3, r1
 8009760:	80fb      	strh	r3, [r7, #6]
 8009762:	4613      	mov	r3, r2
 8009764:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009766:	88bb      	ldrh	r3, [r7, #4]
 8009768:	085b      	lsrs	r3, r3, #1
 800976a:	b29b      	uxth	r3, r3
 800976c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009776:	88fa      	ldrh	r2, [r7, #6]
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	4413      	add	r3, r2
 800977c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009780:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	627b      	str	r3, [r7, #36]	@ 0x24
 8009786:	e018      	b.n	80097ba <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	3302      	adds	r3, #2
 8009794:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	b2da      	uxtb	r2, r3
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	3301      	adds	r3, #1
 80097a2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	0a1b      	lsrs	r3, r3, #8
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	3301      	adds	r3, #1
 80097b2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80097b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b6:	3b01      	subs	r3, #1
 80097b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e3      	bne.n	8009788 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80097c0:	88bb      	ldrh	r3, [r7, #4]
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d007      	beq.n	80097dc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	701a      	strb	r2, [r3, #0]
  }
}
 80097dc:	bf00      	nop
 80097de:	372c      	adds	r7, #44	@ 0x2c
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80097f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80097f8:	f002 f8fa 	bl	800b9f0 <USBD_static_malloc>
 80097fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800980c:	2302      	movs	r3, #2
 800980e:	e066      	b.n	80098de <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7c1b      	ldrb	r3, [r3, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d119      	bne.n	8009854 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009820:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009824:	2202      	movs	r2, #2
 8009826:	2181      	movs	r1, #129	@ 0x81
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 ff88 	bl	800b73e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009838:	2202      	movs	r2, #2
 800983a:	2101      	movs	r1, #1
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f001 ff7e 	bl	800b73e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2210      	movs	r2, #16
 800984e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009852:	e016      	b.n	8009882 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009854:	2340      	movs	r3, #64	@ 0x40
 8009856:	2202      	movs	r2, #2
 8009858:	2181      	movs	r1, #129	@ 0x81
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f001 ff6f 	bl	800b73e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009866:	2340      	movs	r3, #64	@ 0x40
 8009868:	2202      	movs	r2, #2
 800986a:	2101      	movs	r1, #1
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 ff66 	bl	800b73e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2210      	movs	r2, #16
 800987e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009882:	2308      	movs	r3, #8
 8009884:	2203      	movs	r2, #3
 8009886:	2182      	movs	r1, #130	@ 0x82
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f001 ff58 	bl	800b73e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7c1b      	ldrb	r3, [r3, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d109      	bne.n	80098cc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098c2:	2101      	movs	r1, #1
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f002 f829 	bl	800b91c <USBD_LL_PrepareReceive>
 80098ca:	e007      	b.n	80098dc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098d2:	2340      	movs	r3, #64	@ 0x40
 80098d4:	2101      	movs	r1, #1
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f002 f820 	bl	800b91c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	460b      	mov	r3, r1
 80098f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80098f2:	2181      	movs	r1, #129	@ 0x81
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 ff48 	bl	800b78a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009900:	2101      	movs	r1, #1
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f001 ff41 	bl	800b78a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009910:	2182      	movs	r1, #130	@ 0x82
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 ff39 	bl	800b78a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00e      	beq.n	8009950 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009942:	4618      	mov	r0, r3
 8009944:	f002 f862 	bl	800ba0c <USBD_static_free>
    pdev->pClassData = NULL;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800996c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009972:	2300      	movs	r3, #0
 8009974:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009980:	2303      	movs	r3, #3
 8009982:	e0af      	b.n	8009ae4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800998c:	2b00      	cmp	r3, #0
 800998e:	d03f      	beq.n	8009a10 <USBD_CDC_Setup+0xb4>
 8009990:	2b20      	cmp	r3, #32
 8009992:	f040 809f 	bne.w	8009ad4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	88db      	ldrh	r3, [r3, #6]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d02e      	beq.n	80099fc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	b25b      	sxtb	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	da16      	bge.n	80099d6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80099b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	88d2      	ldrh	r2, [r2, #6]
 80099ba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	88db      	ldrh	r3, [r3, #6]
 80099c0:	2b07      	cmp	r3, #7
 80099c2:	bf28      	it	cs
 80099c4:	2307      	movcs	r3, #7
 80099c6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	89fa      	ldrh	r2, [r7, #14]
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 facd 	bl	800af6e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80099d4:	e085      	b.n	8009ae2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	785a      	ldrb	r2, [r3, #1]
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	88db      	ldrh	r3, [r3, #6]
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80099ec:	6939      	ldr	r1, [r7, #16]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	88db      	ldrh	r3, [r3, #6]
 80099f2:	461a      	mov	r2, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f001 fae6 	bl	800afc6 <USBD_CtlPrepareRx>
      break;
 80099fa:	e072      	b.n	8009ae2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	7850      	ldrb	r0, [r2, #1]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	4798      	blx	r3
      break;
 8009a0e:	e068      	b.n	8009ae2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	2b0b      	cmp	r3, #11
 8009a16:	d852      	bhi.n	8009abe <USBD_CDC_Setup+0x162>
 8009a18:	a201      	add	r2, pc, #4	@ (adr r2, 8009a20 <USBD_CDC_Setup+0xc4>)
 8009a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1e:	bf00      	nop
 8009a20:	08009a51 	.word	0x08009a51
 8009a24:	08009acd 	.word	0x08009acd
 8009a28:	08009abf 	.word	0x08009abf
 8009a2c:	08009abf 	.word	0x08009abf
 8009a30:	08009abf 	.word	0x08009abf
 8009a34:	08009abf 	.word	0x08009abf
 8009a38:	08009abf 	.word	0x08009abf
 8009a3c:	08009abf 	.word	0x08009abf
 8009a40:	08009abf 	.word	0x08009abf
 8009a44:	08009abf 	.word	0x08009abf
 8009a48:	08009a7b 	.word	0x08009a7b
 8009a4c:	08009aa5 	.word	0x08009aa5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d107      	bne.n	8009a6c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a5c:	f107 030a 	add.w	r3, r7, #10
 8009a60:	2202      	movs	r2, #2
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 fa82 	bl	800af6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a6a:	e032      	b.n	8009ad2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f001 fa0c 	bl	800ae8c <USBD_CtlError>
            ret = USBD_FAIL;
 8009a74:	2303      	movs	r3, #3
 8009a76:	75fb      	strb	r3, [r7, #23]
          break;
 8009a78:	e02b      	b.n	8009ad2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d107      	bne.n	8009a96 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a86:	f107 030d 	add.w	r3, r7, #13
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 fa6d 	bl	800af6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a94:	e01d      	b.n	8009ad2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 f9f7 	bl	800ae8c <USBD_CtlError>
            ret = USBD_FAIL;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8009aa2:	e016      	b.n	8009ad2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d00f      	beq.n	8009ad0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 f9ea 	bl	800ae8c <USBD_CtlError>
            ret = USBD_FAIL;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009abc:	e008      	b.n	8009ad0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f001 f9e3 	bl	800ae8c <USBD_CtlError>
          ret = USBD_FAIL;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	75fb      	strb	r3, [r7, #23]
          break;
 8009aca:	e002      	b.n	8009ad2 <USBD_CDC_Setup+0x176>
          break;
 8009acc:	bf00      	nop
 8009ace:	e008      	b.n	8009ae2 <USBD_CDC_Setup+0x186>
          break;
 8009ad0:	bf00      	nop
      }
      break;
 8009ad2:	e006      	b.n	8009ae2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 f9d8 	bl	800ae8c <USBD_CtlError>
      ret = USBD_FAIL;
 8009adc:	2303      	movs	r3, #3
 8009ade:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae0:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009afe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e04f      	b.n	8009bae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009b16:	78fa      	ldrb	r2, [r7, #3]
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	440b      	add	r3, r1
 8009b24:	3318      	adds	r3, #24
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d029      	beq.n	8009b80 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009b2c:	78fa      	ldrb	r2, [r7, #3]
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	4613      	mov	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	440b      	add	r3, r1
 8009b3a:	3318      	adds	r3, #24
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	78f9      	ldrb	r1, [r7, #3]
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	460b      	mov	r3, r1
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	440b      	add	r3, r1
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	4403      	add	r3, r0
 8009b4c:	3320      	adds	r3, #32
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b54:	fb01 f303 	mul.w	r3, r1, r3
 8009b58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d110      	bne.n	8009b80 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009b5e:	78fa      	ldrb	r2, [r7, #3]
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3318      	adds	r3, #24
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b72:	78f9      	ldrb	r1, [r7, #3]
 8009b74:	2300      	movs	r3, #0
 8009b76:	2200      	movs	r2, #0
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 feae 	bl	800b8da <USBD_LL_Transmit>
 8009b7e:	e015      	b.n	8009bac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00b      	beq.n	8009bac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009bc8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e015      	b.n	8009c04 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 febe 	bl	800b95e <USBD_LL_GetRxDataSize>
 8009be2:	4602      	mov	r2, r0
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009bfe:	4611      	mov	r1, r2
 8009c00:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e01a      	b.n	8009c5c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d014      	beq.n	8009c5a <USBD_CDC_EP0_RxReady+0x4e>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009c36:	2bff      	cmp	r3, #255	@ 0xff
 8009c38:	d00f      	beq.n	8009c5a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009c48:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	22ff      	movs	r2, #255	@ 0xff
 8009c56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2243      	movs	r2, #67	@ 0x43
 8009c70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009c72:	4b03      	ldr	r3, [pc, #12]	@ (8009c80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	20000094 	.word	0x20000094

08009c84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2243      	movs	r2, #67	@ 0x43
 8009c90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009c92:	4b03      	ldr	r3, [pc, #12]	@ (8009ca0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	20000050 	.word	0x20000050

08009ca4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2243      	movs	r2, #67	@ 0x43
 8009cb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009cb2:	4b03      	ldr	r3, [pc, #12]	@ (8009cc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	200000d8 	.word	0x200000d8

08009cc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	220a      	movs	r2, #10
 8009cd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009cd2:	4b03      	ldr	r3, [pc, #12]	@ (8009ce0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	2000000c 	.word	0x2000000c

08009ce4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e004      	b.n	8009d02 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b087      	sub	sp, #28
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	60f8      	str	r0, [r7, #12]
 8009d16:	60b9      	str	r1, [r7, #8]
 8009d18:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d20:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e008      	b.n	8009d3e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	371c      	adds	r7, #28
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e004      	b.n	8009d70 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d8a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e01a      	b.n	8009dd4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d114      	bne.n	8009dd2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009dc6:	2181      	movs	r1, #129	@ 0x81
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 fd86 	bl	800b8da <USBD_LL_Transmit>

    ret = USBD_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009dea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e016      	b.n	8009e28 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	7c1b      	ldrb	r3, [r3, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d109      	bne.n	8009e16 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 fd84 	bl	800b91c <USBD_LL_PrepareReceive>
 8009e14:	e007      	b.n	8009e26 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e1c:	2340      	movs	r3, #64	@ 0x40
 8009e1e:	2101      	movs	r1, #1
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f001 fd7b 	bl	800b91c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e01f      	b.n	8009e88 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	79fa      	ldrb	r2, [r7, #7]
 8009e7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f001 fbe3 	bl	800b648 <USBD_LL_Init>
 8009e82:	4603      	mov	r3, r0
 8009e84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e016      	b.n	8009ed6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec4:	f107 020e 	add.w	r2, r7, #14
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4798      	blx	r3
 8009ecc:	4602      	mov	r2, r0
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f001 fc0e 	bl	800b708 <USBD_LL_Start>
 8009eec:	4603      	mov	r3, r0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b083      	sub	sp, #12
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d009      	beq.n	8009f3a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	78fa      	ldrb	r2, [r7, #3]
 8009f30:	4611      	mov	r1, r2
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	4798      	blx	r3
 8009f36:	4603      	mov	r3, r0
 8009f38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d007      	beq.n	8009f6a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	78fa      	ldrb	r2, [r7, #3]
 8009f64:	4611      	mov	r1, r2
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	4798      	blx	r3
  }

  return USBD_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 ff46 	bl	800ae18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009fa8:	f003 031f 	and.w	r3, r3, #31
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d01a      	beq.n	8009fe6 <USBD_LL_SetupStage+0x72>
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d822      	bhi.n	8009ffa <USBD_LL_SetupStage+0x86>
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <USBD_LL_SetupStage+0x4a>
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d00a      	beq.n	8009fd2 <USBD_LL_SetupStage+0x5e>
 8009fbc:	e01d      	b.n	8009ffa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f9ee 	bl	800a3a8 <USBD_StdDevReq>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd0:	e020      	b.n	800a014 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fa52 	bl	800a484 <USBD_StdItfReq>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fe4:	e016      	b.n	800a014 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fa91 	bl	800a516 <USBD_StdEPReq>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ff8:	e00c      	b.n	800a014 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a000:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a004:	b2db      	uxtb	r3, r3
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 fbdd 	bl	800b7c8 <USBD_LL_StallEP>
 800a00e:	4603      	mov	r3, r0
 800a010:	73fb      	strb	r3, [r7, #15]
      break;
 800a012:	bf00      	nop
  }

  return ret;
 800a014:	7bfb      	ldrb	r3, [r7, #15]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b086      	sub	sp, #24
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	460b      	mov	r3, r1
 800a028:	607a      	str	r2, [r7, #4]
 800a02a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a02c:	7afb      	ldrb	r3, [r7, #11]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d138      	bne.n	800a0a4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a038:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a040:	2b03      	cmp	r3, #3
 800a042:	d14a      	bne.n	800a0da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d913      	bls.n	800a078 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	1ad2      	subs	r2, r2, r3
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	68da      	ldr	r2, [r3, #12]
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	4293      	cmp	r3, r2
 800a068:	bf28      	it	cs
 800a06a:	4613      	movcs	r3, r2
 800a06c:	461a      	mov	r2, r3
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 ffc5 	bl	800b000 <USBD_CtlContinueRx>
 800a076:	e030      	b.n	800a0da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b03      	cmp	r3, #3
 800a082:	d10b      	bne.n	800a09c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d005      	beq.n	800a09c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 ffc0 	bl	800b022 <USBD_CtlSendStatus>
 800a0a2:	e01a      	b.n	800a0da <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d114      	bne.n	800a0da <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00e      	beq.n	800a0da <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	7afa      	ldrb	r2, [r7, #11]
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	4798      	blx	r3
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a0d6:	7dfb      	ldrb	r3, [r7, #23]
 800a0d8:	e000      	b.n	800a0dc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d16b      	bne.n	800a1d0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3314      	adds	r3, #20
 800a0fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a104:	2b02      	cmp	r3, #2
 800a106:	d156      	bne.n	800a1b6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	429a      	cmp	r2, r3
 800a112:	d914      	bls.n	800a13e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	689a      	ldr	r2, [r3, #8]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	1ad2      	subs	r2, r2, r3
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	461a      	mov	r2, r3
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 ff3a 	bl	800afa4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a130:	2300      	movs	r3, #0
 800a132:	2200      	movs	r2, #0
 800a134:	2100      	movs	r1, #0
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f001 fbf0 	bl	800b91c <USBD_LL_PrepareReceive>
 800a13c:	e03b      	b.n	800a1b6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	429a      	cmp	r2, r3
 800a148:	d11c      	bne.n	800a184 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a152:	429a      	cmp	r2, r3
 800a154:	d316      	bcc.n	800a184 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a160:	429a      	cmp	r2, r3
 800a162:	d20f      	bcs.n	800a184 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a164:	2200      	movs	r2, #0
 800a166:	2100      	movs	r1, #0
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 ff1b 	bl	800afa4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a176:	2300      	movs	r3, #0
 800a178:	2200      	movs	r2, #0
 800a17a:	2100      	movs	r1, #0
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f001 fbcd 	bl	800b91c <USBD_LL_PrepareReceive>
 800a182:	e018      	b.n	800a1b6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b03      	cmp	r3, #3
 800a18e:	d10b      	bne.n	800a1a8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1a8:	2180      	movs	r1, #128	@ 0x80
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f001 fb0c 	bl	800b7c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 ff49 	bl	800b048 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d122      	bne.n	800a206 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f7ff fe98 	bl	8009ef6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a1ce:	e01a      	b.n	800a206 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d114      	bne.n	800a206 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00e      	beq.n	800a206 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	7afa      	ldrb	r2, [r7, #11]
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	4798      	blx	r3
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a202:	7dfb      	ldrb	r3, [r7, #23]
 800a204:	e000      	b.n	800a208 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a240:	2303      	movs	r3, #3
 800a242:	e02f      	b.n	800a2a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00f      	beq.n	800a26e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d009      	beq.n	800a26e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	6852      	ldr	r2, [r2, #4]
 800a266:	b2d2      	uxtb	r2, r2
 800a268:	4611      	mov	r1, r2
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a26e:	2340      	movs	r3, #64	@ 0x40
 800a270:	2200      	movs	r2, #0
 800a272:	2100      	movs	r1, #0
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f001 fa62 	bl	800b73e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2240      	movs	r2, #64	@ 0x40
 800a286:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a28a:	2340      	movs	r3, #64	@ 0x40
 800a28c:	2200      	movs	r2, #0
 800a28e:	2180      	movs	r1, #128	@ 0x80
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 fa54 	bl	800b73e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2240      	movs	r2, #64	@ 0x40
 800a2a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2204      	movs	r2, #4
 800a2e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d106      	bne.n	800a31a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a312:	b2da      	uxtb	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e012      	b.n	800a364 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b03      	cmp	r3, #3
 800a348:	d10b      	bne.n	800a362 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	3301      	adds	r3, #1
 800a382:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a38a:	8a3b      	ldrh	r3, [r7, #16]
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	b21a      	sxth	r2, r3
 800a390:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a394:	4313      	orrs	r3, r2
 800a396:	b21b      	sxth	r3, r3
 800a398:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a39a:	89fb      	ldrh	r3, [r7, #14]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3be:	2b40      	cmp	r3, #64	@ 0x40
 800a3c0:	d005      	beq.n	800a3ce <USBD_StdDevReq+0x26>
 800a3c2:	2b40      	cmp	r3, #64	@ 0x40
 800a3c4:	d853      	bhi.n	800a46e <USBD_StdDevReq+0xc6>
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00b      	beq.n	800a3e2 <USBD_StdDevReq+0x3a>
 800a3ca:	2b20      	cmp	r3, #32
 800a3cc:	d14f      	bne.n	800a46e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	4798      	blx	r3
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e0:	e04a      	b.n	800a478 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	785b      	ldrb	r3, [r3, #1]
 800a3e6:	2b09      	cmp	r3, #9
 800a3e8:	d83b      	bhi.n	800a462 <USBD_StdDevReq+0xba>
 800a3ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f0 <USBD_StdDevReq+0x48>)
 800a3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f0:	0800a445 	.word	0x0800a445
 800a3f4:	0800a459 	.word	0x0800a459
 800a3f8:	0800a463 	.word	0x0800a463
 800a3fc:	0800a44f 	.word	0x0800a44f
 800a400:	0800a463 	.word	0x0800a463
 800a404:	0800a423 	.word	0x0800a423
 800a408:	0800a419 	.word	0x0800a419
 800a40c:	0800a463 	.word	0x0800a463
 800a410:	0800a43b 	.word	0x0800a43b
 800a414:	0800a42d 	.word	0x0800a42d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f9de 	bl	800a7dc <USBD_GetDescriptor>
          break;
 800a420:	e024      	b.n	800a46c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fb6d 	bl	800ab04 <USBD_SetAddress>
          break;
 800a42a:	e01f      	b.n	800a46c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fbac 	bl	800ab8c <USBD_SetConfig>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]
          break;
 800a438:	e018      	b.n	800a46c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fc4b 	bl	800acd8 <USBD_GetConfig>
          break;
 800a442:	e013      	b.n	800a46c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fc7c 	bl	800ad44 <USBD_GetStatus>
          break;
 800a44c:	e00e      	b.n	800a46c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fcab 	bl	800adac <USBD_SetFeature>
          break;
 800a456:	e009      	b.n	800a46c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fcba 	bl	800add4 <USBD_ClrFeature>
          break;
 800a460:	e004      	b.n	800a46c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fd11 	bl	800ae8c <USBD_CtlError>
          break;
 800a46a:	bf00      	nop
      }
      break;
 800a46c:	e004      	b.n	800a478 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fd0b 	bl	800ae8c <USBD_CtlError>
      break;
 800a476:	bf00      	nop
  }

  return ret;
 800a478:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop

0800a484 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a49a:	2b40      	cmp	r3, #64	@ 0x40
 800a49c:	d005      	beq.n	800a4aa <USBD_StdItfReq+0x26>
 800a49e:	2b40      	cmp	r3, #64	@ 0x40
 800a4a0:	d82f      	bhi.n	800a502 <USBD_StdItfReq+0x7e>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <USBD_StdItfReq+0x26>
 800a4a6:	2b20      	cmp	r3, #32
 800a4a8:	d12b      	bne.n	800a502 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d81d      	bhi.n	800a4f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	889b      	ldrh	r3, [r3, #4]
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d813      	bhi.n	800a4ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	4798      	blx	r3
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	88db      	ldrh	r3, [r3, #6]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d110      	bne.n	800a4fe <USBD_StdItfReq+0x7a>
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10d      	bne.n	800a4fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fd9d 	bl	800b022 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a4e8:	e009      	b.n	800a4fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fccd 	bl	800ae8c <USBD_CtlError>
          break;
 800a4f2:	e004      	b.n	800a4fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fcc8 	bl	800ae8c <USBD_CtlError>
          break;
 800a4fc:	e000      	b.n	800a500 <USBD_StdItfReq+0x7c>
          break;
 800a4fe:	bf00      	nop
      }
      break;
 800a500:	e004      	b.n	800a50c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fcc1 	bl	800ae8c <USBD_CtlError>
      break;
 800a50a:	bf00      	nop
  }

  return ret;
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	889b      	ldrh	r3, [r3, #4]
 800a528:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a532:	2b40      	cmp	r3, #64	@ 0x40
 800a534:	d007      	beq.n	800a546 <USBD_StdEPReq+0x30>
 800a536:	2b40      	cmp	r3, #64	@ 0x40
 800a538:	f200 8145 	bhi.w	800a7c6 <USBD_StdEPReq+0x2b0>
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00c      	beq.n	800a55a <USBD_StdEPReq+0x44>
 800a540:	2b20      	cmp	r3, #32
 800a542:	f040 8140 	bne.w	800a7c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	4798      	blx	r3
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]
      break;
 800a558:	e13a      	b.n	800a7d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	785b      	ldrb	r3, [r3, #1]
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d007      	beq.n	800a572 <USBD_StdEPReq+0x5c>
 800a562:	2b03      	cmp	r3, #3
 800a564:	f300 8129 	bgt.w	800a7ba <USBD_StdEPReq+0x2a4>
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d07f      	beq.n	800a66c <USBD_StdEPReq+0x156>
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d03c      	beq.n	800a5ea <USBD_StdEPReq+0xd4>
 800a570:	e123      	b.n	800a7ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d002      	beq.n	800a584 <USBD_StdEPReq+0x6e>
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d016      	beq.n	800a5b0 <USBD_StdEPReq+0x9a>
 800a582:	e02c      	b.n	800a5de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a584:	7bbb      	ldrb	r3, [r7, #14]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00d      	beq.n	800a5a6 <USBD_StdEPReq+0x90>
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b80      	cmp	r3, #128	@ 0x80
 800a58e:	d00a      	beq.n	800a5a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 f917 	bl	800b7c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a59a:	2180      	movs	r1, #128	@ 0x80
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f001 f913 	bl	800b7c8 <USBD_LL_StallEP>
 800a5a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5a4:	e020      	b.n	800a5e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fc6f 	bl	800ae8c <USBD_CtlError>
              break;
 800a5ae:	e01b      	b.n	800a5e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	885b      	ldrh	r3, [r3, #2]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10e      	bne.n	800a5d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00b      	beq.n	800a5d6 <USBD_StdEPReq+0xc0>
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
 800a5c0:	2b80      	cmp	r3, #128	@ 0x80
 800a5c2:	d008      	beq.n	800a5d6 <USBD_StdEPReq+0xc0>
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	88db      	ldrh	r3, [r3, #6]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d104      	bne.n	800a5d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f001 f8f9 	bl	800b7c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fd23 	bl	800b022 <USBD_CtlSendStatus>

              break;
 800a5dc:	e004      	b.n	800a5e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fc53 	bl	800ae8c <USBD_CtlError>
              break;
 800a5e6:	bf00      	nop
          }
          break;
 800a5e8:	e0ec      	b.n	800a7c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d002      	beq.n	800a5fc <USBD_StdEPReq+0xe6>
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d016      	beq.n	800a628 <USBD_StdEPReq+0x112>
 800a5fa:	e030      	b.n	800a65e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00d      	beq.n	800a61e <USBD_StdEPReq+0x108>
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	2b80      	cmp	r3, #128	@ 0x80
 800a606:	d00a      	beq.n	800a61e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a608:	7bbb      	ldrb	r3, [r7, #14]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f001 f8db 	bl	800b7c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a612:	2180      	movs	r1, #128	@ 0x80
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f001 f8d7 	bl	800b7c8 <USBD_LL_StallEP>
 800a61a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a61c:	e025      	b.n	800a66a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fc33 	bl	800ae8c <USBD_CtlError>
              break;
 800a626:	e020      	b.n	800a66a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	885b      	ldrh	r3, [r3, #2]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d11b      	bne.n	800a668 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a636:	2b00      	cmp	r3, #0
 800a638:	d004      	beq.n	800a644 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a63a:	7bbb      	ldrb	r3, [r7, #14]
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 f8e1 	bl	800b806 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fcec 	bl	800b022 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	6839      	ldr	r1, [r7, #0]
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	4798      	blx	r3
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a65c:	e004      	b.n	800a668 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fc13 	bl	800ae8c <USBD_CtlError>
              break;
 800a666:	e000      	b.n	800a66a <USBD_StdEPReq+0x154>
              break;
 800a668:	bf00      	nop
          }
          break;
 800a66a:	e0ab      	b.n	800a7c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b02      	cmp	r3, #2
 800a676:	d002      	beq.n	800a67e <USBD_StdEPReq+0x168>
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d032      	beq.n	800a6e2 <USBD_StdEPReq+0x1cc>
 800a67c:	e097      	b.n	800a7ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d007      	beq.n	800a694 <USBD_StdEPReq+0x17e>
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	2b80      	cmp	r3, #128	@ 0x80
 800a688:	d004      	beq.n	800a694 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fbfd 	bl	800ae8c <USBD_CtlError>
                break;
 800a692:	e091      	b.n	800a7b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	da0b      	bge.n	800a6b4 <USBD_StdEPReq+0x19e>
 800a69c:	7bbb      	ldrb	r3, [r7, #14]
 800a69e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	3310      	adds	r3, #16
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	e00b      	b.n	800a6cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fc47 	bl	800af6e <USBD_CtlSendData>
              break;
 800a6e0:	e06a      	b.n	800a7b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a6e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	da11      	bge.n	800a70e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
 800a6ec:	f003 020f 	and.w	r2, r3, #15
 800a6f0:	6879      	ldr	r1, [r7, #4]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	440b      	add	r3, r1
 800a6fc:	3324      	adds	r3, #36	@ 0x24
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d117      	bne.n	800a734 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fbc0 	bl	800ae8c <USBD_CtlError>
                  break;
 800a70c:	e054      	b.n	800a7b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	f003 020f 	and.w	r2, r3, #15
 800a714:	6879      	ldr	r1, [r7, #4]
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	440b      	add	r3, r1
 800a720:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d104      	bne.n	800a734 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fbad 	bl	800ae8c <USBD_CtlError>
                  break;
 800a732:	e041      	b.n	800a7b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	da0b      	bge.n	800a754 <USBD_StdEPReq+0x23e>
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a742:	4613      	mov	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	3310      	adds	r3, #16
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	4413      	add	r3, r2
 800a750:	3304      	adds	r3, #4
 800a752:	e00b      	b.n	800a76c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a75a:	4613      	mov	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4413      	add	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	4413      	add	r3, r2
 800a76a:	3304      	adds	r3, #4
 800a76c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d002      	beq.n	800a77a <USBD_StdEPReq+0x264>
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	2b80      	cmp	r3, #128	@ 0x80
 800a778:	d103      	bne.n	800a782 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	e00e      	b.n	800a7a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f001 f85c 	bl	800b844 <USBD_LL_IsStallEP>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	2201      	movs	r2, #1
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	e002      	b.n	800a7a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2200      	movs	r2, #0
 800a79e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fbe1 	bl	800af6e <USBD_CtlSendData>
              break;
 800a7ac:	e004      	b.n	800a7b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fb6b 	bl	800ae8c <USBD_CtlError>
              break;
 800a7b6:	bf00      	nop
          }
          break;
 800a7b8:	e004      	b.n	800a7c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a7ba:	6839      	ldr	r1, [r7, #0]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fb65 	bl	800ae8c <USBD_CtlError>
          break;
 800a7c2:	bf00      	nop
      }
      break;
 800a7c4:	e004      	b.n	800a7d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fb5f 	bl	800ae8c <USBD_CtlError>
      break;
 800a7ce:	bf00      	nop
  }

  return ret;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	885b      	ldrh	r3, [r3, #2]
 800a7f6:	0a1b      	lsrs	r3, r3, #8
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	2b0e      	cmp	r3, #14
 800a7fe:	f200 8152 	bhi.w	800aaa6 <USBD_GetDescriptor+0x2ca>
 800a802:	a201      	add	r2, pc, #4	@ (adr r2, 800a808 <USBD_GetDescriptor+0x2c>)
 800a804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a808:	0800a879 	.word	0x0800a879
 800a80c:	0800a891 	.word	0x0800a891
 800a810:	0800a8d1 	.word	0x0800a8d1
 800a814:	0800aaa7 	.word	0x0800aaa7
 800a818:	0800aaa7 	.word	0x0800aaa7
 800a81c:	0800aa47 	.word	0x0800aa47
 800a820:	0800aa73 	.word	0x0800aa73
 800a824:	0800aaa7 	.word	0x0800aaa7
 800a828:	0800aaa7 	.word	0x0800aaa7
 800a82c:	0800aaa7 	.word	0x0800aaa7
 800a830:	0800aaa7 	.word	0x0800aaa7
 800a834:	0800aaa7 	.word	0x0800aaa7
 800a838:	0800aaa7 	.word	0x0800aaa7
 800a83c:	0800aaa7 	.word	0x0800aaa7
 800a840:	0800a845 	.word	0x0800a845
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a84a:	69db      	ldr	r3, [r3, #28]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a856:	69db      	ldr	r3, [r3, #28]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	7c12      	ldrb	r2, [r2, #16]
 800a85c:	f107 0108 	add.w	r1, r7, #8
 800a860:	4610      	mov	r0, r2
 800a862:	4798      	blx	r3
 800a864:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a866:	e126      	b.n	800aab6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fb0e 	bl	800ae8c <USBD_CtlError>
        err++;
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	3301      	adds	r3, #1
 800a874:	72fb      	strb	r3, [r7, #11]
      break;
 800a876:	e11e      	b.n	800aab6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	7c12      	ldrb	r2, [r2, #16]
 800a884:	f107 0108 	add.w	r1, r7, #8
 800a888:	4610      	mov	r0, r2
 800a88a:	4798      	blx	r3
 800a88c:	60f8      	str	r0, [r7, #12]
      break;
 800a88e:	e112      	b.n	800aab6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	7c1b      	ldrb	r3, [r3, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10d      	bne.n	800a8b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a0:	f107 0208 	add.w	r2, r7, #8
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	4798      	blx	r3
 800a8a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a8b2:	e100      	b.n	800aab6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8bc:	f107 0208 	add.w	r2, r7, #8
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	4798      	blx	r3
 800a8c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	701a      	strb	r2, [r3, #0]
      break;
 800a8ce:	e0f2      	b.n	800aab6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	885b      	ldrh	r3, [r3, #2]
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	2b05      	cmp	r3, #5
 800a8d8:	f200 80ac 	bhi.w	800aa34 <USBD_GetDescriptor+0x258>
 800a8dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e4 <USBD_GetDescriptor+0x108>)
 800a8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e2:	bf00      	nop
 800a8e4:	0800a8fd 	.word	0x0800a8fd
 800a8e8:	0800a931 	.word	0x0800a931
 800a8ec:	0800a965 	.word	0x0800a965
 800a8f0:	0800a999 	.word	0x0800a999
 800a8f4:	0800a9cd 	.word	0x0800a9cd
 800a8f8:	0800aa01 	.word	0x0800aa01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00b      	beq.n	800a920 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	7c12      	ldrb	r2, [r2, #16]
 800a914:	f107 0108 	add.w	r1, r7, #8
 800a918:	4610      	mov	r0, r2
 800a91a:	4798      	blx	r3
 800a91c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a91e:	e091      	b.n	800aa44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a920:	6839      	ldr	r1, [r7, #0]
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fab2 	bl	800ae8c <USBD_CtlError>
            err++;
 800a928:	7afb      	ldrb	r3, [r7, #11]
 800a92a:	3301      	adds	r3, #1
 800a92c:	72fb      	strb	r3, [r7, #11]
          break;
 800a92e:	e089      	b.n	800aa44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00b      	beq.n	800a954 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	7c12      	ldrb	r2, [r2, #16]
 800a948:	f107 0108 	add.w	r1, r7, #8
 800a94c:	4610      	mov	r0, r2
 800a94e:	4798      	blx	r3
 800a950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a952:	e077      	b.n	800aa44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fa98 	bl	800ae8c <USBD_CtlError>
            err++;
 800a95c:	7afb      	ldrb	r3, [r7, #11]
 800a95e:	3301      	adds	r3, #1
 800a960:	72fb      	strb	r3, [r7, #11]
          break;
 800a962:	e06f      	b.n	800aa44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00b      	beq.n	800a988 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	7c12      	ldrb	r2, [r2, #16]
 800a97c:	f107 0108 	add.w	r1, r7, #8
 800a980:	4610      	mov	r0, r2
 800a982:	4798      	blx	r3
 800a984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a986:	e05d      	b.n	800aa44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fa7e 	bl	800ae8c <USBD_CtlError>
            err++;
 800a990:	7afb      	ldrb	r3, [r7, #11]
 800a992:	3301      	adds	r3, #1
 800a994:	72fb      	strb	r3, [r7, #11]
          break;
 800a996:	e055      	b.n	800aa44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00b      	beq.n	800a9bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	7c12      	ldrb	r2, [r2, #16]
 800a9b0:	f107 0108 	add.w	r1, r7, #8
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	4798      	blx	r3
 800a9b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ba:	e043      	b.n	800aa44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fa64 	bl	800ae8c <USBD_CtlError>
            err++;
 800a9c4:	7afb      	ldrb	r3, [r7, #11]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ca:	e03b      	b.n	800aa44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9d2:	695b      	ldr	r3, [r3, #20]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00b      	beq.n	800a9f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9de:	695b      	ldr	r3, [r3, #20]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	7c12      	ldrb	r2, [r2, #16]
 800a9e4:	f107 0108 	add.w	r1, r7, #8
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	4798      	blx	r3
 800a9ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ee:	e029      	b.n	800aa44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fa4a 	bl	800ae8c <USBD_CtlError>
            err++;
 800a9f8:	7afb      	ldrb	r3, [r7, #11]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a9fe:	e021      	b.n	800aa44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00b      	beq.n	800aa24 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	7c12      	ldrb	r2, [r2, #16]
 800aa18:	f107 0108 	add.w	r1, r7, #8
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	4798      	blx	r3
 800aa20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa22:	e00f      	b.n	800aa44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fa30 	bl	800ae8c <USBD_CtlError>
            err++;
 800aa2c:	7afb      	ldrb	r3, [r7, #11]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	72fb      	strb	r3, [r7, #11]
          break;
 800aa32:	e007      	b.n	800aa44 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fa28 	bl	800ae8c <USBD_CtlError>
          err++;
 800aa3c:	7afb      	ldrb	r3, [r7, #11]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800aa42:	bf00      	nop
      }
      break;
 800aa44:	e037      	b.n	800aab6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	7c1b      	ldrb	r3, [r3, #16]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d109      	bne.n	800aa62 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa56:	f107 0208 	add.w	r2, r7, #8
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	4798      	blx	r3
 800aa5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa60:	e029      	b.n	800aab6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fa11 	bl	800ae8c <USBD_CtlError>
        err++;
 800aa6a:	7afb      	ldrb	r3, [r7, #11]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	72fb      	strb	r3, [r7, #11]
      break;
 800aa70:	e021      	b.n	800aab6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	7c1b      	ldrb	r3, [r3, #16]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10d      	bne.n	800aa96 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa82:	f107 0208 	add.w	r2, r7, #8
 800aa86:	4610      	mov	r0, r2
 800aa88:	4798      	blx	r3
 800aa8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	2207      	movs	r2, #7
 800aa92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa94:	e00f      	b.n	800aab6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f9f7 	bl	800ae8c <USBD_CtlError>
        err++;
 800aa9e:	7afb      	ldrb	r3, [r7, #11]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	72fb      	strb	r3, [r7, #11]
      break;
 800aaa4:	e007      	b.n	800aab6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9ef 	bl	800ae8c <USBD_CtlError>
      err++;
 800aaae:	7afb      	ldrb	r3, [r7, #11]
 800aab0:	3301      	adds	r3, #1
 800aab2:	72fb      	strb	r3, [r7, #11]
      break;
 800aab4:	bf00      	nop
  }

  if (err != 0U)
 800aab6:	7afb      	ldrb	r3, [r7, #11]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d11e      	bne.n	800aafa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	88db      	ldrh	r3, [r3, #6]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d016      	beq.n	800aaf2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aac4:	893b      	ldrh	r3, [r7, #8]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00e      	beq.n	800aae8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	88da      	ldrh	r2, [r3, #6]
 800aace:	893b      	ldrh	r3, [r7, #8]
 800aad0:	4293      	cmp	r3, r2
 800aad2:	bf28      	it	cs
 800aad4:	4613      	movcs	r3, r2
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aada:	893b      	ldrh	r3, [r7, #8]
 800aadc:	461a      	mov	r2, r3
 800aade:	68f9      	ldr	r1, [r7, #12]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fa44 	bl	800af6e <USBD_CtlSendData>
 800aae6:	e009      	b.n	800aafc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f9ce 	bl	800ae8c <USBD_CtlError>
 800aaf0:	e004      	b.n	800aafc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fa95 	bl	800b022 <USBD_CtlSendStatus>
 800aaf8:	e000      	b.n	800aafc <USBD_GetDescriptor+0x320>
    return;
 800aafa:	bf00      	nop
  }
}
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop

0800ab04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	889b      	ldrh	r3, [r3, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d131      	bne.n	800ab7a <USBD_SetAddress+0x76>
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	88db      	ldrh	r3, [r3, #6]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d12d      	bne.n	800ab7a <USBD_SetAddress+0x76>
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	885b      	ldrh	r3, [r3, #2]
 800ab22:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab24:	d829      	bhi.n	800ab7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	885b      	ldrh	r3, [r3, #2]
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	d104      	bne.n	800ab48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f9a3 	bl	800ae8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab46:	e01d      	b.n	800ab84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	7bfa      	ldrb	r2, [r7, #15]
 800ab4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab50:	7bfb      	ldrb	r3, [r7, #15]
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fea1 	bl	800b89c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fa61 	bl	800b022 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d004      	beq.n	800ab70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2202      	movs	r2, #2
 800ab6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab6e:	e009      	b.n	800ab84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab78:	e004      	b.n	800ab84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 f985 	bl	800ae8c <USBD_CtlError>
  }
}
 800ab82:	bf00      	nop
 800ab84:	bf00      	nop
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	885b      	ldrh	r3, [r3, #2]
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	4b4c      	ldr	r3, [pc, #304]	@ (800acd4 <USBD_SetConfig+0x148>)
 800aba2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aba4:	4b4b      	ldr	r3, [pc, #300]	@ (800acd4 <USBD_SetConfig+0x148>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d905      	bls.n	800abb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f96c 	bl	800ae8c <USBD_CtlError>
    return USBD_FAIL;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e088      	b.n	800acca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d002      	beq.n	800abca <USBD_SetConfig+0x3e>
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d025      	beq.n	800ac14 <USBD_SetConfig+0x88>
 800abc8:	e071      	b.n	800acae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800abca:	4b42      	ldr	r3, [pc, #264]	@ (800acd4 <USBD_SetConfig+0x148>)
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d01c      	beq.n	800ac0c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800abd2:	4b40      	ldr	r3, [pc, #256]	@ (800acd4 <USBD_SetConfig+0x148>)
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800abdc:	4b3d      	ldr	r3, [pc, #244]	@ (800acd4 <USBD_SetConfig+0x148>)
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7ff f992 	bl	8009f0c <USBD_SetClassConfig>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d004      	beq.n	800abfc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f949 	bl	800ae8c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800abfa:	e065      	b.n	800acc8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fa10 	bl	800b022 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2203      	movs	r2, #3
 800ac06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ac0a:	e05d      	b.n	800acc8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fa08 	bl	800b022 <USBD_CtlSendStatus>
      break;
 800ac12:	e059      	b.n	800acc8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac14:	4b2f      	ldr	r3, [pc, #188]	@ (800acd4 <USBD_SetConfig+0x148>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d112      	bne.n	800ac42 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2202      	movs	r2, #2
 800ac20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ac24:	4b2b      	ldr	r3, [pc, #172]	@ (800acd4 <USBD_SetConfig+0x148>)
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac2e:	4b29      	ldr	r3, [pc, #164]	@ (800acd4 <USBD_SetConfig+0x148>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	4619      	mov	r1, r3
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff f985 	bl	8009f44 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f9f1 	bl	800b022 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac40:	e042      	b.n	800acc8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ac42:	4b24      	ldr	r3, [pc, #144]	@ (800acd4 <USBD_SetConfig+0x148>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	461a      	mov	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d02a      	beq.n	800aca6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7ff f973 	bl	8009f44 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ac5e:	4b1d      	ldr	r3, [pc, #116]	@ (800acd4 <USBD_SetConfig+0x148>)
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	461a      	mov	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac68:	4b1a      	ldr	r3, [pc, #104]	@ (800acd4 <USBD_SetConfig+0x148>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff f94c 	bl	8009f0c <USBD_SetClassConfig>
 800ac74:	4603      	mov	r3, r0
 800ac76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00f      	beq.n	800ac9e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f903 	bl	800ae8c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7ff f958 	bl	8009f44 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2202      	movs	r2, #2
 800ac98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ac9c:	e014      	b.n	800acc8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f9bf 	bl	800b022 <USBD_CtlSendStatus>
      break;
 800aca4:	e010      	b.n	800acc8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 f9bb 	bl	800b022 <USBD_CtlSendStatus>
      break;
 800acac:	e00c      	b.n	800acc8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800acae:	6839      	ldr	r1, [r7, #0]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f8eb 	bl	800ae8c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800acb6:	4b07      	ldr	r3, [pc, #28]	@ (800acd4 <USBD_SetConfig+0x148>)
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff f941 	bl	8009f44 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800acc2:	2303      	movs	r3, #3
 800acc4:	73fb      	strb	r3, [r7, #15]
      break;
 800acc6:	bf00      	nop
  }

  return ret;
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20002490 	.word	0x20002490

0800acd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	88db      	ldrh	r3, [r3, #6]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d004      	beq.n	800acf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f8cd 	bl	800ae8c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800acf2:	e023      	b.n	800ad3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	dc02      	bgt.n	800ad06 <USBD_GetConfig+0x2e>
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	dc03      	bgt.n	800ad0c <USBD_GetConfig+0x34>
 800ad04:	e015      	b.n	800ad32 <USBD_GetConfig+0x5a>
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	d00b      	beq.n	800ad22 <USBD_GetConfig+0x4a>
 800ad0a:	e012      	b.n	800ad32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3308      	adds	r3, #8
 800ad16:	2201      	movs	r2, #1
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f927 	bl	800af6e <USBD_CtlSendData>
        break;
 800ad20:	e00c      	b.n	800ad3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3304      	adds	r3, #4
 800ad26:	2201      	movs	r2, #1
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f91f 	bl	800af6e <USBD_CtlSendData>
        break;
 800ad30:	e004      	b.n	800ad3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f8a9 	bl	800ae8c <USBD_CtlError>
        break;
 800ad3a:	bf00      	nop
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	3b01      	subs	r3, #1
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d81e      	bhi.n	800ad9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	88db      	ldrh	r3, [r3, #6]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d004      	beq.n	800ad6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f890 	bl	800ae8c <USBD_CtlError>
        break;
 800ad6c:	e01a      	b.n	800ada4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d005      	beq.n	800ad8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f043 0202 	orr.w	r2, r3, #2
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	330c      	adds	r3, #12
 800ad8e:	2202      	movs	r2, #2
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f8eb 	bl	800af6e <USBD_CtlSendData>
      break;
 800ad98:	e004      	b.n	800ada4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f875 	bl	800ae8c <USBD_CtlError>
      break;
 800ada2:	bf00      	nop
  }
}
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	885b      	ldrh	r3, [r3, #2]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d106      	bne.n	800adcc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f92b 	bl	800b022 <USBD_CtlSendStatus>
  }
}
 800adcc:	bf00      	nop
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	3b01      	subs	r3, #1
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d80b      	bhi.n	800ae04 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	885b      	ldrh	r3, [r3, #2]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d10c      	bne.n	800ae0e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f910 	bl	800b022 <USBD_CtlSendStatus>
      }
      break;
 800ae02:	e004      	b.n	800ae0e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f840 	bl	800ae8c <USBD_CtlError>
      break;
 800ae0c:	e000      	b.n	800ae10 <USBD_ClrFeature+0x3c>
      break;
 800ae0e:	bf00      	nop
  }
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	781a      	ldrb	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3301      	adds	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	781a      	ldrb	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7ff fa92 	bl	800a36c <SWAPBYTE>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3301      	adds	r3, #1
 800ae54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f7ff fa85 	bl	800a36c <SWAPBYTE>
 800ae62:	4603      	mov	r3, r0
 800ae64:	461a      	mov	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	3301      	adds	r3, #1
 800ae74:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7ff fa78 	bl	800a36c <SWAPBYTE>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	461a      	mov	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	80da      	strh	r2, [r3, #6]
}
 800ae84:	bf00      	nop
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae96:	2180      	movs	r1, #128	@ 0x80
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fc95 	bl	800b7c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae9e:	2100      	movs	r1, #0
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fc91 	bl	800b7c8 <USBD_LL_StallEP>
}
 800aea6:	bf00      	nop
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b086      	sub	sp, #24
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	60f8      	str	r0, [r7, #12]
 800aeb6:	60b9      	str	r1, [r7, #8]
 800aeb8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aeba:	2300      	movs	r3, #0
 800aebc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d036      	beq.n	800af32 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aec8:	6938      	ldr	r0, [r7, #16]
 800aeca:	f000 f836 	bl	800af3a <USBD_GetLen>
 800aece:	4603      	mov	r3, r0
 800aed0:	3301      	adds	r3, #1
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aedc:	7dfb      	ldrb	r3, [r7, #23]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	4413      	add	r3, r2
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	7812      	ldrb	r2, [r2, #0]
 800aee6:	701a      	strb	r2, [r3, #0]
  idx++;
 800aee8:	7dfb      	ldrb	r3, [r7, #23]
 800aeea:	3301      	adds	r3, #1
 800aeec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	4413      	add	r3, r2
 800aef4:	2203      	movs	r2, #3
 800aef6:	701a      	strb	r2, [r3, #0]
  idx++;
 800aef8:	7dfb      	ldrb	r3, [r7, #23]
 800aefa:	3301      	adds	r3, #1
 800aefc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aefe:	e013      	b.n	800af28 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	4413      	add	r3, r2
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	7812      	ldrb	r2, [r2, #0]
 800af0a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	3301      	adds	r3, #1
 800af10:	613b      	str	r3, [r7, #16]
    idx++;
 800af12:	7dfb      	ldrb	r3, [r7, #23]
 800af14:	3301      	adds	r3, #1
 800af16:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af18:	7dfb      	ldrb	r3, [r7, #23]
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	4413      	add	r3, r2
 800af1e:	2200      	movs	r2, #0
 800af20:	701a      	strb	r2, [r3, #0]
    idx++;
 800af22:	7dfb      	ldrb	r3, [r7, #23]
 800af24:	3301      	adds	r3, #1
 800af26:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e7      	bne.n	800af00 <USBD_GetString+0x52>
 800af30:	e000      	b.n	800af34 <USBD_GetString+0x86>
    return;
 800af32:	bf00      	nop
  }
}
 800af34:	3718      	adds	r7, #24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af4a:	e005      	b.n	800af58 <USBD_GetLen+0x1e>
  {
    len++;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	3301      	adds	r3, #1
 800af50:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	3301      	adds	r3, #1
 800af56:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1f5      	bne.n	800af4c <USBD_GetLen+0x12>
  }

  return len;
 800af60:	7bfb      	ldrb	r3, [r7, #15]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3714      	adds	r7, #20
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b084      	sub	sp, #16
 800af72:	af00      	add	r7, sp, #0
 800af74:	60f8      	str	r0, [r7, #12]
 800af76:	60b9      	str	r1, [r7, #8]
 800af78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2202      	movs	r2, #2
 800af7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	2100      	movs	r1, #0
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 fca0 	bl	800b8da <USBD_LL_Transmit>

  return USBD_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	2100      	movs	r1, #0
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f000 fc8f 	bl	800b8da <USBD_LL_Transmit>

  return USBD_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	60f8      	str	r0, [r7, #12]
 800afce:	60b9      	str	r1, [r7, #8]
 800afd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2203      	movs	r2, #3
 800afd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	2100      	movs	r1, #0
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 fc93 	bl	800b91c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	2100      	movs	r1, #0
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 fc82 	bl	800b91c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2204      	movs	r2, #4
 800b02e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b032:	2300      	movs	r3, #0
 800b034:	2200      	movs	r2, #0
 800b036:	2100      	movs	r1, #0
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fc4e 	bl	800b8da <USBD_LL_Transmit>

  return USBD_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2205      	movs	r2, #5
 800b054:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b058:	2300      	movs	r3, #0
 800b05a:	2200      	movs	r2, #0
 800b05c:	2100      	movs	r1, #0
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fc5c 	bl	800b91c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
	...

0800b070 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b074:	2200      	movs	r2, #0
 800b076:	4912      	ldr	r1, [pc, #72]	@ (800b0c0 <MX_USB_Device_Init+0x50>)
 800b078:	4812      	ldr	r0, [pc, #72]	@ (800b0c4 <MX_USB_Device_Init+0x54>)
 800b07a:	f7fe fed9 	bl	8009e30 <USBD_Init>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b084:	f7f5 fd43 	bl	8000b0e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b088:	490f      	ldr	r1, [pc, #60]	@ (800b0c8 <MX_USB_Device_Init+0x58>)
 800b08a:	480e      	ldr	r0, [pc, #56]	@ (800b0c4 <MX_USB_Device_Init+0x54>)
 800b08c:	f7fe ff00 	bl	8009e90 <USBD_RegisterClass>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b096:	f7f5 fd3a 	bl	8000b0e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b09a:	490c      	ldr	r1, [pc, #48]	@ (800b0cc <MX_USB_Device_Init+0x5c>)
 800b09c:	4809      	ldr	r0, [pc, #36]	@ (800b0c4 <MX_USB_Device_Init+0x54>)
 800b09e:	f7fe fe21 	bl	8009ce4 <USBD_CDC_RegisterInterface>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b0a8:	f7f5 fd31 	bl	8000b0e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b0ac:	4805      	ldr	r0, [pc, #20]	@ (800b0c4 <MX_USB_Device_Init+0x54>)
 800b0ae:	f7fe ff16 	bl	8009ede <USBD_Start>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b0b8:	f7f5 fd29 	bl	8000b0e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b0bc:	bf00      	nop
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20000130 	.word	0x20000130
 800b0c4:	20002494 	.word	0x20002494
 800b0c8:	20000018 	.word	0x20000018
 800b0cc:	2000011c 	.word	0x2000011c

0800b0d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	4905      	ldr	r1, [pc, #20]	@ (800b0ec <CDC_Init_FS+0x1c>)
 800b0d8:	4805      	ldr	r0, [pc, #20]	@ (800b0f0 <CDC_Init_FS+0x20>)
 800b0da:	f7fe fe18 	bl	8009d0e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b0de:	4905      	ldr	r1, [pc, #20]	@ (800b0f4 <CDC_Init_FS+0x24>)
 800b0e0:	4803      	ldr	r0, [pc, #12]	@ (800b0f0 <CDC_Init_FS+0x20>)
 800b0e2:	f7fe fe32 	bl	8009d4a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b0e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	20002b64 	.word	0x20002b64
 800b0f0:	20002494 	.word	0x20002494
 800b0f4:	20002764 	.word	0x20002764

0800b0f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b0fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	4603      	mov	r3, r0
 800b110:	6039      	str	r1, [r7, #0]
 800b112:	71fb      	strb	r3, [r7, #7]
 800b114:	4613      	mov	r3, r2
 800b116:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b118:	79fb      	ldrb	r3, [r7, #7]
 800b11a:	2b23      	cmp	r3, #35	@ 0x23
 800b11c:	d84a      	bhi.n	800b1b4 <CDC_Control_FS+0xac>
 800b11e:	a201      	add	r2, pc, #4	@ (adr r2, 800b124 <CDC_Control_FS+0x1c>)
 800b120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b124:	0800b1b5 	.word	0x0800b1b5
 800b128:	0800b1b5 	.word	0x0800b1b5
 800b12c:	0800b1b5 	.word	0x0800b1b5
 800b130:	0800b1b5 	.word	0x0800b1b5
 800b134:	0800b1b5 	.word	0x0800b1b5
 800b138:	0800b1b5 	.word	0x0800b1b5
 800b13c:	0800b1b5 	.word	0x0800b1b5
 800b140:	0800b1b5 	.word	0x0800b1b5
 800b144:	0800b1b5 	.word	0x0800b1b5
 800b148:	0800b1b5 	.word	0x0800b1b5
 800b14c:	0800b1b5 	.word	0x0800b1b5
 800b150:	0800b1b5 	.word	0x0800b1b5
 800b154:	0800b1b5 	.word	0x0800b1b5
 800b158:	0800b1b5 	.word	0x0800b1b5
 800b15c:	0800b1b5 	.word	0x0800b1b5
 800b160:	0800b1b5 	.word	0x0800b1b5
 800b164:	0800b1b5 	.word	0x0800b1b5
 800b168:	0800b1b5 	.word	0x0800b1b5
 800b16c:	0800b1b5 	.word	0x0800b1b5
 800b170:	0800b1b5 	.word	0x0800b1b5
 800b174:	0800b1b5 	.word	0x0800b1b5
 800b178:	0800b1b5 	.word	0x0800b1b5
 800b17c:	0800b1b5 	.word	0x0800b1b5
 800b180:	0800b1b5 	.word	0x0800b1b5
 800b184:	0800b1b5 	.word	0x0800b1b5
 800b188:	0800b1b5 	.word	0x0800b1b5
 800b18c:	0800b1b5 	.word	0x0800b1b5
 800b190:	0800b1b5 	.word	0x0800b1b5
 800b194:	0800b1b5 	.word	0x0800b1b5
 800b198:	0800b1b5 	.word	0x0800b1b5
 800b19c:	0800b1b5 	.word	0x0800b1b5
 800b1a0:	0800b1b5 	.word	0x0800b1b5
 800b1a4:	0800b1b5 	.word	0x0800b1b5
 800b1a8:	0800b1b5 	.word	0x0800b1b5
 800b1ac:	0800b1b5 	.word	0x0800b1b5
 800b1b0:	0800b1b5 	.word	0x0800b1b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b1b4:	bf00      	nop
  }

  return (USBD_OK);
 800b1b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b1ce:	6879      	ldr	r1, [r7, #4]
 800b1d0:	4805      	ldr	r0, [pc, #20]	@ (800b1e8 <CDC_Receive_FS+0x24>)
 800b1d2:	f7fe fdba 	bl	8009d4a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b1d6:	4804      	ldr	r0, [pc, #16]	@ (800b1e8 <CDC_Receive_FS+0x24>)
 800b1d8:	f7fe fe00 	bl	8009ddc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b1dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20002494 	.word	0x20002494

0800b1ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b1fc:	4b0d      	ldr	r3, [pc, #52]	@ (800b234 <CDC_Transmit_FS+0x48>)
 800b1fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b202:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b20e:	2301      	movs	r3, #1
 800b210:	e00b      	b.n	800b22a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b212:	887b      	ldrh	r3, [r7, #2]
 800b214:	461a      	mov	r2, r3
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	4806      	ldr	r0, [pc, #24]	@ (800b234 <CDC_Transmit_FS+0x48>)
 800b21a:	f7fe fd78 	bl	8009d0e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b21e:	4805      	ldr	r0, [pc, #20]	@ (800b234 <CDC_Transmit_FS+0x48>)
 800b220:	f7fe fdac 	bl	8009d7c <USBD_CDC_TransmitPacket>
 800b224:	4603      	mov	r3, r0
 800b226:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b228:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	20002494 	.word	0x20002494

0800b238 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b238:	b480      	push	{r7}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	4613      	mov	r3, r2
 800b244:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b246:	2300      	movs	r3, #0
 800b248:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b24a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	371c      	adds	r7, #28
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
	...

0800b25c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	4603      	mov	r3, r0
 800b264:	6039      	str	r1, [r7, #0]
 800b266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	2212      	movs	r2, #18
 800b26c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b26e:	4b03      	ldr	r3, [pc, #12]	@ (800b27c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b270:	4618      	mov	r0, r3
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	20000150 	.word	0x20000150

0800b280 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	4603      	mov	r3, r0
 800b288:	6039      	str	r1, [r7, #0]
 800b28a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	2204      	movs	r2, #4
 800b290:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b292:	4b03      	ldr	r3, [pc, #12]	@ (800b2a0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b294:	4618      	mov	r0, r3
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	20000164 	.word	0x20000164

0800b2a4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	6039      	str	r1, [r7, #0]
 800b2ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2b0:	79fb      	ldrb	r3, [r7, #7]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d105      	bne.n	800b2c2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	4907      	ldr	r1, [pc, #28]	@ (800b2d8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b2ba:	4808      	ldr	r0, [pc, #32]	@ (800b2dc <USBD_CDC_ProductStrDescriptor+0x38>)
 800b2bc:	f7ff fdf7 	bl	800aeae <USBD_GetString>
 800b2c0:	e004      	b.n	800b2cc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	4904      	ldr	r1, [pc, #16]	@ (800b2d8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b2c6:	4805      	ldr	r0, [pc, #20]	@ (800b2dc <USBD_CDC_ProductStrDescriptor+0x38>)
 800b2c8:	f7ff fdf1 	bl	800aeae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2cc:	4b02      	ldr	r3, [pc, #8]	@ (800b2d8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20002f64 	.word	0x20002f64
 800b2dc:	0800c3e8 	.word	0x0800c3e8

0800b2e0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	6039      	str	r1, [r7, #0]
 800b2ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	4904      	ldr	r1, [pc, #16]	@ (800b300 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b2f0:	4804      	ldr	r0, [pc, #16]	@ (800b304 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b2f2:	f7ff fddc 	bl	800aeae <USBD_GetString>
  return USBD_StrDesc;
 800b2f6:	4b02      	ldr	r3, [pc, #8]	@ (800b300 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20002f64 	.word	0x20002f64
 800b304:	0800c400 	.word	0x0800c400

0800b308 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	6039      	str	r1, [r7, #0]
 800b312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	221a      	movs	r2, #26
 800b318:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b31a:	f000 f843 	bl	800b3a4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b31e:	4b02      	ldr	r3, [pc, #8]	@ (800b328 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	20000168 	.word	0x20000168

0800b32c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	4603      	mov	r3, r0
 800b334:	6039      	str	r1, [r7, #0]
 800b336:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b338:	79fb      	ldrb	r3, [r7, #7]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d105      	bne.n	800b34a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	4907      	ldr	r1, [pc, #28]	@ (800b360 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b342:	4808      	ldr	r0, [pc, #32]	@ (800b364 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b344:	f7ff fdb3 	bl	800aeae <USBD_GetString>
 800b348:	e004      	b.n	800b354 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	4904      	ldr	r1, [pc, #16]	@ (800b360 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b34e:	4805      	ldr	r0, [pc, #20]	@ (800b364 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b350:	f7ff fdad 	bl	800aeae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b354:	4b02      	ldr	r3, [pc, #8]	@ (800b360 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b356:	4618      	mov	r0, r3
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20002f64 	.word	0x20002f64
 800b364:	0800c414 	.word	0x0800c414

0800b368 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	6039      	str	r1, [r7, #0]
 800b372:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d105      	bne.n	800b386 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	4907      	ldr	r1, [pc, #28]	@ (800b39c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b37e:	4808      	ldr	r0, [pc, #32]	@ (800b3a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b380:	f7ff fd95 	bl	800aeae <USBD_GetString>
 800b384:	e004      	b.n	800b390 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	4904      	ldr	r1, [pc, #16]	@ (800b39c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b38a:	4805      	ldr	r0, [pc, #20]	@ (800b3a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b38c:	f7ff fd8f 	bl	800aeae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b390:	4b02      	ldr	r3, [pc, #8]	@ (800b39c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b392:	4618      	mov	r0, r3
 800b394:	3708      	adds	r7, #8
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	20002f64 	.word	0x20002f64
 800b3a0:	0800c420 	.word	0x0800c420

0800b3a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e8 <Get_SerialNum+0x44>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b3ec <Get_SerialNum+0x48>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3b6:	4b0e      	ldr	r3, [pc, #56]	@ (800b3f0 <Get_SerialNum+0x4c>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d009      	beq.n	800b3de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3ca:	2208      	movs	r2, #8
 800b3cc:	4909      	ldr	r1, [pc, #36]	@ (800b3f4 <Get_SerialNum+0x50>)
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 f814 	bl	800b3fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3d4:	2204      	movs	r2, #4
 800b3d6:	4908      	ldr	r1, [pc, #32]	@ (800b3f8 <Get_SerialNum+0x54>)
 800b3d8:	68b8      	ldr	r0, [r7, #8]
 800b3da:	f000 f80f 	bl	800b3fc <IntToUnicode>
  }
}
 800b3de:	bf00      	nop
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	1fff7590 	.word	0x1fff7590
 800b3ec:	1fff7594 	.word	0x1fff7594
 800b3f0:	1fff7598 	.word	0x1fff7598
 800b3f4:	2000016a 	.word	0x2000016a
 800b3f8:	2000017a 	.word	0x2000017a

0800b3fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b087      	sub	sp, #28
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	4613      	mov	r3, r2
 800b408:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b40e:	2300      	movs	r3, #0
 800b410:	75fb      	strb	r3, [r7, #23]
 800b412:	e027      	b.n	800b464 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	0f1b      	lsrs	r3, r3, #28
 800b418:	2b09      	cmp	r3, #9
 800b41a:	d80b      	bhi.n	800b434 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	0f1b      	lsrs	r3, r3, #28
 800b420:	b2da      	uxtb	r2, r3
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	005b      	lsls	r3, r3, #1
 800b426:	4619      	mov	r1, r3
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	440b      	add	r3, r1
 800b42c:	3230      	adds	r2, #48	@ 0x30
 800b42e:	b2d2      	uxtb	r2, r2
 800b430:	701a      	strb	r2, [r3, #0]
 800b432:	e00a      	b.n	800b44a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	0f1b      	lsrs	r3, r3, #28
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	7dfb      	ldrb	r3, [r7, #23]
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	4619      	mov	r1, r3
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	440b      	add	r3, r1
 800b444:	3237      	adds	r2, #55	@ 0x37
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	011b      	lsls	r3, r3, #4
 800b44e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b450:	7dfb      	ldrb	r3, [r7, #23]
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	3301      	adds	r3, #1
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	4413      	add	r3, r2
 800b45a:	2200      	movs	r2, #0
 800b45c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	3301      	adds	r3, #1
 800b462:	75fb      	strb	r3, [r7, #23]
 800b464:	7dfa      	ldrb	r2, [r7, #23]
 800b466:	79fb      	ldrb	r3, [r7, #7]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d3d3      	bcc.n	800b414 <IntToUnicode+0x18>
  }
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	371c      	adds	r7, #28
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
	...

0800b47c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b094      	sub	sp, #80	@ 0x50
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b484:	f107 030c 	add.w	r3, r7, #12
 800b488:	2244      	movs	r2, #68	@ 0x44
 800b48a:	2100      	movs	r1, #0
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 fb19 	bl	800bac4 <memset>
  if(pcdHandle->Instance==USB)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a15      	ldr	r2, [pc, #84]	@ (800b4ec <HAL_PCD_MspInit+0x70>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d122      	bne.n	800b4e2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b49c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b4a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b4a6:	f107 030c 	add.w	r3, r7, #12
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fa fc1c 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d001      	beq.n	800b4ba <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b4b6:	f7f5 fb2a 	bl	8000b0e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f0 <HAL_PCD_MspInit+0x74>)
 800b4bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4be:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f0 <HAL_PCD_MspInit+0x74>)
 800b4c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b4c4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f0 <HAL_PCD_MspInit+0x74>)
 800b4c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4ce:	60bb      	str	r3, [r7, #8]
 800b4d0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	2014      	movs	r0, #20
 800b4d8:	f7f7 f929 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b4dc:	2014      	movs	r0, #20
 800b4de:	f7f7 f940 	bl	8002762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b4e2:	bf00      	nop
 800b4e4:	3750      	adds	r7, #80	@ 0x50
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	40005c00 	.word	0x40005c00
 800b4f0:	40021000 	.word	0x40021000

0800b4f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b508:	4619      	mov	r1, r3
 800b50a:	4610      	mov	r0, r2
 800b50c:	f7fe fd32 	bl	8009f74 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b52a:	78fa      	ldrb	r2, [r7, #3]
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	440b      	add	r3, r1
 800b538:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	78fb      	ldrb	r3, [r7, #3]
 800b540:	4619      	mov	r1, r3
 800b542:	f7fe fd6c 	bl	800a01e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b546:	bf00      	nop
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b082      	sub	sp, #8
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	460b      	mov	r3, r1
 800b558:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b560:	78fa      	ldrb	r2, [r7, #3]
 800b562:	6879      	ldr	r1, [r7, #4]
 800b564:	4613      	mov	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	4413      	add	r3, r2
 800b56a:	00db      	lsls	r3, r3, #3
 800b56c:	440b      	add	r3, r1
 800b56e:	3324      	adds	r3, #36	@ 0x24
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	78fb      	ldrb	r3, [r7, #3]
 800b574:	4619      	mov	r1, r3
 800b576:	f7fe fdb5 	bl	800a0e4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b082      	sub	sp, #8
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b590:	4618      	mov	r0, r3
 800b592:	f7fe fec9 	bl	800a328 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b596:	bf00      	nop
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	795b      	ldrb	r3, [r3, #5]
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d001      	beq.n	800b5b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b5b2:	f7f5 faac 	bl	8000b0e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5bc:	7bfa      	ldrb	r2, [r7, #15]
 800b5be:	4611      	mov	r1, r2
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fe fe73 	bl	800a2ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fe fe1f 	bl	800a210 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b5d2:	bf00      	nop
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fe6e 	bl	800a2cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	7a5b      	ldrb	r3, [r3, #9]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d005      	beq.n	800b604 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5f8:	4b04      	ldr	r3, [pc, #16]	@ (800b60c <HAL_PCD_SuspendCallback+0x30>)
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	4a03      	ldr	r2, [pc, #12]	@ (800b60c <HAL_PCD_SuspendCallback+0x30>)
 800b5fe:	f043 0306 	orr.w	r3, r3, #6
 800b602:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b604:	bf00      	nop
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	e000ed00 	.word	0xe000ed00

0800b610 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	7a5b      	ldrb	r3, [r3, #9]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d007      	beq.n	800b630 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b620:	4b08      	ldr	r3, [pc, #32]	@ (800b644 <HAL_PCD_ResumeCallback+0x34>)
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	4a07      	ldr	r2, [pc, #28]	@ (800b644 <HAL_PCD_ResumeCallback+0x34>)
 800b626:	f023 0306 	bic.w	r3, r3, #6
 800b62a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b62c:	f000 f9f8 	bl	800ba20 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe fe5e 	bl	800a2f8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b63c:	bf00      	nop
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	e000ed00 	.word	0xe000ed00

0800b648 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b650:	4a2b      	ldr	r2, [pc, #172]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a29      	ldr	r2, [pc, #164]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b65c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b660:	4b27      	ldr	r3, [pc, #156]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b662:	4a28      	ldr	r2, [pc, #160]	@ (800b704 <USBD_LL_Init+0xbc>)
 800b664:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b666:	4b26      	ldr	r3, [pc, #152]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b668:	2208      	movs	r2, #8
 800b66a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b66c:	4b24      	ldr	r3, [pc, #144]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b66e:	2202      	movs	r2, #2
 800b670:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b672:	4b23      	ldr	r3, [pc, #140]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b674:	2202      	movs	r2, #2
 800b676:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b678:	4b21      	ldr	r3, [pc, #132]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b67e:	4b20      	ldr	r3, [pc, #128]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b680:	2200      	movs	r2, #0
 800b682:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b684:	4b1e      	ldr	r3, [pc, #120]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b686:	2200      	movs	r2, #0
 800b688:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b68a:	4b1d      	ldr	r3, [pc, #116]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b690:	481b      	ldr	r0, [pc, #108]	@ (800b700 <USBD_LL_Init+0xb8>)
 800b692:	f7f8 f814 	bl	80036be <HAL_PCD_Init>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b69c:	f7f5 fa37 	bl	8000b0e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b6a6:	2318      	movs	r3, #24
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	f7f9 fccd 	bl	800504a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b6b6:	2358      	movs	r3, #88	@ 0x58
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2180      	movs	r1, #128	@ 0x80
 800b6bc:	f7f9 fcc5 	bl	800504a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b6c6:	23c0      	movs	r3, #192	@ 0xc0
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	2181      	movs	r1, #129	@ 0x81
 800b6cc:	f7f9 fcbd 	bl	800504a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b6d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2101      	movs	r1, #1
 800b6de:	f7f9 fcb4 	bl	800504a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b6e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2182      	movs	r1, #130	@ 0x82
 800b6f0:	f7f9 fcab 	bl	800504a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	20003164 	.word	0x20003164
 800b704:	40005c00 	.word	0x40005c00

0800b708 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b714:	2300      	movs	r3, #0
 800b716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f8 f89b 	bl	800385a <HAL_PCD_Start>
 800b724:	4603      	mov	r3, r0
 800b726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b728:	7bfb      	ldrb	r3, [r7, #15]
 800b72a:	4618      	mov	r0, r3
 800b72c:	f000 f97e 	bl	800ba2c <USBD_Get_USB_Status>
 800b730:	4603      	mov	r3, r0
 800b732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b734:	7bbb      	ldrb	r3, [r7, #14]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	4608      	mov	r0, r1
 800b748:	4611      	mov	r1, r2
 800b74a:	461a      	mov	r2, r3
 800b74c:	4603      	mov	r3, r0
 800b74e:	70fb      	strb	r3, [r7, #3]
 800b750:	460b      	mov	r3, r1
 800b752:	70bb      	strb	r3, [r7, #2]
 800b754:	4613      	mov	r3, r2
 800b756:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b758:	2300      	movs	r3, #0
 800b75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b766:	78bb      	ldrb	r3, [r7, #2]
 800b768:	883a      	ldrh	r2, [r7, #0]
 800b76a:	78f9      	ldrb	r1, [r7, #3]
 800b76c:	f7f8 f9e2 	bl	8003b34 <HAL_PCD_EP_Open>
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	4618      	mov	r0, r3
 800b778:	f000 f958 	bl	800ba2c <USBD_Get_USB_Status>
 800b77c:	4603      	mov	r3, r0
 800b77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b780:	7bbb      	ldrb	r3, [r7, #14]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b084      	sub	sp, #16
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	460b      	mov	r3, r1
 800b794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b7a4:	78fa      	ldrb	r2, [r7, #3]
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7f8 fa20 	bl	8003bee <HAL_PCD_EP_Close>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7b2:	7bfb      	ldrb	r3, [r7, #15]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 f939 	bl	800ba2c <USBD_Get_USB_Status>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7be:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b7e2:	78fa      	ldrb	r2, [r7, #3]
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7f8 fac9 	bl	8003d7e <HAL_PCD_EP_SetStall>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 f91a 	bl	800ba2c <USBD_Get_USB_Status>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	460b      	mov	r3, r1
 800b810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b816:	2300      	movs	r3, #0
 800b818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b820:	78fa      	ldrb	r2, [r7, #3]
 800b822:	4611      	mov	r1, r2
 800b824:	4618      	mov	r0, r3
 800b826:	f7f8 fafc 	bl	8003e22 <HAL_PCD_EP_ClrStall>
 800b82a:	4603      	mov	r3, r0
 800b82c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b82e:	7bfb      	ldrb	r3, [r7, #15]
 800b830:	4618      	mov	r0, r3
 800b832:	f000 f8fb 	bl	800ba2c <USBD_Get_USB_Status>
 800b836:	4603      	mov	r3, r0
 800b838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b83a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b856:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	da0b      	bge.n	800b878 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b860:	78fb      	ldrb	r3, [r7, #3]
 800b862:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b866:	68f9      	ldr	r1, [r7, #12]
 800b868:	4613      	mov	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4413      	add	r3, r2
 800b86e:	00db      	lsls	r3, r3, #3
 800b870:	440b      	add	r3, r1
 800b872:	3312      	adds	r3, #18
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	e00b      	b.n	800b890 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b878:	78fb      	ldrb	r3, [r7, #3]
 800b87a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b87e:	68f9      	ldr	r1, [r7, #12]
 800b880:	4613      	mov	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	440b      	add	r3, r1
 800b88a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b88e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b8b6:	78fa      	ldrb	r2, [r7, #3]
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7f8 f916 	bl	8003aec <HAL_PCD_SetAddress>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 f8b0 	bl	800ba2c <USBD_Get_USB_Status>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b086      	sub	sp, #24
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	603b      	str	r3, [r7, #0]
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b8f8:	7af9      	ldrb	r1, [r7, #11]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	f7f8 fa07 	bl	8003d10 <HAL_PCD_EP_Transmit>
 800b902:	4603      	mov	r3, r0
 800b904:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 f88f 	bl	800ba2c <USBD_Get_USB_Status>
 800b90e:	4603      	mov	r3, r0
 800b910:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b912:	7dbb      	ldrb	r3, [r7, #22]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3718      	adds	r7, #24
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	607a      	str	r2, [r7, #4]
 800b926:	603b      	str	r3, [r7, #0]
 800b928:	460b      	mov	r3, r1
 800b92a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b93a:	7af9      	ldrb	r1, [r7, #11]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	f7f8 f99d 	bl	8003c7e <HAL_PCD_EP_Receive>
 800b944:	4603      	mov	r3, r0
 800b946:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b948:	7dfb      	ldrb	r3, [r7, #23]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f86e 	bl	800ba2c <USBD_Get_USB_Status>
 800b950:	4603      	mov	r3, r0
 800b952:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b954:	7dbb      	ldrb	r3, [r7, #22]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3718      	adds	r7, #24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b082      	sub	sp, #8
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	460b      	mov	r3, r1
 800b968:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b970:	78fa      	ldrb	r2, [r7, #3]
 800b972:	4611      	mov	r1, r2
 800b974:	4618      	mov	r0, r3
 800b976:	f7f8 f9b3 	bl	8003ce0 <HAL_PCD_EP_GetRxCount>
 800b97a:	4603      	mov	r3, r0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b990:	78fb      	ldrb	r3, [r7, #3]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <HAL_PCDEx_LPM_Callback+0x18>
 800b996:	2b01      	cmp	r3, #1
 800b998:	d013      	beq.n	800b9c2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b99a:	e023      	b.n	800b9e4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	7a5b      	ldrb	r3, [r3, #9]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d007      	beq.n	800b9b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b9a4:	f000 f83c 	bl	800ba20 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9a8:	4b10      	ldr	r3, [pc, #64]	@ (800b9ec <HAL_PCDEx_LPM_Callback+0x68>)
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	4a0f      	ldr	r2, [pc, #60]	@ (800b9ec <HAL_PCDEx_LPM_Callback+0x68>)
 800b9ae:	f023 0306 	bic.w	r3, r3, #6
 800b9b2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe fc9c 	bl	800a2f8 <USBD_LL_Resume>
    break;
 800b9c0:	e010      	b.n	800b9e4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fc7f 	bl	800a2cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	7a5b      	ldrb	r3, [r3, #9]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d005      	beq.n	800b9e2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9d6:	4b05      	ldr	r3, [pc, #20]	@ (800b9ec <HAL_PCDEx_LPM_Callback+0x68>)
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	4a04      	ldr	r2, [pc, #16]	@ (800b9ec <HAL_PCDEx_LPM_Callback+0x68>)
 800b9dc:	f043 0306 	orr.w	r3, r3, #6
 800b9e0:	6113      	str	r3, [r2, #16]
    break;
 800b9e2:	bf00      	nop
}
 800b9e4:	bf00      	nop
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	e000ed00 	.word	0xe000ed00

0800b9f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b9f8:	4b03      	ldr	r3, [pc, #12]	@ (800ba08 <USBD_static_malloc+0x18>)
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	20003440 	.word	0x20003440

0800ba0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]

}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ba24:	f7f5 f828 	bl	8000a78 <SystemClock_Config>
}
 800ba28:	bf00      	nop
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	4603      	mov	r3, r0
 800ba34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	d817      	bhi.n	800ba70 <USBD_Get_USB_Status+0x44>
 800ba40:	a201      	add	r2, pc, #4	@ (adr r2, 800ba48 <USBD_Get_USB_Status+0x1c>)
 800ba42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba46:	bf00      	nop
 800ba48:	0800ba59 	.word	0x0800ba59
 800ba4c:	0800ba5f 	.word	0x0800ba5f
 800ba50:	0800ba65 	.word	0x0800ba65
 800ba54:	0800ba6b 	.word	0x0800ba6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba5c:	e00b      	b.n	800ba76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	73fb      	strb	r3, [r7, #15]
    break;
 800ba62:	e008      	b.n	800ba76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba64:	2301      	movs	r3, #1
 800ba66:	73fb      	strb	r3, [r7, #15]
    break;
 800ba68:	e005      	b.n	800ba76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba6e:	e002      	b.n	800ba76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba70:	2303      	movs	r3, #3
 800ba72:	73fb      	strb	r3, [r7, #15]
    break;
 800ba74:	bf00      	nop
  }
  return usb_status;
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <siprintf>:
 800ba84:	b40e      	push	{r1, r2, r3}
 800ba86:	b500      	push	{lr}
 800ba88:	b09c      	sub	sp, #112	@ 0x70
 800ba8a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ba8c:	9002      	str	r0, [sp, #8]
 800ba8e:	9006      	str	r0, [sp, #24]
 800ba90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba94:	4809      	ldr	r0, [pc, #36]	@ (800babc <siprintf+0x38>)
 800ba96:	9107      	str	r1, [sp, #28]
 800ba98:	9104      	str	r1, [sp, #16]
 800ba9a:	4909      	ldr	r1, [pc, #36]	@ (800bac0 <siprintf+0x3c>)
 800ba9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa0:	9105      	str	r1, [sp, #20]
 800baa2:	6800      	ldr	r0, [r0, #0]
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	a902      	add	r1, sp, #8
 800baa8:	f000 f994 	bl	800bdd4 <_svfiprintf_r>
 800baac:	9b02      	ldr	r3, [sp, #8]
 800baae:	2200      	movs	r2, #0
 800bab0:	701a      	strb	r2, [r3, #0]
 800bab2:	b01c      	add	sp, #112	@ 0x70
 800bab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bab8:	b003      	add	sp, #12
 800baba:	4770      	bx	lr
 800babc:	20000184 	.word	0x20000184
 800bac0:	ffff0208 	.word	0xffff0208

0800bac4 <memset>:
 800bac4:	4402      	add	r2, r0
 800bac6:	4603      	mov	r3, r0
 800bac8:	4293      	cmp	r3, r2
 800baca:	d100      	bne.n	800bace <memset+0xa>
 800bacc:	4770      	bx	lr
 800bace:	f803 1b01 	strb.w	r1, [r3], #1
 800bad2:	e7f9      	b.n	800bac8 <memset+0x4>

0800bad4 <__errno>:
 800bad4:	4b01      	ldr	r3, [pc, #4]	@ (800badc <__errno+0x8>)
 800bad6:	6818      	ldr	r0, [r3, #0]
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	20000184 	.word	0x20000184

0800bae0 <__libc_init_array>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	4d0d      	ldr	r5, [pc, #52]	@ (800bb18 <__libc_init_array+0x38>)
 800bae4:	4c0d      	ldr	r4, [pc, #52]	@ (800bb1c <__libc_init_array+0x3c>)
 800bae6:	1b64      	subs	r4, r4, r5
 800bae8:	10a4      	asrs	r4, r4, #2
 800baea:	2600      	movs	r6, #0
 800baec:	42a6      	cmp	r6, r4
 800baee:	d109      	bne.n	800bb04 <__libc_init_array+0x24>
 800baf0:	4d0b      	ldr	r5, [pc, #44]	@ (800bb20 <__libc_init_array+0x40>)
 800baf2:	4c0c      	ldr	r4, [pc, #48]	@ (800bb24 <__libc_init_array+0x44>)
 800baf4:	f000 fc66 	bl	800c3c4 <_init>
 800baf8:	1b64      	subs	r4, r4, r5
 800bafa:	10a4      	asrs	r4, r4, #2
 800bafc:	2600      	movs	r6, #0
 800bafe:	42a6      	cmp	r6, r4
 800bb00:	d105      	bne.n	800bb0e <__libc_init_array+0x2e>
 800bb02:	bd70      	pop	{r4, r5, r6, pc}
 800bb04:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb08:	4798      	blx	r3
 800bb0a:	3601      	adds	r6, #1
 800bb0c:	e7ee      	b.n	800baec <__libc_init_array+0xc>
 800bb0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb12:	4798      	blx	r3
 800bb14:	3601      	adds	r6, #1
 800bb16:	e7f2      	b.n	800bafe <__libc_init_array+0x1e>
 800bb18:	0800c4ac 	.word	0x0800c4ac
 800bb1c:	0800c4ac 	.word	0x0800c4ac
 800bb20:	0800c4ac 	.word	0x0800c4ac
 800bb24:	0800c4b0 	.word	0x0800c4b0

0800bb28 <__retarget_lock_acquire_recursive>:
 800bb28:	4770      	bx	lr

0800bb2a <__retarget_lock_release_recursive>:
 800bb2a:	4770      	bx	lr

0800bb2c <_free_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4605      	mov	r5, r0
 800bb30:	2900      	cmp	r1, #0
 800bb32:	d041      	beq.n	800bbb8 <_free_r+0x8c>
 800bb34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb38:	1f0c      	subs	r4, r1, #4
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	bfb8      	it	lt
 800bb3e:	18e4      	addlt	r4, r4, r3
 800bb40:	f000 f8e0 	bl	800bd04 <__malloc_lock>
 800bb44:	4a1d      	ldr	r2, [pc, #116]	@ (800bbbc <_free_r+0x90>)
 800bb46:	6813      	ldr	r3, [r2, #0]
 800bb48:	b933      	cbnz	r3, 800bb58 <_free_r+0x2c>
 800bb4a:	6063      	str	r3, [r4, #4]
 800bb4c:	6014      	str	r4, [r2, #0]
 800bb4e:	4628      	mov	r0, r5
 800bb50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb54:	f000 b8dc 	b.w	800bd10 <__malloc_unlock>
 800bb58:	42a3      	cmp	r3, r4
 800bb5a:	d908      	bls.n	800bb6e <_free_r+0x42>
 800bb5c:	6820      	ldr	r0, [r4, #0]
 800bb5e:	1821      	adds	r1, r4, r0
 800bb60:	428b      	cmp	r3, r1
 800bb62:	bf01      	itttt	eq
 800bb64:	6819      	ldreq	r1, [r3, #0]
 800bb66:	685b      	ldreq	r3, [r3, #4]
 800bb68:	1809      	addeq	r1, r1, r0
 800bb6a:	6021      	streq	r1, [r4, #0]
 800bb6c:	e7ed      	b.n	800bb4a <_free_r+0x1e>
 800bb6e:	461a      	mov	r2, r3
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	b10b      	cbz	r3, 800bb78 <_free_r+0x4c>
 800bb74:	42a3      	cmp	r3, r4
 800bb76:	d9fa      	bls.n	800bb6e <_free_r+0x42>
 800bb78:	6811      	ldr	r1, [r2, #0]
 800bb7a:	1850      	adds	r0, r2, r1
 800bb7c:	42a0      	cmp	r0, r4
 800bb7e:	d10b      	bne.n	800bb98 <_free_r+0x6c>
 800bb80:	6820      	ldr	r0, [r4, #0]
 800bb82:	4401      	add	r1, r0
 800bb84:	1850      	adds	r0, r2, r1
 800bb86:	4283      	cmp	r3, r0
 800bb88:	6011      	str	r1, [r2, #0]
 800bb8a:	d1e0      	bne.n	800bb4e <_free_r+0x22>
 800bb8c:	6818      	ldr	r0, [r3, #0]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	6053      	str	r3, [r2, #4]
 800bb92:	4408      	add	r0, r1
 800bb94:	6010      	str	r0, [r2, #0]
 800bb96:	e7da      	b.n	800bb4e <_free_r+0x22>
 800bb98:	d902      	bls.n	800bba0 <_free_r+0x74>
 800bb9a:	230c      	movs	r3, #12
 800bb9c:	602b      	str	r3, [r5, #0]
 800bb9e:	e7d6      	b.n	800bb4e <_free_r+0x22>
 800bba0:	6820      	ldr	r0, [r4, #0]
 800bba2:	1821      	adds	r1, r4, r0
 800bba4:	428b      	cmp	r3, r1
 800bba6:	bf04      	itt	eq
 800bba8:	6819      	ldreq	r1, [r3, #0]
 800bbaa:	685b      	ldreq	r3, [r3, #4]
 800bbac:	6063      	str	r3, [r4, #4]
 800bbae:	bf04      	itt	eq
 800bbb0:	1809      	addeq	r1, r1, r0
 800bbb2:	6021      	streq	r1, [r4, #0]
 800bbb4:	6054      	str	r4, [r2, #4]
 800bbb6:	e7ca      	b.n	800bb4e <_free_r+0x22>
 800bbb8:	bd38      	pop	{r3, r4, r5, pc}
 800bbba:	bf00      	nop
 800bbbc:	200037a4 	.word	0x200037a4

0800bbc0 <sbrk_aligned>:
 800bbc0:	b570      	push	{r4, r5, r6, lr}
 800bbc2:	4e0f      	ldr	r6, [pc, #60]	@ (800bc00 <sbrk_aligned+0x40>)
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	6831      	ldr	r1, [r6, #0]
 800bbc8:	4605      	mov	r5, r0
 800bbca:	b911      	cbnz	r1, 800bbd2 <sbrk_aligned+0x12>
 800bbcc:	f000 fba6 	bl	800c31c <_sbrk_r>
 800bbd0:	6030      	str	r0, [r6, #0]
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f000 fba1 	bl	800c31c <_sbrk_r>
 800bbda:	1c43      	adds	r3, r0, #1
 800bbdc:	d103      	bne.n	800bbe6 <sbrk_aligned+0x26>
 800bbde:	f04f 34ff 	mov.w	r4, #4294967295
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	bd70      	pop	{r4, r5, r6, pc}
 800bbe6:	1cc4      	adds	r4, r0, #3
 800bbe8:	f024 0403 	bic.w	r4, r4, #3
 800bbec:	42a0      	cmp	r0, r4
 800bbee:	d0f8      	beq.n	800bbe2 <sbrk_aligned+0x22>
 800bbf0:	1a21      	subs	r1, r4, r0
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f000 fb92 	bl	800c31c <_sbrk_r>
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d1f2      	bne.n	800bbe2 <sbrk_aligned+0x22>
 800bbfc:	e7ef      	b.n	800bbde <sbrk_aligned+0x1e>
 800bbfe:	bf00      	nop
 800bc00:	200037a0 	.word	0x200037a0

0800bc04 <_malloc_r>:
 800bc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc08:	1ccd      	adds	r5, r1, #3
 800bc0a:	f025 0503 	bic.w	r5, r5, #3
 800bc0e:	3508      	adds	r5, #8
 800bc10:	2d0c      	cmp	r5, #12
 800bc12:	bf38      	it	cc
 800bc14:	250c      	movcc	r5, #12
 800bc16:	2d00      	cmp	r5, #0
 800bc18:	4606      	mov	r6, r0
 800bc1a:	db01      	blt.n	800bc20 <_malloc_r+0x1c>
 800bc1c:	42a9      	cmp	r1, r5
 800bc1e:	d904      	bls.n	800bc2a <_malloc_r+0x26>
 800bc20:	230c      	movs	r3, #12
 800bc22:	6033      	str	r3, [r6, #0]
 800bc24:	2000      	movs	r0, #0
 800bc26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd00 <_malloc_r+0xfc>
 800bc2e:	f000 f869 	bl	800bd04 <__malloc_lock>
 800bc32:	f8d8 3000 	ldr.w	r3, [r8]
 800bc36:	461c      	mov	r4, r3
 800bc38:	bb44      	cbnz	r4, 800bc8c <_malloc_r+0x88>
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7ff ffbf 	bl	800bbc0 <sbrk_aligned>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	4604      	mov	r4, r0
 800bc46:	d158      	bne.n	800bcfa <_malloc_r+0xf6>
 800bc48:	f8d8 4000 	ldr.w	r4, [r8]
 800bc4c:	4627      	mov	r7, r4
 800bc4e:	2f00      	cmp	r7, #0
 800bc50:	d143      	bne.n	800bcda <_malloc_r+0xd6>
 800bc52:	2c00      	cmp	r4, #0
 800bc54:	d04b      	beq.n	800bcee <_malloc_r+0xea>
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	4639      	mov	r1, r7
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	eb04 0903 	add.w	r9, r4, r3
 800bc60:	f000 fb5c 	bl	800c31c <_sbrk_r>
 800bc64:	4581      	cmp	r9, r0
 800bc66:	d142      	bne.n	800bcee <_malloc_r+0xea>
 800bc68:	6821      	ldr	r1, [r4, #0]
 800bc6a:	1a6d      	subs	r5, r5, r1
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7ff ffa6 	bl	800bbc0 <sbrk_aligned>
 800bc74:	3001      	adds	r0, #1
 800bc76:	d03a      	beq.n	800bcee <_malloc_r+0xea>
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	442b      	add	r3, r5
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	bb62      	cbnz	r2, 800bce0 <_malloc_r+0xdc>
 800bc86:	f8c8 7000 	str.w	r7, [r8]
 800bc8a:	e00f      	b.n	800bcac <_malloc_r+0xa8>
 800bc8c:	6822      	ldr	r2, [r4, #0]
 800bc8e:	1b52      	subs	r2, r2, r5
 800bc90:	d420      	bmi.n	800bcd4 <_malloc_r+0xd0>
 800bc92:	2a0b      	cmp	r2, #11
 800bc94:	d917      	bls.n	800bcc6 <_malloc_r+0xc2>
 800bc96:	1961      	adds	r1, r4, r5
 800bc98:	42a3      	cmp	r3, r4
 800bc9a:	6025      	str	r5, [r4, #0]
 800bc9c:	bf18      	it	ne
 800bc9e:	6059      	strne	r1, [r3, #4]
 800bca0:	6863      	ldr	r3, [r4, #4]
 800bca2:	bf08      	it	eq
 800bca4:	f8c8 1000 	streq.w	r1, [r8]
 800bca8:	5162      	str	r2, [r4, r5]
 800bcaa:	604b      	str	r3, [r1, #4]
 800bcac:	4630      	mov	r0, r6
 800bcae:	f000 f82f 	bl	800bd10 <__malloc_unlock>
 800bcb2:	f104 000b 	add.w	r0, r4, #11
 800bcb6:	1d23      	adds	r3, r4, #4
 800bcb8:	f020 0007 	bic.w	r0, r0, #7
 800bcbc:	1ac2      	subs	r2, r0, r3
 800bcbe:	bf1c      	itt	ne
 800bcc0:	1a1b      	subne	r3, r3, r0
 800bcc2:	50a3      	strne	r3, [r4, r2]
 800bcc4:	e7af      	b.n	800bc26 <_malloc_r+0x22>
 800bcc6:	6862      	ldr	r2, [r4, #4]
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	bf0c      	ite	eq
 800bccc:	f8c8 2000 	streq.w	r2, [r8]
 800bcd0:	605a      	strne	r2, [r3, #4]
 800bcd2:	e7eb      	b.n	800bcac <_malloc_r+0xa8>
 800bcd4:	4623      	mov	r3, r4
 800bcd6:	6864      	ldr	r4, [r4, #4]
 800bcd8:	e7ae      	b.n	800bc38 <_malloc_r+0x34>
 800bcda:	463c      	mov	r4, r7
 800bcdc:	687f      	ldr	r7, [r7, #4]
 800bcde:	e7b6      	b.n	800bc4e <_malloc_r+0x4a>
 800bce0:	461a      	mov	r2, r3
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	42a3      	cmp	r3, r4
 800bce6:	d1fb      	bne.n	800bce0 <_malloc_r+0xdc>
 800bce8:	2300      	movs	r3, #0
 800bcea:	6053      	str	r3, [r2, #4]
 800bcec:	e7de      	b.n	800bcac <_malloc_r+0xa8>
 800bcee:	230c      	movs	r3, #12
 800bcf0:	6033      	str	r3, [r6, #0]
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f000 f80c 	bl	800bd10 <__malloc_unlock>
 800bcf8:	e794      	b.n	800bc24 <_malloc_r+0x20>
 800bcfa:	6005      	str	r5, [r0, #0]
 800bcfc:	e7d6      	b.n	800bcac <_malloc_r+0xa8>
 800bcfe:	bf00      	nop
 800bd00:	200037a4 	.word	0x200037a4

0800bd04 <__malloc_lock>:
 800bd04:	4801      	ldr	r0, [pc, #4]	@ (800bd0c <__malloc_lock+0x8>)
 800bd06:	f7ff bf0f 	b.w	800bb28 <__retarget_lock_acquire_recursive>
 800bd0a:	bf00      	nop
 800bd0c:	2000379c 	.word	0x2000379c

0800bd10 <__malloc_unlock>:
 800bd10:	4801      	ldr	r0, [pc, #4]	@ (800bd18 <__malloc_unlock+0x8>)
 800bd12:	f7ff bf0a 	b.w	800bb2a <__retarget_lock_release_recursive>
 800bd16:	bf00      	nop
 800bd18:	2000379c 	.word	0x2000379c

0800bd1c <__ssputs_r>:
 800bd1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd20:	688e      	ldr	r6, [r1, #8]
 800bd22:	461f      	mov	r7, r3
 800bd24:	42be      	cmp	r6, r7
 800bd26:	680b      	ldr	r3, [r1, #0]
 800bd28:	4682      	mov	sl, r0
 800bd2a:	460c      	mov	r4, r1
 800bd2c:	4690      	mov	r8, r2
 800bd2e:	d82d      	bhi.n	800bd8c <__ssputs_r+0x70>
 800bd30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd38:	d026      	beq.n	800bd88 <__ssputs_r+0x6c>
 800bd3a:	6965      	ldr	r5, [r4, #20]
 800bd3c:	6909      	ldr	r1, [r1, #16]
 800bd3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd42:	eba3 0901 	sub.w	r9, r3, r1
 800bd46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd4a:	1c7b      	adds	r3, r7, #1
 800bd4c:	444b      	add	r3, r9
 800bd4e:	106d      	asrs	r5, r5, #1
 800bd50:	429d      	cmp	r5, r3
 800bd52:	bf38      	it	cc
 800bd54:	461d      	movcc	r5, r3
 800bd56:	0553      	lsls	r3, r2, #21
 800bd58:	d527      	bpl.n	800bdaa <__ssputs_r+0x8e>
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	f7ff ff52 	bl	800bc04 <_malloc_r>
 800bd60:	4606      	mov	r6, r0
 800bd62:	b360      	cbz	r0, 800bdbe <__ssputs_r+0xa2>
 800bd64:	6921      	ldr	r1, [r4, #16]
 800bd66:	464a      	mov	r2, r9
 800bd68:	f000 fae8 	bl	800c33c <memcpy>
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bd72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd76:	81a3      	strh	r3, [r4, #12]
 800bd78:	6126      	str	r6, [r4, #16]
 800bd7a:	6165      	str	r5, [r4, #20]
 800bd7c:	444e      	add	r6, r9
 800bd7e:	eba5 0509 	sub.w	r5, r5, r9
 800bd82:	6026      	str	r6, [r4, #0]
 800bd84:	60a5      	str	r5, [r4, #8]
 800bd86:	463e      	mov	r6, r7
 800bd88:	42be      	cmp	r6, r7
 800bd8a:	d900      	bls.n	800bd8e <__ssputs_r+0x72>
 800bd8c:	463e      	mov	r6, r7
 800bd8e:	6820      	ldr	r0, [r4, #0]
 800bd90:	4632      	mov	r2, r6
 800bd92:	4641      	mov	r1, r8
 800bd94:	f000 faa8 	bl	800c2e8 <memmove>
 800bd98:	68a3      	ldr	r3, [r4, #8]
 800bd9a:	1b9b      	subs	r3, r3, r6
 800bd9c:	60a3      	str	r3, [r4, #8]
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	4433      	add	r3, r6
 800bda2:	6023      	str	r3, [r4, #0]
 800bda4:	2000      	movs	r0, #0
 800bda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdaa:	462a      	mov	r2, r5
 800bdac:	f000 fad4 	bl	800c358 <_realloc_r>
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d1e0      	bne.n	800bd78 <__ssputs_r+0x5c>
 800bdb6:	6921      	ldr	r1, [r4, #16]
 800bdb8:	4650      	mov	r0, sl
 800bdba:	f7ff feb7 	bl	800bb2c <_free_r>
 800bdbe:	230c      	movs	r3, #12
 800bdc0:	f8ca 3000 	str.w	r3, [sl]
 800bdc4:	89a3      	ldrh	r3, [r4, #12]
 800bdc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdca:	81a3      	strh	r3, [r4, #12]
 800bdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd0:	e7e9      	b.n	800bda6 <__ssputs_r+0x8a>
	...

0800bdd4 <_svfiprintf_r>:
 800bdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd8:	4698      	mov	r8, r3
 800bdda:	898b      	ldrh	r3, [r1, #12]
 800bddc:	061b      	lsls	r3, r3, #24
 800bdde:	b09d      	sub	sp, #116	@ 0x74
 800bde0:	4607      	mov	r7, r0
 800bde2:	460d      	mov	r5, r1
 800bde4:	4614      	mov	r4, r2
 800bde6:	d510      	bpl.n	800be0a <_svfiprintf_r+0x36>
 800bde8:	690b      	ldr	r3, [r1, #16]
 800bdea:	b973      	cbnz	r3, 800be0a <_svfiprintf_r+0x36>
 800bdec:	2140      	movs	r1, #64	@ 0x40
 800bdee:	f7ff ff09 	bl	800bc04 <_malloc_r>
 800bdf2:	6028      	str	r0, [r5, #0]
 800bdf4:	6128      	str	r0, [r5, #16]
 800bdf6:	b930      	cbnz	r0, 800be06 <_svfiprintf_r+0x32>
 800bdf8:	230c      	movs	r3, #12
 800bdfa:	603b      	str	r3, [r7, #0]
 800bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800be00:	b01d      	add	sp, #116	@ 0x74
 800be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be06:	2340      	movs	r3, #64	@ 0x40
 800be08:	616b      	str	r3, [r5, #20]
 800be0a:	2300      	movs	r3, #0
 800be0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be0e:	2320      	movs	r3, #32
 800be10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be14:	f8cd 800c 	str.w	r8, [sp, #12]
 800be18:	2330      	movs	r3, #48	@ 0x30
 800be1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bfb8 <_svfiprintf_r+0x1e4>
 800be1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be22:	f04f 0901 	mov.w	r9, #1
 800be26:	4623      	mov	r3, r4
 800be28:	469a      	mov	sl, r3
 800be2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be2e:	b10a      	cbz	r2, 800be34 <_svfiprintf_r+0x60>
 800be30:	2a25      	cmp	r2, #37	@ 0x25
 800be32:	d1f9      	bne.n	800be28 <_svfiprintf_r+0x54>
 800be34:	ebba 0b04 	subs.w	fp, sl, r4
 800be38:	d00b      	beq.n	800be52 <_svfiprintf_r+0x7e>
 800be3a:	465b      	mov	r3, fp
 800be3c:	4622      	mov	r2, r4
 800be3e:	4629      	mov	r1, r5
 800be40:	4638      	mov	r0, r7
 800be42:	f7ff ff6b 	bl	800bd1c <__ssputs_r>
 800be46:	3001      	adds	r0, #1
 800be48:	f000 80a7 	beq.w	800bf9a <_svfiprintf_r+0x1c6>
 800be4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be4e:	445a      	add	r2, fp
 800be50:	9209      	str	r2, [sp, #36]	@ 0x24
 800be52:	f89a 3000 	ldrb.w	r3, [sl]
 800be56:	2b00      	cmp	r3, #0
 800be58:	f000 809f 	beq.w	800bf9a <_svfiprintf_r+0x1c6>
 800be5c:	2300      	movs	r3, #0
 800be5e:	f04f 32ff 	mov.w	r2, #4294967295
 800be62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be66:	f10a 0a01 	add.w	sl, sl, #1
 800be6a:	9304      	str	r3, [sp, #16]
 800be6c:	9307      	str	r3, [sp, #28]
 800be6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be72:	931a      	str	r3, [sp, #104]	@ 0x68
 800be74:	4654      	mov	r4, sl
 800be76:	2205      	movs	r2, #5
 800be78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be7c:	484e      	ldr	r0, [pc, #312]	@ (800bfb8 <_svfiprintf_r+0x1e4>)
 800be7e:	f7f4 f9cf 	bl	8000220 <memchr>
 800be82:	9a04      	ldr	r2, [sp, #16]
 800be84:	b9d8      	cbnz	r0, 800bebe <_svfiprintf_r+0xea>
 800be86:	06d0      	lsls	r0, r2, #27
 800be88:	bf44      	itt	mi
 800be8a:	2320      	movmi	r3, #32
 800be8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be90:	0711      	lsls	r1, r2, #28
 800be92:	bf44      	itt	mi
 800be94:	232b      	movmi	r3, #43	@ 0x2b
 800be96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be9a:	f89a 3000 	ldrb.w	r3, [sl]
 800be9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bea0:	d015      	beq.n	800bece <_svfiprintf_r+0xfa>
 800bea2:	9a07      	ldr	r2, [sp, #28]
 800bea4:	4654      	mov	r4, sl
 800bea6:	2000      	movs	r0, #0
 800bea8:	f04f 0c0a 	mov.w	ip, #10
 800beac:	4621      	mov	r1, r4
 800beae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800beb2:	3b30      	subs	r3, #48	@ 0x30
 800beb4:	2b09      	cmp	r3, #9
 800beb6:	d94b      	bls.n	800bf50 <_svfiprintf_r+0x17c>
 800beb8:	b1b0      	cbz	r0, 800bee8 <_svfiprintf_r+0x114>
 800beba:	9207      	str	r2, [sp, #28]
 800bebc:	e014      	b.n	800bee8 <_svfiprintf_r+0x114>
 800bebe:	eba0 0308 	sub.w	r3, r0, r8
 800bec2:	fa09 f303 	lsl.w	r3, r9, r3
 800bec6:	4313      	orrs	r3, r2
 800bec8:	9304      	str	r3, [sp, #16]
 800beca:	46a2      	mov	sl, r4
 800becc:	e7d2      	b.n	800be74 <_svfiprintf_r+0xa0>
 800bece:	9b03      	ldr	r3, [sp, #12]
 800bed0:	1d19      	adds	r1, r3, #4
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	9103      	str	r1, [sp, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	bfbb      	ittet	lt
 800beda:	425b      	neglt	r3, r3
 800bedc:	f042 0202 	orrlt.w	r2, r2, #2
 800bee0:	9307      	strge	r3, [sp, #28]
 800bee2:	9307      	strlt	r3, [sp, #28]
 800bee4:	bfb8      	it	lt
 800bee6:	9204      	strlt	r2, [sp, #16]
 800bee8:	7823      	ldrb	r3, [r4, #0]
 800beea:	2b2e      	cmp	r3, #46	@ 0x2e
 800beec:	d10a      	bne.n	800bf04 <_svfiprintf_r+0x130>
 800beee:	7863      	ldrb	r3, [r4, #1]
 800bef0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bef2:	d132      	bne.n	800bf5a <_svfiprintf_r+0x186>
 800bef4:	9b03      	ldr	r3, [sp, #12]
 800bef6:	1d1a      	adds	r2, r3, #4
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	9203      	str	r2, [sp, #12]
 800befc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf00:	3402      	adds	r4, #2
 800bf02:	9305      	str	r3, [sp, #20]
 800bf04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bfc8 <_svfiprintf_r+0x1f4>
 800bf08:	7821      	ldrb	r1, [r4, #0]
 800bf0a:	2203      	movs	r2, #3
 800bf0c:	4650      	mov	r0, sl
 800bf0e:	f7f4 f987 	bl	8000220 <memchr>
 800bf12:	b138      	cbz	r0, 800bf24 <_svfiprintf_r+0x150>
 800bf14:	9b04      	ldr	r3, [sp, #16]
 800bf16:	eba0 000a 	sub.w	r0, r0, sl
 800bf1a:	2240      	movs	r2, #64	@ 0x40
 800bf1c:	4082      	lsls	r2, r0
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	3401      	adds	r4, #1
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf28:	4824      	ldr	r0, [pc, #144]	@ (800bfbc <_svfiprintf_r+0x1e8>)
 800bf2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf2e:	2206      	movs	r2, #6
 800bf30:	f7f4 f976 	bl	8000220 <memchr>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d036      	beq.n	800bfa6 <_svfiprintf_r+0x1d2>
 800bf38:	4b21      	ldr	r3, [pc, #132]	@ (800bfc0 <_svfiprintf_r+0x1ec>)
 800bf3a:	bb1b      	cbnz	r3, 800bf84 <_svfiprintf_r+0x1b0>
 800bf3c:	9b03      	ldr	r3, [sp, #12]
 800bf3e:	3307      	adds	r3, #7
 800bf40:	f023 0307 	bic.w	r3, r3, #7
 800bf44:	3308      	adds	r3, #8
 800bf46:	9303      	str	r3, [sp, #12]
 800bf48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf4a:	4433      	add	r3, r6
 800bf4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf4e:	e76a      	b.n	800be26 <_svfiprintf_r+0x52>
 800bf50:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf54:	460c      	mov	r4, r1
 800bf56:	2001      	movs	r0, #1
 800bf58:	e7a8      	b.n	800beac <_svfiprintf_r+0xd8>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	3401      	adds	r4, #1
 800bf5e:	9305      	str	r3, [sp, #20]
 800bf60:	4619      	mov	r1, r3
 800bf62:	f04f 0c0a 	mov.w	ip, #10
 800bf66:	4620      	mov	r0, r4
 800bf68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf6c:	3a30      	subs	r2, #48	@ 0x30
 800bf6e:	2a09      	cmp	r2, #9
 800bf70:	d903      	bls.n	800bf7a <_svfiprintf_r+0x1a6>
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0c6      	beq.n	800bf04 <_svfiprintf_r+0x130>
 800bf76:	9105      	str	r1, [sp, #20]
 800bf78:	e7c4      	b.n	800bf04 <_svfiprintf_r+0x130>
 800bf7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf7e:	4604      	mov	r4, r0
 800bf80:	2301      	movs	r3, #1
 800bf82:	e7f0      	b.n	800bf66 <_svfiprintf_r+0x192>
 800bf84:	ab03      	add	r3, sp, #12
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	462a      	mov	r2, r5
 800bf8a:	4b0e      	ldr	r3, [pc, #56]	@ (800bfc4 <_svfiprintf_r+0x1f0>)
 800bf8c:	a904      	add	r1, sp, #16
 800bf8e:	4638      	mov	r0, r7
 800bf90:	f3af 8000 	nop.w
 800bf94:	1c42      	adds	r2, r0, #1
 800bf96:	4606      	mov	r6, r0
 800bf98:	d1d6      	bne.n	800bf48 <_svfiprintf_r+0x174>
 800bf9a:	89ab      	ldrh	r3, [r5, #12]
 800bf9c:	065b      	lsls	r3, r3, #25
 800bf9e:	f53f af2d 	bmi.w	800bdfc <_svfiprintf_r+0x28>
 800bfa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfa4:	e72c      	b.n	800be00 <_svfiprintf_r+0x2c>
 800bfa6:	ab03      	add	r3, sp, #12
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	462a      	mov	r2, r5
 800bfac:	4b05      	ldr	r3, [pc, #20]	@ (800bfc4 <_svfiprintf_r+0x1f0>)
 800bfae:	a904      	add	r1, sp, #16
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	f000 f879 	bl	800c0a8 <_printf_i>
 800bfb6:	e7ed      	b.n	800bf94 <_svfiprintf_r+0x1c0>
 800bfb8:	0800c470 	.word	0x0800c470
 800bfbc:	0800c47a 	.word	0x0800c47a
 800bfc0:	00000000 	.word	0x00000000
 800bfc4:	0800bd1d 	.word	0x0800bd1d
 800bfc8:	0800c476 	.word	0x0800c476

0800bfcc <_printf_common>:
 800bfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd0:	4616      	mov	r6, r2
 800bfd2:	4698      	mov	r8, r3
 800bfd4:	688a      	ldr	r2, [r1, #8]
 800bfd6:	690b      	ldr	r3, [r1, #16]
 800bfd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	bfb8      	it	lt
 800bfe0:	4613      	movlt	r3, r2
 800bfe2:	6033      	str	r3, [r6, #0]
 800bfe4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bfe8:	4607      	mov	r7, r0
 800bfea:	460c      	mov	r4, r1
 800bfec:	b10a      	cbz	r2, 800bff2 <_printf_common+0x26>
 800bfee:	3301      	adds	r3, #1
 800bff0:	6033      	str	r3, [r6, #0]
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	0699      	lsls	r1, r3, #26
 800bff6:	bf42      	ittt	mi
 800bff8:	6833      	ldrmi	r3, [r6, #0]
 800bffa:	3302      	addmi	r3, #2
 800bffc:	6033      	strmi	r3, [r6, #0]
 800bffe:	6825      	ldr	r5, [r4, #0]
 800c000:	f015 0506 	ands.w	r5, r5, #6
 800c004:	d106      	bne.n	800c014 <_printf_common+0x48>
 800c006:	f104 0a19 	add.w	sl, r4, #25
 800c00a:	68e3      	ldr	r3, [r4, #12]
 800c00c:	6832      	ldr	r2, [r6, #0]
 800c00e:	1a9b      	subs	r3, r3, r2
 800c010:	42ab      	cmp	r3, r5
 800c012:	dc26      	bgt.n	800c062 <_printf_common+0x96>
 800c014:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c018:	6822      	ldr	r2, [r4, #0]
 800c01a:	3b00      	subs	r3, #0
 800c01c:	bf18      	it	ne
 800c01e:	2301      	movne	r3, #1
 800c020:	0692      	lsls	r2, r2, #26
 800c022:	d42b      	bmi.n	800c07c <_printf_common+0xb0>
 800c024:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c028:	4641      	mov	r1, r8
 800c02a:	4638      	mov	r0, r7
 800c02c:	47c8      	blx	r9
 800c02e:	3001      	adds	r0, #1
 800c030:	d01e      	beq.n	800c070 <_printf_common+0xa4>
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	6922      	ldr	r2, [r4, #16]
 800c036:	f003 0306 	and.w	r3, r3, #6
 800c03a:	2b04      	cmp	r3, #4
 800c03c:	bf02      	ittt	eq
 800c03e:	68e5      	ldreq	r5, [r4, #12]
 800c040:	6833      	ldreq	r3, [r6, #0]
 800c042:	1aed      	subeq	r5, r5, r3
 800c044:	68a3      	ldr	r3, [r4, #8]
 800c046:	bf0c      	ite	eq
 800c048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c04c:	2500      	movne	r5, #0
 800c04e:	4293      	cmp	r3, r2
 800c050:	bfc4      	itt	gt
 800c052:	1a9b      	subgt	r3, r3, r2
 800c054:	18ed      	addgt	r5, r5, r3
 800c056:	2600      	movs	r6, #0
 800c058:	341a      	adds	r4, #26
 800c05a:	42b5      	cmp	r5, r6
 800c05c:	d11a      	bne.n	800c094 <_printf_common+0xc8>
 800c05e:	2000      	movs	r0, #0
 800c060:	e008      	b.n	800c074 <_printf_common+0xa8>
 800c062:	2301      	movs	r3, #1
 800c064:	4652      	mov	r2, sl
 800c066:	4641      	mov	r1, r8
 800c068:	4638      	mov	r0, r7
 800c06a:	47c8      	blx	r9
 800c06c:	3001      	adds	r0, #1
 800c06e:	d103      	bne.n	800c078 <_printf_common+0xac>
 800c070:	f04f 30ff 	mov.w	r0, #4294967295
 800c074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c078:	3501      	adds	r5, #1
 800c07a:	e7c6      	b.n	800c00a <_printf_common+0x3e>
 800c07c:	18e1      	adds	r1, r4, r3
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	2030      	movs	r0, #48	@ 0x30
 800c082:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c086:	4422      	add	r2, r4
 800c088:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c08c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c090:	3302      	adds	r3, #2
 800c092:	e7c7      	b.n	800c024 <_printf_common+0x58>
 800c094:	2301      	movs	r3, #1
 800c096:	4622      	mov	r2, r4
 800c098:	4641      	mov	r1, r8
 800c09a:	4638      	mov	r0, r7
 800c09c:	47c8      	blx	r9
 800c09e:	3001      	adds	r0, #1
 800c0a0:	d0e6      	beq.n	800c070 <_printf_common+0xa4>
 800c0a2:	3601      	adds	r6, #1
 800c0a4:	e7d9      	b.n	800c05a <_printf_common+0x8e>
	...

0800c0a8 <_printf_i>:
 800c0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ac:	7e0f      	ldrb	r7, [r1, #24]
 800c0ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c0b0:	2f78      	cmp	r7, #120	@ 0x78
 800c0b2:	4691      	mov	r9, r2
 800c0b4:	4680      	mov	r8, r0
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	469a      	mov	sl, r3
 800c0ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c0be:	d807      	bhi.n	800c0d0 <_printf_i+0x28>
 800c0c0:	2f62      	cmp	r7, #98	@ 0x62
 800c0c2:	d80a      	bhi.n	800c0da <_printf_i+0x32>
 800c0c4:	2f00      	cmp	r7, #0
 800c0c6:	f000 80d2 	beq.w	800c26e <_printf_i+0x1c6>
 800c0ca:	2f58      	cmp	r7, #88	@ 0x58
 800c0cc:	f000 80b9 	beq.w	800c242 <_printf_i+0x19a>
 800c0d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c0d8:	e03a      	b.n	800c150 <_printf_i+0xa8>
 800c0da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c0de:	2b15      	cmp	r3, #21
 800c0e0:	d8f6      	bhi.n	800c0d0 <_printf_i+0x28>
 800c0e2:	a101      	add	r1, pc, #4	@ (adr r1, 800c0e8 <_printf_i+0x40>)
 800c0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0e8:	0800c141 	.word	0x0800c141
 800c0ec:	0800c155 	.word	0x0800c155
 800c0f0:	0800c0d1 	.word	0x0800c0d1
 800c0f4:	0800c0d1 	.word	0x0800c0d1
 800c0f8:	0800c0d1 	.word	0x0800c0d1
 800c0fc:	0800c0d1 	.word	0x0800c0d1
 800c100:	0800c155 	.word	0x0800c155
 800c104:	0800c0d1 	.word	0x0800c0d1
 800c108:	0800c0d1 	.word	0x0800c0d1
 800c10c:	0800c0d1 	.word	0x0800c0d1
 800c110:	0800c0d1 	.word	0x0800c0d1
 800c114:	0800c255 	.word	0x0800c255
 800c118:	0800c17f 	.word	0x0800c17f
 800c11c:	0800c20f 	.word	0x0800c20f
 800c120:	0800c0d1 	.word	0x0800c0d1
 800c124:	0800c0d1 	.word	0x0800c0d1
 800c128:	0800c277 	.word	0x0800c277
 800c12c:	0800c0d1 	.word	0x0800c0d1
 800c130:	0800c17f 	.word	0x0800c17f
 800c134:	0800c0d1 	.word	0x0800c0d1
 800c138:	0800c0d1 	.word	0x0800c0d1
 800c13c:	0800c217 	.word	0x0800c217
 800c140:	6833      	ldr	r3, [r6, #0]
 800c142:	1d1a      	adds	r2, r3, #4
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	6032      	str	r2, [r6, #0]
 800c148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c14c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c150:	2301      	movs	r3, #1
 800c152:	e09d      	b.n	800c290 <_printf_i+0x1e8>
 800c154:	6833      	ldr	r3, [r6, #0]
 800c156:	6820      	ldr	r0, [r4, #0]
 800c158:	1d19      	adds	r1, r3, #4
 800c15a:	6031      	str	r1, [r6, #0]
 800c15c:	0606      	lsls	r6, r0, #24
 800c15e:	d501      	bpl.n	800c164 <_printf_i+0xbc>
 800c160:	681d      	ldr	r5, [r3, #0]
 800c162:	e003      	b.n	800c16c <_printf_i+0xc4>
 800c164:	0645      	lsls	r5, r0, #25
 800c166:	d5fb      	bpl.n	800c160 <_printf_i+0xb8>
 800c168:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c16c:	2d00      	cmp	r5, #0
 800c16e:	da03      	bge.n	800c178 <_printf_i+0xd0>
 800c170:	232d      	movs	r3, #45	@ 0x2d
 800c172:	426d      	negs	r5, r5
 800c174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c178:	4859      	ldr	r0, [pc, #356]	@ (800c2e0 <_printf_i+0x238>)
 800c17a:	230a      	movs	r3, #10
 800c17c:	e011      	b.n	800c1a2 <_printf_i+0xfa>
 800c17e:	6821      	ldr	r1, [r4, #0]
 800c180:	6833      	ldr	r3, [r6, #0]
 800c182:	0608      	lsls	r0, r1, #24
 800c184:	f853 5b04 	ldr.w	r5, [r3], #4
 800c188:	d402      	bmi.n	800c190 <_printf_i+0xe8>
 800c18a:	0649      	lsls	r1, r1, #25
 800c18c:	bf48      	it	mi
 800c18e:	b2ad      	uxthmi	r5, r5
 800c190:	2f6f      	cmp	r7, #111	@ 0x6f
 800c192:	4853      	ldr	r0, [pc, #332]	@ (800c2e0 <_printf_i+0x238>)
 800c194:	6033      	str	r3, [r6, #0]
 800c196:	bf14      	ite	ne
 800c198:	230a      	movne	r3, #10
 800c19a:	2308      	moveq	r3, #8
 800c19c:	2100      	movs	r1, #0
 800c19e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c1a2:	6866      	ldr	r6, [r4, #4]
 800c1a4:	60a6      	str	r6, [r4, #8]
 800c1a6:	2e00      	cmp	r6, #0
 800c1a8:	bfa2      	ittt	ge
 800c1aa:	6821      	ldrge	r1, [r4, #0]
 800c1ac:	f021 0104 	bicge.w	r1, r1, #4
 800c1b0:	6021      	strge	r1, [r4, #0]
 800c1b2:	b90d      	cbnz	r5, 800c1b8 <_printf_i+0x110>
 800c1b4:	2e00      	cmp	r6, #0
 800c1b6:	d04b      	beq.n	800c250 <_printf_i+0x1a8>
 800c1b8:	4616      	mov	r6, r2
 800c1ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800c1be:	fb03 5711 	mls	r7, r3, r1, r5
 800c1c2:	5dc7      	ldrb	r7, [r0, r7]
 800c1c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1c8:	462f      	mov	r7, r5
 800c1ca:	42bb      	cmp	r3, r7
 800c1cc:	460d      	mov	r5, r1
 800c1ce:	d9f4      	bls.n	800c1ba <_printf_i+0x112>
 800c1d0:	2b08      	cmp	r3, #8
 800c1d2:	d10b      	bne.n	800c1ec <_printf_i+0x144>
 800c1d4:	6823      	ldr	r3, [r4, #0]
 800c1d6:	07df      	lsls	r7, r3, #31
 800c1d8:	d508      	bpl.n	800c1ec <_printf_i+0x144>
 800c1da:	6923      	ldr	r3, [r4, #16]
 800c1dc:	6861      	ldr	r1, [r4, #4]
 800c1de:	4299      	cmp	r1, r3
 800c1e0:	bfde      	ittt	le
 800c1e2:	2330      	movle	r3, #48	@ 0x30
 800c1e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1ec:	1b92      	subs	r2, r2, r6
 800c1ee:	6122      	str	r2, [r4, #16]
 800c1f0:	f8cd a000 	str.w	sl, [sp]
 800c1f4:	464b      	mov	r3, r9
 800c1f6:	aa03      	add	r2, sp, #12
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	4640      	mov	r0, r8
 800c1fc:	f7ff fee6 	bl	800bfcc <_printf_common>
 800c200:	3001      	adds	r0, #1
 800c202:	d14a      	bne.n	800c29a <_printf_i+0x1f2>
 800c204:	f04f 30ff 	mov.w	r0, #4294967295
 800c208:	b004      	add	sp, #16
 800c20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c20e:	6823      	ldr	r3, [r4, #0]
 800c210:	f043 0320 	orr.w	r3, r3, #32
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	4833      	ldr	r0, [pc, #204]	@ (800c2e4 <_printf_i+0x23c>)
 800c218:	2778      	movs	r7, #120	@ 0x78
 800c21a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	6831      	ldr	r1, [r6, #0]
 800c222:	061f      	lsls	r7, r3, #24
 800c224:	f851 5b04 	ldr.w	r5, [r1], #4
 800c228:	d402      	bmi.n	800c230 <_printf_i+0x188>
 800c22a:	065f      	lsls	r7, r3, #25
 800c22c:	bf48      	it	mi
 800c22e:	b2ad      	uxthmi	r5, r5
 800c230:	6031      	str	r1, [r6, #0]
 800c232:	07d9      	lsls	r1, r3, #31
 800c234:	bf44      	itt	mi
 800c236:	f043 0320 	orrmi.w	r3, r3, #32
 800c23a:	6023      	strmi	r3, [r4, #0]
 800c23c:	b11d      	cbz	r5, 800c246 <_printf_i+0x19e>
 800c23e:	2310      	movs	r3, #16
 800c240:	e7ac      	b.n	800c19c <_printf_i+0xf4>
 800c242:	4827      	ldr	r0, [pc, #156]	@ (800c2e0 <_printf_i+0x238>)
 800c244:	e7e9      	b.n	800c21a <_printf_i+0x172>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	f023 0320 	bic.w	r3, r3, #32
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	e7f6      	b.n	800c23e <_printf_i+0x196>
 800c250:	4616      	mov	r6, r2
 800c252:	e7bd      	b.n	800c1d0 <_printf_i+0x128>
 800c254:	6833      	ldr	r3, [r6, #0]
 800c256:	6825      	ldr	r5, [r4, #0]
 800c258:	6961      	ldr	r1, [r4, #20]
 800c25a:	1d18      	adds	r0, r3, #4
 800c25c:	6030      	str	r0, [r6, #0]
 800c25e:	062e      	lsls	r6, r5, #24
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	d501      	bpl.n	800c268 <_printf_i+0x1c0>
 800c264:	6019      	str	r1, [r3, #0]
 800c266:	e002      	b.n	800c26e <_printf_i+0x1c6>
 800c268:	0668      	lsls	r0, r5, #25
 800c26a:	d5fb      	bpl.n	800c264 <_printf_i+0x1bc>
 800c26c:	8019      	strh	r1, [r3, #0]
 800c26e:	2300      	movs	r3, #0
 800c270:	6123      	str	r3, [r4, #16]
 800c272:	4616      	mov	r6, r2
 800c274:	e7bc      	b.n	800c1f0 <_printf_i+0x148>
 800c276:	6833      	ldr	r3, [r6, #0]
 800c278:	1d1a      	adds	r2, r3, #4
 800c27a:	6032      	str	r2, [r6, #0]
 800c27c:	681e      	ldr	r6, [r3, #0]
 800c27e:	6862      	ldr	r2, [r4, #4]
 800c280:	2100      	movs	r1, #0
 800c282:	4630      	mov	r0, r6
 800c284:	f7f3 ffcc 	bl	8000220 <memchr>
 800c288:	b108      	cbz	r0, 800c28e <_printf_i+0x1e6>
 800c28a:	1b80      	subs	r0, r0, r6
 800c28c:	6060      	str	r0, [r4, #4]
 800c28e:	6863      	ldr	r3, [r4, #4]
 800c290:	6123      	str	r3, [r4, #16]
 800c292:	2300      	movs	r3, #0
 800c294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c298:	e7aa      	b.n	800c1f0 <_printf_i+0x148>
 800c29a:	6923      	ldr	r3, [r4, #16]
 800c29c:	4632      	mov	r2, r6
 800c29e:	4649      	mov	r1, r9
 800c2a0:	4640      	mov	r0, r8
 800c2a2:	47d0      	blx	sl
 800c2a4:	3001      	adds	r0, #1
 800c2a6:	d0ad      	beq.n	800c204 <_printf_i+0x15c>
 800c2a8:	6823      	ldr	r3, [r4, #0]
 800c2aa:	079b      	lsls	r3, r3, #30
 800c2ac:	d413      	bmi.n	800c2d6 <_printf_i+0x22e>
 800c2ae:	68e0      	ldr	r0, [r4, #12]
 800c2b0:	9b03      	ldr	r3, [sp, #12]
 800c2b2:	4298      	cmp	r0, r3
 800c2b4:	bfb8      	it	lt
 800c2b6:	4618      	movlt	r0, r3
 800c2b8:	e7a6      	b.n	800c208 <_printf_i+0x160>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	4632      	mov	r2, r6
 800c2be:	4649      	mov	r1, r9
 800c2c0:	4640      	mov	r0, r8
 800c2c2:	47d0      	blx	sl
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	d09d      	beq.n	800c204 <_printf_i+0x15c>
 800c2c8:	3501      	adds	r5, #1
 800c2ca:	68e3      	ldr	r3, [r4, #12]
 800c2cc:	9903      	ldr	r1, [sp, #12]
 800c2ce:	1a5b      	subs	r3, r3, r1
 800c2d0:	42ab      	cmp	r3, r5
 800c2d2:	dcf2      	bgt.n	800c2ba <_printf_i+0x212>
 800c2d4:	e7eb      	b.n	800c2ae <_printf_i+0x206>
 800c2d6:	2500      	movs	r5, #0
 800c2d8:	f104 0619 	add.w	r6, r4, #25
 800c2dc:	e7f5      	b.n	800c2ca <_printf_i+0x222>
 800c2de:	bf00      	nop
 800c2e0:	0800c481 	.word	0x0800c481
 800c2e4:	0800c492 	.word	0x0800c492

0800c2e8 <memmove>:
 800c2e8:	4288      	cmp	r0, r1
 800c2ea:	b510      	push	{r4, lr}
 800c2ec:	eb01 0402 	add.w	r4, r1, r2
 800c2f0:	d902      	bls.n	800c2f8 <memmove+0x10>
 800c2f2:	4284      	cmp	r4, r0
 800c2f4:	4623      	mov	r3, r4
 800c2f6:	d807      	bhi.n	800c308 <memmove+0x20>
 800c2f8:	1e43      	subs	r3, r0, #1
 800c2fa:	42a1      	cmp	r1, r4
 800c2fc:	d008      	beq.n	800c310 <memmove+0x28>
 800c2fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c302:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c306:	e7f8      	b.n	800c2fa <memmove+0x12>
 800c308:	4402      	add	r2, r0
 800c30a:	4601      	mov	r1, r0
 800c30c:	428a      	cmp	r2, r1
 800c30e:	d100      	bne.n	800c312 <memmove+0x2a>
 800c310:	bd10      	pop	{r4, pc}
 800c312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c31a:	e7f7      	b.n	800c30c <memmove+0x24>

0800c31c <_sbrk_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4d06      	ldr	r5, [pc, #24]	@ (800c338 <_sbrk_r+0x1c>)
 800c320:	2300      	movs	r3, #0
 800c322:	4604      	mov	r4, r0
 800c324:	4608      	mov	r0, r1
 800c326:	602b      	str	r3, [r5, #0]
 800c328:	f7f4 fd0e 	bl	8000d48 <_sbrk>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d102      	bne.n	800c336 <_sbrk_r+0x1a>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	b103      	cbz	r3, 800c336 <_sbrk_r+0x1a>
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	20003798 	.word	0x20003798

0800c33c <memcpy>:
 800c33c:	440a      	add	r2, r1
 800c33e:	4291      	cmp	r1, r2
 800c340:	f100 33ff 	add.w	r3, r0, #4294967295
 800c344:	d100      	bne.n	800c348 <memcpy+0xc>
 800c346:	4770      	bx	lr
 800c348:	b510      	push	{r4, lr}
 800c34a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c34e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c352:	4291      	cmp	r1, r2
 800c354:	d1f9      	bne.n	800c34a <memcpy+0xe>
 800c356:	bd10      	pop	{r4, pc}

0800c358 <_realloc_r>:
 800c358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c35c:	4680      	mov	r8, r0
 800c35e:	4615      	mov	r5, r2
 800c360:	460c      	mov	r4, r1
 800c362:	b921      	cbnz	r1, 800c36e <_realloc_r+0x16>
 800c364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c368:	4611      	mov	r1, r2
 800c36a:	f7ff bc4b 	b.w	800bc04 <_malloc_r>
 800c36e:	b92a      	cbnz	r2, 800c37c <_realloc_r+0x24>
 800c370:	f7ff fbdc 	bl	800bb2c <_free_r>
 800c374:	2400      	movs	r4, #0
 800c376:	4620      	mov	r0, r4
 800c378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c37c:	f000 f81a 	bl	800c3b4 <_malloc_usable_size_r>
 800c380:	4285      	cmp	r5, r0
 800c382:	4606      	mov	r6, r0
 800c384:	d802      	bhi.n	800c38c <_realloc_r+0x34>
 800c386:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c38a:	d8f4      	bhi.n	800c376 <_realloc_r+0x1e>
 800c38c:	4629      	mov	r1, r5
 800c38e:	4640      	mov	r0, r8
 800c390:	f7ff fc38 	bl	800bc04 <_malloc_r>
 800c394:	4607      	mov	r7, r0
 800c396:	2800      	cmp	r0, #0
 800c398:	d0ec      	beq.n	800c374 <_realloc_r+0x1c>
 800c39a:	42b5      	cmp	r5, r6
 800c39c:	462a      	mov	r2, r5
 800c39e:	4621      	mov	r1, r4
 800c3a0:	bf28      	it	cs
 800c3a2:	4632      	movcs	r2, r6
 800c3a4:	f7ff ffca 	bl	800c33c <memcpy>
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	f7ff fbbe 	bl	800bb2c <_free_r>
 800c3b0:	463c      	mov	r4, r7
 800c3b2:	e7e0      	b.n	800c376 <_realloc_r+0x1e>

0800c3b4 <_malloc_usable_size_r>:
 800c3b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3b8:	1f18      	subs	r0, r3, #4
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	bfbc      	itt	lt
 800c3be:	580b      	ldrlt	r3, [r1, r0]
 800c3c0:	18c0      	addlt	r0, r0, r3
 800c3c2:	4770      	bx	lr

0800c3c4 <_init>:
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	bf00      	nop
 800c3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ca:	bc08      	pop	{r3}
 800c3cc:	469e      	mov	lr, r3
 800c3ce:	4770      	bx	lr

0800c3d0 <_fini>:
 800c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d2:	bf00      	nop
 800c3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3d6:	bc08      	pop	{r3}
 800c3d8:	469e      	mov	lr, r3
 800c3da:	4770      	bx	lr
