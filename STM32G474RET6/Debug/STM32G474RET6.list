
STM32G474RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000874c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008924  08008924  00009924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800897c  0800897c  0000a184  2**0
                  CONTENTS
  4 .ARM          00000000  0800897c  0800897c  0000a184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800897c  0800897c  0000a184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800897c  0800897c  0000997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008980  08008980  00009980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08008984  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  20000184  08008b08  0000a184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c74  08008b08  0000ac74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147fc  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387a  00000000  00000000  0001e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00022230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d39  00000000  00000000  000233e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027caf  00000000  00000000  00024119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167dd  00000000  00000000  0004bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3e9d  00000000  00000000  000625a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000472c  00000000  00000000  00156488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0015abb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800890c 	.word	0x0800890c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800890c 	.word	0x0800890c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb01 	bl	8000822 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80e 	bl	8000240 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8fe 	bl	8000424 <MX_GPIO_Init>
  MX_RTC_Init();
 8000228:	f000 f892 	bl	8000350 <MX_RTC_Init>
  MX_USB_Device_Init();
 800022c:	f007 fe5e 	bl	8007eec <MX_USB_Device_Init>
  MX_OPAMP1_Init();
 8000230:	f000 f868 	bl	8000304 <MX_OPAMP1_Init>
  MX_FMAC_Init();
 8000234:	f000 f852 	bl	80002dc <MX_FMAC_Init>
  MX_SPI1_Init();
 8000238:	f000 f8b6 	bl	80003a8 <MX_SPI1_Init>
//  HAL_OPAMP_Start(&hopamp1);
//  ST7789_Init();
//  HAL_Delay(2000);
//  ST7789_Test();

  while(1){
 800023c:	bf00      	nop
 800023e:	e7fd      	b.n	800023c <main+0x24>

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b094      	sub	sp, #80	@ 0x50
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2238      	movs	r2, #56	@ 0x38
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f008 fb30 	bl	80088b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000262:	2000      	movs	r0, #0
 8000264:	f002 fcf4 	bl	8002c50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000268:	2329      	movs	r3, #41	@ 0x29
 800026a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000270:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027e:	2303      	movs	r3, #3
 8000280:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000282:	2302      	movs	r3, #2
 8000284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000286:	2355      	movs	r3, #85	@ 0x55
 8000288:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800028a:	2302      	movs	r3, #2
 800028c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800028e:	2302      	movs	r3, #2
 8000290:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000292:	2302      	movs	r3, #2
 8000294:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fd8c 	bl	8002db8 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002a6:	f000 f941 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ae:	2303      	movs	r3, #3
 80002b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2104      	movs	r1, #4
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 f88a 	bl	80033dc <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ce:	f000 f92d 	bl	800052c <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3750      	adds	r7, #80	@ 0x50
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <MX_FMAC_Init+0x20>)
 80002e2:	4a07      	ldr	r2, [pc, #28]	@ (8000300 <MX_FMAC_Init+0x24>)
 80002e4:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80002e6:	4805      	ldr	r0, [pc, #20]	@ (80002fc <MX_FMAC_Init+0x20>)
 80002e8:	f000 fc67 	bl	8000bba <HAL_FMAC_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80002f2:	f000 f91b 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	200001a0 	.word	0x200001a0
 8000300:	40021400 	.word	0x40021400

08000304 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000308:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <MX_OPAMP1_Init+0x44>)
 800030a:	4a10      	ldr	r2, [pc, #64]	@ (800034c <MX_OPAMP1_Init+0x48>)
 800030c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <MX_OPAMP1_Init+0x44>)
 8000310:	2280      	movs	r2, #128	@ 0x80
 8000312:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000314:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <MX_OPAMP1_Init+0x44>)
 8000316:	2260      	movs	r2, #96	@ 0x60
 8000318:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800031a:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <MX_OPAMP1_Init+0x44>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <MX_OPAMP1_Init+0x44>)
 8000322:	2200      	movs	r2, #0
 8000324:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000326:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <MX_OPAMP1_Init+0x44>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <MX_OPAMP1_Init+0x44>)
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000332:	4805      	ldr	r0, [pc, #20]	@ (8000348 <MX_OPAMP1_Init+0x44>)
 8000334:	f000 fe88 	bl	8001048 <HAL_OPAMP_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 800033e:	f000 f8f5 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	200001d8 	.word	0x200001d8
 800034c:	40010300 	.word	0x40010300

08000350 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000354:	4b12      	ldr	r3, [pc, #72]	@ (80003a0 <MX_RTC_Init+0x50>)
 8000356:	4a13      	ldr	r2, [pc, #76]	@ (80003a4 <MX_RTC_Init+0x54>)
 8000358:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800035a:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <MX_RTC_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000360:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <MX_RTC_Init+0x50>)
 8000362:	227f      	movs	r2, #127	@ 0x7f
 8000364:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000366:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <MX_RTC_Init+0x50>)
 8000368:	22ff      	movs	r2, #255	@ 0xff
 800036a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800036c:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <MX_RTC_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <MX_RTC_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <MX_RTC_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800037e:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <MX_RTC_Init+0x50>)
 8000380:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000384:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000386:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <MX_RTC_Init+0x50>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800038c:	4804      	ldr	r0, [pc, #16]	@ (80003a0 <MX_RTC_Init+0x50>)
 800038e:	f003 fc57 	bl	8003c40 <HAL_RTC_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000398:	f000 f8c8 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000214 	.word	0x20000214
 80003a4:	40002800 	.word	0x40002800

080003a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003ac:	4b1b      	ldr	r3, [pc, #108]	@ (800041c <MX_SPI1_Init+0x74>)
 80003ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000420 <MX_SPI1_Init+0x78>)
 80003b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	@ (800041c <MX_SPI1_Init+0x74>)
 80003b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ba:	4b18      	ldr	r3, [pc, #96]	@ (800041c <MX_SPI1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003c0:	4b16      	ldr	r3, [pc, #88]	@ (800041c <MX_SPI1_Init+0x74>)
 80003c2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80003c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c8:	4b14      	ldr	r3, [pc, #80]	@ (800041c <MX_SPI1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ce:	4b13      	ldr	r3, [pc, #76]	@ (800041c <MX_SPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d4:	4b11      	ldr	r3, [pc, #68]	@ (800041c <MX_SPI1_Init+0x74>)
 80003d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <MX_SPI1_Init+0x74>)
 80003de:	2230      	movs	r2, #48	@ 0x30
 80003e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <MX_SPI1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <MX_SPI1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <MX_SPI1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f4:	4b09      	ldr	r3, [pc, #36]	@ (800041c <MX_SPI1_Init+0x74>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	@ (800041c <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <MX_SPI1_Init+0x74>)
 8000402:	2208      	movs	r2, #8
 8000404:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000406:	4805      	ldr	r0, [pc, #20]	@ (800041c <MX_SPI1_Init+0x74>)
 8000408:	f003 fd37 	bl	8003e7a <HAL_SPI_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000412:	f000 f88b 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	2000023c 	.word	0x2000023c
 8000420:	40013000 	.word	0x40013000

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b08a      	sub	sp, #40	@ 0x28
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b39      	ldr	r3, [pc, #228]	@ (8000520 <MX_GPIO_Init+0xfc>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043e:	4a38      	ldr	r2, [pc, #224]	@ (8000520 <MX_GPIO_Init+0xfc>)
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000446:	4b36      	ldr	r3, [pc, #216]	@ (8000520 <MX_GPIO_Init+0xfc>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044a:	f003 0304 	and.w	r3, r3, #4
 800044e:	613b      	str	r3, [r7, #16]
 8000450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000452:	4b33      	ldr	r3, [pc, #204]	@ (8000520 <MX_GPIO_Init+0xfc>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000456:	4a32      	ldr	r2, [pc, #200]	@ (8000520 <MX_GPIO_Init+0xfc>)
 8000458:	f043 0320 	orr.w	r3, r3, #32
 800045c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045e:	4b30      	ldr	r3, [pc, #192]	@ (8000520 <MX_GPIO_Init+0xfc>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000462:	f003 0320 	and.w	r3, r3, #32
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b2d      	ldr	r3, [pc, #180]	@ (8000520 <MX_GPIO_Init+0xfc>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046e:	4a2c      	ldr	r2, [pc, #176]	@ (8000520 <MX_GPIO_Init+0xfc>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000476:	4b2a      	ldr	r3, [pc, #168]	@ (8000520 <MX_GPIO_Init+0xfc>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b27      	ldr	r3, [pc, #156]	@ (8000520 <MX_GPIO_Init+0xfc>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000486:	4a26      	ldr	r2, [pc, #152]	@ (8000520 <MX_GPIO_Init+0xfc>)
 8000488:	f043 0302 	orr.w	r3, r3, #2
 800048c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800048e:	4b24      	ldr	r3, [pc, #144]	@ (8000520 <MX_GPIO_Init+0xfc>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000492:	f003 0302 	and.w	r3, r3, #2
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2130      	movs	r1, #48	@ 0x30
 800049e:	4821      	ldr	r0, [pc, #132]	@ (8000524 <MX_GPIO_Init+0x100>)
 80004a0:	f000 fdba 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|ST7789_DC_Pin|ST7789_RST_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 80004aa:	481f      	ldr	r0, [pc, #124]	@ (8000528 <MX_GPIO_Init+0x104>)
 80004ac:	f000 fdb4 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WHILE_GPIO_Port, LED_WHILE_Pin, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ba:	f000 fdad 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004be:	2330      	movs	r3, #48	@ 0x30
 80004c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2300      	movs	r3, #0
 80004cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	4619      	mov	r1, r3
 80004d4:	4813      	ldr	r0, [pc, #76]	@ (8000524 <MX_GPIO_Init+0x100>)
 80004d6:	f000 fc1d 	bl	8000d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 ST7789_DC_Pin ST7789_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|ST7789_DC_Pin|ST7789_RST_Pin;
 80004da:	f44f 6345 	mov.w	r3, #3152	@ 0xc50
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	480d      	ldr	r0, [pc, #52]	@ (8000528 <MX_GPIO_Init+0x104>)
 80004f4:	f000 fc0e 	bl	8000d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_WHILE_Pin */
  GPIO_InitStruct.Pin = LED_WHILE_Pin;
 80004f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_WHILE_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000514:	f000 fbfe 	bl	8000d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000518:	bf00      	nop
 800051a:	3728      	adds	r7, #40	@ 0x28
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000
 8000524:	48000800 	.word	0x48000800
 8000528:	48000400 	.word	0x48000400

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b13      	ldr	r3, [pc, #76]	@ (8000590 <HAL_MspInit+0x54>)
 8000544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000546:	4a12      	ldr	r2, [pc, #72]	@ (8000590 <HAL_MspInit+0x54>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6613      	str	r3, [r2, #96]	@ 0x60
 800054e:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <HAL_MspInit+0x54>)
 8000550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <HAL_MspInit+0x54>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800055e:	4a0c      	ldr	r2, [pc, #48]	@ (8000590 <HAL_MspInit+0x54>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000564:	6593      	str	r3, [r2, #88]	@ 0x58
 8000566:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <HAL_MspInit+0x54>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800056a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000572:	2000      	movs	r0, #0
 8000574:	f000 f9c6 	bl	8000904 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000578:	f000 f9ec 	bl	8000954 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800057c:	2000      	movs	r0, #0
 800057e:	f000 f9d5 	bl	800092c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000582:	f002 fc09 	bl	8002d98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0a      	ldr	r2, [pc, #40]	@ (80005cc <HAL_FMAC_MspInit+0x38>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d10b      	bne.n	80005be <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <HAL_FMAC_MspInit+0x3c>)
 80005a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005aa:	4a09      	ldr	r2, [pc, #36]	@ (80005d0 <HAL_FMAC_MspInit+0x3c>)
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <HAL_FMAC_MspInit+0x3c>)
 80005b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005b6:	f003 0310 	and.w	r3, r3, #16
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40021400 	.word	0x40021400
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000630 <HAL_OPAMP_MspInit+0x5c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d118      	bne.n	8000628 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <HAL_OPAMP_MspInit+0x60>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <HAL_OPAMP_MspInit+0x60>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <HAL_OPAMP_MspInit+0x60>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800060e:	2306      	movs	r3, #6
 8000610:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000612:	2303      	movs	r3, #3
 8000614:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000624:	f000 fb76 	bl	8000d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40010300 	.word	0x40010300
 8000634:	40021000 	.word	0x40021000

08000638 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b098      	sub	sp, #96	@ 0x60
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2254      	movs	r2, #84	@ 0x54
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f008 f933 	bl	80088b4 <memset>
  if(hrtc->Instance==RTC)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a15      	ldr	r2, [pc, #84]	@ (80006a8 <HAL_RTC_MspInit+0x70>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d123      	bne.n	80006a0 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000658:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800065c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800065e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000662:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4618      	mov	r0, r3
 800066a:	f003 f89b 	bl	80037a4 <HAL_RCCEx_PeriphCLKConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000674:	f7ff ff5a 	bl	800052c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <HAL_RTC_MspInit+0x74>)
 800067a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800067e:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <HAL_RTC_MspInit+0x74>)
 8000680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <HAL_RTC_MspInit+0x74>)
 800068a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800068c:	4a07      	ldr	r2, [pc, #28]	@ (80006ac <HAL_RTC_MspInit+0x74>)
 800068e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000692:	6593      	str	r3, [r2, #88]	@ 0x58
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <HAL_RTC_MspInit+0x74>)
 8000696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80006a0:	bf00      	nop
 80006a2:	3760      	adds	r7, #96	@ 0x60
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40002800 	.word	0x40002800
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a17      	ldr	r2, [pc, #92]	@ (800072c <HAL_SPI_MspInit+0x7c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d127      	bne.n	8000722 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <HAL_SPI_MspInit+0x80>)
 80006d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006d6:	4a16      	ldr	r2, [pc, #88]	@ (8000730 <HAL_SPI_MspInit+0x80>)
 80006d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <HAL_SPI_MspInit+0x80>)
 80006e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <HAL_SPI_MspInit+0x80>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a10      	ldr	r2, [pc, #64]	@ (8000730 <HAL_SPI_MspInit+0x80>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <HAL_SPI_MspInit+0x80>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000702:	2328      	movs	r3, #40	@ 0x28
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000712:	2305      	movs	r3, #5
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	@ (8000734 <HAL_SPI_MspInit+0x84>)
 800071e:	f000 faf9 	bl	8000d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000722:	bf00      	nop
 8000724:	3728      	adds	r7, #40	@ 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40013000 	.word	0x40013000
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <NMI_Handler+0x4>

08000740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <MemManage_Handler+0x4>

08000750 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <UsageFault_Handler+0x4>

08000760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078e:	f000 f89b 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800079c:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <USB_LP_IRQHandler+0x10>)
 800079e:	f000 fe13 	bl	80013c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20001778 	.word	0x20001778

080007ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <SystemInit+0x20>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <SystemInit+0x20>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d0:	480d      	ldr	r0, [pc, #52]	@ (8000808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d4:	f7ff ffea 	bl	80007ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007da:	490d      	ldr	r1, [pc, #52]	@ (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f0:	4c0a      	ldr	r4, [pc, #40]	@ (800081c <LoopForever+0x16>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fe:	f008 f861 	bl	80088c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000802:	f7ff fd09 	bl	8000218 <main>

08000806 <LoopForever>:

LoopForever:
    b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   r0, =_estack
 8000808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000814:	08008984 	.word	0x08008984
  ldr r2, =_sbss
 8000818:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800081c:	20001c74 	.word	0x20001c74

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>

08000822 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f985 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000832:	200f      	movs	r0, #15
 8000834:	f000 f80e 	bl	8000854 <HAL_InitTick>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	e001      	b.n	8000848 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000844:	f7ff fe7a 	bl	800053c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000848:	79fb      	ldrb	r3, [r7, #7]

}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <HAL_InitTick+0x68>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d022      	beq.n	80008ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <HAL_InitTick+0x6c>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_InitTick+0x68>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000874:	fbb1 f3f3 	udiv	r3, r1, r3
 8000878:	fbb2 f3f3 	udiv	r3, r2, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f990 	bl	8000ba2 <HAL_SYSTICK_Config>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10f      	bne.n	80008a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b0f      	cmp	r3, #15
 800088c:	d809      	bhi.n	80008a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088e:	2200      	movs	r2, #0
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	f04f 30ff 	mov.w	r0, #4294967295
 8000896:	f000 f95c 	bl	8000b52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <HAL_InitTick+0x70>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	e007      	b.n	80008b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
 80008a6:	e004      	b.n	80008b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e001      	b.n	80008b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <HAL_IncTick+0x20>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a03      	ldr	r2, [pc, #12]	@ (80008e4 <HAL_IncTick+0x1c>)
 80008d8:	6013      	str	r3, [r2, #0]
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	200002a0 	.word	0x200002a0
 80008e8:	20000008 	.word	0x20000008

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b03      	ldr	r3, [pc, #12]	@ (8000900 <HAL_GetTick+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	200002a0 	.word	0x200002a0

08000904 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000914:	4904      	ldr	r1, [pc, #16]	@ (8000928 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4313      	orrs	r3, r2
 800091a:	600b      	str	r3, [r1, #0]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40010030 	.word	0x40010030

0800092c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f023 0202 	bic.w	r2, r3, #2
 800093c:	4904      	ldr	r1, [pc, #16]	@ (8000950 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4313      	orrs	r3, r2
 8000942:	600b      	str	r3, [r1, #0]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40010030 	.word	0x40010030

08000954 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000966:	f7ff ffc1 	bl	80008ec <HAL_GetTick>
 800096a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 800096c:	e008      	b.n	8000980 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800096e:	f7ff ffbd 	bl	80008ec <HAL_GetTick>
 8000972:	4602      	mov	r2, r0
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	2b0a      	cmp	r3, #10
 800097a:	d901      	bls.n	8000980 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 800097c:	2303      	movs	r3, #3
 800097e:	e006      	b.n	800098e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0f0      	beq.n	800096e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40010030 	.word	0x40010030

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4907      	ldr	r1, [pc, #28]	@ (8000a38 <__NVIC_EnableIRQ+0x38>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	@ (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	@ (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	@ 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
         );
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	@ 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff8e 	bl	8000a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff29 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff40 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff90 	bl	8000a90 <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5f 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff33 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffa4 	bl	8000af8 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e033      	b.n	8000c34 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d106      	bne.n	8000be6 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fcd7 	bl	8000594 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 f854 	bl	8000c9a <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f822 	bl	8000c3c <FMAC_Reset>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d10c      	bne.n	8000c18 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c02:	f043 0210 	orr.w	r2, r3, #16
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	22a0      	movs	r2, #160	@ 0xa0
 8000c0e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e008      	b.n	8000c2a <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2220      	movs	r2, #32
 8000c22:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000c44:	f7ff fe52 	bl	80008ec <HAL_GetTick>
 8000c48:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000c58:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8000c5a:	e00f      	b.n	8000c7c <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8000c5c:	f7ff fe46 	bl	80008ec <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c6a:	d907      	bls.n	8000c7c <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e00a      	b.n	8000c92 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1e8      	bne.n	8000c5c <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 f807 	bl	8000cb6 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 f81b 	bl	8000ce4 <FMAC_ResetOutputStateAndDataPointers>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2220      	movs	r2, #32
 8000d02:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d22:	e15a      	b.n	8000fda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 814c 	beq.w	8000fd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d005      	beq.n	8000d54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d130      	bne.n	8000db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	f003 0201 	and.w	r2, r3, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d017      	beq.n	8000df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d123      	bne.n	8000e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	6939      	ldr	r1, [r7, #16]
 8000e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0203 	and.w	r2, r3, #3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80a6 	beq.w	8000fd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e88:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff8 <HAL_GPIO_Init+0x2e4>)
 8000e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff8 <HAL_GPIO_Init+0x2e4>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e94:	4b58      	ldr	r3, [pc, #352]	@ (8000ff8 <HAL_GPIO_Init+0x2e4>)
 8000e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea0:	4a56      	ldr	r2, [pc, #344]	@ (8000ffc <HAL_GPIO_Init+0x2e8>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000eca:	d01f      	beq.n	8000f0c <HAL_GPIO_Init+0x1f8>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4c      	ldr	r2, [pc, #304]	@ (8001000 <HAL_GPIO_Init+0x2ec>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d019      	beq.n	8000f08 <HAL_GPIO_Init+0x1f4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4b      	ldr	r2, [pc, #300]	@ (8001004 <HAL_GPIO_Init+0x2f0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <HAL_GPIO_Init+0x1f0>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4a      	ldr	r2, [pc, #296]	@ (8001008 <HAL_GPIO_Init+0x2f4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00d      	beq.n	8000f00 <HAL_GPIO_Init+0x1ec>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a49      	ldr	r2, [pc, #292]	@ (800100c <HAL_GPIO_Init+0x2f8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x1e8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a48      	ldr	r2, [pc, #288]	@ (8001010 <HAL_GPIO_Init+0x2fc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_GPIO_Init+0x1e4>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e00a      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000ef8:	2306      	movs	r3, #6
 8000efa:	e008      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000efc:	2304      	movs	r3, #4
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f1e:	4937      	ldr	r1, [pc, #220]	@ (8000ffc <HAL_GPIO_Init+0x2e8>)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f2c:	4b39      	ldr	r3, [pc, #228]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f50:	4a30      	ldr	r2, [pc, #192]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f56:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f7a:	4a26      	ldr	r2, [pc, #152]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fce:	4a11      	ldr	r2, [pc, #68]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f ae9d 	bne.w	8000d24 <HAL_GPIO_Init+0x10>
  }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48001000 	.word	0x48001000
 8001010:	48001400 	.word	0x48001400
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001034:	e002      	b.n	800103c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0bb      	b.n	80011d6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b05      	cmp	r3, #5
 8001068:	d101      	bne.n	800106e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e0b3      	b.n	80011d6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d101      	bne.n	800107e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0ab      	b.n	80011d6 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	4b58      	ldr	r3, [pc, #352]	@ (80011e0 <HAL_OPAMP_Init+0x198>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001082:	4a57      	ldr	r2, [pc, #348]	@ (80011e0 <HAL_OPAMP_Init+0x198>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6613      	str	r3, [r2, #96]	@ 0x60
 800108a:	4b55      	ldr	r3, [pc, #340]	@ (80011e0 <HAL_OPAMP_Init+0x198>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fa92 	bl	80005d4 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b40      	cmp	r3, #64	@ 0x40
 80010b6:	d003      	beq.n	80010c0 <HAL_OPAMP_Init+0x78>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b60      	cmp	r3, #96	@ 0x60
 80010be:	d133      	bne.n	8001128 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 0110 	bic.w	r1, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b41      	ldr	r3, [pc, #260]	@ (80011e4 <HAL_OPAMP_Init+0x19c>)
 80010de:	4013      	ands	r3, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6851      	ldr	r1, [r2, #4]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6892      	ldr	r2, [r2, #8]
 80010e8:	4311      	orrs	r1, r2
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6912      	ldr	r2, [r2, #16]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	7d09      	ldrb	r1, [r1, #20]
 80010f4:	2901      	cmp	r1, #1
 80010f6:	d102      	bne.n	80010fe <HAL_OPAMP_Init+0xb6>
 80010f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010fc:	e000      	b.n	8001100 <HAL_OPAMP_Init+0xb8>
 80010fe:	2100      	movs	r1, #0
 8001100:	4311      	orrs	r1, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001106:	4311      	orrs	r1, r2
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800110c:	4311      	orrs	r1, r2
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001112:	04d2      	lsls	r2, r2, #19
 8001114:	4311      	orrs	r1, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800111a:	0612      	lsls	r2, r2, #24
 800111c:	4311      	orrs	r1, r2
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	430b      	orrs	r3, r1
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e035      	b.n	8001194 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 0110 	bic.w	r1, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <HAL_OPAMP_Init+0x19c>)
 8001146:	4013      	ands	r3, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6851      	ldr	r1, [r2, #4]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6892      	ldr	r2, [r2, #8]
 8001150:	4311      	orrs	r1, r2
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68d2      	ldr	r2, [r2, #12]
 8001156:	4311      	orrs	r1, r2
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6912      	ldr	r2, [r2, #16]
 800115c:	430a      	orrs	r2, r1
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	7d09      	ldrb	r1, [r1, #20]
 8001162:	2901      	cmp	r1, #1
 8001164:	d102      	bne.n	800116c <HAL_OPAMP_Init+0x124>
 8001166:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800116a:	e000      	b.n	800116e <HAL_OPAMP_Init+0x126>
 800116c:	2100      	movs	r1, #0
 800116e:	4311      	orrs	r1, r2
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001174:	4311      	orrs	r1, r2
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800117a:	4311      	orrs	r1, r2
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001180:	04d2      	lsls	r2, r2, #19
 8001182:	4311      	orrs	r1, r2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001188:	0612      	lsls	r2, r2, #24
 800118a:	4311      	orrs	r1, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	430b      	orrs	r3, r1
 8001192:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db10      	blt.n	80011c0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	699a      	ldr	r2, [r3, #24]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d103      	bne.n	80011d4 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	e0003e11 	.word	0xe0003e11

080011e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e0c0      	b.n	800137c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d106      	bne.n	8001214 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f007 f84c 	bl	80082ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2203      	movs	r2, #3
 8001218:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f002 feec 	bl	8003ffe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e03e      	b.n	80012aa <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	440b      	add	r3, r1
 800123a:	3311      	adds	r3, #17
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	440b      	add	r3, r1
 800124e:	3310      	adds	r3, #16
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	440b      	add	r3, r1
 8001262:	3313      	adds	r3, #19
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	3320      	adds	r3, #32
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	3324      	adds	r3, #36	@ 0x24
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	440b      	add	r3, r1
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	3301      	adds	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	791b      	ldrb	r3, [r3, #4]
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3bb      	bcc.n	800122c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e044      	b.n	8001344 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3301      	adds	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	429a      	cmp	r2, r3
 800134c:	d3b5      	bcc.n	80012ba <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	e893 0006 	ldmia.w	r3, {r1, r2}
 800135a:	f002 fe6b 	bl	8004034 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7a9b      	ldrb	r3, [r3, #10]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d102      	bne.n	800137a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f001 fc40 	bl	8002bfa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_PCD_Start+0x16>
 8001396:	2302      	movs	r3, #2
 8001398:	e012      	b.n	80013c0 <HAL_PCD_Start+0x3c>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fe12 	bl	8003fd0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f005 f8d2 	bl	800655a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f005 f8d7 	bl	8006588 <USB_ReadInterrupts>
 80013da:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fb04 	bl	80019f4 <PCD_EP_ISR_Handler>

    return;
 80013ec:	e110      	b.n	8001610 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001400:	b29a      	uxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800140a:	b292      	uxth	r2, r2
 800140c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f006 ffdc 	bl	80083ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f8fc 	bl	8001616 <HAL_PCD_SetAddress>

    return;
 800141e:	e0f7      	b.n	8001610 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00c      	beq.n	8001444 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001432:	b29a      	uxth	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800143c:	b292      	uxth	r2, r2
 800143e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001442:	e0e5      	b.n	8001610 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00c      	beq.n	8001468 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001460:	b292      	uxth	r2, r2
 8001462:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001466:	e0d3      	b.n	8001610 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d034      	beq.n	80014dc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800147a:	b29a      	uxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0204 	bic.w	r2, r2, #4
 8001484:	b292      	uxth	r2, r2
 8001486:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001492:	b29a      	uxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0208 	bic.w	r2, r2, #8
 800149c:	b292      	uxth	r2, r2
 800149e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d107      	bne.n	80014bc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014b4:	2100      	movs	r1, #0
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f007 f97c 	bl	80087b4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f006 ffbf 	bl	8008440 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014d4:	b292      	uxth	r2, r2
 80014d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014da:	e099      	b.n	8001610 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d027      	beq.n	8001536 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0208 	orr.w	r2, r2, #8
 80014f8:	b292      	uxth	r2, r2
 80014fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001510:	b292      	uxth	r2, r2
 8001512:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0204 	orr.w	r2, r2, #4
 8001528:	b292      	uxth	r2, r2
 800152a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f006 ff6c 	bl	800840c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001534:	e06c      	b.n	8001610 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153c:	2b00      	cmp	r3, #0
 800153e:	d040      	beq.n	80015c2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001552:	b292      	uxth	r2, r2
 8001554:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d12b      	bne.n	80015ba <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0204 	orr.w	r2, r2, #4
 8001574:	b292      	uxth	r2, r2
 8001576:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001582:	b29a      	uxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0208 	orr.w	r2, r2, #8
 800158c:	b292      	uxth	r2, r2
 800158e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80015b0:	2101      	movs	r1, #1
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f007 f8fe 	bl	80087b4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80015b8:	e02a      	b.n	8001610 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f006 ff26 	bl	800840c <HAL_PCD_SuspendCallback>
    return;
 80015c0:	e026      	b.n	8001610 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00f      	beq.n	80015ec <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015de:	b292      	uxth	r2, r2
 80015e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f006 fee4 	bl	80083b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015ea:	e011      	b.n	8001610 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00c      	beq.n	8001610 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800160e:	bf00      	nop
  }
}
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_PCD_SetAddress+0x1a>
 800162c:	2302      	movs	r3, #2
 800162e:	e012      	b.n	8001656 <HAL_PCD_SetAddress+0x40>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f004 ff73 	bl	8006532 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	4608      	mov	r0, r1
 8001668:	4611      	mov	r1, r2
 800166a:	461a      	mov	r2, r3
 800166c:	4603      	mov	r3, r0
 800166e:	70fb      	strb	r3, [r7, #3]
 8001670:	460b      	mov	r3, r1
 8001672:	803b      	strh	r3, [r7, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800167c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001680:	2b00      	cmp	r3, #0
 8001682:	da0e      	bge.n	80016a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	f003 0207 	and.w	r2, r3, #7
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	3310      	adds	r3, #16
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2201      	movs	r2, #1
 800169e:	705a      	strb	r2, [r3, #1]
 80016a0:	e00e      	b.n	80016c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	f003 0207 	and.w	r2, r3, #7
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016cc:	883a      	ldrh	r2, [r7, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	78ba      	ldrb	r2, [r7, #2]
 80016d6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016d8:	78bb      	ldrb	r3, [r7, #2]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d102      	bne.n	80016e4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_PCD_EP_Open+0x94>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e00e      	b.n	8001710 <HAL_PCD_EP_Open+0xb2>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68f9      	ldr	r1, [r7, #12]
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fcb5 	bl	8004070 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800170e:	7afb      	ldrb	r3, [r7, #11]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001728:	2b00      	cmp	r3, #0
 800172a:	da0e      	bge.n	800174a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0207 	and.w	r2, r3, #7
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	3310      	adds	r3, #16
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2201      	movs	r2, #1
 8001746:	705a      	strb	r2, [r3, #1]
 8001748:	e00e      	b.n	8001768 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	f003 0207 	and.w	r2, r3, #7
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	b2da      	uxtb	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_PCD_EP_Close+0x6a>
 800177e:	2302      	movs	r3, #2
 8001780:	e00e      	b.n	80017a0 <HAL_PCD_EP_Close+0x88>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68f9      	ldr	r1, [r7, #12]
 8001790:	4618      	mov	r0, r3
 8001792:	f003 f831 	bl	80047f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	460b      	mov	r3, r1
 80017b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017b8:	7afb      	ldrb	r3, [r7, #11]
 80017ba:	f003 0207 	and.w	r2, r3, #7
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2200      	movs	r2, #0
 80017e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e8:	7afb      	ldrb	r3, [r7, #11]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6979      	ldr	r1, [r7, #20]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 f9e9 	bl	8004bd2 <USB_EPStartXfer>

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	f003 0207 	and.w	r2, r3, #7
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800182c:	681b      	ldr	r3, [r3, #0]
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	460b      	mov	r3, r1
 8001848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800184a:	7afb      	ldrb	r3, [r7, #11]
 800184c:	f003 0207 	and.w	r2, r3, #7
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	3310      	adds	r3, #16
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2201      	movs	r2, #1
 8001884:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	b2da      	uxtb	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6979      	ldr	r1, [r7, #20]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 f99a 	bl	8004bd2 <USB_EPStartXfer>

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	7912      	ldrb	r2, [r2, #4]
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e03e      	b.n	8001944 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da0e      	bge.n	80018ec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	f003 0207 	and.w	r2, r3, #7
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	3310      	adds	r3, #16
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	705a      	strb	r2, [r3, #1]
 80018ea:	e00c      	b.n	8001906 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	b2da      	uxtb	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_PCD_EP_SetStall+0x7e>
 8001922:	2302      	movs	r3, #2
 8001924:	e00e      	b.n	8001944 <HAL_PCD_EP_SetStall+0x9c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68f9      	ldr	r1, [r7, #12]
 8001934:	4618      	mov	r0, r3
 8001936:	f004 fcfd 	bl	8006334 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	7912      	ldrb	r2, [r2, #4]
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e040      	b.n	80019ec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800196a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800196e:	2b00      	cmp	r3, #0
 8001970:	da0e      	bge.n	8001990 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	f003 0207 	and.w	r2, r3, #7
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	3310      	adds	r3, #16
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	705a      	strb	r2, [r3, #1]
 800198e:	e00e      	b.n	80019ae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	f003 0207 	and.w	r2, r3, #7
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_PCD_EP_ClrStall+0x82>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e00e      	b.n	80019ec <HAL_PCD_EP_ClrStall+0xa0>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68f9      	ldr	r1, [r7, #12]
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 fcfa 	bl	80063d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b096      	sub	sp, #88	@ 0x58
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019fc:	e3ad      	b.n	800215a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001a18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 816f 	bne.w	8001d00 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d14c      	bne.n	8001ac8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a3e:	81fb      	strh	r3, [r7, #14]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3310      	adds	r3, #16
 8001a56:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	441a      	add	r2, r3
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f006 fc74 	bl	800837e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7b1b      	ldrb	r3, [r3, #12]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 835c 	beq.w	800215a <PCD_EP_ISR_Handler+0x766>
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 8357 	bne.w	800215a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7b1b      	ldrb	r3, [r3, #12]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	731a      	strb	r2, [r3, #12]
 8001ac6:	e348      	b.n	800215a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ace:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ada:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d032      	beq.n	8001b4c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f004 fd83 	bl	800662c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b32:	4013      	ands	r3, r2
 8001b34:	823b      	strh	r3, [r7, #16]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	8a3a      	ldrh	r2, [r7, #16]
 8001b3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b40:	b292      	uxth	r2, r2
 8001b42:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f006 fbed 	bl	8008324 <HAL_PCD_SetupStageCallback>
 8001b4a:	e306      	b.n	800215a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b4c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f280 8302 	bge.w	800215a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b62:	4013      	ands	r3, r2
 8001b64:	83fb      	strh	r3, [r7, #30]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	8bfa      	ldrh	r2, [r7, #30]
 8001b6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b70:	b292      	uxth	r2, r2
 8001b72:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4413      	add	r3, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d019      	beq.n	8001bd8 <PCD_EP_ISR_Handler+0x1e4>
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d015      	beq.n	8001bd8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb2:	6959      	ldr	r1, [r3, #20]
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f004 fd35 	bl	800662c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	441a      	add	r2, r3
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f006 fbb8 	bl	8008348 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001be2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 82b5 	bne.w	800215a <PCD_EP_ISR_Handler+0x766>
 8001bf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bf4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001bf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001bfc:	f000 82ad 	beq.w	800215a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4413      	add	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	801a      	strh	r2, [r3, #0]
 8001c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c36:	d91d      	bls.n	8001c74 <PCD_EP_ISR_Handler+0x280>
 8001c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <PCD_EP_ISR_Handler+0x25e>
 8001c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	029b      	lsls	r3, r3, #10
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	e026      	b.n	8001cc2 <PCD_EP_ISR_Handler+0x2ce>
 8001c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10a      	bne.n	8001c92 <PCD_EP_ISR_Handler+0x29e>
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	801a      	strh	r2, [r3, #0]
 8001c90:	e017      	b.n	8001cc2 <PCD_EP_ISR_Handler+0x2ce>
 8001c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <PCD_EP_ISR_Handler+0x2b8>
 8001ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca8:	3301      	adds	r3, #1
 8001caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cd2:	827b      	strh	r3, [r7, #18]
 8001cd4:	8a7b      	ldrh	r3, [r7, #18]
 8001cd6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001cda:	827b      	strh	r3, [r7, #18]
 8001cdc:	8a7b      	ldrh	r3, [r7, #18]
 8001cde:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001ce2:	827b      	strh	r3, [r7, #18]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	8a7b      	ldrh	r3, [r7, #18]
 8001cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	8013      	strh	r3, [r2, #0]
 8001cfe:	e22c      	b.n	800215a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d14:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f280 80f6 	bge.w	8001f0a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001d34:	4013      	ands	r3, r2
 8001d36:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001d4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d50:	b292      	uxth	r2, r2
 8001d52:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d54:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6c:	7b1b      	ldrb	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d123      	bne.n	8001dba <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d96:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001d9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 808e 	beq.w	8001ec0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001daa:	6959      	ldr	r1, [r3, #20]
 8001dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dae:	88da      	ldrh	r2, [r3, #6]
 8001db0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001db4:	f004 fc3a 	bl	800662c <USB_ReadPMA>
 8001db8:	e082      	b.n	8001ec0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbc:	78db      	ldrb	r3, [r3, #3]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d10a      	bne.n	8001dd8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f9d3 	bl	8002176 <HAL_PCD_EP_DB_Receive>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001dd6:	e073      	b.n	8001ec0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001df2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	441a      	add	r2, r3
 8001e04:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d022      	beq.n	8001e7c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e5a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d02c      	beq.n	8001ec0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6c:	6959      	ldr	r1, [r3, #20]
 8001e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e70:	891a      	ldrh	r2, [r3, #8]
 8001e72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e76:	f004 fbd9 	bl	800662c <USB_ReadPMA>
 8001e7a:	e021      	b.n	8001ec0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001ea4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb2:	6959      	ldr	r1, [r3, #20]
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	895a      	ldrh	r2, [r3, #10]
 8001eb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ebc:	f004 fbb6 	bl	800662c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ec8:	441a      	add	r2, r3
 8001eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ecc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ed6:	441a      	add	r2, r3
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eda:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <PCD_EP_ISR_Handler+0x4fc>
 8001ee4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d206      	bcs.n	8001efe <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f006 fa26 	bl	8008348 <HAL_PCD_DataOutStageCallback>
 8001efc:	e005      	b.n	8001f0a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 fe64 	bl	8004bd2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8121 	beq.w	800215a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f18:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	3310      	adds	r3, #16
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	441a      	add	r2, r3
 8001f58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6a:	78db      	ldrb	r3, [r3, #3]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	f040 80a2 	bne.w	80020b6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8001f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7a:	7b1b      	ldrb	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8093 	beq.w	80020a8 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d046      	beq.n	800201c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f90:	785b      	ldrb	r3, [r3, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d126      	bne.n	8001fe4 <PCD_EP_ISR_Handler+0x5f0>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	4413      	add	r3, r2
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	00da      	lsls	r2, r3, #3
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	e061      	b.n	80020a8 <PCD_EP_ISR_Handler+0x6b4>
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe6:	785b      	ldrb	r3, [r3, #1]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d15d      	bne.n	80020a8 <PCD_EP_ISR_Handler+0x6b4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002000:	4413      	add	r3, r2
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	00da      	lsls	r2, r3, #3
 800200a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200c:	4413      	add	r3, r2
 800200e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002016:	2200      	movs	r2, #0
 8002018:	801a      	strh	r2, [r3, #0]
 800201a:	e045      	b.n	80020a8 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d126      	bne.n	8002078 <PCD_EP_ISR_Handler+0x684>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203e:	4413      	add	r3, r2
 8002040:	637b      	str	r3, [r7, #52]	@ 0x34
 8002042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	00da      	lsls	r2, r3, #3
 8002048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800204a:	4413      	add	r3, r2
 800204c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002050:	633b      	str	r3, [r7, #48]	@ 0x30
 8002052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800205c:	b29a      	uxth	r2, r3
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800206c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002070:	b29a      	uxth	r2, r3
 8002072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002074:	801a      	strh	r2, [r3, #0]
 8002076:	e017      	b.n	80020a8 <PCD_EP_ISR_Handler+0x6b4>
 8002078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d113      	bne.n	80020a8 <PCD_EP_ISR_Handler+0x6b4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002088:	b29b      	uxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208e:	4413      	add	r3, r2
 8002090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	00da      	lsls	r2, r3, #3
 8002098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209a:	4413      	add	r3, r2
 800209c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a4:	2200      	movs	r2, #0
 80020a6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f006 f965 	bl	800837e <HAL_PCD_DataInStageCallback>
 80020b4:	e051      	b.n	800215a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80020b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d144      	bne.n	800214c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80020ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d907      	bls.n	8002106 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80020f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020fe:	1ad2      	subs	r2, r2, r3
 8002100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002102:	619a      	str	r2, [r3, #24]
 8002104:	e002      	b.n	800210c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8002106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800210c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f006 f92f 	bl	800837e <HAL_PCD_DataInStageCallback>
 8002120:	e01b      	b.n	800215a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800212a:	441a      	add	r2, r3
 800212c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002138:	441a      	add	r2, r3
 800213a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800213c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002144:	4618      	mov	r0, r3
 8002146:	f002 fd44 	bl	8004bd2 <USB_EPStartXfer>
 800214a:	e006      	b.n	800215a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800214c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002150:	461a      	mov	r2, r3
 8002152:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f917 	bl	8002388 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002162:	b29b      	uxth	r3, r3
 8002164:	b21b      	sxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	f6ff ac49 	blt.w	80019fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3758      	adds	r7, #88	@ 0x58
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b088      	sub	sp, #32
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	4613      	mov	r3, r2
 8002182:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d07c      	beq.n	8002288 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	8b7b      	ldrh	r3, [r7, #26]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d306      	bcc.n	80021cc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	8b7b      	ldrh	r3, [r7, #26]
 80021c4:	1ad2      	subs	r2, r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	619a      	str	r2, [r3, #24]
 80021ca:	e002      	b.n	80021d2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d123      	bne.n	8002222 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021f4:	833b      	strh	r3, [r7, #24]
 80021f6:	8b3b      	ldrh	r3, [r7, #24]
 80021f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021fc:	833b      	strh	r3, [r7, #24]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	441a      	add	r2, r3
 800220c:	8b3b      	ldrh	r3, [r7, #24]
 800220e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800221a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800221e:	b29b      	uxth	r3, r3
 8002220:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01f      	beq.n	800226c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002246:	82fb      	strh	r3, [r7, #22]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	441a      	add	r2, r3
 8002256:	8afb      	ldrh	r3, [r7, #22]
 8002258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800225c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002264:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002268:	b29b      	uxth	r3, r3
 800226a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800226c:	8b7b      	ldrh	r3, [r7, #26]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8085 	beq.w	800237e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	6959      	ldr	r1, [r3, #20]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	891a      	ldrh	r2, [r3, #8]
 8002280:	8b7b      	ldrh	r3, [r7, #26]
 8002282:	f004 f9d3 	bl	800662c <USB_ReadPMA>
 8002286:	e07a      	b.n	800237e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	8b7b      	ldrh	r3, [r7, #26]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d306      	bcc.n	80022c6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	8b7b      	ldrh	r3, [r7, #26]
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	619a      	str	r2, [r3, #24]
 80022c4:	e002      	b.n	80022cc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d123      	bne.n	800231c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ee:	83fb      	strh	r3, [r7, #30]
 80022f0:	8bfb      	ldrh	r3, [r7, #30]
 80022f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022f6:	83fb      	strh	r3, [r7, #30]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	8bfb      	ldrh	r3, [r7, #30]
 8002308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800230c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002318:	b29b      	uxth	r3, r3
 800231a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11f      	bne.n	8002366 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800233c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002340:	83bb      	strh	r3, [r7, #28]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	441a      	add	r2, r3
 8002350:	8bbb      	ldrh	r3, [r7, #28]
 8002352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800235a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800235e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002362:	b29b      	uxth	r3, r3
 8002364:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002366:	8b7b      	ldrh	r3, [r7, #26]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	6959      	ldr	r1, [r3, #20]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	895a      	ldrh	r2, [r3, #10]
 8002378:	8b7b      	ldrh	r3, [r7, #26]
 800237a:	f004 f957 	bl	800662c <USB_ReadPMA>
    }
  }

  return count;
 800237e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b0a4      	sub	sp, #144	@ 0x90
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 81db 	beq.w	8002758 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d907      	bls.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	619a      	str	r2, [r3, #24]
 80023e4:	e002      	b.n	80023ec <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 80b9 	bne.w	8002568 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d126      	bne.n	800244c <HAL_PCD_EP_DB_Transmit+0xc4>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002412:	4413      	add	r3, r2
 8002414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	00da      	lsls	r2, r3, #3
 800241c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241e:	4413      	add	r3, r2
 8002420:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002430:	b29a      	uxth	r2, r3
 8002432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002444:	b29a      	uxth	r2, r3
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e01a      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0xfa>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d116      	bne.n	8002482 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002468:	4413      	add	r3, r2
 800246a:	637b      	str	r3, [r7, #52]	@ 0x34
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	00da      	lsls	r2, r3, #3
 8002472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002474:	4413      	add	r3, r2
 8002476:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800247a:	633b      	str	r3, [r7, #48]	@ 0x30
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d126      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0x156>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	00da      	lsls	r2, r3, #3
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	801a      	strh	r2, [r3, #0]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	801a      	strh	r2, [r3, #0]
 80024dc:	e017      	b.n	800250e <HAL_PCD_EP_DB_Transmit+0x186>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d113      	bne.n	800250e <HAL_PCD_EP_DB_Transmit+0x186>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	4413      	add	r3, r2
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	00da      	lsls	r2, r3, #3
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	4413      	add	r3, r2
 8002502:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002506:	623b      	str	r3, [r7, #32]
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	2200      	movs	r2, #0
 800250c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4619      	mov	r1, r3
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f005 ff32 	bl	800837e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 82fa 	beq.w	8002b1a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800253c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002540:	82fb      	strh	r3, [r7, #22]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	441a      	add	r2, r3
 8002550:	8afb      	ldrh	r3, [r7, #22]
 8002552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800255a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800255e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002562:	b29b      	uxth	r3, r3
 8002564:	8013      	strh	r3, [r2, #0]
 8002566:	e2d8      	b.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d021      	beq.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	441a      	add	r2, r3
 800259e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80025a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025bc:	2b01      	cmp	r3, #1
 80025be:	f040 82ac 	bne.w	8002b1a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025ca:	441a      	add	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025d8:	441a      	add	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d30b      	bcc.n	8002602 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	621a      	str	r2, [r3, #32]
 8002600:	e017      	b.n	8002632 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d108      	bne.n	800261c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800260a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800260e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800261a:	e00a      	b.n	8002632 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d165      	bne.n	8002706 <HAL_PCD_EP_DB_Transmit+0x37e>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800264e:	4413      	add	r3, r2
 8002650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	00da      	lsls	r2, r3, #3
 8002658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800265a:	4413      	add	r3, r2
 800265c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002660:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266c:	b29a      	uxth	r2, r3
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	801a      	strh	r2, [r3, #0]
 8002672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002676:	2b3e      	cmp	r3, #62	@ 0x3e
 8002678:	d91d      	bls.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x32e>
 800267a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_PCD_EP_DB_Transmit+0x30c>
 800268e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002690:	3b01      	subs	r3, #1
 8002692:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29a      	uxth	r2, r3
 800269a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800269c:	b29b      	uxth	r3, r3
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	e044      	b.n	8002740 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x34c>
 80026be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e035      	b.n	8002740 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_PCD_EP_DB_Transmit+0x366>
 80026e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ea:	3301      	adds	r3, #1
 80026ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4313      	orrs	r3, r2
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e01c      	b.n	8002740 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d118      	bne.n	8002740 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	647b      	str	r3, [r7, #68]	@ 0x44
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800271c:	b29b      	uxth	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002722:	4413      	add	r3, r2
 8002724:	647b      	str	r3, [r7, #68]	@ 0x44
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	00da      	lsls	r2, r3, #3
 800272c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800272e:	4413      	add	r3, r2
 8002730:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002734:	643b      	str	r3, [r7, #64]	@ 0x40
 8002736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800273a:	b29a      	uxth	r2, r3
 800273c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800273e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6959      	ldr	r1, [r3, #20]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	891a      	ldrh	r2, [r3, #8]
 800274c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002750:	b29b      	uxth	r3, r3
 8002752:	f003 ff29 	bl	80065a8 <USB_WritePMA>
 8002756:	e1e0      	b.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	4413      	add	r3, r2
 8002772:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002788:	429a      	cmp	r2, r3
 800278a:	d307      	bcc.n	800279c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002794:	1ad2      	subs	r2, r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	619a      	str	r2, [r3, #24]
 800279a:	e002      	b.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 80c0 	bne.w	800292c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d126      	bne.n	8002802 <HAL_PCD_EP_DB_Transmit+0x47a>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027c8:	4413      	add	r3, r2
 80027ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	00da      	lsls	r2, r3, #3
 80027d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027d4:	4413      	add	r3, r2
 80027d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80027da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027fe:	801a      	strh	r2, [r3, #0]
 8002800:	e01a      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d116      	bne.n	8002838 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002818:	b29b      	uxth	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800281e:	4413      	add	r3, r2
 8002820:	667b      	str	r3, [r7, #100]	@ 0x64
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	00da      	lsls	r2, r3, #3
 8002828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800282a:	4413      	add	r3, r2
 800282c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002830:	663b      	str	r3, [r7, #96]	@ 0x60
 8002832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002834:	2200      	movs	r2, #0
 8002836:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	677b      	str	r3, [r7, #116]	@ 0x74
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d12b      	bne.n	800289e <HAL_PCD_EP_DB_Transmit+0x516>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800285a:	4413      	add	r3, r2
 800285c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	00da      	lsls	r2, r3, #3
 8002864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002866:	4413      	add	r3, r2
 8002868:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800286c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287c:	b29a      	uxth	r2, r3
 800287e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002894:	b29a      	uxth	r2, r3
 8002896:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800289a:	801a      	strh	r2, [r3, #0]
 800289c:	e017      	b.n	80028ce <HAL_PCD_EP_DB_Transmit+0x546>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	785b      	ldrb	r3, [r3, #1]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d113      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0x546>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028b4:	4413      	add	r3, r2
 80028b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	00da      	lsls	r2, r3, #3
 80028be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028c0:	4413      	add	r3, r2
 80028c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80028c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80028c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028ca:	2200      	movs	r2, #0
 80028cc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	4619      	mov	r1, r3
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f005 fd52 	bl	800837e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 811a 	bne.w	8002b1a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002900:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800291a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800291e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002926:	b29b      	uxth	r3, r3
 8002928:	8013      	strh	r3, [r2, #0]
 800292a:	e0f6      	b.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d121      	bne.n	800297a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800294c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002950:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800296a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800296e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002976:	b29b      	uxth	r3, r3
 8002978:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002980:	2b01      	cmp	r3, #1
 8002982:	f040 80ca 	bne.w	8002b1a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800298e:	441a      	add	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800299c:	441a      	add	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	6a1a      	ldr	r2, [r3, #32]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d30b      	bcc.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6a1a      	ldr	r2, [r3, #32]
 80029ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029be:	1ad2      	subs	r2, r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	621a      	str	r2, [r3, #32]
 80029c4:	e017      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d108      	bne.n	80029e0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80029ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80029de:	e00a      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2200      	movs	r2, #0
 80029ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	785b      	ldrb	r3, [r3, #1]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d165      	bne.n	8002ad0 <HAL_PCD_EP_DB_Transmit+0x748>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a18:	4413      	add	r3, r2
 8002a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	00da      	lsls	r2, r3, #3
 8002a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a24:	4413      	add	r3, r2
 8002a26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a3a:	801a      	strh	r2, [r3, #0]
 8002a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a40:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a42:	d91d      	bls.n	8002a80 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	029b      	lsls	r3, r3, #10
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a7c:	801a      	strh	r2, [r3, #0]
 8002a7e:	e041      	b.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x716>
 8002a88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a9a:	801a      	strh	r2, [r3, #0]
 8002a9c:	e032      	b.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x730>
 8002ab2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ab8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	029b      	lsls	r3, r3, #10
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	e019      	b.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d115      	bne.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae6:	4413      	add	r3, r2
 8002ae8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	00da      	lsls	r2, r3, #3
 8002af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af2:	4413      	add	r3, r2
 8002af4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002af8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b02:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	6959      	ldr	r1, [r3, #20]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	895a      	ldrh	r2, [r3, #10]
 8002b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f003 fd47 	bl	80065a8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b34:	82bb      	strh	r3, [r7, #20]
 8002b36:	8abb      	ldrh	r3, [r7, #20]
 8002b38:	f083 0310 	eor.w	r3, r3, #16
 8002b3c:	82bb      	strh	r3, [r7, #20]
 8002b3e:	8abb      	ldrh	r3, [r7, #20]
 8002b40:	f083 0320 	eor.w	r3, r3, #32
 8002b44:	82bb      	strh	r3, [r7, #20]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	441a      	add	r2, r3
 8002b54:	8abb      	ldrh	r3, [r7, #20]
 8002b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3790      	adds	r7, #144	@ 0x90
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	4613      	mov	r3, r2
 8002b84:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	f003 0207 	and.w	r2, r3, #7
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	3310      	adds	r3, #16
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e009      	b.n	8002bbe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002baa:	897a      	ldrh	r2, [r7, #10]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002bbe:	893b      	ldrh	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	80da      	strh	r2, [r3, #6]
 8002bd2:	e00b      	b.n	8002bec <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d141      	bne.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6a:	d131      	bne.n	8002cd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c6c:	4b47      	ldr	r3, [pc, #284]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c72:	4a46      	ldr	r2, [pc, #280]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c7c:	4b43      	ldr	r3, [pc, #268]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c84:	4a41      	ldr	r2, [pc, #260]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c8c:	4b40      	ldr	r3, [pc, #256]	@ (8002d90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2232      	movs	r2, #50	@ 0x32
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	4a3f      	ldr	r2, [pc, #252]	@ (8002d94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	0c9b      	lsrs	r3, r3, #18
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca2:	e002      	b.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002caa:	4b38      	ldr	r3, [pc, #224]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb6:	d102      	bne.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f2      	bne.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cbe:	4b33      	ldr	r3, [pc, #204]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cca:	d158      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e057      	b.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ce0:	e04d      	b.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce8:	d141      	bne.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cea:	4b28      	ldr	r3, [pc, #160]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf6:	d131      	bne.n	8002d5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cf8:	4b24      	ldr	r3, [pc, #144]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cfe:	4a23      	ldr	r2, [pc, #140]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d08:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d10:	4a1e      	ldr	r2, [pc, #120]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2232      	movs	r2, #50	@ 0x32
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	4a1c      	ldr	r2, [pc, #112]	@ (8002d94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	0c9b      	lsrs	r3, r3, #18
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d2e:	e002      	b.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d42:	d102      	bne.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f2      	bne.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d4a:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d56:	d112      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e011      	b.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d6c:	e007      	b.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d6e:	4b07      	ldr	r3, [pc, #28]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d76:	4a05      	ldr	r2, [pc, #20]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	20000000 	.word	0x20000000
 8002d94:	431bde83 	.word	0x431bde83

08002d98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a04      	ldr	r2, [pc, #16]	@ (8002db4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002da2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da6:	6093      	str	r3, [r2, #8]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40007000 	.word	0x40007000

08002db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e2fe      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d075      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	4b97      	ldr	r3, [pc, #604]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de0:	4b94      	ldr	r3, [pc, #592]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_OscConfig+0x3e>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d002      	beq.n	8002dfc <HAL_RCC_OscConfig+0x44>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b8d      	ldr	r3, [pc, #564]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x108>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d157      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e2d9      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x74>
 8002e1e:	4b85      	ldr	r3, [pc, #532]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a84      	ldr	r2, [pc, #528]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x98>
 8002e36:	4b7f      	ldr	r3, [pc, #508]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b7c      	ldr	r3, [pc, #496]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7b      	ldr	r2, [pc, #492]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e50:	4b78      	ldr	r3, [pc, #480]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a77      	ldr	r2, [pc, #476]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b75      	ldr	r3, [pc, #468]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a74      	ldr	r2, [pc, #464]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fd fd3c 	bl	80008ec <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fd fd38 	bl	80008ec <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	@ 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e29e      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xc0>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fd fd28 	bl	80008ec <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fd fd24 	bl	80008ec <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e28a      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb2:	4b60      	ldr	r3, [pc, #384]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xe8>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d075      	beq.n	8002fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ece:	4b59      	ldr	r3, [pc, #356]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed8:	4b56      	ldr	r3, [pc, #344]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b0c      	cmp	r3, #12
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_OscConfig+0x136>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x13c>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d11f      	bne.n	8002f34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_OscConfig+0x154>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e25d      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b49      	ldr	r3, [pc, #292]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	4946      	ldr	r1, [pc, #280]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f20:	4b45      	ldr	r3, [pc, #276]	@ (8003038 <HAL_RCC_OscConfig+0x280>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fc95 	bl	8000854 <HAL_InitTick>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d043      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e249      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d023      	beq.n	8002f84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3c      	ldr	r2, [pc, #240]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fd fcd0 	bl	80008ec <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fd fccc 	bl	80008ec <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e232      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f62:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	492d      	ldr	r1, [pc, #180]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
 8002f82:	e01a      	b.n	8002fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f84:	4b2b      	ldr	r3, [pc, #172]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2a      	ldr	r2, [pc, #168]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fd fcac 	bl	80008ec <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f98:	f7fd fca8 	bl	80008ec <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e20e      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002faa:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x1e0>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d041      	beq.n	800304a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01c      	beq.n	8003008 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fce:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd4:	4a17      	ldr	r2, [pc, #92]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fd fc85 	bl	80008ec <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7fd fc81 	bl	80008ec <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1e7      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ef      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x22e>
 8003006:	e020      	b.n	800304a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003008:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800300e:	4a09      	ldr	r2, [pc, #36]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fd fc68 	bl	80008ec <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800301e:	e00d      	b.n	800303c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003020:	f7fd fc64 	bl	80008ec <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d906      	bls.n	800303c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1ca      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800303c:	4b8c      	ldr	r3, [pc, #560]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1ea      	bne.n	8003020 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80a6 	beq.w	80031a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800305c:	4b84      	ldr	r3, [pc, #528]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_OscConfig+0x2b4>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x2b6>
 800306c:	2300      	movs	r3, #0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	4b7f      	ldr	r3, [pc, #508]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003076:	4a7e      	ldr	r2, [pc, #504]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800307c:	6593      	str	r3, [r2, #88]	@ 0x58
 800307e:	4b7c      	ldr	r3, [pc, #496]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800308e:	4b79      	ldr	r3, [pc, #484]	@ (8003274 <HAL_RCC_OscConfig+0x4bc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800309a:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <HAL_RCC_OscConfig+0x4bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a75      	ldr	r2, [pc, #468]	@ (8003274 <HAL_RCC_OscConfig+0x4bc>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7fd fc21 	bl	80008ec <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fd fc1d 	bl	80008ec <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e183      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003274 <HAL_RCC_OscConfig+0x4bc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d108      	bne.n	80030e6 <HAL_RCC_OscConfig+0x32e>
 80030d4:	4b66      	ldr	r3, [pc, #408]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030da:	4a65      	ldr	r2, [pc, #404]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030e4:	e024      	b.n	8003130 <HAL_RCC_OscConfig+0x378>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d110      	bne.n	8003110 <HAL_RCC_OscConfig+0x358>
 80030ee:	4b60      	ldr	r3, [pc, #384]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f4:	4a5e      	ldr	r2, [pc, #376]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030f6:	f043 0304 	orr.w	r3, r3, #4
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003104:	4a5a      	ldr	r2, [pc, #360]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800310e:	e00f      	b.n	8003130 <HAL_RCC_OscConfig+0x378>
 8003110:	4b57      	ldr	r3, [pc, #348]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003116:	4a56      	ldr	r2, [pc, #344]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003120:	4b53      	ldr	r3, [pc, #332]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003126:	4a52      	ldr	r2, [pc, #328]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d016      	beq.n	8003166 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fd fbd8 	bl	80008ec <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fd fbd4 	bl	80008ec <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e138      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	4b46      	ldr	r3, [pc, #280]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ed      	beq.n	8003140 <HAL_RCC_OscConfig+0x388>
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fd fbc1 	bl	80008ec <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fd fbbd 	bl	80008ec <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e121      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003184:	4b3a      	ldr	r3, [pc, #232]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ed      	bne.n	800316e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003198:	4b35      	ldr	r3, [pc, #212]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319c:	4a34      	ldr	r2, [pc, #208]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800319e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d03c      	beq.n	800322a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031be:	4a2c      	ldr	r2, [pc, #176]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fd fb90 	bl	80008ec <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031d0:	f7fd fb8c 	bl	80008ec <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0f2      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031e2:	4b23      	ldr	r3, [pc, #140]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ef      	beq.n	80031d0 <HAL_RCC_OscConfig+0x418>
 80031f0:	e01b      	b.n	800322a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fd fb73 	bl	80008ec <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800320a:	f7fd fb6f 	bl	80008ec <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0d5      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800321c:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800321e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ef      	bne.n	800320a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80c9 	beq.w	80033c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003234:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b0c      	cmp	r3, #12
 800323e:	f000 8083 	beq.w	8003348 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d15e      	bne.n	8003308 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a08      	ldr	r2, [pc, #32]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fd fb49 	bl	80008ec <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325c:	e00c      	b.n	8003278 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fd fb45 	bl	80008ec <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d905      	bls.n	8003278 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0ab      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
 8003270:	40021000 	.word	0x40021000
 8003274:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	4b55      	ldr	r3, [pc, #340]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ec      	bne.n	800325e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003284:	4b52      	ldr	r3, [pc, #328]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	4b52      	ldr	r3, [pc, #328]	@ (80033d4 <HAL_RCC_OscConfig+0x61c>)
 800328a:	4013      	ands	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6a11      	ldr	r1, [r2, #32]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003294:	3a01      	subs	r2, #1
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	4311      	orrs	r1, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800329e:	0212      	lsls	r2, r2, #8
 80032a0:	4311      	orrs	r1, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032a6:	0852      	lsrs	r2, r2, #1
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0552      	lsls	r2, r2, #21
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032b2:	0852      	lsrs	r2, r2, #1
 80032b4:	3a01      	subs	r2, #1
 80032b6:	0652      	lsls	r2, r2, #25
 80032b8:	4311      	orrs	r1, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032be:	06d2      	lsls	r2, r2, #27
 80032c0:	430a      	orrs	r2, r1
 80032c2:	4943      	ldr	r1, [pc, #268]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c8:	4b41      	ldr	r3, [pc, #260]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a40      	ldr	r2, [pc, #256]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d4:	4b3e      	ldr	r3, [pc, #248]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a3d      	ldr	r2, [pc, #244]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fd fb04 	bl	80008ec <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fd fb00 	bl	80008ec <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e066      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	4b35      	ldr	r3, [pc, #212]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x530>
 8003306:	e05e      	b.n	80033c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003308:	4b31      	ldr	r3, [pc, #196]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a30      	ldr	r2, [pc, #192]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 800330e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fd faea 	bl	80008ec <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fd fae6 	bl	80008ec <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e04c      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332e:	4b28      	ldr	r3, [pc, #160]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800333a:	4b25      	ldr	r3, [pc, #148]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	4924      	ldr	r1, [pc, #144]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003340:	4b25      	ldr	r3, [pc, #148]	@ (80033d8 <HAL_RCC_OscConfig+0x620>)
 8003342:	4013      	ands	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]
 8003346:	e03e      	b.n	80033c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e039      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003354:	4b1e      	ldr	r3, [pc, #120]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	429a      	cmp	r2, r3
 8003366:	d12c      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	3b01      	subs	r3, #1
 8003374:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d123      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d11b      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d113      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d109      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	3b01      	subs	r3, #1
 80033bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	019f800c 	.word	0x019f800c
 80033d8:	feeefffc 	.word	0xfeeefffc

080033dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e11e      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b91      	ldr	r3, [pc, #580]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d910      	bls.n	8003424 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b8e      	ldr	r3, [pc, #568]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 020f 	bic.w	r2, r3, #15
 800340a:	498c      	ldr	r1, [pc, #560]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b8a      	ldr	r3, [pc, #552]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e106      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d073      	beq.n	8003518 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d129      	bne.n	800348c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003438:	4b81      	ldr	r3, [pc, #516]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0f4      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003448:	f000 f966 	bl	8003718 <RCC_GetSysClockFreqFromPLLSource>
 800344c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4a7c      	ldr	r2, [pc, #496]	@ (8003644 <HAL_RCC_ClockConfig+0x268>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d93f      	bls.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003456:	4b7a      	ldr	r3, [pc, #488]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800346a:	2b00      	cmp	r3, #0
 800346c:	d033      	beq.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003472:	2b00      	cmp	r3, #0
 8003474:	d12f      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003476:	4b72      	ldr	r3, [pc, #456]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800347e:	4a70      	ldr	r2, [pc, #448]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003484:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e024      	b.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003494:	4b6a      	ldr	r3, [pc, #424]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0c6      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a4:	4b66      	ldr	r3, [pc, #408]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0be      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034b4:	f000 f8ce 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4a61      	ldr	r2, [pc, #388]	@ (8003644 <HAL_RCC_ClockConfig+0x268>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d909      	bls.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034d2:	2380      	movs	r3, #128	@ 0x80
 80034d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4957      	ldr	r1, [pc, #348]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e8:	f7fd fa00 	bl	80008ec <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f0:	f7fd f9fc 	bl	80008ec <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e095      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	4b4e      	ldr	r3, [pc, #312]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 020c 	and.w	r2, r3, #12
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	429a      	cmp	r2, r3
 8003516:	d1eb      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d023      	beq.n	800356c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003530:	4b43      	ldr	r3, [pc, #268]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a42      	ldr	r2, [pc, #264]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003536:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800353a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003548:	4b3d      	ldr	r3, [pc, #244]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003550:	4a3b      	ldr	r2, [pc, #236]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003552:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003556:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b39      	ldr	r3, [pc, #228]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4936      	ldr	r1, [pc, #216]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	e008      	b.n	800357e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2b80      	cmp	r3, #128	@ 0x80
 8003570:	d105      	bne.n	800357e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003572:	4b33      	ldr	r3, [pc, #204]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4a32      	ldr	r2, [pc, #200]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003578:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800357c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800357e:	4b2f      	ldr	r3, [pc, #188]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d21d      	bcs.n	80035c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358c:	4b2b      	ldr	r3, [pc, #172]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 020f 	bic.w	r2, r3, #15
 8003594:	4929      	ldr	r1, [pc, #164]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800359c:	f7fd f9a6 	bl	80008ec <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7fd f9a2 	bl	80008ec <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e03b      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b20      	ldr	r3, [pc, #128]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d1ed      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4917      	ldr	r1, [pc, #92]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f2:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	490f      	ldr	r1, [pc, #60]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003606:	f000 f825 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 800360a:	4602      	mov	r2, r0
 800360c:	4b0c      	ldr	r3, [pc, #48]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	490c      	ldr	r1, [pc, #48]	@ (8003648 <HAL_RCC_ClockConfig+0x26c>)
 8003618:	5ccb      	ldrb	r3, [r1, r3]
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <HAL_RCC_ClockConfig+0x270>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003626:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <HAL_RCC_ClockConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd f912 	bl	8000854 <HAL_InitTick>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	04c4b400 	.word	0x04c4b400
 8003648:	0800896c 	.word	0x0800896c
 800364c:	20000000 	.word	0x20000000
 8003650:	20000004 	.word	0x20000004

08003654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800365a:	4b2c      	ldr	r3, [pc, #176]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b04      	cmp	r3, #4
 8003664:	d102      	bne.n	800366c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003666:	4b2a      	ldr	r3, [pc, #168]	@ (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	e047      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800366c:	4b27      	ldr	r3, [pc, #156]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d102      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003678:	4b26      	ldr	r3, [pc, #152]	@ (8003714 <HAL_RCC_GetSysClockFreq+0xc0>)
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	e03e      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800367e:	4b23      	ldr	r3, [pc, #140]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d136      	bne.n	80036f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800368a:	4b20      	ldr	r3, [pc, #128]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003694:	4b1d      	ldr	r3, [pc, #116]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3301      	adds	r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003714 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	4a16      	ldr	r2, [pc, #88]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b2:	68d2      	ldr	r2, [r2, #12]
 80036b4:	0a12      	lsrs	r2, r2, #8
 80036b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	617b      	str	r3, [r7, #20]
      break;
 80036c0:	e00c      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036c2:	4a13      	ldr	r2, [pc, #76]	@ (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	4a10      	ldr	r2, [pc, #64]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036cc:	68d2      	ldr	r2, [r2, #12]
 80036ce:	0a12      	lsrs	r2, r2, #8
 80036d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]
      break;
 80036da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0e5b      	lsrs	r3, r3, #25
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	3301      	adds	r3, #1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	e001      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036fc:	693b      	ldr	r3, [r7, #16]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	00f42400 	.word	0x00f42400
 8003714:	007a1200 	.word	0x007a1200

08003718 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800371e:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003728:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d10c      	bne.n	8003756 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800373c:	4a17      	ldr	r2, [pc, #92]	@ (800379c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	4a14      	ldr	r2, [pc, #80]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003746:	68d2      	ldr	r2, [r2, #12]
 8003748:	0a12      	lsrs	r2, r2, #8
 800374a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	617b      	str	r3, [r7, #20]
    break;
 8003754:	e00c      	b.n	8003770 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	4a0e      	ldr	r2, [pc, #56]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	0a12      	lsrs	r2, r2, #8
 8003764:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003768:	fb02 f303 	mul.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
    break;
 800376e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003770:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0e5b      	lsrs	r3, r3, #25
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800378a:	687b      	ldr	r3, [r7, #4]
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40021000 	.word	0x40021000
 800379c:	007a1200 	.word	0x007a1200
 80037a0:	00f42400 	.word	0x00f42400

080037a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037ac:	2300      	movs	r3, #0
 80037ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b0:	2300      	movs	r3, #0
 80037b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8098 	beq.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b43      	ldr	r3, [pc, #268]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b40      	ldr	r3, [pc, #256]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d6:	4a3f      	ldr	r2, [pc, #252]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80037de:	4b3d      	ldr	r3, [pc, #244]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ee:	4b3a      	ldr	r3, [pc, #232]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a39      	ldr	r2, [pc, #228]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037fa:	f7fd f877 	bl	80008ec <HAL_GetTick>
 80037fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003800:	e009      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003802:	f7fd f873 	bl	80008ec <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d902      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	74fb      	strb	r3, [r7, #19]
        break;
 8003814:	e005      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003816:	4b30      	ldr	r3, [pc, #192]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ef      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d159      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003828:	4b2a      	ldr	r3, [pc, #168]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003832:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01e      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	d019      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003844:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800384e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003850:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003856:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003860:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003870:	4a18      	ldr	r2, [pc, #96]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd f833 	bl	80008ec <HAL_GetTick>
 8003886:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003888:	e00b      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd f82f 	bl	80008ec <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d902      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	74fb      	strb	r3, [r7, #19]
            break;
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a2:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ec      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b6:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c4:	4903      	ldr	r1, [pc, #12]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038cc:	e008      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	74bb      	strb	r3, [r7, #18]
 80038d2:	e005      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e0:	7c7b      	ldrb	r3, [r7, #17]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4ba7      	ldr	r3, [pc, #668]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ea:	4aa6      	ldr	r2, [pc, #664]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038fe:	4ba1      	ldr	r3, [pc, #644]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f023 0203 	bic.w	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	499d      	ldr	r1, [pc, #628]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003920:	4b98      	ldr	r3, [pc, #608]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	f023 020c 	bic.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4995      	ldr	r1, [pc, #596]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003942:	4b90      	ldr	r3, [pc, #576]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003948:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	498c      	ldr	r1, [pc, #560]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003964:	4b87      	ldr	r3, [pc, #540]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	4984      	ldr	r1, [pc, #528]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003986:	4b7f      	ldr	r3, [pc, #508]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	497b      	ldr	r1, [pc, #492]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a8:	4b76      	ldr	r3, [pc, #472]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	4973      	ldr	r1, [pc, #460]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	496a      	ldr	r1, [pc, #424]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ec:	4b65      	ldr	r3, [pc, #404]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4962      	ldr	r1, [pc, #392]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	4959      	ldr	r1, [pc, #356]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a30:	4b54      	ldr	r3, [pc, #336]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a36:	f023 0203 	bic.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3e:	4951      	ldr	r1, [pc, #324]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a52:	4b4c      	ldr	r3, [pc, #304]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	4948      	ldr	r1, [pc, #288]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a74:	4b43      	ldr	r3, [pc, #268]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	4940      	ldr	r1, [pc, #256]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a94:	4b3b      	ldr	r3, [pc, #236]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a3a      	ldr	r2, [pc, #232]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aac:	4b35      	ldr	r3, [pc, #212]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aba:	4932      	ldr	r1, [pc, #200]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ae4:	4b27      	ldr	r3, [pc, #156]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	4924      	ldr	r1, [pc, #144]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b02:	d105      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b1f      	ldr	r3, [pc, #124]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2a:	4916      	ldr	r1, [pc, #88]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3c:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a10      	ldr	r2, [pc, #64]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d019      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	4908      	ldr	r1, [pc, #32]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b72:	d109      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b74:	4b03      	ldr	r3, [pc, #12]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a02      	ldr	r2, [pc, #8]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b7e:	60d3      	str	r3, [r2, #12]
 8003b80:	e002      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b94:	4b29      	ldr	r3, [pc, #164]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	4926      	ldr	r1, [pc, #152]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bb2:	d105      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bb4:	4b21      	ldr	r3, [pc, #132]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bda:	4918      	ldr	r1, [pc, #96]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bec:	4b13      	ldr	r3, [pc, #76]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4a12      	ldr	r2, [pc, #72]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d015      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c04:	4b0d      	ldr	r3, [pc, #52]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c12:	490a      	ldr	r1, [pc, #40]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c22:	d105      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c24:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a04      	ldr	r2, [pc, #16]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c30:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000

08003c40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d070      	beq.n	8003d34 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fc fce6 	bl	8000638 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d04f      	beq.n	8003d22 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	22ca      	movs	r2, #202	@ 0xca
 8003c88:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2253      	movs	r2, #83	@ 0x53
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f878 	bl	8003d88 <RTC_EnterInitMode>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d126      	bne.n	8003cf0 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8003cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cb4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6999      	ldr	r1, [r3, #24]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68d9      	ldr	r1, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	041a      	lsls	r2, r3, #16
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f884 	bl	8003df4 <RTC_ExitInitMode>
 8003cec:	4603      	mov	r3, r0
 8003cee:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d110      	bne.n	8003d18 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	22ff      	movs	r2, #255	@ 0xff
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d20:	e001      	b.n	8003d26 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d84 <HAL_RTC_WaitForSynchro+0x44>)
 8003d4e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003d50:	f7fc fdcc 	bl	80008ec <HAL_GetTick>
 8003d54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003d56:	e009      	b.n	8003d6c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d58:	f7fc fdc8 	bl	80008ec <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d66:	d901      	bls.n	8003d6c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e007      	b.n	8003d7c <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ee      	beq.n	8003d58 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	0001005f 	.word	0x0001005f

08003d88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d123      	bne.n	8003dea <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003db0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003db2:	f7fc fd9b 	bl	80008ec <HAL_GetTick>
 8003db6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003db8:	e00d      	b.n	8003dd6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003dba:	f7fc fd97 	bl	80008ec <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003dc8:	d905      	bls.n	8003dd6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <RTC_EnterInitMode+0x62>
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d1e7      	bne.n	8003dba <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e0e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff8e 	bl	8003d40 <HAL_RTC_WaitForSynchro>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d022      	beq.n	8003e70 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	e01b      	b.n	8003e70 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0220 	bic.w	r2, r2, #32
 8003e46:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff79 	bl	8003d40 <HAL_RTC_WaitForSynchro>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2203      	movs	r2, #3
 8003e58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0220 	orr.w	r2, r2, #32
 8003e6e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e09d      	b.n	8003fc8 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d108      	bne.n	8003ea6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e9c:	d009      	beq.n	8003eb2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	61da      	str	r2, [r3, #28]
 8003ea4:	e005      	b.n	8003eb2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fc fbef 	bl	80006b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ef2:	d902      	bls.n	8003efa <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e002      	b.n	8003f00 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003efa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003efe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f08:	d007      	beq.n	8003f1a <HAL_SPI_Init+0xa0>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f12:	d002      	beq.n	8003f1a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5c:	ea42 0103 	orr.w	r1, r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	f003 0204 	and.w	r2, r3, #4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f96:	ea42 0103 	orr.w	r1, r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fe0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003fe4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004006:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800400a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	b29b      	uxth	r3, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	b29b      	uxth	r3, r3
 800401c:	4013      	ands	r3, r2
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004070:	b480      	push	{r7}
 8004072:	b09d      	sub	sp, #116	@ 0x74
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004096:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	78db      	ldrb	r3, [r3, #3]
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d81f      	bhi.n	80040e2 <USB_ActivateEndpoint+0x72>
 80040a2:	a201      	add	r2, pc, #4	@ (adr r2, 80040a8 <USB_ActivateEndpoint+0x38>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	080040b9 	.word	0x080040b9
 80040ac:	080040d5 	.word	0x080040d5
 80040b0:	080040eb 	.word	0x080040eb
 80040b4:	080040c7 	.word	0x080040c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80040c4:	e012      	b.n	80040ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040ca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80040ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80040d2:	e00b      	b.n	80040ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80040e0:	e004      	b.n	80040ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80040e8:	e000      	b.n	80040ec <USB_ActivateEndpoint+0x7c>
      break;
 80040ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800410a:	b29b      	uxth	r3, r3
 800410c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	b21b      	sxth	r3, r3
 800411e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	b21a      	sxth	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b21b      	sxth	r3, r3
 800412e:	4313      	orrs	r3, r2
 8004130:	b21b      	sxth	r3, r3
 8004132:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	441a      	add	r2, r3
 8004140:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800414c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004154:	b29b      	uxth	r3, r3
 8004156:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	7b1b      	ldrb	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 8178 	bne.w	8004452 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8084 	beq.w	8004274 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004176:	b29b      	uxth	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	4413      	add	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	00da      	lsls	r2, r3, #3
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	88db      	ldrh	r3, [r3, #6]
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	b29b      	uxth	r3, r3
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	827b      	strh	r3, [r7, #18]
 80041ae:	8a7b      	ldrh	r3, [r7, #18]
 80041b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01b      	beq.n	80041f0 <USB_ActivateEndpoint+0x180>
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ce:	823b      	strh	r3, [r7, #16]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	441a      	add	r2, r3
 80041da:	8a3b      	ldrh	r3, [r7, #16]
 80041dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	78db      	ldrb	r3, [r3, #3]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d020      	beq.n	800423a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800420a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800420e:	81bb      	strh	r3, [r7, #12]
 8004210:	89bb      	ldrh	r3, [r7, #12]
 8004212:	f083 0320 	eor.w	r3, r3, #32
 8004216:	81bb      	strh	r3, [r7, #12]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	89bb      	ldrh	r3, [r7, #12]
 8004224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800422c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]
 8004238:	e2d5      	b.n	80047e6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800424c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004250:	81fb      	strh	r3, [r7, #14]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	441a      	add	r2, r3
 800425c:	89fb      	ldrh	r3, [r7, #14]
 800425e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800426a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800426e:	b29b      	uxth	r3, r3
 8004270:	8013      	strh	r3, [r2, #0]
 8004272:	e2b8      	b.n	80047e6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	633b      	str	r3, [r7, #48]	@ 0x30
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800427e:	b29b      	uxth	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	4413      	add	r3, r2
 8004286:	633b      	str	r3, [r7, #48]	@ 0x30
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	00da      	lsls	r2, r3, #3
 800428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004290:	4413      	add	r3, r2
 8004292:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	88db      	ldrh	r3, [r3, #6]
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	b29b      	uxth	r3, r3
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	4413      	add	r3, r2
 80042ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	00da      	lsls	r2, r3, #3
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	4413      	add	r3, r2
 80042c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80042e2:	d91d      	bls.n	8004320 <USB_ActivateEndpoint+0x2b0>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <USB_ActivateEndpoint+0x28e>
 80042f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042fa:	3b01      	subs	r3, #1
 80042fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29a      	uxth	r2, r3
 8004304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004306:	b29b      	uxth	r3, r3
 8004308:	029b      	lsls	r3, r3, #10
 800430a:	b29b      	uxth	r3, r3
 800430c:	4313      	orrs	r3, r2
 800430e:	b29b      	uxth	r3, r3
 8004310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004318:	b29a      	uxth	r2, r3
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	801a      	strh	r2, [r3, #0]
 800431e:	e026      	b.n	800436e <USB_ActivateEndpoint+0x2fe>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <USB_ActivateEndpoint+0x2ce>
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	b29b      	uxth	r3, r3
 800432e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004336:	b29a      	uxth	r2, r3
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	801a      	strh	r2, [r3, #0]
 800433c:	e017      	b.n	800436e <USB_ActivateEndpoint+0x2fe>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <USB_ActivateEndpoint+0x2e8>
 8004352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004354:	3301      	adds	r3, #1
 8004356:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29a      	uxth	r2, r3
 800435e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004360:	b29b      	uxth	r3, r3
 8004362:	029b      	lsls	r3, r3, #10
 8004364:	b29b      	uxth	r3, r3
 8004366:	4313      	orrs	r3, r2
 8004368:	b29a      	uxth	r2, r3
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800437c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800437e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01b      	beq.n	80043be <USB_ActivateEndpoint+0x34e>
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439c:	843b      	strh	r3, [r7, #32]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	441a      	add	r2, r3
 80043a8:	8c3b      	ldrh	r3, [r7, #32]
 80043aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d124      	bne.n	8004410 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043dc:	83bb      	strh	r3, [r7, #28]
 80043de:	8bbb      	ldrh	r3, [r7, #28]
 80043e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80043e4:	83bb      	strh	r3, [r7, #28]
 80043e6:	8bbb      	ldrh	r3, [r7, #28]
 80043e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043ec:	83bb      	strh	r3, [r7, #28]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	441a      	add	r2, r3
 80043f8:	8bbb      	ldrh	r3, [r7, #28]
 80043fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800440a:	b29b      	uxth	r3, r3
 800440c:	8013      	strh	r3, [r2, #0]
 800440e:	e1ea      	b.n	80047e6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004426:	83fb      	strh	r3, [r7, #30]
 8004428:	8bfb      	ldrh	r3, [r7, #30]
 800442a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800442e:	83fb      	strh	r3, [r7, #30]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	8bfb      	ldrh	r3, [r7, #30]
 800443c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444c:	b29b      	uxth	r3, r3
 800444e:	8013      	strh	r3, [r2, #0]
 8004450:	e1c9      	b.n	80047e6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	78db      	ldrb	r3, [r3, #3]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d11e      	bne.n	8004498 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004470:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800448a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800448e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004492:	b29b      	uxth	r3, r3
 8004494:	8013      	strh	r3, [r2, #0]
 8004496:	e01d      	b.n	80044d4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80044aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	441a      	add	r2, r3
 80044bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80044c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044de:	b29b      	uxth	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044e4:	4413      	add	r3, r2
 80044e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	00da      	lsls	r2, r3, #3
 80044ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	891b      	ldrh	r3, [r3, #8]
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	b29b      	uxth	r3, r3
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004506:	801a      	strh	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	657b      	str	r3, [r7, #84]	@ 0x54
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004512:	b29b      	uxth	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004518:	4413      	add	r3, r2
 800451a:	657b      	str	r3, [r7, #84]	@ 0x54
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	00da      	lsls	r2, r3, #3
 8004522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004524:	4413      	add	r3, r2
 8004526:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800452a:	653b      	str	r3, [r7, #80]	@ 0x50
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	895b      	ldrh	r3, [r3, #10]
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	b29b      	uxth	r3, r3
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800453a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f040 8093 	bne.w	800466c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004556:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800455a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01b      	beq.n	800459a <USB_ActivateEndpoint+0x52a>
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004578:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	441a      	add	r2, r3
 8004584:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800458a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800458e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004596:	b29b      	uxth	r3, r3
 8004598:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80045a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80045aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01b      	beq.n	80045ea <USB_ActivateEndpoint+0x57a>
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	441a      	add	r2, r3
 80045d4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80045d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004600:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004602:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004604:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004608:	873b      	strh	r3, [r7, #56]	@ 0x38
 800460a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800460c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004610:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	441a      	add	r2, r3
 800461c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800461e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800462a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004644:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004648:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	441a      	add	r2, r3
 8004654:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800465a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800465e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004666:	b29b      	uxth	r3, r3
 8004668:	8013      	strh	r3, [r2, #0]
 800466a:	e0bc      	b.n	80047e6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800467c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01d      	beq.n	80046c4 <USB_ActivateEndpoint+0x654>
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	441a      	add	r2, r3
 80046ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80046b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80046d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01d      	beq.n	800471c <USB_ActivateEndpoint+0x6ac>
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	441a      	add	r2, r3
 8004704:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800470c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004714:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004718:	b29b      	uxth	r3, r3
 800471a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d024      	beq.n	800476e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800473a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800473e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004742:	f083 0320 	eor.w	r3, r3, #32
 8004746:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	441a      	add	r2, r3
 8004754:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800475c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004768:	b29b      	uxth	r3, r3
 800476a:	8013      	strh	r3, [r2, #0]
 800476c:	e01d      	b.n	80047aa <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004784:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	441a      	add	r2, r3
 8004792:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800479a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800479e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80047e6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3774      	adds	r7, #116	@ 0x74
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop

080047f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b08d      	sub	sp, #52	@ 0x34
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	7b1b      	ldrb	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 808e 	bne.w	8004928 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	785b      	ldrb	r3, [r3, #1]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d044      	beq.n	800489e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	81bb      	strh	r3, [r7, #12]
 8004822:	89bb      	ldrh	r3, [r7, #12]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01b      	beq.n	8004864 <USB_DeactivateEndpoint+0x6c>
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800483e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004842:	817b      	strh	r3, [r7, #10]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	441a      	add	r2, r3
 800484e:	897b      	ldrh	r3, [r7, #10]
 8004850:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004854:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800485c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004860:	b29b      	uxth	r3, r3
 8004862:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800487a:	813b      	strh	r3, [r7, #8]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	893b      	ldrh	r3, [r7, #8]
 8004888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]
 800489c:	e192      	b.n	8004bc4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	827b      	strh	r3, [r7, #18]
 80048ac:	8a7b      	ldrh	r3, [r7, #18]
 80048ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01b      	beq.n	80048ee <USB_DeactivateEndpoint+0xf6>
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048cc:	823b      	strh	r3, [r7, #16]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	8a3b      	ldrh	r3, [r7, #16]
 80048da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004904:	81fb      	strh	r3, [r7, #14]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	441a      	add	r2, r3
 8004910:	89fb      	ldrh	r3, [r7, #14]
 8004912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800491a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800491e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004922:	b29b      	uxth	r3, r3
 8004924:	8013      	strh	r3, [r2, #0]
 8004926:	e14d      	b.n	8004bc4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f040 80a5 	bne.w	8004a7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	843b      	strh	r3, [r7, #32]
 8004940:	8c3b      	ldrh	r3, [r7, #32]
 8004942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01b      	beq.n	8004982 <USB_DeactivateEndpoint+0x18a>
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004960:	83fb      	strh	r3, [r7, #30]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	441a      	add	r2, r3
 800496c:	8bfb      	ldrh	r3, [r7, #30]
 800496e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004976:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800497a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497e:	b29b      	uxth	r3, r3
 8004980:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	83bb      	strh	r3, [r7, #28]
 8004990:	8bbb      	ldrh	r3, [r7, #28]
 8004992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01b      	beq.n	80049d2 <USB_DeactivateEndpoint+0x1da>
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b0:	837b      	strh	r3, [r7, #26]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	441a      	add	r2, r3
 80049bc:	8b7b      	ldrh	r3, [r7, #26]
 80049be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e8:	833b      	strh	r3, [r7, #24]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	8b3b      	ldrh	r3, [r7, #24]
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a20:	82fb      	strh	r3, [r7, #22]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	8afb      	ldrh	r3, [r7, #22]
 8004a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a58:	82bb      	strh	r3, [r7, #20]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	441a      	add	r2, r3
 8004a64:	8abb      	ldrh	r3, [r7, #20]
 8004a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	8013      	strh	r3, [r2, #0]
 8004a7a:	e0a3      	b.n	8004bc4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004a8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <USB_DeactivateEndpoint+0x2d4>
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aaa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	441a      	add	r2, r3
 8004ab6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004ada:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01b      	beq.n	8004b1c <USB_DeactivateEndpoint+0x324>
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	441a      	add	r2, r3
 8004b06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	441a      	add	r2, r3
 8004b3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3734      	adds	r7, #52	@ 0x34
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b0c2      	sub	sp, #264	@ 0x108
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004be0:	6018      	str	r0, [r3, #0]
 8004be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	785b      	ldrb	r3, [r3, #1]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	f040 86b7 	bne.w	800596c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d908      	bls.n	8004c2c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c2a:	e007      	b.n	8004c3c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	7b1b      	ldrb	r3, [r3, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d13a      	bne.n	8004cc2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6959      	ldr	r1, [r3, #20]
 8004c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	88da      	ldrh	r2, [r3, #6]
 8004c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c6e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c72:	6800      	ldr	r0, [r0, #0]
 8004c74:	f001 fc98 	bl	80065a8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	00da      	lsls	r2, r3, #3
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4413      	add	r3, r2
 8004cae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	801a      	strh	r2, [r3, #0]
 8004cbe:	f000 be1f 	b.w	8005900 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	78db      	ldrb	r3, [r3, #3]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	f040 8462 	bne.w	8005598 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6a1a      	ldr	r2, [r3, #32]
 8004ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	f240 83df 	bls.w	80054b0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d18:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d42:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6a1a      	ldr	r2, [r3, #32]
 8004d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 81c7 	beq.w	8005122 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d177      	bne.n	8004ea0 <USB_EPStartXfer+0x2ce>
 8004db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	4413      	add	r3, r2
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	00da      	lsls	r2, r3, #3
 8004de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de4:	4413      	add	r3, r2
 8004de6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	801a      	strh	r2, [r3, #0]
 8004dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e00:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e02:	d921      	bls.n	8004e48 <USB_EPStartXfer+0x276>
 8004e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <USB_EPStartXfer+0x252>
 8004e1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	029b      	lsls	r3, r3, #10
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e050      	b.n	8004eea <USB_EPStartXfer+0x318>
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <USB_EPStartXfer+0x294>
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	801a      	strh	r2, [r3, #0]
 8004e64:	e041      	b.n	8004eea <USB_EPStartXfer+0x318>
 8004e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <USB_EPStartXfer+0x2b4>
 8004e7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e80:	3301      	adds	r3, #1
 8004e82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	029b      	lsls	r3, r3, #10
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	4313      	orrs	r3, r2
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e024      	b.n	8004eea <USB_EPStartXfer+0x318>
 8004ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d11c      	bne.n	8004eea <USB_EPStartXfer+0x318>
 8004eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	4413      	add	r3, r2
 8004ec6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	00da      	lsls	r2, r3, #3
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	4413      	add	r3, r2
 8004eda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	895b      	ldrh	r3, [r3, #10]
 8004ef6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6959      	ldr	r1, [r3, #20]
 8004f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f18:	6800      	ldr	r0, [r0, #0]
 8004f1a:	f001 fb45 	bl	80065a8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2e:	441a      	add	r2, r3
 8004f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d90f      	bls.n	8004f78 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f68:	1ad2      	subs	r2, r2, r3
 8004f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	621a      	str	r2, [r3, #32]
 8004f76:	e00e      	b.n	8004f96 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	785b      	ldrb	r3, [r3, #1]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d177      	bne.n	8005096 <USB_EPStartXfer+0x4c4>
 8004fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	00da      	lsls	r2, r3, #3
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ff8:	d921      	bls.n	800503e <USB_EPStartXfer+0x46c>
 8004ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <USB_EPStartXfer+0x448>
 8005010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005014:	3b01      	subs	r3, #1
 8005016:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29a      	uxth	r2, r3
 8005020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005024:	b29b      	uxth	r3, r3
 8005026:	029b      	lsls	r3, r3, #10
 8005028:	b29b      	uxth	r3, r3
 800502a:	4313      	orrs	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005036:	b29a      	uxth	r2, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e056      	b.n	80050ec <USB_EPStartXfer+0x51a>
 800503e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <USB_EPStartXfer+0x48a>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005054:	b29a      	uxth	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e047      	b.n	80050ec <USB_EPStartXfer+0x51a>
 800505c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <USB_EPStartXfer+0x4aa>
 8005072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005076:	3301      	adds	r3, #1
 8005078:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29a      	uxth	r2, r3
 8005082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005086:	b29b      	uxth	r3, r3
 8005088:	029b      	lsls	r3, r3, #10
 800508a:	b29b      	uxth	r3, r3
 800508c:	4313      	orrs	r3, r2
 800508e:	b29a      	uxth	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	801a      	strh	r2, [r3, #0]
 8005094:	e02a      	b.n	80050ec <USB_EPStartXfer+0x51a>
 8005096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800509a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d122      	bne.n	80050ec <USB_EPStartXfer+0x51a>
 80050a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	623b      	str	r3, [r7, #32]
 80050b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	4413      	add	r3, r2
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	00da      	lsls	r2, r3, #3
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	4413      	add	r3, r2
 80050dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	891b      	ldrh	r3, [r3, #8]
 80050f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6959      	ldr	r1, [r3, #20]
 8005108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510c:	b29b      	uxth	r3, r3
 800510e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005112:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005116:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800511a:	6800      	ldr	r0, [r0, #0]
 800511c:	f001 fa44 	bl	80065a8 <USB_WritePMA>
 8005120:	e3ee      	b.n	8005900 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	785b      	ldrb	r3, [r3, #1]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d177      	bne.n	8005222 <USB_EPStartXfer+0x650>
 8005132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005136:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800513e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800514c:	b29b      	uxth	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005152:	4413      	add	r3, r2
 8005154:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800515a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	00da      	lsls	r2, r3, #3
 8005164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005166:	4413      	add	r3, r2
 8005168:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800516c:	647b      	str	r3, [r7, #68]	@ 0x44
 800516e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005178:	b29a      	uxth	r2, r3
 800517a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005182:	2b3e      	cmp	r3, #62	@ 0x3e
 8005184:	d921      	bls.n	80051ca <USB_EPStartXfer+0x5f8>
 8005186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <USB_EPStartXfer+0x5d4>
 800519c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051a0:	3b01      	subs	r3, #1
 80051a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	029b      	lsls	r3, r3, #10
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	4313      	orrs	r3, r2
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c6:	801a      	strh	r2, [r3, #0]
 80051c8:	e056      	b.n	8005278 <USB_EPStartXfer+0x6a6>
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <USB_EPStartXfer+0x616>
 80051d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e047      	b.n	8005278 <USB_EPStartXfer+0x6a6>
 80051e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <USB_EPStartXfer+0x636>
 80051fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005202:	3301      	adds	r3, #1
 8005204:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29a      	uxth	r2, r3
 800520e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005212:	b29b      	uxth	r3, r3
 8005214:	029b      	lsls	r3, r3, #10
 8005216:	b29b      	uxth	r3, r3
 8005218:	4313      	orrs	r3, r2
 800521a:	b29a      	uxth	r2, r3
 800521c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	e02a      	b.n	8005278 <USB_EPStartXfer+0x6a6>
 8005222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d122      	bne.n	8005278 <USB_EPStartXfer+0x6a6>
 8005232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	653b      	str	r3, [r7, #80]	@ 0x50
 800523e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800524c:	b29b      	uxth	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005252:	4413      	add	r3, r2
 8005254:	653b      	str	r3, [r7, #80]	@ 0x50
 8005256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	00da      	lsls	r2, r3, #3
 8005264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005266:	4413      	add	r3, r2
 8005268:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800526c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800526e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005272:	b29a      	uxth	r2, r3
 8005274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005276:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	891b      	ldrh	r3, [r3, #8]
 8005284:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6959      	ldr	r1, [r3, #20]
 8005294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005298:	b29b      	uxth	r3, r3
 800529a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800529e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052a6:	6800      	ldr	r0, [r0, #0]
 80052a8:	f001 f97e 	bl	80065a8 <USB_WritePMA>
            ep->xfer_buff += len;
 80052ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052bc:	441a      	add	r2, r3
 80052be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a1a      	ldr	r2, [r3, #32]
 80052d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d90f      	bls.n	8005306 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80052e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6a1a      	ldr	r2, [r3, #32]
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	621a      	str	r2, [r3, #32]
 8005304:	e00e      	b.n	8005324 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2200      	movs	r2, #0
 8005322:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005328:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d177      	bne.n	8005430 <USB_EPStartXfer+0x85e>
 8005340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005344:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800534c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005350:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800535a:	b29b      	uxth	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005360:	4413      	add	r3, r2
 8005362:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	00da      	lsls	r2, r3, #3
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	4413      	add	r3, r2
 8005376:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800537a:	637b      	str	r3, [r7, #52]	@ 0x34
 800537c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005386:	b29a      	uxth	r2, r3
 8005388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005390:	2b3e      	cmp	r3, #62	@ 0x3e
 8005392:	d921      	bls.n	80053d8 <USB_EPStartXfer+0x806>
 8005394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800539e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <USB_EPStartXfer+0x7e2>
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ae:	3b01      	subs	r3, #1
 80053b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053be:	b29b      	uxth	r3, r3
 80053c0:	029b      	lsls	r3, r3, #10
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	4313      	orrs	r3, r2
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	e050      	b.n	800547a <USB_EPStartXfer+0x8a8>
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <USB_EPStartXfer+0x824>
 80053e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e041      	b.n	800547a <USB_EPStartXfer+0x8a8>
 80053f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <USB_EPStartXfer+0x844>
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005410:	3301      	adds	r3, #1
 8005412:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29a      	uxth	r2, r3
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005420:	b29b      	uxth	r3, r3
 8005422:	029b      	lsls	r3, r3, #10
 8005424:	b29b      	uxth	r3, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	b29a      	uxth	r2, r3
 800542a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	e024      	b.n	800547a <USB_EPStartXfer+0x8a8>
 8005430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d11c      	bne.n	800547a <USB_EPStartXfer+0x8a8>
 8005440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800544e:	b29b      	uxth	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005454:	4413      	add	r3, r2
 8005456:	643b      	str	r3, [r7, #64]	@ 0x40
 8005458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	00da      	lsls	r2, r3, #3
 8005466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005468:	4413      	add	r3, r2
 800546a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005474:	b29a      	uxth	r2, r3
 8005476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005478:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800547a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	895b      	ldrh	r3, [r3, #10]
 8005486:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800548a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6959      	ldr	r1, [r3, #20]
 8005496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549a:	b29b      	uxth	r3, r3
 800549c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054a8:	6800      	ldr	r0, [r0, #0]
 80054aa:	f001 f87d 	bl	80065a8 <USB_WritePMA>
 80054ae:	e227      	b.n	8005900 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80054b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80054c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80054e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80054ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005518:	b29b      	uxth	r3, r3
 800551a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800551c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800553c:	4413      	add	r3, r2
 800553e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	00da      	lsls	r2, r3, #3
 800554e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005550:	4413      	add	r3, r2
 8005552:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005556:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555c:	b29a      	uxth	r2, r3
 800555e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005560:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	891b      	ldrh	r3, [r3, #8]
 800556e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6959      	ldr	r1, [r3, #20]
 800557e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005582:	b29b      	uxth	r3, r3
 8005584:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005588:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800558c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005590:	6800      	ldr	r0, [r0, #0]
 8005592:	f001 f809 	bl	80065a8 <USB_WritePMA>
 8005596:	e1b3      	b.n	8005900 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a8:	1ad2      	subs	r2, r2, r3
 80055aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80c6 	beq.w	800576a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80055ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d177      	bne.n	80056ea <USB_EPStartXfer+0xb18>
 80055fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005614:	b29b      	uxth	r3, r3
 8005616:	461a      	mov	r2, r3
 8005618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800561a:	4413      	add	r3, r2
 800561c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800561e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	00da      	lsls	r2, r3, #3
 800562c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800562e:	4413      	add	r3, r2
 8005630:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005634:	667b      	str	r3, [r7, #100]	@ 0x64
 8005636:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005640:	b29a      	uxth	r2, r3
 8005642:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564a:	2b3e      	cmp	r3, #62	@ 0x3e
 800564c:	d921      	bls.n	8005692 <USB_EPStartXfer+0xac0>
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <USB_EPStartXfer+0xa9c>
 8005664:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005668:	3b01      	subs	r3, #1
 800566a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800566e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29a      	uxth	r2, r3
 8005674:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005678:	b29b      	uxth	r3, r3
 800567a:	029b      	lsls	r3, r3, #10
 800567c:	b29b      	uxth	r3, r3
 800567e:	4313      	orrs	r3, r2
 8005680:	b29b      	uxth	r3, r3
 8005682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568a:	b29a      	uxth	r2, r3
 800568c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	e050      	b.n	8005734 <USB_EPStartXfer+0xb62>
 8005692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <USB_EPStartXfer+0xade>
 800569a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	e041      	b.n	8005734 <USB_EPStartXfer+0xb62>
 80056b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <USB_EPStartXfer+0xafe>
 80056c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056ca:	3301      	adds	r3, #1
 80056cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056da:	b29b      	uxth	r3, r3
 80056dc:	029b      	lsls	r3, r3, #10
 80056de:	b29b      	uxth	r3, r3
 80056e0:	4313      	orrs	r3, r2
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	e024      	b.n	8005734 <USB_EPStartXfer+0xb62>
 80056ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d11c      	bne.n	8005734 <USB_EPStartXfer+0xb62>
 80056fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800570e:	4413      	add	r3, r2
 8005710:	673b      	str	r3, [r7, #112]	@ 0x70
 8005712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	00da      	lsls	r2, r3, #3
 8005720:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005722:	4413      	add	r3, r2
 8005724:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005728:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572e:	b29a      	uxth	r2, r3
 8005730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005732:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	895b      	ldrh	r3, [r3, #10]
 8005740:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6959      	ldr	r1, [r3, #20]
 8005750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005754:	b29b      	uxth	r3, r3
 8005756:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800575a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800575e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005762:	6800      	ldr	r0, [r0, #0]
 8005764:	f000 ff20 	bl	80065a8 <USB_WritePMA>
 8005768:	e0ca      	b.n	8005900 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800576a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	785b      	ldrb	r3, [r3, #1]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d177      	bne.n	800586a <USB_EPStartXfer+0xc98>
 800577a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800579a:	4413      	add	r3, r2
 800579c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800579e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	00da      	lsls	r2, r3, #3
 80057ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057ae:	4413      	add	r3, r2
 80057b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80057cc:	d921      	bls.n	8005812 <USB_EPStartXfer+0xc40>
 80057ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <USB_EPStartXfer+0xc1c>
 80057e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80057e8:	3b01      	subs	r3, #1
 80057ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	4313      	orrs	r3, r2
 8005800:	b29b      	uxth	r3, r3
 8005802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580a:	b29a      	uxth	r2, r3
 800580c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e05c      	b.n	80058cc <USB_EPStartXfer+0xcfa>
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10a      	bne.n	8005830 <USB_EPStartXfer+0xc5e>
 800581a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005828:	b29a      	uxth	r2, r3
 800582a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800582c:	801a      	strh	r2, [r3, #0]
 800582e:	e04d      	b.n	80058cc <USB_EPStartXfer+0xcfa>
 8005830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800583a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <USB_EPStartXfer+0xc7e>
 8005846:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800584a:	3301      	adds	r3, #1
 800584c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29a      	uxth	r2, r3
 8005856:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800585a:	b29b      	uxth	r3, r3
 800585c:	029b      	lsls	r3, r3, #10
 800585e:	b29b      	uxth	r3, r3
 8005860:	4313      	orrs	r3, r2
 8005862:	b29a      	uxth	r2, r3
 8005864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	e030      	b.n	80058cc <USB_EPStartXfer+0xcfa>
 800586a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d128      	bne.n	80058cc <USB_EPStartXfer+0xcfa>
 800587a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005896:	b29b      	uxth	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800589e:	4413      	add	r3, r2
 80058a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	00da      	lsls	r2, r3, #3
 80058b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058b6:	4413      	add	r3, r2
 80058b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	891b      	ldrh	r3, [r3, #8]
 80058d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6959      	ldr	r1, [r3, #20]
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058fa:	6800      	ldr	r0, [r0, #0]
 80058fc:	f000 fe54 	bl	80065a8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005926:	817b      	strh	r3, [r7, #10]
 8005928:	897b      	ldrh	r3, [r7, #10]
 800592a:	f083 0310 	eor.w	r3, r3, #16
 800592e:	817b      	strh	r3, [r7, #10]
 8005930:	897b      	ldrh	r3, [r7, #10]
 8005932:	f083 0320 	eor.w	r3, r3, #32
 8005936:	817b      	strh	r3, [r7, #10]
 8005938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	441a      	add	r2, r3
 8005952:	897b      	ldrh	r3, [r7, #10]
 8005954:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005958:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800595c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005964:	b29b      	uxth	r3, r3
 8005966:	8013      	strh	r3, [r2, #0]
 8005968:	f000 bcde 	b.w	8006328 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800596c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	7b1b      	ldrb	r3, [r3, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f040 80bb 	bne.w	8005af4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	429a      	cmp	r2, r3
 8005998:	d917      	bls.n	80059ca <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800599a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80059aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ba:	1ad2      	subs	r2, r2, r3
 80059bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	619a      	str	r2, [r3, #24]
 80059c8:	e00e      	b.n	80059e8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80059ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80059da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2200      	movs	r2, #0
 80059e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	00da      	lsls	r2, r3, #3
 8005a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a40:	801a      	strh	r2, [r3, #0]
 8005a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a46:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a48:	d924      	bls.n	8005a94 <USB_EPStartXfer+0xec2>
 8005a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <USB_EPStartXfer+0xe98>
 8005a60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a64:	3b01      	subs	r3, #1
 8005a66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	029b      	lsls	r3, r3, #10
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	f000 bc10 	b.w	80062b4 <USB_EPStartXfer+0x16e2>
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10c      	bne.n	8005ab6 <USB_EPStartXfer+0xee4>
 8005a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e3fe      	b.n	80062b4 <USB_EPStartXfer+0x16e2>
 8005ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <USB_EPStartXfer+0xf04>
 8005acc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	029b      	lsls	r3, r3, #10
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005af0:	801a      	strh	r2, [r3, #0]
 8005af2:	e3df      	b.n	80062b4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	78db      	ldrb	r3, [r3, #3]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	f040 8218 	bne.w	8005f36 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f040 809d 	bne.w	8005c52 <USB_EPStartXfer+0x1080>
 8005b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	00da      	lsls	r2, r3, #3
 8005b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b54:	4413      	add	r3, r2
 8005b56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b80:	d92b      	bls.n	8005bda <USB_EPStartXfer+0x1008>
 8005b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d104      	bne.n	8005bb2 <USB_EPStartXfer+0xfe0>
 8005ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bac:	3b01      	subs	r3, #1
 8005bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	029b      	lsls	r3, r3, #10
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e070      	b.n	8005cbc <USB_EPStartXfer+0x10ea>
 8005bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10c      	bne.n	8005c04 <USB_EPStartXfer+0x1032>
 8005bea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	e05b      	b.n	8005cbc <USB_EPStartXfer+0x10ea>
 8005c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <USB_EPStartXfer+0x1062>
 8005c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2e:	3301      	adds	r3, #1
 8005c30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	029b      	lsls	r3, r3, #10
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	4313      	orrs	r3, r2
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	e034      	b.n	8005cbc <USB_EPStartXfer+0x10ea>
 8005c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d12c      	bne.n	8005cbc <USB_EPStartXfer+0x10ea>
 8005c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c86:	4413      	add	r3, r2
 8005c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	00da      	lsls	r2, r3, #3
 8005c9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cba:	801a      	strh	r2, [r3, #0]
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f040 809d 	bne.w	8005e16 <USB_EPStartXfer+0x1244>
 8005cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d00:	4413      	add	r3, r2
 8005d02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	00da      	lsls	r2, r3, #3
 8005d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d18:	4413      	add	r3, r2
 8005d1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d44:	d92b      	bls.n	8005d9e <USB_EPStartXfer+0x11cc>
 8005d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <USB_EPStartXfer+0x11a4>
 8005d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d70:	3b01      	subs	r3, #1
 8005d72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	029b      	lsls	r3, r3, #10
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e069      	b.n	8005e72 <USB_EPStartXfer+0x12a0>
 8005d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10c      	bne.n	8005dc8 <USB_EPStartXfer+0x11f6>
 8005dae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	e054      	b.n	8005e72 <USB_EPStartXfer+0x12a0>
 8005dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	085b      	lsrs	r3, r3, #1
 8005dd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <USB_EPStartXfer+0x1226>
 8005dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df2:	3301      	adds	r3, #1
 8005df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	029b      	lsls	r3, r3, #10
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e02d      	b.n	8005e72 <USB_EPStartXfer+0x12a0>
 8005e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d125      	bne.n	8005e72 <USB_EPStartXfer+0x12a0>
 8005e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	00da      	lsls	r2, r3, #3
 8005e50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e70:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 8218 	beq.w	80062b4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ea4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <USB_EPStartXfer+0x12ea>
 8005eb0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10d      	bne.n	8005ed8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ebc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f040 81f5 	bne.w	80062b4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005eca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f040 81ee 	bne.w	80062b4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	441a      	add	r2, r3
 8005f1c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8013      	strh	r3, [r2, #0]
 8005f34:	e1be      	b.n	80062b4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	78db      	ldrb	r3, [r3, #3]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	f040 81b4 	bne.w	80062b0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699a      	ldr	r2, [r3, #24]
 8005f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d917      	bls.n	8005f94 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f84:	1ad2      	subs	r2, r2, r3
 8005f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	619a      	str	r2, [r3, #24]
 8005f92:	e00e      	b.n	8005fb2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f040 8085 	bne.w	80060ce <USB_EPStartXfer+0x14fc>
 8005fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fe8:	4413      	add	r3, r2
 8005fea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	00da      	lsls	r2, r3, #3
 8005ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006000:	4413      	add	r3, r2
 8006002:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800600a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006016:	b29a      	uxth	r2, r3
 8006018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006022:	2b3e      	cmp	r3, #62	@ 0x3e
 8006024:	d923      	bls.n	800606e <USB_EPStartXfer+0x149c>
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <USB_EPStartXfer+0x1474>
 800603c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006040:	3b01      	subs	r3, #1
 8006042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29a      	uxth	r2, r3
 800604e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006052:	b29b      	uxth	r3, r3
 8006054:	029b      	lsls	r3, r3, #10
 8006056:	b29b      	uxth	r3, r3
 8006058:	4313      	orrs	r3, r2
 800605a:	b29b      	uxth	r3, r3
 800605c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006064:	b29a      	uxth	r2, r3
 8006066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800606a:	801a      	strh	r2, [r3, #0]
 800606c:	e060      	b.n	8006130 <USB_EPStartXfer+0x155e>
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10c      	bne.n	8006090 <USB_EPStartXfer+0x14be>
 8006076:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006086:	b29a      	uxth	r2, r3
 8006088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	e04f      	b.n	8006130 <USB_EPStartXfer+0x155e>
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800609a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d004      	beq.n	80060b0 <USB_EPStartXfer+0x14de>
 80060a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060aa:	3301      	adds	r3, #1
 80060ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060bc:	b29b      	uxth	r3, r3
 80060be:	029b      	lsls	r3, r3, #10
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	4313      	orrs	r3, r2
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060ca:	801a      	strh	r2, [r3, #0]
 80060cc:	e030      	b.n	8006130 <USB_EPStartXfer+0x155e>
 80060ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d128      	bne.n	8006130 <USB_EPStartXfer+0x155e>
 80060de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006102:	4413      	add	r3, r2
 8006104:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	00da      	lsls	r2, r3, #3
 8006116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800611a:	4413      	add	r3, r2
 800611c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006128:	b29a      	uxth	r2, r3
 800612a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800613e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	785b      	ldrb	r3, [r3, #1]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f040 8085 	bne.w	800625a <USB_EPStartXfer+0x1688>
 8006150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006154:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800615e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006162:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800616c:	b29b      	uxth	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006174:	4413      	add	r3, r2
 8006176:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800617a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	00da      	lsls	r2, r3, #3
 8006188:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800618c:	4413      	add	r3, r2
 800618e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006192:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061a8:	801a      	strh	r2, [r3, #0]
 80061aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80061b0:	d923      	bls.n	80061fa <USB_EPStartXfer+0x1628>
 80061b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <USB_EPStartXfer+0x1600>
 80061c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061cc:	3b01      	subs	r3, #1
 80061ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29a      	uxth	r2, r3
 80061da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061de:	b29b      	uxth	r3, r3
 80061e0:	029b      	lsls	r3, r3, #10
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	4313      	orrs	r3, r2
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061f6:	801a      	strh	r2, [r3, #0]
 80061f8:	e05c      	b.n	80062b4 <USB_EPStartXfer+0x16e2>
 80061fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10c      	bne.n	800621c <USB_EPStartXfer+0x164a>
 8006202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006212:	b29a      	uxth	r2, r3
 8006214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006218:	801a      	strh	r2, [r3, #0]
 800621a:	e04b      	b.n	80062b4 <USB_EPStartXfer+0x16e2>
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d004      	beq.n	800623c <USB_EPStartXfer+0x166a>
 8006232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006236:	3301      	adds	r3, #1
 8006238:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800623c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29a      	uxth	r2, r3
 8006244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006248:	b29b      	uxth	r3, r3
 800624a:	029b      	lsls	r3, r3, #10
 800624c:	b29b      	uxth	r3, r3
 800624e:	4313      	orrs	r3, r2
 8006250:	b29a      	uxth	r2, r3
 8006252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	e02c      	b.n	80062b4 <USB_EPStartXfer+0x16e2>
 800625a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d124      	bne.n	80062b4 <USB_EPStartXfer+0x16e2>
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006278:	b29b      	uxth	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006280:	4413      	add	r3, r2
 8006282:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	00da      	lsls	r2, r3, #3
 8006294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006298:	4413      	add	r3, r2
 800629a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800629e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	e001      	b.n	80062b4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e03a      	b.n	800632a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062e2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80062e6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062f2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	441a      	add	r2, r3
 8006310:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800631c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006324:	b29b      	uxth	r3, r3
 8006326:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d020      	beq.n	8006388 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	b29b      	uxth	r3, r3
 8006354:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800635c:	81bb      	strh	r3, [r7, #12]
 800635e:	89bb      	ldrh	r3, [r7, #12]
 8006360:	f083 0310 	eor.w	r3, r3, #16
 8006364:	81bb      	strh	r3, [r7, #12]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	441a      	add	r2, r3
 8006370:	89bb      	ldrh	r3, [r7, #12]
 8006372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800637a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800637e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006382:	b29b      	uxth	r3, r3
 8006384:	8013      	strh	r3, [r2, #0]
 8006386:	e01f      	b.n	80063c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800639a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639e:	81fb      	strh	r3, [r7, #14]
 80063a0:	89fb      	ldrh	r3, [r7, #14]
 80063a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80063a6:	81fb      	strh	r3, [r7, #14]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	441a      	add	r2, r3
 80063b2:	89fb      	ldrh	r3, [r7, #14]
 80063b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b087      	sub	sp, #28
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	7b1b      	ldrb	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 809d 	bne.w	8006524 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d04c      	beq.n	800648c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	823b      	strh	r3, [r7, #16]
 8006400:	8a3b      	ldrh	r3, [r7, #16]
 8006402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01b      	beq.n	8006442 <USB_EPClearStall+0x6c>
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800641c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006420:	81fb      	strh	r3, [r7, #14]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	441a      	add	r2, r3
 800642c:	89fb      	ldrh	r3, [r7, #14]
 800642e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800643e:	b29b      	uxth	r3, r3
 8006440:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	78db      	ldrb	r3, [r3, #3]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d06c      	beq.n	8006524 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800645c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006460:	81bb      	strh	r3, [r7, #12]
 8006462:	89bb      	ldrh	r3, [r7, #12]
 8006464:	f083 0320 	eor.w	r3, r3, #32
 8006468:	81bb      	strh	r3, [r7, #12]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	89bb      	ldrh	r3, [r7, #12]
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
 800648a:	e04b      	b.n	8006524 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	82fb      	strh	r3, [r7, #22]
 800649a:	8afb      	ldrh	r3, [r7, #22]
 800649c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01b      	beq.n	80064dc <USB_EPClearStall+0x106>
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	82bb      	strh	r3, [r7, #20]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	8abb      	ldrh	r3, [r7, #20]
 80064c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d8:	b29b      	uxth	r3, r3
 80064da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f2:	827b      	strh	r3, [r7, #18]
 80064f4:	8a7b      	ldrh	r3, [r7, #18]
 80064f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064fa:	827b      	strh	r3, [r7, #18]
 80064fc:	8a7b      	ldrh	r3, [r7, #18]
 80064fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006502:	827b      	strh	r3, [r7, #18]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	8a7b      	ldrh	r3, [r7, #18]
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800651c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	460b      	mov	r3, r1
 800653c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2280      	movs	r2, #128	@ 0x80
 8006548:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006568:	b29b      	uxth	r3, r3
 800656a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006596:	b29b      	uxth	r3, r3
 8006598:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800659a:	68fb      	ldr	r3, [r7, #12]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b08b      	sub	sp, #44	@ 0x2c
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	4611      	mov	r1, r2
 80065b4:	461a      	mov	r2, r3
 80065b6:	460b      	mov	r3, r1
 80065b8:	80fb      	strh	r3, [r7, #6]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065be:	88bb      	ldrh	r3, [r7, #4]
 80065c0:	3301      	adds	r3, #1
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065de:	e01b      	b.n	8006618 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	3301      	adds	r3, #1
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	b21a      	sxth	r2, r3
 80065f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	b21b      	sxth	r3, r3
 80065f8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	8a7a      	ldrh	r2, [r7, #18]
 80065fe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	3302      	adds	r3, #2
 8006604:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	3301      	adds	r3, #1
 800660a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	3301      	adds	r3, #1
 8006610:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	3b01      	subs	r3, #1
 8006616:	627b      	str	r3, [r7, #36]	@ 0x24
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e0      	bne.n	80065e0 <USB_WritePMA+0x38>
  }
}
 800661e:	bf00      	nop
 8006620:	bf00      	nop
 8006622:	372c      	adds	r7, #44	@ 0x2c
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800662c:	b480      	push	{r7}
 800662e:	b08b      	sub	sp, #44	@ 0x2c
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	4611      	mov	r1, r2
 8006638:	461a      	mov	r2, r3
 800663a:	460b      	mov	r3, r1
 800663c:	80fb      	strh	r3, [r7, #6]
 800663e:	4613      	mov	r3, r2
 8006640:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006642:	88bb      	ldrh	r3, [r7, #4]
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	b29b      	uxth	r3, r3
 8006648:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800665c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	627b      	str	r3, [r7, #36]	@ 0x24
 8006662:	e018      	b.n	8006696 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
 800666a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	3302      	adds	r3, #2
 8006670:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	3301      	adds	r3, #1
 800667e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	b2da      	uxtb	r2, r3
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	3301      	adds	r3, #1
 800668e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	3b01      	subs	r3, #1
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e3      	bne.n	8006664 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800669c:	88bb      	ldrh	r3, [r7, #4]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	701a      	strb	r2, [r3, #0]
  }
}
 80066b8:	bf00      	nop
 80066ba:	372c      	adds	r7, #44	@ 0x2c
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066d0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80066d4:	f002 f8a4 	bl	8008820 <USBD_static_malloc>
 80066d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80066e8:	2302      	movs	r3, #2
 80066ea:	e066      	b.n	80067ba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7c1b      	ldrb	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d119      	bne.n	8006730 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006700:	2202      	movs	r2, #2
 8006702:	2181      	movs	r1, #129	@ 0x81
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 ff32 	bl	800856e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006714:	2202      	movs	r2, #2
 8006716:	2101      	movs	r1, #1
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 ff28 	bl	800856e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2210      	movs	r2, #16
 800672a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800672e:	e016      	b.n	800675e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006730:	2340      	movs	r3, #64	@ 0x40
 8006732:	2202      	movs	r2, #2
 8006734:	2181      	movs	r1, #129	@ 0x81
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 ff19 	bl	800856e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006742:	2340      	movs	r3, #64	@ 0x40
 8006744:	2202      	movs	r2, #2
 8006746:	2101      	movs	r1, #1
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 ff10 	bl	800856e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2210      	movs	r2, #16
 800675a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800675e:	2308      	movs	r3, #8
 8006760:	2203      	movs	r2, #3
 8006762:	2182      	movs	r1, #130	@ 0x82
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 ff02 	bl	800856e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	7c1b      	ldrb	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d109      	bne.n	80067a8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800679a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800679e:	2101      	movs	r1, #1
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 ffd3 	bl	800874c <USBD_LL_PrepareReceive>
 80067a6:	e007      	b.n	80067b8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067ae:	2340      	movs	r3, #64	@ 0x40
 80067b0:	2101      	movs	r1, #1
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 ffca 	bl	800874c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80067ce:	2181      	movs	r1, #129	@ 0x81
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 fef2 	bl	80085ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80067dc:	2101      	movs	r1, #1
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 feeb 	bl	80085ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80067ec:	2182      	movs	r1, #130	@ 0x82
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fee3 	bl	80085ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00e      	beq.n	800682c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800681e:	4618      	mov	r0, r3
 8006820:	f002 f80c 	bl	800883c <USBD_static_free>
    pdev->pClassData = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006848:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800685c:	2303      	movs	r3, #3
 800685e:	e0af      	b.n	80069c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006868:	2b00      	cmp	r3, #0
 800686a:	d03f      	beq.n	80068ec <USBD_CDC_Setup+0xb4>
 800686c:	2b20      	cmp	r3, #32
 800686e:	f040 809f 	bne.w	80069b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	88db      	ldrh	r3, [r3, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d02e      	beq.n	80068d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	b25b      	sxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	da16      	bge.n	80068b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006890:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	88d2      	ldrh	r2, [r2, #6]
 8006896:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	88db      	ldrh	r3, [r3, #6]
 800689c:	2b07      	cmp	r3, #7
 800689e:	bf28      	it	cs
 80068a0:	2307      	movcs	r3, #7
 80068a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	89fa      	ldrh	r2, [r7, #14]
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f001 fa9d 	bl	8007dea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80068b0:	e085      	b.n	80069be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	785a      	ldrb	r2, [r3, #1]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	88db      	ldrh	r3, [r3, #6]
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80068c8:	6939      	ldr	r1, [r7, #16]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	88db      	ldrh	r3, [r3, #6]
 80068ce:	461a      	mov	r2, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 fab6 	bl	8007e42 <USBD_CtlPrepareRx>
      break;
 80068d6:	e072      	b.n	80069be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	7850      	ldrb	r0, [r2, #1]
 80068e4:	2200      	movs	r2, #0
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	4798      	blx	r3
      break;
 80068ea:	e068      	b.n	80069be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b0b      	cmp	r3, #11
 80068f2:	d852      	bhi.n	800699a <USBD_CDC_Setup+0x162>
 80068f4:	a201      	add	r2, pc, #4	@ (adr r2, 80068fc <USBD_CDC_Setup+0xc4>)
 80068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fa:	bf00      	nop
 80068fc:	0800692d 	.word	0x0800692d
 8006900:	080069a9 	.word	0x080069a9
 8006904:	0800699b 	.word	0x0800699b
 8006908:	0800699b 	.word	0x0800699b
 800690c:	0800699b 	.word	0x0800699b
 8006910:	0800699b 	.word	0x0800699b
 8006914:	0800699b 	.word	0x0800699b
 8006918:	0800699b 	.word	0x0800699b
 800691c:	0800699b 	.word	0x0800699b
 8006920:	0800699b 	.word	0x0800699b
 8006924:	08006957 	.word	0x08006957
 8006928:	08006981 	.word	0x08006981
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b03      	cmp	r3, #3
 8006936:	d107      	bne.n	8006948 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006938:	f107 030a 	add.w	r3, r7, #10
 800693c:	2202      	movs	r2, #2
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 fa52 	bl	8007dea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006946:	e032      	b.n	80069ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 f9dc 	bl	8007d08 <USBD_CtlError>
            ret = USBD_FAIL;
 8006950:	2303      	movs	r3, #3
 8006952:	75fb      	strb	r3, [r7, #23]
          break;
 8006954:	e02b      	b.n	80069ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b03      	cmp	r3, #3
 8006960:	d107      	bne.n	8006972 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006962:	f107 030d 	add.w	r3, r7, #13
 8006966:	2201      	movs	r2, #1
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fa3d 	bl	8007dea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006970:	e01d      	b.n	80069ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 f9c7 	bl	8007d08 <USBD_CtlError>
            ret = USBD_FAIL;
 800697a:	2303      	movs	r3, #3
 800697c:	75fb      	strb	r3, [r7, #23]
          break;
 800697e:	e016      	b.n	80069ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b03      	cmp	r3, #3
 800698a:	d00f      	beq.n	80069ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 f9ba 	bl	8007d08 <USBD_CtlError>
            ret = USBD_FAIL;
 8006994:	2303      	movs	r3, #3
 8006996:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006998:	e008      	b.n	80069ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 f9b3 	bl	8007d08 <USBD_CtlError>
          ret = USBD_FAIL;
 80069a2:	2303      	movs	r3, #3
 80069a4:	75fb      	strb	r3, [r7, #23]
          break;
 80069a6:	e002      	b.n	80069ae <USBD_CDC_Setup+0x176>
          break;
 80069a8:	bf00      	nop
 80069aa:	e008      	b.n	80069be <USBD_CDC_Setup+0x186>
          break;
 80069ac:	bf00      	nop
      }
      break;
 80069ae:	e006      	b.n	80069be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 f9a8 	bl	8007d08 <USBD_CtlError>
      ret = USBD_FAIL;
 80069b8:	2303      	movs	r3, #3
 80069ba:	75fb      	strb	r3, [r7, #23]
      break;
 80069bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80069da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e04f      	b.n	8006a8a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80069f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80069f2:	78fa      	ldrb	r2, [r7, #3]
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	3318      	adds	r3, #24
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d029      	beq.n	8006a5c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	3318      	adds	r3, #24
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	78f9      	ldrb	r1, [r7, #3]
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	440b      	add	r3, r1
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	4403      	add	r3, r0
 8006a28:	3320      	adds	r3, #32
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a30:	fb01 f303 	mul.w	r3, r1, r3
 8006a34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d110      	bne.n	8006a5c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	3318      	adds	r3, #24
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a4e:	78f9      	ldrb	r1, [r7, #3]
 8006a50:	2300      	movs	r3, #0
 8006a52:	2200      	movs	r2, #0
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fe58 	bl	800870a <USBD_LL_Transmit>
 8006a5a:	e015      	b.n	8006a88 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006a84:	78fa      	ldrb	r2, [r7, #3]
 8006a86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006aa4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e015      	b.n	8006ae0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fe68 	bl	800878e <USBD_LL_GetRxDataSize>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ada:	4611      	mov	r1, r2
 8006adc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006af6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e01a      	b.n	8006b38 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d014      	beq.n	8006b36 <USBD_CDC_EP0_RxReady+0x4e>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006b12:	2bff      	cmp	r3, #255	@ 0xff
 8006b14:	d00f      	beq.n	8006b36 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8006b24:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	22ff      	movs	r2, #255	@ 0xff
 8006b32:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2243      	movs	r2, #67	@ 0x43
 8006b4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006b4e:	4b03      	ldr	r3, [pc, #12]	@ (8006b5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	20000094 	.word	0x20000094

08006b60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2243      	movs	r2, #67	@ 0x43
 8006b6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006b6e:	4b03      	ldr	r3, [pc, #12]	@ (8006b7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	20000050 	.word	0x20000050

08006b80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2243      	movs	r2, #67	@ 0x43
 8006b8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006b8e:	4b03      	ldr	r3, [pc, #12]	@ (8006b9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	200000d8 	.word	0x200000d8

08006ba0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	220a      	movs	r2, #10
 8006bac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006bae:	4b03      	ldr	r3, [pc, #12]	@ (8006bbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	2000000c 	.word	0x2000000c

08006bc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e004      	b.n	8006bde <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b087      	sub	sp, #28
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bfc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e008      	b.n	8006c1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e004      	b.n	8006c4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e016      	b.n	8006ca4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	7c1b      	ldrb	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c88:	2101      	movs	r1, #1
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fd5e 	bl	800874c <USBD_LL_PrepareReceive>
 8006c90:	e007      	b.n	8006ca2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c98:	2340      	movs	r3, #64	@ 0x40
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 fd55 	bl	800874c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e01f      	b.n	8006d04 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	79fa      	ldrb	r2, [r7, #7]
 8006cf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f001 fbbd 	bl	8008478 <USBD_LL_Init>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e016      	b.n	8006d52 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d40:	f107 020e 	add.w	r2, r7, #14
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	4602      	mov	r2, r0
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fbe8 	bl	8008538 <USBD_LL_Start>
 8006d68:	4603      	mov	r3, r0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d94:	2303      	movs	r3, #3
 8006d96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	78fa      	ldrb	r2, [r7, #3]
 8006dac:	4611      	mov	r1, r2
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	4611      	mov	r1, r2
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
  }

  return USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 ff46 	bl	8007c94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006e16:	461a      	mov	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d01a      	beq.n	8006e62 <USBD_LL_SetupStage+0x72>
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d822      	bhi.n	8006e76 <USBD_LL_SetupStage+0x86>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <USBD_LL_SetupStage+0x4a>
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d00a      	beq.n	8006e4e <USBD_LL_SetupStage+0x5e>
 8006e38:	e01d      	b.n	8006e76 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f9ee 	bl	8007224 <USBD_StdDevReq>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e4c:	e020      	b.n	8006e90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fa52 	bl	8007300 <USBD_StdItfReq>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e60:	e016      	b.n	8006e90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa91 	bl	8007392 <USBD_StdEPReq>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]
      break;
 8006e74:	e00c      	b.n	8006e90 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fbb7 	bl	80085f8 <USBD_LL_StallEP>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e8e:	bf00      	nop
  }

  return ret;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b086      	sub	sp, #24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ea8:	7afb      	ldrb	r3, [r7, #11]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d138      	bne.n	8006f20 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006eb4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ebc:	2b03      	cmp	r3, #3
 8006ebe:	d14a      	bne.n	8006f56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d913      	bls.n	8006ef4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	1ad2      	subs	r2, r2, r3
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	bf28      	it	cs
 8006ee6:	4613      	movcs	r3, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 ffc5 	bl	8007e7c <USBD_CtlContinueRx>
 8006ef2:	e030      	b.n	8006f56 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d10b      	bne.n	8006f18 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 ffc0 	bl	8007e9e <USBD_CtlSendStatus>
 8006f1e:	e01a      	b.n	8006f56 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d114      	bne.n	8006f56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00e      	beq.n	8006f56 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	7afa      	ldrb	r2, [r7, #11]
 8006f42:	4611      	mov	r1, r2
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	4798      	blx	r3
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	e000      	b.n	8006f58 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f6e:	7afb      	ldrb	r3, [r7, #11]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d16b      	bne.n	800704c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3314      	adds	r3, #20
 8006f78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d156      	bne.n	8007032 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d914      	bls.n	8006fba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	1ad2      	subs	r2, r2, r3
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 ff3a 	bl	8007e20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fac:	2300      	movs	r3, #0
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f001 fbca 	bl	800874c <USBD_LL_PrepareReceive>
 8006fb8:	e03b      	b.n	8007032 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d11c      	bne.n	8007000 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d316      	bcc.n	8007000 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d20f      	bcs.n	8007000 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 ff1b 	bl	8007e20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f001 fba7 	bl	800874c <USBD_LL_PrepareReceive>
 8006ffe:	e018      	b.n	8007032 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b03      	cmp	r3, #3
 800700a:	d10b      	bne.n	8007024 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007024:	2180      	movs	r1, #128	@ 0x80
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f001 fae6 	bl	80085f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 ff49 	bl	8007ec4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007038:	2b01      	cmp	r3, #1
 800703a:	d122      	bne.n	8007082 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7ff fe98 	bl	8006d72 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800704a:	e01a      	b.n	8007082 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b03      	cmp	r3, #3
 8007056:	d114      	bne.n	8007082 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00e      	beq.n	8007082 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	7afa      	ldrb	r2, [r7, #11]
 800706e:	4611      	mov	r1, r2
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	4798      	blx	r3
 8007074:	4603      	mov	r3, r0
 8007076:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800707e:	7dfb      	ldrb	r3, [r7, #23]
 8007080:	e000      	b.n	8007084 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	e02f      	b.n	8007120 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00f      	beq.n	80070ea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6852      	ldr	r2, [r2, #4]
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	4611      	mov	r1, r2
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070ea:	2340      	movs	r3, #64	@ 0x40
 80070ec:	2200      	movs	r2, #0
 80070ee:	2100      	movs	r1, #0
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 fa3c 	bl	800856e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2240      	movs	r2, #64	@ 0x40
 8007102:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007106:	2340      	movs	r3, #64	@ 0x40
 8007108:	2200      	movs	r2, #0
 800710a:	2180      	movs	r1, #128	@ 0x80
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 fa2e 	bl	800856e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2240      	movs	r2, #64	@ 0x40
 800711c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	78fa      	ldrb	r2, [r7, #3]
 8007138:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007156:	b2da      	uxtb	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2204      	movs	r2, #4
 8007162:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b04      	cmp	r3, #4
 8007186:	d106      	bne.n	8007196 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800718e:	b2da      	uxtb	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e012      	b.n	80071e0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d10b      	bne.n	80071de <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	3301      	adds	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007206:	8a3b      	ldrh	r3, [r7, #16]
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	b21a      	sxth	r2, r3
 800720c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007210:	4313      	orrs	r3, r2
 8007212:	b21b      	sxth	r3, r3
 8007214:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007216:	89fb      	ldrh	r3, [r7, #14]
}
 8007218:	4618      	mov	r0, r3
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800723a:	2b40      	cmp	r3, #64	@ 0x40
 800723c:	d005      	beq.n	800724a <USBD_StdDevReq+0x26>
 800723e:	2b40      	cmp	r3, #64	@ 0x40
 8007240:	d853      	bhi.n	80072ea <USBD_StdDevReq+0xc6>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <USBD_StdDevReq+0x3a>
 8007246:	2b20      	cmp	r3, #32
 8007248:	d14f      	bne.n	80072ea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	4798      	blx	r3
 8007258:	4603      	mov	r3, r0
 800725a:	73fb      	strb	r3, [r7, #15]
      break;
 800725c:	e04a      	b.n	80072f4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	2b09      	cmp	r3, #9
 8007264:	d83b      	bhi.n	80072de <USBD_StdDevReq+0xba>
 8007266:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <USBD_StdDevReq+0x48>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	080072c1 	.word	0x080072c1
 8007270:	080072d5 	.word	0x080072d5
 8007274:	080072df 	.word	0x080072df
 8007278:	080072cb 	.word	0x080072cb
 800727c:	080072df 	.word	0x080072df
 8007280:	0800729f 	.word	0x0800729f
 8007284:	08007295 	.word	0x08007295
 8007288:	080072df 	.word	0x080072df
 800728c:	080072b7 	.word	0x080072b7
 8007290:	080072a9 	.word	0x080072a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9de 	bl	8007658 <USBD_GetDescriptor>
          break;
 800729c:	e024      	b.n	80072e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fb6d 	bl	8007980 <USBD_SetAddress>
          break;
 80072a6:	e01f      	b.n	80072e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fbac 	bl	8007a08 <USBD_SetConfig>
 80072b0:	4603      	mov	r3, r0
 80072b2:	73fb      	strb	r3, [r7, #15]
          break;
 80072b4:	e018      	b.n	80072e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fc4b 	bl	8007b54 <USBD_GetConfig>
          break;
 80072be:	e013      	b.n	80072e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fc7c 	bl	8007bc0 <USBD_GetStatus>
          break;
 80072c8:	e00e      	b.n	80072e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fcab 	bl	8007c28 <USBD_SetFeature>
          break;
 80072d2:	e009      	b.n	80072e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fcba 	bl	8007c50 <USBD_ClrFeature>
          break;
 80072dc:	e004      	b.n	80072e8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fd11 	bl	8007d08 <USBD_CtlError>
          break;
 80072e6:	bf00      	nop
      }
      break;
 80072e8:	e004      	b.n	80072f4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fd0b 	bl	8007d08 <USBD_CtlError>
      break;
 80072f2:	bf00      	nop
  }

  return ret;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop

08007300 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007316:	2b40      	cmp	r3, #64	@ 0x40
 8007318:	d005      	beq.n	8007326 <USBD_StdItfReq+0x26>
 800731a:	2b40      	cmp	r3, #64	@ 0x40
 800731c:	d82f      	bhi.n	800737e <USBD_StdItfReq+0x7e>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <USBD_StdItfReq+0x26>
 8007322:	2b20      	cmp	r3, #32
 8007324:	d12b      	bne.n	800737e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800732c:	b2db      	uxtb	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	2b02      	cmp	r3, #2
 8007332:	d81d      	bhi.n	8007370 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	889b      	ldrh	r3, [r3, #4]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b01      	cmp	r3, #1
 800733c:	d813      	bhi.n	8007366 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	88db      	ldrh	r3, [r3, #6]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d110      	bne.n	800737a <USBD_StdItfReq+0x7a>
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10d      	bne.n	800737a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fd9d 	bl	8007e9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007364:	e009      	b.n	800737a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fccd 	bl	8007d08 <USBD_CtlError>
          break;
 800736e:	e004      	b.n	800737a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fcc8 	bl	8007d08 <USBD_CtlError>
          break;
 8007378:	e000      	b.n	800737c <USBD_StdItfReq+0x7c>
          break;
 800737a:	bf00      	nop
      }
      break;
 800737c:	e004      	b.n	8007388 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fcc1 	bl	8007d08 <USBD_CtlError>
      break;
 8007386:	bf00      	nop
  }

  return ret;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	889b      	ldrh	r3, [r3, #4]
 80073a4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073ae:	2b40      	cmp	r3, #64	@ 0x40
 80073b0:	d007      	beq.n	80073c2 <USBD_StdEPReq+0x30>
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	f200 8145 	bhi.w	8007642 <USBD_StdEPReq+0x2b0>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00c      	beq.n	80073d6 <USBD_StdEPReq+0x44>
 80073bc:	2b20      	cmp	r3, #32
 80073be:	f040 8140 	bne.w	8007642 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]
      break;
 80073d4:	e13a      	b.n	800764c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d007      	beq.n	80073ee <USBD_StdEPReq+0x5c>
 80073de:	2b03      	cmp	r3, #3
 80073e0:	f300 8129 	bgt.w	8007636 <USBD_StdEPReq+0x2a4>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d07f      	beq.n	80074e8 <USBD_StdEPReq+0x156>
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d03c      	beq.n	8007466 <USBD_StdEPReq+0xd4>
 80073ec:	e123      	b.n	8007636 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d002      	beq.n	8007400 <USBD_StdEPReq+0x6e>
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d016      	beq.n	800742c <USBD_StdEPReq+0x9a>
 80073fe:	e02c      	b.n	800745a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00d      	beq.n	8007422 <USBD_StdEPReq+0x90>
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	2b80      	cmp	r3, #128	@ 0x80
 800740a:	d00a      	beq.n	8007422 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 f8f1 	bl	80085f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007416:	2180      	movs	r1, #128	@ 0x80
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f8ed 	bl	80085f8 <USBD_LL_StallEP>
 800741e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007420:	e020      	b.n	8007464 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fc6f 	bl	8007d08 <USBD_CtlError>
              break;
 800742a:	e01b      	b.n	8007464 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	885b      	ldrh	r3, [r3, #2]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10e      	bne.n	8007452 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00b      	beq.n	8007452 <USBD_StdEPReq+0xc0>
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b80      	cmp	r3, #128	@ 0x80
 800743e:	d008      	beq.n	8007452 <USBD_StdEPReq+0xc0>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	88db      	ldrh	r3, [r3, #6]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 f8d3 	bl	80085f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fd23 	bl	8007e9e <USBD_CtlSendStatus>

              break;
 8007458:	e004      	b.n	8007464 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fc53 	bl	8007d08 <USBD_CtlError>
              break;
 8007462:	bf00      	nop
          }
          break;
 8007464:	e0ec      	b.n	8007640 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d002      	beq.n	8007478 <USBD_StdEPReq+0xe6>
 8007472:	2b03      	cmp	r3, #3
 8007474:	d016      	beq.n	80074a4 <USBD_StdEPReq+0x112>
 8007476:	e030      	b.n	80074da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00d      	beq.n	800749a <USBD_StdEPReq+0x108>
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2b80      	cmp	r3, #128	@ 0x80
 8007482:	d00a      	beq.n	800749a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 f8b5 	bl	80085f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800748e:	2180      	movs	r1, #128	@ 0x80
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 f8b1 	bl	80085f8 <USBD_LL_StallEP>
 8007496:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007498:	e025      	b.n	80074e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fc33 	bl	8007d08 <USBD_CtlError>
              break;
 80074a2:	e020      	b.n	80074e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	885b      	ldrh	r3, [r3, #2]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d11b      	bne.n	80074e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d004      	beq.n	80074c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 f8bb 	bl	8008636 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fcec 	bl	8007e9e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4798      	blx	r3
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80074d8:	e004      	b.n	80074e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fc13 	bl	8007d08 <USBD_CtlError>
              break;
 80074e2:	e000      	b.n	80074e6 <USBD_StdEPReq+0x154>
              break;
 80074e4:	bf00      	nop
          }
          break;
 80074e6:	e0ab      	b.n	8007640 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d002      	beq.n	80074fa <USBD_StdEPReq+0x168>
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d032      	beq.n	800755e <USBD_StdEPReq+0x1cc>
 80074f8:	e097      	b.n	800762a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <USBD_StdEPReq+0x17e>
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	2b80      	cmp	r3, #128	@ 0x80
 8007504:	d004      	beq.n	8007510 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fbfd 	bl	8007d08 <USBD_CtlError>
                break;
 800750e:	e091      	b.n	8007634 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007514:	2b00      	cmp	r3, #0
 8007516:	da0b      	bge.n	8007530 <USBD_StdEPReq+0x19e>
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	3310      	adds	r3, #16
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	4413      	add	r3, r2
 800752c:	3304      	adds	r3, #4
 800752e:	e00b      	b.n	8007548 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	4413      	add	r3, r2
 8007546:	3304      	adds	r3, #4
 8007548:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2202      	movs	r2, #2
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fc47 	bl	8007dea <USBD_CtlSendData>
              break;
 800755c:	e06a      	b.n	8007634 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800755e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007562:	2b00      	cmp	r3, #0
 8007564:	da11      	bge.n	800758a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	f003 020f 	and.w	r2, r3, #15
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	440b      	add	r3, r1
 8007578:	3324      	adds	r3, #36	@ 0x24
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d117      	bne.n	80075b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fbc0 	bl	8007d08 <USBD_CtlError>
                  break;
 8007588:	e054      	b.n	8007634 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	f003 020f 	and.w	r2, r3, #15
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fbad 	bl	8007d08 <USBD_CtlError>
                  break;
 80075ae:	e041      	b.n	8007634 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	da0b      	bge.n	80075d0 <USBD_StdEPReq+0x23e>
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	3310      	adds	r3, #16
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	4413      	add	r3, r2
 80075cc:	3304      	adds	r3, #4
 80075ce:	e00b      	b.n	80075e8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	4413      	add	r3, r2
 80075e6:	3304      	adds	r3, #4
 80075e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <USBD_StdEPReq+0x264>
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2b80      	cmp	r3, #128	@ 0x80
 80075f4:	d103      	bne.n	80075fe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	e00e      	b.n	800761c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 f836 	bl	8008674 <USBD_LL_IsStallEP>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2201      	movs	r2, #1
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	e002      	b.n	800761c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2202      	movs	r2, #2
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fbe1 	bl	8007dea <USBD_CtlSendData>
              break;
 8007628:	e004      	b.n	8007634 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fb6b 	bl	8007d08 <USBD_CtlError>
              break;
 8007632:	bf00      	nop
          }
          break;
 8007634:	e004      	b.n	8007640 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fb65 	bl	8007d08 <USBD_CtlError>
          break;
 800763e:	bf00      	nop
      }
      break;
 8007640:	e004      	b.n	800764c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fb5f 	bl	8007d08 <USBD_CtlError>
      break;
 800764a:	bf00      	nop
  }

  return ret;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	885b      	ldrh	r3, [r3, #2]
 8007672:	0a1b      	lsrs	r3, r3, #8
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	2b0e      	cmp	r3, #14
 800767a:	f200 8152 	bhi.w	8007922 <USBD_GetDescriptor+0x2ca>
 800767e:	a201      	add	r2, pc, #4	@ (adr r2, 8007684 <USBD_GetDescriptor+0x2c>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	080076f5 	.word	0x080076f5
 8007688:	0800770d 	.word	0x0800770d
 800768c:	0800774d 	.word	0x0800774d
 8007690:	08007923 	.word	0x08007923
 8007694:	08007923 	.word	0x08007923
 8007698:	080078c3 	.word	0x080078c3
 800769c:	080078ef 	.word	0x080078ef
 80076a0:	08007923 	.word	0x08007923
 80076a4:	08007923 	.word	0x08007923
 80076a8:	08007923 	.word	0x08007923
 80076ac:	08007923 	.word	0x08007923
 80076b0:	08007923 	.word	0x08007923
 80076b4:	08007923 	.word	0x08007923
 80076b8:	08007923 	.word	0x08007923
 80076bc:	080076c1 	.word	0x080076c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	7c12      	ldrb	r2, [r2, #16]
 80076d8:	f107 0108 	add.w	r1, r7, #8
 80076dc:	4610      	mov	r0, r2
 80076de:	4798      	blx	r3
 80076e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076e2:	e126      	b.n	8007932 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fb0e 	bl	8007d08 <USBD_CtlError>
        err++;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	3301      	adds	r3, #1
 80076f0:	72fb      	strb	r3, [r7, #11]
      break;
 80076f2:	e11e      	b.n	8007932 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	7c12      	ldrb	r2, [r2, #16]
 8007700:	f107 0108 	add.w	r1, r7, #8
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
 8007708:	60f8      	str	r0, [r7, #12]
      break;
 800770a:	e112      	b.n	8007932 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	7c1b      	ldrb	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10d      	bne.n	8007730 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800771a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771c:	f107 0208 	add.w	r2, r7, #8
 8007720:	4610      	mov	r0, r2
 8007722:	4798      	blx	r3
 8007724:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3301      	adds	r3, #1
 800772a:	2202      	movs	r2, #2
 800772c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800772e:	e100      	b.n	8007932 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007738:	f107 0208 	add.w	r2, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	2202      	movs	r2, #2
 8007748:	701a      	strb	r2, [r3, #0]
      break;
 800774a:	e0f2      	b.n	8007932 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	885b      	ldrh	r3, [r3, #2]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b05      	cmp	r3, #5
 8007754:	f200 80ac 	bhi.w	80078b0 <USBD_GetDescriptor+0x258>
 8007758:	a201      	add	r2, pc, #4	@ (adr r2, 8007760 <USBD_GetDescriptor+0x108>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	08007779 	.word	0x08007779
 8007764:	080077ad 	.word	0x080077ad
 8007768:	080077e1 	.word	0x080077e1
 800776c:	08007815 	.word	0x08007815
 8007770:	08007849 	.word	0x08007849
 8007774:	0800787d 	.word	0x0800787d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	7c12      	ldrb	r2, [r2, #16]
 8007790:	f107 0108 	add.w	r1, r7, #8
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779a:	e091      	b.n	80078c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fab2 	bl	8007d08 <USBD_CtlError>
            err++;
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	3301      	adds	r3, #1
 80077a8:	72fb      	strb	r3, [r7, #11]
          break;
 80077aa:	e089      	b.n	80078c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ce:	e077      	b.n	80078c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa98 	bl	8007d08 <USBD_CtlError>
            err++;
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	3301      	adds	r3, #1
 80077dc:	72fb      	strb	r3, [r7, #11]
          break;
 80077de:	e06f      	b.n	80078c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	7c12      	ldrb	r2, [r2, #16]
 80077f8:	f107 0108 	add.w	r1, r7, #8
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
 8007800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007802:	e05d      	b.n	80078c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa7e 	bl	8007d08 <USBD_CtlError>
            err++;
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	3301      	adds	r3, #1
 8007810:	72fb      	strb	r3, [r7, #11]
          break;
 8007812:	e055      	b.n	80078c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00b      	beq.n	8007838 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	7c12      	ldrb	r2, [r2, #16]
 800782c:	f107 0108 	add.w	r1, r7, #8
 8007830:	4610      	mov	r0, r2
 8007832:	4798      	blx	r3
 8007834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007836:	e043      	b.n	80078c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa64 	bl	8007d08 <USBD_CtlError>
            err++;
 8007840:	7afb      	ldrb	r3, [r7, #11]
 8007842:	3301      	adds	r3, #1
 8007844:	72fb      	strb	r3, [r7, #11]
          break;
 8007846:	e03b      	b.n	80078c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00b      	beq.n	800786c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	7c12      	ldrb	r2, [r2, #16]
 8007860:	f107 0108 	add.w	r1, r7, #8
 8007864:	4610      	mov	r0, r2
 8007866:	4798      	blx	r3
 8007868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800786a:	e029      	b.n	80078c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa4a 	bl	8007d08 <USBD_CtlError>
            err++;
 8007874:	7afb      	ldrb	r3, [r7, #11]
 8007876:	3301      	adds	r3, #1
 8007878:	72fb      	strb	r3, [r7, #11]
          break;
 800787a:	e021      	b.n	80078c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	7c12      	ldrb	r2, [r2, #16]
 8007894:	f107 0108 	add.w	r1, r7, #8
 8007898:	4610      	mov	r0, r2
 800789a:	4798      	blx	r3
 800789c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800789e:	e00f      	b.n	80078c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa30 	bl	8007d08 <USBD_CtlError>
            err++;
 80078a8:	7afb      	ldrb	r3, [r7, #11]
 80078aa:	3301      	adds	r3, #1
 80078ac:	72fb      	strb	r3, [r7, #11]
          break;
 80078ae:	e007      	b.n	80078c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa28 	bl	8007d08 <USBD_CtlError>
          err++;
 80078b8:	7afb      	ldrb	r3, [r7, #11]
 80078ba:	3301      	adds	r3, #1
 80078bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80078be:	bf00      	nop
      }
      break;
 80078c0:	e037      	b.n	8007932 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	7c1b      	ldrb	r3, [r3, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d2:	f107 0208 	add.w	r2, r7, #8
 80078d6:	4610      	mov	r0, r2
 80078d8:	4798      	blx	r3
 80078da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078dc:	e029      	b.n	8007932 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fa11 	bl	8007d08 <USBD_CtlError>
        err++;
 80078e6:	7afb      	ldrb	r3, [r7, #11]
 80078e8:	3301      	adds	r3, #1
 80078ea:	72fb      	strb	r3, [r7, #11]
      break;
 80078ec:	e021      	b.n	8007932 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7c1b      	ldrb	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10d      	bne.n	8007912 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fe:	f107 0208 	add.w	r2, r7, #8
 8007902:	4610      	mov	r0, r2
 8007904:	4798      	blx	r3
 8007906:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3301      	adds	r3, #1
 800790c:	2207      	movs	r2, #7
 800790e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007910:	e00f      	b.n	8007932 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f9f7 	bl	8007d08 <USBD_CtlError>
        err++;
 800791a:	7afb      	ldrb	r3, [r7, #11]
 800791c:	3301      	adds	r3, #1
 800791e:	72fb      	strb	r3, [r7, #11]
      break;
 8007920:	e007      	b.n	8007932 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f9ef 	bl	8007d08 <USBD_CtlError>
      err++;
 800792a:	7afb      	ldrb	r3, [r7, #11]
 800792c:	3301      	adds	r3, #1
 800792e:	72fb      	strb	r3, [r7, #11]
      break;
 8007930:	bf00      	nop
  }

  if (err != 0U)
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d11e      	bne.n	8007976 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	88db      	ldrh	r3, [r3, #6]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d016      	beq.n	800796e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007940:	893b      	ldrh	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00e      	beq.n	8007964 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	88da      	ldrh	r2, [r3, #6]
 800794a:	893b      	ldrh	r3, [r7, #8]
 800794c:	4293      	cmp	r3, r2
 800794e:	bf28      	it	cs
 8007950:	4613      	movcs	r3, r2
 8007952:	b29b      	uxth	r3, r3
 8007954:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007956:	893b      	ldrh	r3, [r7, #8]
 8007958:	461a      	mov	r2, r3
 800795a:	68f9      	ldr	r1, [r7, #12]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fa44 	bl	8007dea <USBD_CtlSendData>
 8007962:	e009      	b.n	8007978 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f9ce 	bl	8007d08 <USBD_CtlError>
 800796c:	e004      	b.n	8007978 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa95 	bl	8007e9e <USBD_CtlSendStatus>
 8007974:	e000      	b.n	8007978 <USBD_GetDescriptor+0x320>
    return;
 8007976:	bf00      	nop
  }
}
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop

08007980 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	889b      	ldrh	r3, [r3, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d131      	bne.n	80079f6 <USBD_SetAddress+0x76>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	88db      	ldrh	r3, [r3, #6]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d12d      	bne.n	80079f6 <USBD_SetAddress+0x76>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	885b      	ldrh	r3, [r3, #2]
 800799e:	2b7f      	cmp	r3, #127	@ 0x7f
 80079a0:	d829      	bhi.n	80079f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	885b      	ldrh	r3, [r3, #2]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d104      	bne.n	80079c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f9a3 	bl	8007d08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c2:	e01d      	b.n	8007a00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7bfa      	ldrb	r2, [r7, #15]
 80079c8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fe7b 	bl	80086cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa61 	bl	8007e9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2202      	movs	r2, #2
 80079e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ea:	e009      	b.n	8007a00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f4:	e004      	b.n	8007a00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f985 	bl	8007d08 <USBD_CtlError>
  }
}
 80079fe:	bf00      	nop
 8007a00:	bf00      	nop
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	4b4c      	ldr	r3, [pc, #304]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007a1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a20:	4b4b      	ldr	r3, [pc, #300]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d905      	bls.n	8007a34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f96c 	bl	8007d08 <USBD_CtlError>
    return USBD_FAIL;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e088      	b.n	8007b46 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d002      	beq.n	8007a46 <USBD_SetConfig+0x3e>
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d025      	beq.n	8007a90 <USBD_SetConfig+0x88>
 8007a44:	e071      	b.n	8007b2a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a46:	4b42      	ldr	r3, [pc, #264]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d01c      	beq.n	8007a88 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007a4e:	4b40      	ldr	r3, [pc, #256]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a58:	4b3d      	ldr	r3, [pc, #244]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff f992 	bl	8006d88 <USBD_SetClassConfig>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f949 	bl	8007d08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a76:	e065      	b.n	8007b44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fa10 	bl	8007e9e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2203      	movs	r2, #3
 8007a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a86:	e05d      	b.n	8007b44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fa08 	bl	8007e9e <USBD_CtlSendStatus>
      break;
 8007a8e:	e059      	b.n	8007b44 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a90:	4b2f      	ldr	r3, [pc, #188]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d112      	bne.n	8007abe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aaa:	4b29      	ldr	r3, [pc, #164]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff f985 	bl	8006dc0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f9f1 	bl	8007e9e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007abc:	e042      	b.n	8007b44 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007abe:	4b24      	ldr	r3, [pc, #144]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d02a      	beq.n	8007b22 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff f973 	bl	8006dc0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ada:	4b1d      	ldr	r3, [pc, #116]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff f94c 	bl	8006d88 <USBD_SetClassConfig>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00f      	beq.n	8007b1a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f903 	bl	8007d08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff f958 	bl	8006dc0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007b18:	e014      	b.n	8007b44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9bf 	bl	8007e9e <USBD_CtlSendStatus>
      break;
 8007b20:	e010      	b.n	8007b44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9bb 	bl	8007e9e <USBD_CtlSendStatus>
      break;
 8007b28:	e00c      	b.n	8007b44 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f8eb 	bl	8007d08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b32:	4b07      	ldr	r3, [pc, #28]	@ (8007b50 <USBD_SetConfig+0x148>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff f941 	bl	8006dc0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	73fb      	strb	r3, [r7, #15]
      break;
 8007b42:	bf00      	nop
  }

  return ret;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	200002a4 	.word	0x200002a4

08007b54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	88db      	ldrh	r3, [r3, #6]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d004      	beq.n	8007b70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f8cd 	bl	8007d08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b6e:	e023      	b.n	8007bb8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	dc02      	bgt.n	8007b82 <USBD_GetConfig+0x2e>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dc03      	bgt.n	8007b88 <USBD_GetConfig+0x34>
 8007b80:	e015      	b.n	8007bae <USBD_GetConfig+0x5a>
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d00b      	beq.n	8007b9e <USBD_GetConfig+0x4a>
 8007b86:	e012      	b.n	8007bae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3308      	adds	r3, #8
 8007b92:	2201      	movs	r2, #1
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f927 	bl	8007dea <USBD_CtlSendData>
        break;
 8007b9c:	e00c      	b.n	8007bb8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f91f 	bl	8007dea <USBD_CtlSendData>
        break;
 8007bac:	e004      	b.n	8007bb8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f8a9 	bl	8007d08 <USBD_CtlError>
        break;
 8007bb6:	bf00      	nop
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d81e      	bhi.n	8007c16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	88db      	ldrh	r3, [r3, #6]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d004      	beq.n	8007bea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f890 	bl	8007d08 <USBD_CtlError>
        break;
 8007be8:	e01a      	b.n	8007c20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f043 0202 	orr.w	r2, r3, #2
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	330c      	adds	r3, #12
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f8eb 	bl	8007dea <USBD_CtlSendData>
      break;
 8007c14:	e004      	b.n	8007c20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f875 	bl	8007d08 <USBD_CtlError>
      break;
 8007c1e:	bf00      	nop
  }
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	885b      	ldrh	r3, [r3, #2]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d106      	bne.n	8007c48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f92b 	bl	8007e9e <USBD_CtlSendStatus>
  }
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	3b01      	subs	r3, #1
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d80b      	bhi.n	8007c80 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	885b      	ldrh	r3, [r3, #2]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10c      	bne.n	8007c8a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f910 	bl	8007e9e <USBD_CtlSendStatus>
      }
      break;
 8007c7e:	e004      	b.n	8007c8a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f840 	bl	8007d08 <USBD_CtlError>
      break;
 8007c88:	e000      	b.n	8007c8c <USBD_ClrFeature+0x3c>
      break;
 8007c8a:	bf00      	nop
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	781a      	ldrb	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	781a      	ldrb	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f7ff fa92 	bl	80071e8 <SWAPBYTE>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7ff fa85 	bl	80071e8 <SWAPBYTE>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7ff fa78 	bl	80071e8 <SWAPBYTE>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	80da      	strh	r2, [r3, #6]
}
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d12:	2180      	movs	r1, #128	@ 0x80
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fc6f 	bl	80085f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fc6b 	bl	80085f8 <USBD_LL_StallEP>
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b086      	sub	sp, #24
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d036      	beq.n	8007dae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d44:	6938      	ldr	r0, [r7, #16]
 8007d46:	f000 f836 	bl	8007db6 <USBD_GetLen>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	7812      	ldrb	r2, [r2, #0]
 8007d62:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	3301      	adds	r3, #1
 8007d68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	4413      	add	r3, r2
 8007d70:	2203      	movs	r2, #3
 8007d72:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	3301      	adds	r3, #1
 8007d78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d7a:	e013      	b.n	8007da4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4413      	add	r3, r2
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	7812      	ldrb	r2, [r2, #0]
 8007d86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	613b      	str	r3, [r7, #16]
    idx++;
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	3301      	adds	r3, #1
 8007d92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	4413      	add	r3, r2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	3301      	adds	r3, #1
 8007da2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e7      	bne.n	8007d7c <USBD_GetString+0x52>
 8007dac:	e000      	b.n	8007db0 <USBD_GetString+0x86>
    return;
 8007dae:	bf00      	nop
  }
}
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007dc6:	e005      	b.n	8007dd4 <USBD_GetLen+0x1e>
  {
    len++;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1f5      	bne.n	8007dc8 <USBD_GetLen+0x12>
  }

  return len;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	2100      	movs	r1, #0
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 fc7a 	bl	800870a <USBD_LL_Transmit>

  return USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	2100      	movs	r1, #0
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 fc69 	bl	800870a <USBD_LL_Transmit>

  return USBD_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2203      	movs	r2, #3
 8007e52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fc6d 	bl	800874c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 fc5c 	bl	800874c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2204      	movs	r2, #4
 8007eaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fc28 	bl	800870a <USBD_LL_Transmit>

  return USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2205      	movs	r2, #5
 8007ed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2100      	movs	r1, #0
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fc36 	bl	800874c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
	...

08007eec <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4912      	ldr	r1, [pc, #72]	@ (8007f3c <MX_USB_Device_Init+0x50>)
 8007ef4:	4812      	ldr	r0, [pc, #72]	@ (8007f40 <MX_USB_Device_Init+0x54>)
 8007ef6:	f7fe fed9 	bl	8006cac <USBD_Init>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007f00:	f7f8 fb14 	bl	800052c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007f04:	490f      	ldr	r1, [pc, #60]	@ (8007f44 <MX_USB_Device_Init+0x58>)
 8007f06:	480e      	ldr	r0, [pc, #56]	@ (8007f40 <MX_USB_Device_Init+0x54>)
 8007f08:	f7fe ff00 	bl	8006d0c <USBD_RegisterClass>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8007f12:	f7f8 fb0b 	bl	800052c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007f16:	490c      	ldr	r1, [pc, #48]	@ (8007f48 <MX_USB_Device_Init+0x5c>)
 8007f18:	4809      	ldr	r0, [pc, #36]	@ (8007f40 <MX_USB_Device_Init+0x54>)
 8007f1a:	f7fe fe51 	bl	8006bc0 <USBD_CDC_RegisterInterface>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007f24:	f7f8 fb02 	bl	800052c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007f28:	4805      	ldr	r0, [pc, #20]	@ (8007f40 <MX_USB_Device_Init+0x54>)
 8007f2a:	f7fe ff16 	bl	8006d5a <USBD_Start>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007f34:	f7f8 fafa 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007f38:	bf00      	nop
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000130 	.word	0x20000130
 8007f40:	200002a8 	.word	0x200002a8
 8007f44:	20000018 	.word	0x20000018
 8007f48:	2000011c 	.word	0x2000011c

08007f4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f50:	2200      	movs	r2, #0
 8007f52:	4905      	ldr	r1, [pc, #20]	@ (8007f68 <CDC_Init_FS+0x1c>)
 8007f54:	4805      	ldr	r0, [pc, #20]	@ (8007f6c <CDC_Init_FS+0x20>)
 8007f56:	f7fe fe48 	bl	8006bea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f5a:	4905      	ldr	r1, [pc, #20]	@ (8007f70 <CDC_Init_FS+0x24>)
 8007f5c:	4803      	ldr	r0, [pc, #12]	@ (8007f6c <CDC_Init_FS+0x20>)
 8007f5e:	f7fe fe62 	bl	8006c26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	20000d78 	.word	0x20000d78
 8007f6c:	200002a8 	.word	0x200002a8
 8007f70:	20000578 	.word	0x20000578

08007f74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f74:	b480      	push	{r7}
 8007f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	6039      	str	r1, [r7, #0]
 8007f8e:	71fb      	strb	r3, [r7, #7]
 8007f90:	4613      	mov	r3, r2
 8007f92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	2b23      	cmp	r3, #35	@ 0x23
 8007f98:	d84a      	bhi.n	8008030 <CDC_Control_FS+0xac>
 8007f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa0 <CDC_Control_FS+0x1c>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08008031 	.word	0x08008031
 8007fa4:	08008031 	.word	0x08008031
 8007fa8:	08008031 	.word	0x08008031
 8007fac:	08008031 	.word	0x08008031
 8007fb0:	08008031 	.word	0x08008031
 8007fb4:	08008031 	.word	0x08008031
 8007fb8:	08008031 	.word	0x08008031
 8007fbc:	08008031 	.word	0x08008031
 8007fc0:	08008031 	.word	0x08008031
 8007fc4:	08008031 	.word	0x08008031
 8007fc8:	08008031 	.word	0x08008031
 8007fcc:	08008031 	.word	0x08008031
 8007fd0:	08008031 	.word	0x08008031
 8007fd4:	08008031 	.word	0x08008031
 8007fd8:	08008031 	.word	0x08008031
 8007fdc:	08008031 	.word	0x08008031
 8007fe0:	08008031 	.word	0x08008031
 8007fe4:	08008031 	.word	0x08008031
 8007fe8:	08008031 	.word	0x08008031
 8007fec:	08008031 	.word	0x08008031
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008031 	.word	0x08008031
 8007ff8:	08008031 	.word	0x08008031
 8007ffc:	08008031 	.word	0x08008031
 8008000:	08008031 	.word	0x08008031
 8008004:	08008031 	.word	0x08008031
 8008008:	08008031 	.word	0x08008031
 800800c:	08008031 	.word	0x08008031
 8008010:	08008031 	.word	0x08008031
 8008014:	08008031 	.word	0x08008031
 8008018:	08008031 	.word	0x08008031
 800801c:	08008031 	.word	0x08008031
 8008020:	08008031 	.word	0x08008031
 8008024:	08008031 	.word	0x08008031
 8008028:	08008031 	.word	0x08008031
 800802c:	08008031 	.word	0x08008031
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008030:	bf00      	nop
  }

  return (USBD_OK);
 8008032:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	4805      	ldr	r0, [pc, #20]	@ (8008064 <CDC_Receive_FS+0x24>)
 800804e:	f7fe fdea 	bl	8006c26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008052:	4804      	ldr	r0, [pc, #16]	@ (8008064 <CDC_Receive_FS+0x24>)
 8008054:	f7fe fe00 	bl	8006c58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008058:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	200002a8 	.word	0x200002a8

08008068 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800807a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800807e:	4618      	mov	r0, r3
 8008080:	371c      	adds	r7, #28
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
	...

0800808c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	6039      	str	r1, [r7, #0]
 8008096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2212      	movs	r2, #18
 800809c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800809e:	4b03      	ldr	r3, [pc, #12]	@ (80080ac <USBD_CDC_DeviceDescriptor+0x20>)
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000150 	.word	0x20000150

080080b0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2204      	movs	r2, #4
 80080c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080c2:	4b03      	ldr	r3, [pc, #12]	@ (80080d0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	20000164 	.word	0x20000164

080080d4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d105      	bne.n	80080f2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	4907      	ldr	r1, [pc, #28]	@ (8008108 <USBD_CDC_ProductStrDescriptor+0x34>)
 80080ea:	4808      	ldr	r0, [pc, #32]	@ (800810c <USBD_CDC_ProductStrDescriptor+0x38>)
 80080ec:	f7ff fe1d 	bl	8007d2a <USBD_GetString>
 80080f0:	e004      	b.n	80080fc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	4904      	ldr	r1, [pc, #16]	@ (8008108 <USBD_CDC_ProductStrDescriptor+0x34>)
 80080f6:	4805      	ldr	r0, [pc, #20]	@ (800810c <USBD_CDC_ProductStrDescriptor+0x38>)
 80080f8:	f7ff fe17 	bl	8007d2a <USBD_GetString>
  }
  return USBD_StrDesc;
 80080fc:	4b02      	ldr	r3, [pc, #8]	@ (8008108 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20001578 	.word	0x20001578
 800810c:	08008924 	.word	0x08008924

08008110 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	6039      	str	r1, [r7, #0]
 800811a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	4904      	ldr	r1, [pc, #16]	@ (8008130 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008120:	4804      	ldr	r0, [pc, #16]	@ (8008134 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008122:	f7ff fe02 	bl	8007d2a <USBD_GetString>
  return USBD_StrDesc;
 8008126:	4b02      	ldr	r3, [pc, #8]	@ (8008130 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20001578 	.word	0x20001578
 8008134:	0800893c 	.word	0x0800893c

08008138 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	6039      	str	r1, [r7, #0]
 8008142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	221a      	movs	r2, #26
 8008148:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800814a:	f000 f843 	bl	80081d4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800814e:	4b02      	ldr	r3, [pc, #8]	@ (8008158 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20000168 	.word	0x20000168

0800815c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	6039      	str	r1, [r7, #0]
 8008166:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d105      	bne.n	800817a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	4907      	ldr	r1, [pc, #28]	@ (8008190 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008172:	4808      	ldr	r0, [pc, #32]	@ (8008194 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008174:	f7ff fdd9 	bl	8007d2a <USBD_GetString>
 8008178:	e004      	b.n	8008184 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	4904      	ldr	r1, [pc, #16]	@ (8008190 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800817e:	4805      	ldr	r0, [pc, #20]	@ (8008194 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008180:	f7ff fdd3 	bl	8007d2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008184:	4b02      	ldr	r3, [pc, #8]	@ (8008190 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20001578 	.word	0x20001578
 8008194:	08008950 	.word	0x08008950

08008198 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	6039      	str	r1, [r7, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d105      	bne.n	80081b6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	4907      	ldr	r1, [pc, #28]	@ (80081cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80081ae:	4808      	ldr	r0, [pc, #32]	@ (80081d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80081b0:	f7ff fdbb 	bl	8007d2a <USBD_GetString>
 80081b4:	e004      	b.n	80081c0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	4904      	ldr	r1, [pc, #16]	@ (80081cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80081ba:	4805      	ldr	r0, [pc, #20]	@ (80081d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80081bc:	f7ff fdb5 	bl	8007d2a <USBD_GetString>
  }
  return USBD_StrDesc;
 80081c0:	4b02      	ldr	r3, [pc, #8]	@ (80081cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20001578 	.word	0x20001578
 80081d0:	0800895c 	.word	0x0800895c

080081d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081da:	4b0f      	ldr	r3, [pc, #60]	@ (8008218 <Get_SerialNum+0x44>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081e0:	4b0e      	ldr	r3, [pc, #56]	@ (800821c <Get_SerialNum+0x48>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008220 <Get_SerialNum+0x4c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4413      	add	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d009      	beq.n	800820e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081fa:	2208      	movs	r2, #8
 80081fc:	4909      	ldr	r1, [pc, #36]	@ (8008224 <Get_SerialNum+0x50>)
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 f814 	bl	800822c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008204:	2204      	movs	r2, #4
 8008206:	4908      	ldr	r1, [pc, #32]	@ (8008228 <Get_SerialNum+0x54>)
 8008208:	68b8      	ldr	r0, [r7, #8]
 800820a:	f000 f80f 	bl	800822c <IntToUnicode>
  }
}
 800820e:	bf00      	nop
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	1fff7590 	.word	0x1fff7590
 800821c:	1fff7594 	.word	0x1fff7594
 8008220:	1fff7598 	.word	0x1fff7598
 8008224:	2000016a 	.word	0x2000016a
 8008228:	2000017a 	.word	0x2000017a

0800822c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	4613      	mov	r3, r2
 8008238:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]
 8008242:	e027      	b.n	8008294 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	0f1b      	lsrs	r3, r3, #28
 8008248:	2b09      	cmp	r3, #9
 800824a:	d80b      	bhi.n	8008264 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	0f1b      	lsrs	r3, r3, #28
 8008250:	b2da      	uxtb	r2, r3
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	4619      	mov	r1, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	440b      	add	r3, r1
 800825c:	3230      	adds	r2, #48	@ 0x30
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	e00a      	b.n	800827a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	0f1b      	lsrs	r3, r3, #28
 8008268:	b2da      	uxtb	r2, r3
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	4619      	mov	r1, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	440b      	add	r3, r1
 8008274:	3237      	adds	r2, #55	@ 0x37
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	3301      	adds	r3, #1
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	4413      	add	r3, r2
 800828a:	2200      	movs	r2, #0
 800828c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	3301      	adds	r3, #1
 8008292:	75fb      	strb	r3, [r7, #23]
 8008294:	7dfa      	ldrb	r2, [r7, #23]
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	429a      	cmp	r2, r3
 800829a:	d3d3      	bcc.n	8008244 <IntToUnicode+0x18>
  }
}
 800829c:	bf00      	nop
 800829e:	bf00      	nop
 80082a0:	371c      	adds	r7, #28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
	...

080082ac <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b098      	sub	sp, #96	@ 0x60
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082b4:	f107 030c 	add.w	r3, r7, #12
 80082b8:	2254      	movs	r2, #84	@ 0x54
 80082ba:	2100      	movs	r1, #0
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 faf9 	bl	80088b4 <memset>
  if(pcdHandle->Instance==USB)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a15      	ldr	r2, [pc, #84]	@ (800831c <HAL_PCD_MspInit+0x70>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d122      	bne.n	8008312 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80082cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80082d0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80082d2:	2300      	movs	r3, #0
 80082d4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082d6:	f107 030c 	add.w	r3, r7, #12
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fb fa62 	bl	80037a4 <HAL_RCCEx_PeriphCLKConfig>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80082e6:	f7f8 f921 	bl	800052c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80082ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008320 <HAL_PCD_MspInit+0x74>)
 80082ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008320 <HAL_PCD_MspInit+0x74>)
 80082f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80082f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008320 <HAL_PCD_MspInit+0x74>)
 80082f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082fe:	60bb      	str	r3, [r7, #8]
 8008300:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008302:	2200      	movs	r2, #0
 8008304:	2100      	movs	r1, #0
 8008306:	2014      	movs	r0, #20
 8008308:	f7f8 fc23 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800830c:	2014      	movs	r0, #20
 800830e:	f7f8 fc3a 	bl	8000b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008312:	bf00      	nop
 8008314:	3760      	adds	r7, #96	@ 0x60
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	40005c00 	.word	0x40005c00
 8008320:	40021000 	.word	0x40021000

08008324 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f7fe fd58 	bl	8006df0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800835a:	78fa      	ldrb	r2, [r7, #3]
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	440b      	add	r3, r1
 8008368:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	4619      	mov	r1, r3
 8008372:	f7fe fd92 	bl	8006e9a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008390:	78fa      	ldrb	r2, [r7, #3]
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	440b      	add	r3, r1
 800839e:	3324      	adds	r3, #36	@ 0x24
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	78fb      	ldrb	r3, [r7, #3]
 80083a4:	4619      	mov	r1, r3
 80083a6:	f7fe fddb 	bl	8006f60 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b082      	sub	sp, #8
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe feef 	bl	80071a4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80083c6:	bf00      	nop
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083d6:	2301      	movs	r3, #1
 80083d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	795b      	ldrb	r3, [r3, #5]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d001      	beq.n	80083e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083e2:	f7f8 f8a3 	bl	800052c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80083ec:	7bfa      	ldrb	r2, [r7, #15]
 80083ee:	4611      	mov	r1, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe fe99 	bl	8007128 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe fe45 	bl	800708c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fe94 	bl	8007148 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	7a5b      	ldrb	r3, [r3, #9]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008428:	4b04      	ldr	r3, [pc, #16]	@ (800843c <HAL_PCD_SuspendCallback+0x30>)
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	4a03      	ldr	r2, [pc, #12]	@ (800843c <HAL_PCD_SuspendCallback+0x30>)
 800842e:	f043 0306 	orr.w	r3, r3, #6
 8008432:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	e000ed00 	.word	0xe000ed00

08008440 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7a5b      	ldrb	r3, [r3, #9]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d007      	beq.n	8008460 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008450:	4b08      	ldr	r3, [pc, #32]	@ (8008474 <HAL_PCD_ResumeCallback+0x34>)
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	4a07      	ldr	r2, [pc, #28]	@ (8008474 <HAL_PCD_ResumeCallback+0x34>)
 8008456:	f023 0306 	bic.w	r3, r3, #6
 800845a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800845c:	f000 f9f8 	bl	8008850 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fe84 	bl	8007174 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	e000ed00 	.word	0xe000ed00

08008478 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008480:	4a2b      	ldr	r2, [pc, #172]	@ (8008530 <USBD_LL_Init+0xb8>)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a29      	ldr	r2, [pc, #164]	@ (8008530 <USBD_LL_Init+0xb8>)
 800848c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008490:	4b27      	ldr	r3, [pc, #156]	@ (8008530 <USBD_LL_Init+0xb8>)
 8008492:	4a28      	ldr	r2, [pc, #160]	@ (8008534 <USBD_LL_Init+0xbc>)
 8008494:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008496:	4b26      	ldr	r3, [pc, #152]	@ (8008530 <USBD_LL_Init+0xb8>)
 8008498:	2208      	movs	r2, #8
 800849a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800849c:	4b24      	ldr	r3, [pc, #144]	@ (8008530 <USBD_LL_Init+0xb8>)
 800849e:	2202      	movs	r2, #2
 80084a0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084a2:	4b23      	ldr	r3, [pc, #140]	@ (8008530 <USBD_LL_Init+0xb8>)
 80084a4:	2202      	movs	r2, #2
 80084a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80084a8:	4b21      	ldr	r3, [pc, #132]	@ (8008530 <USBD_LL_Init+0xb8>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80084ae:	4b20      	ldr	r3, [pc, #128]	@ (8008530 <USBD_LL_Init+0xb8>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80084b4:	4b1e      	ldr	r3, [pc, #120]	@ (8008530 <USBD_LL_Init+0xb8>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80084ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008530 <USBD_LL_Init+0xb8>)
 80084bc:	2200      	movs	r2, #0
 80084be:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80084c0:	481b      	ldr	r0, [pc, #108]	@ (8008530 <USBD_LL_Init+0xb8>)
 80084c2:	f7f8 fe91 	bl	80011e8 <HAL_PCD_Init>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80084cc:	f7f8 f82e 	bl	800052c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80084d6:	2318      	movs	r3, #24
 80084d8:	2200      	movs	r2, #0
 80084da:	2100      	movs	r1, #0
 80084dc:	f7fa fb4a 	bl	8002b74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80084e6:	2358      	movs	r3, #88	@ 0x58
 80084e8:	2200      	movs	r2, #0
 80084ea:	2180      	movs	r1, #128	@ 0x80
 80084ec:	f7fa fb42 	bl	8002b74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80084f6:	23c0      	movs	r3, #192	@ 0xc0
 80084f8:	2200      	movs	r2, #0
 80084fa:	2181      	movs	r1, #129	@ 0x81
 80084fc:	f7fa fb3a 	bl	8002b74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008506:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800850a:	2200      	movs	r2, #0
 800850c:	2101      	movs	r1, #1
 800850e:	f7fa fb31 	bl	8002b74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008518:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800851c:	2200      	movs	r2, #0
 800851e:	2182      	movs	r1, #130	@ 0x82
 8008520:	f7fa fb28 	bl	8002b74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20001778 	.word	0x20001778
 8008534:	40005c00 	.word	0x40005c00

08008538 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800854e:	4618      	mov	r0, r3
 8008550:	f7f8 ff18 	bl	8001384 <HAL_PCD_Start>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f97e 	bl	800885c <USBD_Get_USB_Status>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008564:	7bbb      	ldrb	r3, [r7, #14]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	4608      	mov	r0, r1
 8008578:	4611      	mov	r1, r2
 800857a:	461a      	mov	r2, r3
 800857c:	4603      	mov	r3, r0
 800857e:	70fb      	strb	r3, [r7, #3]
 8008580:	460b      	mov	r3, r1
 8008582:	70bb      	strb	r3, [r7, #2]
 8008584:	4613      	mov	r3, r2
 8008586:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008596:	78bb      	ldrb	r3, [r7, #2]
 8008598:	883a      	ldrh	r2, [r7, #0]
 800859a:	78f9      	ldrb	r1, [r7, #3]
 800859c:	f7f9 f85f 	bl	800165e <HAL_PCD_EP_Open>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f958 	bl	800885c <USBD_Get_USB_Status>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	4611      	mov	r1, r2
 80085d8:	4618      	mov	r0, r3
 80085da:	f7f9 f89d 	bl	8001718 <HAL_PCD_EP_Close>
 80085de:	4603      	mov	r3, r0
 80085e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 f939 	bl	800885c <USBD_Get_USB_Status>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7f9 f946 	bl	80018a8 <HAL_PCD_EP_SetStall>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f91a 	bl	800885c <USBD_Get_USB_Status>
 8008628:	4603      	mov	r3, r0
 800862a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800862c:	7bbb      	ldrb	r3, [r7, #14]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	4611      	mov	r1, r2
 8008654:	4618      	mov	r0, r3
 8008656:	f7f9 f979 	bl	800194c <HAL_PCD_EP_ClrStall>
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	4618      	mov	r0, r3
 8008662:	f000 f8fb 	bl	800885c <USBD_Get_USB_Status>
 8008666:	4603      	mov	r3, r0
 8008668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800866a:	7bbb      	ldrb	r3, [r7, #14]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008686:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800868c:	2b00      	cmp	r3, #0
 800868e:	da0b      	bge.n	80086a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008696:	68f9      	ldr	r1, [r7, #12]
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	440b      	add	r3, r1
 80086a2:	3312      	adds	r3, #18
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	e00b      	b.n	80086c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086ae:	68f9      	ldr	r1, [r7, #12]
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	440b      	add	r3, r1
 80086ba:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80086be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80086e6:	78fa      	ldrb	r2, [r7, #3]
 80086e8:	4611      	mov	r1, r2
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7f8 ff93 	bl	8001616 <HAL_PCD_SetAddress>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 f8b0 	bl	800885c <USBD_Get_USB_Status>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008700:	7bbb      	ldrb	r3, [r7, #14]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
 8008716:	460b      	mov	r3, r1
 8008718:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008728:	7af9      	ldrb	r1, [r7, #11]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	f7f9 f884 	bl	800183a <HAL_PCD_EP_Transmit>
 8008732:	4603      	mov	r3, r0
 8008734:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 f88f 	bl	800885c <USBD_Get_USB_Status>
 800873e:	4603      	mov	r3, r0
 8008740:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008742:	7dbb      	ldrb	r3, [r7, #22]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	460b      	mov	r3, r1
 800875a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800876a:	7af9      	ldrb	r1, [r7, #11]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	f7f9 f81a 	bl	80017a8 <HAL_PCD_EP_Receive>
 8008774:	4603      	mov	r3, r0
 8008776:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 f86e 	bl	800885c <USBD_Get_USB_Status>
 8008780:	4603      	mov	r3, r0
 8008782:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008784:	7dbb      	ldrb	r3, [r7, #22]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80087a0:	78fa      	ldrb	r2, [r7, #3]
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7f9 f830 	bl	800180a <HAL_PCD_EP_GetRxCount>
 80087aa:	4603      	mov	r3, r0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <HAL_PCDEx_LPM_Callback+0x18>
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d013      	beq.n	80087f2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80087ca:	e023      	b.n	8008814 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	7a5b      	ldrb	r3, [r3, #9]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d007      	beq.n	80087e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80087d4:	f000 f83c 	bl	8008850 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087d8:	4b10      	ldr	r3, [pc, #64]	@ (800881c <HAL_PCDEx_LPM_Callback+0x68>)
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	4a0f      	ldr	r2, [pc, #60]	@ (800881c <HAL_PCDEx_LPM_Callback+0x68>)
 80087de:	f023 0306 	bic.w	r3, r3, #6
 80087e2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe fcc2 	bl	8007174 <USBD_LL_Resume>
    break;
 80087f0:	e010      	b.n	8008814 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fca5 	bl	8007148 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	7a5b      	ldrb	r3, [r3, #9]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008806:	4b05      	ldr	r3, [pc, #20]	@ (800881c <HAL_PCDEx_LPM_Callback+0x68>)
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	4a04      	ldr	r2, [pc, #16]	@ (800881c <HAL_PCDEx_LPM_Callback+0x68>)
 800880c:	f043 0306 	orr.w	r3, r3, #6
 8008810:	6113      	str	r3, [r2, #16]
    break;
 8008812:	bf00      	nop
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	e000ed00 	.word	0xe000ed00

08008820 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008828:	4b03      	ldr	r3, [pc, #12]	@ (8008838 <USBD_static_malloc+0x18>)
}
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	20001a54 	.word	0x20001a54

0800883c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]

}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008854:	f7f7 fcf4 	bl	8000240 <SystemClock_Config>
}
 8008858:	bf00      	nop
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	2b03      	cmp	r3, #3
 800886e:	d817      	bhi.n	80088a0 <USBD_Get_USB_Status+0x44>
 8008870:	a201      	add	r2, pc, #4	@ (adr r2, 8008878 <USBD_Get_USB_Status+0x1c>)
 8008872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008876:	bf00      	nop
 8008878:	08008889 	.word	0x08008889
 800887c:	0800888f 	.word	0x0800888f
 8008880:	08008895 	.word	0x08008895
 8008884:	0800889b 	.word	0x0800889b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	73fb      	strb	r3, [r7, #15]
    break;
 800888c:	e00b      	b.n	80088a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800888e:	2303      	movs	r3, #3
 8008890:	73fb      	strb	r3, [r7, #15]
    break;
 8008892:	e008      	b.n	80088a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008894:	2301      	movs	r3, #1
 8008896:	73fb      	strb	r3, [r7, #15]
    break;
 8008898:	e005      	b.n	80088a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800889a:	2303      	movs	r3, #3
 800889c:	73fb      	strb	r3, [r7, #15]
    break;
 800889e:	e002      	b.n	80088a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	73fb      	strb	r3, [r7, #15]
    break;
 80088a4:	bf00      	nop
  }
  return usb_status;
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <memset>:
 80088b4:	4402      	add	r2, r0
 80088b6:	4603      	mov	r3, r0
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d100      	bne.n	80088be <memset+0xa>
 80088bc:	4770      	bx	lr
 80088be:	f803 1b01 	strb.w	r1, [r3], #1
 80088c2:	e7f9      	b.n	80088b8 <memset+0x4>

080088c4 <__libc_init_array>:
 80088c4:	b570      	push	{r4, r5, r6, lr}
 80088c6:	4d0d      	ldr	r5, [pc, #52]	@ (80088fc <__libc_init_array+0x38>)
 80088c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008900 <__libc_init_array+0x3c>)
 80088ca:	1b64      	subs	r4, r4, r5
 80088cc:	10a4      	asrs	r4, r4, #2
 80088ce:	2600      	movs	r6, #0
 80088d0:	42a6      	cmp	r6, r4
 80088d2:	d109      	bne.n	80088e8 <__libc_init_array+0x24>
 80088d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008904 <__libc_init_array+0x40>)
 80088d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008908 <__libc_init_array+0x44>)
 80088d8:	f000 f818 	bl	800890c <_init>
 80088dc:	1b64      	subs	r4, r4, r5
 80088de:	10a4      	asrs	r4, r4, #2
 80088e0:	2600      	movs	r6, #0
 80088e2:	42a6      	cmp	r6, r4
 80088e4:	d105      	bne.n	80088f2 <__libc_init_array+0x2e>
 80088e6:	bd70      	pop	{r4, r5, r6, pc}
 80088e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ec:	4798      	blx	r3
 80088ee:	3601      	adds	r6, #1
 80088f0:	e7ee      	b.n	80088d0 <__libc_init_array+0xc>
 80088f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f6:	4798      	blx	r3
 80088f8:	3601      	adds	r6, #1
 80088fa:	e7f2      	b.n	80088e2 <__libc_init_array+0x1e>
 80088fc:	0800897c 	.word	0x0800897c
 8008900:	0800897c 	.word	0x0800897c
 8008904:	0800897c 	.word	0x0800897c
 8008908:	08008980 	.word	0x08008980

0800890c <_init>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr

08008918 <_fini>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	bf00      	nop
 800891c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891e:	bc08      	pop	{r3}
 8008920:	469e      	mov	lr, r3
 8008922:	4770      	bx	lr
