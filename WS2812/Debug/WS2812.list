
WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a790  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a968  0800a968  0000b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c0  0800a9c0  0000c184  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9c0  0800a9c0  0000c184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9c0  0800a9c0  0000c184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9c0  0800a9c0  0000b9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9c4  0800a9c4  0000b9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800a9c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e54  20000184  0800ab4c  0000c184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003fd8  0800ab4c  0000cfd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b09  00000000  00000000  0000c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef5  00000000  00000000  00024cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00028bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001067  00000000  00000000  0002a150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299be  00000000  00000000  0002b1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a85b  00000000  00000000  00054b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101324  00000000  00000000  0006f3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001706f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f4  00000000  00000000  00170738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0017602c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a950 	.word	0x0800a950

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800a950 	.word	0x0800a950

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fd43 	bl	8000ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f856 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f97a 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f94e 	bl	80004c8 <MX_DMA_Init>
  MX_TIM3_Init();
 800022c:	f000 f8d6 	bl	80003dc <MX_TIM3_Init>
  MX_USB_Device_Init();
 8000230:	f009 fe7e 	bl	8009f30 <MX_USB_Device_Init>
  MX_RTC_Init();
 8000234:	f000 f8a6 	bl	8000384 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Base_Start(&htim3);
 8000238:	4824      	ldr	r0, [pc, #144]	@ (80002cc <main+0xb4>)
 800023a:	f004 f9df 	bl	80045fc <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2110      	movs	r1, #16
 8000242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000246:	f001 fb11 	bl	800186c <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800024a:	2001      	movs	r0, #1
 800024c:	f000 fd9c 	bl	8000d88 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000250:	2201      	movs	r2, #1
 8000252:	2110      	movs	r1, #16
 8000254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000258:	f001 fb08 	bl	800186c <HAL_GPIO_WritePin>
//      for (int period = 0; period < 100; period++) {
//          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 70);

          HAL_Delay(7);
 800025c:	2007      	movs	r0, #7
 800025e:	f000 fd93 	bl	8000d88 <HAL_Delay>
//      for (int period = 100; period >= 0; period--) {
//          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 140);
//          HAL_Delay(7);
//      }
//          for (int i = 0; i < 100000; ++i) {
	 ws2812_set_all(rgb_to_color(0xff, 0x00, 0x00));
 8000262:	2200      	movs	r2, #0
 8000264:	2100      	movs	r1, #0
 8000266:	20ff      	movs	r0, #255	@ 0xff
 8000268:	f000 fcc2 	bl	8000bf0 <rgb_to_color>
 800026c:	4603      	mov	r3, r0
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fca2 	bl	8000bb8 <ws2812_set_all>
	 ws2812_gradient(100, 10);
 8000274:	210a      	movs	r1, #10
 8000276:	2064      	movs	r0, #100	@ 0x64
 8000278:	f000 fb84 	bl	8000984 <ws2812_gradient>
	 HAL_Delay(1000);
 800027c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000280:	f000 fd82 	bl	8000d88 <HAL_Delay>
	 ws2812_set_all(rgb_to_color(0x00, 0x00, 0xff));
 8000284:	22ff      	movs	r2, #255	@ 0xff
 8000286:	2100      	movs	r1, #0
 8000288:	2000      	movs	r0, #0
 800028a:	f000 fcb1 	bl	8000bf0 <rgb_to_color>
 800028e:	4603      	mov	r3, r0
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fc91 	bl	8000bb8 <ws2812_set_all>
	 ws2812_gradient(100, 10);
 8000296:	210a      	movs	r1, #10
 8000298:	2064      	movs	r0, #100	@ 0x64
 800029a:	f000 fb73 	bl	8000984 <ws2812_gradient>
	 HAL_Delay(1000);
 800029e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002a2:	f000 fd71 	bl	8000d88 <HAL_Delay>
	 ws2812_set_all(rgb_to_color(0x00, 0xff, 0x00));
 80002a6:	2200      	movs	r2, #0
 80002a8:	21ff      	movs	r1, #255	@ 0xff
 80002aa:	2000      	movs	r0, #0
 80002ac:	f000 fca0 	bl	8000bf0 <rgb_to_color>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fc80 	bl	8000bb8 <ws2812_set_all>
	 ws2812_gradient(100, 10);
 80002b8:	210a      	movs	r1, #10
 80002ba:	2064      	movs	r0, #100	@ 0x64
 80002bc:	f000 fb62 	bl	8000984 <ws2812_gradient>
	 HAL_Delay(1000);
 80002c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002c4:	f000 fd60 	bl	8000d88 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80002c8:	bf00      	nop
 80002ca:	e7b8      	b.n	800023e <main+0x26>
 80002cc:	200001c8 	.word	0x200001c8

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b094      	sub	sp, #80	@ 0x50
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2238      	movs	r2, #56	@ 0x38
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f00a fb0a 	bl	800a8f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002f2:	2000      	movs	r0, #0
 80002f4:	f003 f816 	bl	8003324 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002f8:	f003 f804 	bl	8003304 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002fc:	4b20      	ldr	r3, [pc, #128]	@ (8000380 <SystemClock_Config+0xb0>)
 80002fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000302:	4a1f      	ldr	r2, [pc, #124]	@ (8000380 <SystemClock_Config+0xb0>)
 8000304:	f023 0318 	bic.w	r3, r3, #24
 8000308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800030c:	2325      	movs	r3, #37	@ 0x25
 800030e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000314:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000316:	2301      	movs	r3, #1
 8000318:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031e:	2302      	movs	r3, #2
 8000320:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000322:	2303      	movs	r3, #3
 8000324:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000326:	2302      	movs	r3, #2
 8000328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800032a:	2355      	movs	r3, #85	@ 0x55
 800032c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800032e:	2302      	movs	r3, #2
 8000330:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000332:	2302      	movs	r3, #2
 8000334:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000336:	2302      	movs	r3, #2
 8000338:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	4618      	mov	r0, r3
 8000340:	f003 f8a4 	bl	800348c <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800034a:	f000 f93d 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	230f      	movs	r3, #15
 8000350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000352:	2303      	movs	r3, #3
 8000354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2104      	movs	r1, #4
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fba2 	bl	8003ab0 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000372:	f000 f929 	bl	80005c8 <Error_Handler>
  }
}
 8000376:	bf00      	nop
 8000378:	3750      	adds	r7, #80	@ 0x50
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000

08000384 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000388:	4b12      	ldr	r3, [pc, #72]	@ (80003d4 <MX_RTC_Init+0x50>)
 800038a:	4a13      	ldr	r2, [pc, #76]	@ (80003d8 <MX_RTC_Init+0x54>)
 800038c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800038e:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <MX_RTC_Init+0x50>)
 8000390:	2200      	movs	r2, #0
 8000392:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000394:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <MX_RTC_Init+0x50>)
 8000396:	227f      	movs	r2, #127	@ 0x7f
 8000398:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <MX_RTC_Init+0x50>)
 800039c:	22ff      	movs	r2, #255	@ 0xff
 800039e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <MX_RTC_Init+0x50>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <MX_RTC_Init+0x50>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003ac:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <MX_RTC_Init+0x50>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003b2:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <MX_RTC_Init+0x50>)
 80003b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003ba:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <MX_RTC_Init+0x50>)
 80003bc:	2200      	movs	r2, #0
 80003be:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003c0:	4804      	ldr	r0, [pc, #16]	@ (80003d4 <MX_RTC_Init+0x50>)
 80003c2:	f003 ffa7 	bl	8004314 <HAL_RTC_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80003cc:	f000 f8fc 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200001a0 	.word	0x200001a0
 80003d8:	40002800 	.word	0x40002800

080003dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08e      	sub	sp, #56	@ 0x38
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	f107 031c 	add.w	r3, r7, #28
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003fc:	463b      	mov	r3, r7
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800040e:	4b2c      	ldr	r3, [pc, #176]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 8000410:	4a2c      	ldr	r2, [pc, #176]	@ (80004c4 <MX_TIM3_Init+0xe8>)
 8000412:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000414:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b29      	ldr	r3, [pc, #164]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 214;
 8000420:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 8000422:	22d6      	movs	r2, #214	@ 0xd6
 8000424:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000426:	4b26      	ldr	r3, [pc, #152]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800042c:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 800042e:	2280      	movs	r2, #128	@ 0x80
 8000430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000432:	4823      	ldr	r0, [pc, #140]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 8000434:	f004 f88b 	bl	800454e <HAL_TIM_Base_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800043e:	f000 f8c3 	bl	80005c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000442:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000446:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000448:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800044c:	4619      	mov	r1, r3
 800044e:	481c      	ldr	r0, [pc, #112]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 8000450:	f004 fe36 	bl	80050c0 <HAL_TIM_ConfigClockSource>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800045a:	f000 f8b5 	bl	80005c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800045e:	4818      	ldr	r0, [pc, #96]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 8000460:	f004 f93c 	bl	80046dc <HAL_TIM_PWM_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800046a:	f000 f8ad 	bl	80005c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000472:	2300      	movs	r3, #0
 8000474:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000476:	f107 031c 	add.w	r3, r7, #28
 800047a:	4619      	mov	r1, r3
 800047c:	4810      	ldr	r0, [pc, #64]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 800047e:	f005 fced 	bl	8005e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000488:	f000 f89e 	bl	80005c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800048c:	2360      	movs	r3, #96	@ 0x60
 800048e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000494:	2300      	movs	r3, #0
 8000496:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800049c:	463b      	mov	r3, r7
 800049e:	220c      	movs	r2, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	4807      	ldr	r0, [pc, #28]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 80004a4:	f004 fcf8 	bl	8004e98 <HAL_TIM_PWM_ConfigChannel>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80004ae:	f000 f88b 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004b2:	4803      	ldr	r0, [pc, #12]	@ (80004c0 <MX_TIM3_Init+0xe4>)
 80004b4:	f000 f94a 	bl	800074c <HAL_TIM_MspPostInit>

}
 80004b8:	bf00      	nop
 80004ba:	3738      	adds	r7, #56	@ 0x38
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	200001c8 	.word	0x200001c8
 80004c4:	40000400 	.word	0x40000400

080004c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004ce:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <MX_DMA_Init+0x50>)
 80004d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004d2:	4a11      	ldr	r2, [pc, #68]	@ (8000518 <MX_DMA_Init+0x50>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80004da:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <MX_DMA_Init+0x50>)
 80004dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004de:	f003 0304 	and.w	r3, r3, #4
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <MX_DMA_Init+0x50>)
 80004e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000518 <MX_DMA_Init+0x50>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80004f2:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <MX_DMA_Init+0x50>)
 80004f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	200b      	movs	r0, #11
 8000504:	f000 fd89 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000508:	200b      	movs	r0, #11
 800050a:	f000 fda0 	bl	800104e <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	@ 0x28
 8000520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	4b24      	ldr	r3, [pc, #144]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	4a23      	ldr	r2, [pc, #140]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800053e:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054a:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	4a1d      	ldr	r2, [pc, #116]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 8000550:	f043 0320 	orr.w	r3, r3, #32
 8000554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000556:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	f003 0320 	and.w	r3, r3, #32
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	4a17      	ldr	r2, [pc, #92]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	4a11      	ldr	r2, [pc, #68]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000586:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <MX_GPIO_Init+0xa8>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2110      	movs	r1, #16
 8000596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059a:	f001 f967 	bl	800186c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800059e:	2310      	movs	r3, #16
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b8:	f000 ffd6 	bl	8001568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	@ 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40021000 	.word	0x40021000

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <Error_Handler+0x8>

080005d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <HAL_MspInit+0x54>)
 80005dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005de:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <HAL_MspInit+0x54>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <HAL_MspInit+0x54>)
 80005e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <HAL_MspInit+0x54>)
 80005f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000628 <HAL_MspInit+0x54>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <HAL_MspInit+0x54>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fbde 	bl	8000dcc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000610:	f000 fc04 	bl	8000e1c <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fbed 	bl	8000df4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800061a:	f002 ff27 	bl	800346c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b098      	sub	sp, #96	@ 0x60
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2254      	movs	r2, #84	@ 0x54
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f00a f95b 	bl	800a8f8 <memset>
  if(hrtc->Instance==RTC)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a15      	ldr	r2, [pc, #84]	@ (800069c <HAL_RTC_MspInit+0x70>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d123      	bne.n	8000694 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800064c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000650:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000652:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000656:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fc0b 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000668:	f7ff ffae 	bl	80005c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <HAL_RTC_MspInit+0x74>)
 800066e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000672:	4a0b      	ldr	r2, [pc, #44]	@ (80006a0 <HAL_RTC_MspInit+0x74>)
 8000674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <HAL_RTC_MspInit+0x74>)
 800067e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000680:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <HAL_RTC_MspInit+0x74>)
 8000682:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000686:	6593      	str	r3, [r2, #88]	@ 0x58
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <HAL_RTC_MspInit+0x74>)
 800068a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800068c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000694:	bf00      	nop
 8000696:	3760      	adds	r7, #96	@ 0x60
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40002800 	.word	0x40002800
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a22      	ldr	r2, [pc, #136]	@ (800073c <HAL_TIM_Base_MspInit+0x98>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d13e      	bne.n	8000734 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006b6:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <HAL_TIM_Base_MspInit+0x9c>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ba:	4a21      	ldr	r2, [pc, #132]	@ (8000740 <HAL_TIM_Base_MspInit+0x9c>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <HAL_TIM_Base_MspInit+0x9c>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4 Init */
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 80006d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000748 <HAL_TIM_Base_MspInit+0xa4>)
 80006d2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 80006d6:	2240      	movs	r2, #64	@ 0x40
 80006d8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 80006dc:	2210      	movs	r2, #16
 80006de:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80006e6:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ec:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 80006ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006f2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 80006f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006fa:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8000708:	480e      	ldr	r0, [pc, #56]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 800070a:	f000 fcbb 	bl	8001084 <HAL_DMA_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000714:	f7ff ff58 	bl	80005c8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a0a      	ldr	r2, [pc, #40]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 800071c:	631a      	str	r2, [r3, #48]	@ 0x30
 800071e:	4a09      	ldr	r2, [pc, #36]	@ (8000744 <HAL_TIM_Base_MspInit+0xa0>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	201d      	movs	r0, #29
 800072a:	f000 fc76 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800072e:	201d      	movs	r0, #29
 8000730:	f000 fc8d 	bl	800104e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40000400 	.word	0x40000400
 8000740:	40021000 	.word	0x40021000
 8000744:	20000214 	.word	0x20000214
 8000748:	40020008 	.word	0x40020008

0800074c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a11      	ldr	r2, [pc, #68]	@ (80007b0 <HAL_TIM_MspPostInit+0x64>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d11b      	bne.n	80007a6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <HAL_TIM_MspPostInit+0x68>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <HAL_TIM_MspPostInit+0x68>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <HAL_TIM_MspPostInit+0x68>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB7     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000786:	2380      	movs	r3, #128	@ 0x80
 8000788:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8000796:	230a      	movs	r3, #10
 8000798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <HAL_TIM_MspPostInit+0x6c>)
 80007a2:	f000 fee1 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40000400 	.word	0x40000400
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000400 	.word	0x48000400

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <NMI_Handler+0x4>

080007c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <MemManage_Handler+0x4>

080007d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000812:	f000 fa9b 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8000820:	4802      	ldr	r0, [pc, #8]	@ (800082c <DMA1_Channel1_IRQHandler+0x10>)
 8000822:	f000 fd52 	bl	80012ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000214 	.word	0x20000214

08000830 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <USB_LP_IRQHandler+0x10>)
 8000836:	f001 f921 	bl	8001a7c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20003adc 	.word	0x20003adc

08000844 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <TIM3_IRQHandler+0x10>)
 800084a:	f004 f9d5 	bl	8004bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200001c8 	.word	0x200001c8

08000858 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <ws2812_update>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000882:	2300      	movs	r3, #0
 8000884:	71fb      	strb	r3, [r7, #7]
 8000886:	e061      	b.n	800094c <ws2812_update+0xd0>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4936      	ldr	r1, [pc, #216]	@ (8000968 <ws2812_update+0xec>)
 800088e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000892:	4936      	ldr	r1, [pc, #216]	@ (800096c <ws2812_update+0xf0>)
 8000894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4a34      	ldr	r2, [pc, #208]	@ (800096c <ws2812_update+0xf0>)
 800089c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008a0:	4b33      	ldr	r3, [pc, #204]	@ (8000970 <ws2812_update+0xf4>)
 80008a2:	4a34      	ldr	r2, [pc, #208]	@ (8000974 <ws2812_update+0xf8>)
 80008a4:	4934      	ldr	r1, [pc, #208]	@ (8000978 <ws2812_update+0xfc>)
 80008a6:	f000 f9b9 	bl	8000c1c <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 80008aa:	79fa      	ldrb	r2, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80008b8:	4a30      	ldr	r2, [pc, #192]	@ (800097c <ws2812_update+0x100>)
 80008ba:	4413      	add	r3, r2
 80008bc:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	71bb      	strb	r3, [r7, #6]
 80008c2:	e03d      	b.n	8000940 <ws2812_update+0xc4>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 80008c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000978 <ws2812_update+0xfc>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <ws2812_update+0x60>
 80008d8:	218c      	movs	r1, #140	@ 0x8c
 80008da:	e000      	b.n	80008de <ws2812_update+0x62>
 80008dc:	2146      	movs	r1, #70	@ 0x46
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	460a      	mov	r2, r1
 80008e8:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 80008ea:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <ws2812_update+0xf8>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <ws2812_update+0x86>
 80008fe:	218c      	movs	r1, #140	@ 0x8c
 8000900:	e000      	b.n	8000904 <ws2812_update+0x88>
 8000902:	2146      	movs	r1, #70	@ 0x46
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	3308      	adds	r3, #8
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	4413      	add	r3, r2
 800090e:	460a      	mov	r2, r1
 8000910:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <ws2812_update+0xf4>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <ws2812_update+0xae>
 8000926:	218c      	movs	r1, #140	@ 0x8c
 8000928:	e000      	b.n	800092c <ws2812_update+0xb0>
 800092a:	2146      	movs	r1, #70	@ 0x46
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	3310      	adds	r3, #16
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	4413      	add	r3, r2
 8000936:	460a      	mov	r2, r1
 8000938:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	3301      	adds	r3, #1
 800093e:	71bb      	strb	r3, [r7, #6]
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	2b07      	cmp	r3, #7
 8000944:	d9be      	bls.n	80008c4 <ws2812_update+0x48>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	3301      	adds	r3, #1
 800094a:	71fb      	strb	r3, [r7, #7]
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b63      	cmp	r3, #99	@ 0x63
 8000950:	d99a      	bls.n	8000888 <ws2812_update+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)ws2812_data,
 8000952:	f640 5348 	movw	r3, #3400	@ 0xd48
 8000956:	4a09      	ldr	r2, [pc, #36]	@ (800097c <ws2812_update+0x100>)
 8000958:	210c      	movs	r1, #12
 800095a:	4809      	ldr	r0, [pc, #36]	@ (8000980 <ws2812_update+0x104>)
 800095c:	f003 ff20 	bl	80047a0 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000274 	.word	0x20000274
 800096c:	20000404 	.word	0x20000404
 8000970:	20000596 	.word	0x20000596
 8000974:	20000595 	.word	0x20000595
 8000978:	20000594 	.word	0x20000594
 800097c:	20000598 	.word	0x20000598
 8000980:	200001c8 	.word	0x200001c8

08000984 <ws2812_gradient>:
 * @brief  通过渐变方式更新LED颜色（线性插值）
 * @param  steps: 渐变步数
 * @param  delay_ms: 每步之间的延迟时间（毫秒）
 */
void ws2812_gradient(uint8_t steps, uint16_t delay_ms)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	80bb      	strh	r3, [r7, #4]
	static uint8_t start_r[WS2812_NUM], start_g[WS2812_NUM], start_b[WS2812_NUM];
	static float r_step[WS2812_NUM], g_step[WS2812_NUM], b_step[WS2812_NUM];

	// 提取初始颜色，并计算每步的渐变步长
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8000994:	2300      	movs	r3, #0
 8000996:	75fb      	strb	r3, [r7, #23]
 8000998:	e062      	b.n	8000a60 <ws2812_gradient+0xdc>
	{
		color_to_rgb(_ws2812_color_current[i], &start_r[i], &start_g[i], &start_b[i]);
 800099a:	7dfb      	ldrb	r3, [r7, #23]
 800099c:	4a6e      	ldr	r2, [pc, #440]	@ (8000b58 <ws2812_gradient+0x1d4>)
 800099e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009a2:	7dfb      	ldrb	r3, [r7, #23]
 80009a4:	4a6d      	ldr	r2, [pc, #436]	@ (8000b5c <ws2812_gradient+0x1d8>)
 80009a6:	1899      	adds	r1, r3, r2
 80009a8:	7dfb      	ldrb	r3, [r7, #23]
 80009aa:	4a6d      	ldr	r2, [pc, #436]	@ (8000b60 <ws2812_gradient+0x1dc>)
 80009ac:	441a      	add	r2, r3
 80009ae:	7dfb      	ldrb	r3, [r7, #23]
 80009b0:	4c6c      	ldr	r4, [pc, #432]	@ (8000b64 <ws2812_gradient+0x1e0>)
 80009b2:	4423      	add	r3, r4
 80009b4:	f000 f932 	bl	8000c1c <color_to_rgb>
		uint8_t target_r, target_g, target_b;
		color_to_rgb(ws2812_color[i], &target_r, &target_g, &target_b);
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	4a6b      	ldr	r2, [pc, #428]	@ (8000b68 <ws2812_gradient+0x1e4>)
 80009bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009c0:	f107 030f 	add.w	r3, r7, #15
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	f107 0111 	add.w	r1, r7, #17
 80009cc:	f000 f926 	bl	8000c1c <color_to_rgb>

		r_step[i] = (float)(target_r - start_r[i]) / steps;
 80009d0:	7c7b      	ldrb	r3, [r7, #17]
 80009d2:	4619      	mov	r1, r3
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	4a61      	ldr	r2, [pc, #388]	@ (8000b5c <ws2812_gradient+0x1d8>)
 80009d8:	5cd3      	ldrb	r3, [r2, r3]
 80009da:	1acb      	subs	r3, r1, r3
 80009dc:	ee07 3a90 	vmov	s15, r3
 80009e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	ee07 3a90 	vmov	s15, r3
 80009ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
 80009f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009f4:	4a5d      	ldr	r2, [pc, #372]	@ (8000b6c <ws2812_gradient+0x1e8>)
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	edc3 7a00 	vstr	s15, [r3]
		g_step[i] = (float)(target_g - start_g[i]) / steps;
 80009fe:	7c3b      	ldrb	r3, [r7, #16]
 8000a00:	4619      	mov	r1, r3
 8000a02:	7dfb      	ldrb	r3, [r7, #23]
 8000a04:	4a56      	ldr	r2, [pc, #344]	@ (8000b60 <ws2812_gradient+0x1dc>)
 8000a06:	5cd3      	ldrb	r3, [r2, r3]
 8000a08:	1acb      	subs	r3, r1, r3
 8000a0a:	ee07 3a90 	vmov	s15, r3
 8000a0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a1c:	7dfb      	ldrb	r3, [r7, #23]
 8000a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a22:	4a53      	ldr	r2, [pc, #332]	@ (8000b70 <ws2812_gradient+0x1ec>)
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	edc3 7a00 	vstr	s15, [r3]
		b_step[i] = (float)(target_b - start_b[i]) / steps;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	4a4c      	ldr	r2, [pc, #304]	@ (8000b64 <ws2812_gradient+0x1e0>)
 8000a34:	5cd3      	ldrb	r3, [r2, r3]
 8000a36:	1acb      	subs	r3, r1, r3
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a50:	4a48      	ldr	r2, [pc, #288]	@ (8000b74 <ws2812_gradient+0x1f0>)
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	75fb      	strb	r3, [r7, #23]
 8000a60:	7dfb      	ldrb	r3, [r7, #23]
 8000a62:	2b63      	cmp	r3, #99	@ 0x63
 8000a64:	d999      	bls.n	800099a <ws2812_gradient+0x16>
	}

	// 逐步渐变
	for (uint8_t step = 1; step <= steps; step++)
 8000a66:	2301      	movs	r3, #1
 8000a68:	75bb      	strb	r3, [r7, #22]
 8000a6a:	e06b      	b.n	8000b44 <ws2812_gradient+0x1c0>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	757b      	strb	r3, [r7, #21]
 8000a70:	e05c      	b.n	8000b2c <ws2812_gradient+0x1a8>
		{
			// 计算当前步的颜色
			uint8_t r = (uint8_t)(start_r[led_id] + r_step[led_id] * step);
 8000a72:	7d7b      	ldrb	r3, [r7, #21]
 8000a74:	4a39      	ldr	r2, [pc, #228]	@ (8000b5c <ws2812_gradient+0x1d8>)
 8000a76:	5cd3      	ldrb	r3, [r2, r3]
 8000a78:	ee07 3a90 	vmov	s15, r3
 8000a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a80:	7d7b      	ldrb	r3, [r7, #21]
 8000a82:	4a3a      	ldr	r2, [pc, #232]	@ (8000b6c <ws2812_gradient+0x1e8>)
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	edd3 6a00 	vldr	s13, [r3]
 8000a8c:	7dbb      	ldrb	r3, [r7, #22]
 8000a8e:	ee07 3a90 	vmov	s15, r3
 8000a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa2:	edc7 7a00 	vstr	s15, [r7]
 8000aa6:	783b      	ldrb	r3, [r7, #0]
 8000aa8:	753b      	strb	r3, [r7, #20]
			uint8_t g = (uint8_t)(start_g[led_id] + g_step[led_id] * step);
 8000aaa:	7d7b      	ldrb	r3, [r7, #21]
 8000aac:	4a2c      	ldr	r2, [pc, #176]	@ (8000b60 <ws2812_gradient+0x1dc>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ab8:	7d7b      	ldrb	r3, [r7, #21]
 8000aba:	4a2d      	ldr	r2, [pc, #180]	@ (8000b70 <ws2812_gradient+0x1ec>)
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	edd3 6a00 	vldr	s13, [r3]
 8000ac4:	7dbb      	ldrb	r3, [r7, #22]
 8000ac6:	ee07 3a90 	vmov	s15, r3
 8000aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ada:	edc7 7a00 	vstr	s15, [r7]
 8000ade:	783b      	ldrb	r3, [r7, #0]
 8000ae0:	74fb      	strb	r3, [r7, #19]
			uint8_t b = (uint8_t)(start_b[led_id] + b_step[led_id] * step);
 8000ae2:	7d7b      	ldrb	r3, [r7, #21]
 8000ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b64 <ws2812_gradient+0x1e0>)
 8000ae6:	5cd3      	ldrb	r3, [r2, r3]
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000af0:	7d7b      	ldrb	r3, [r7, #21]
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <ws2812_gradient+0x1f0>)
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	edd3 6a00 	vldr	s13, [r3]
 8000afc:	7dbb      	ldrb	r3, [r7, #22]
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b12:	edc7 7a00 	vstr	s15, [r7]
 8000b16:	783b      	ldrb	r3, [r7, #0]
 8000b18:	74bb      	strb	r3, [r7, #18]

			ws2812_set_rgb(led_id, r, g, b);
 8000b1a:	7cbb      	ldrb	r3, [r7, #18]
 8000b1c:	7cfa      	ldrb	r2, [r7, #19]
 8000b1e:	7d39      	ldrb	r1, [r7, #20]
 8000b20:	7d78      	ldrb	r0, [r7, #21]
 8000b22:	f000 f829 	bl	8000b78 <ws2812_set_rgb>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000b26:	7d7b      	ldrb	r3, [r7, #21]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	757b      	strb	r3, [r7, #21]
 8000b2c:	7d7b      	ldrb	r3, [r7, #21]
 8000b2e:	2b63      	cmp	r3, #99	@ 0x63
 8000b30:	d99f      	bls.n	8000a72 <ws2812_gradient+0xee>
		}

		ws2812_update();
 8000b32:	f7ff fea3 	bl	800087c <ws2812_update>
		HAL_Delay(delay_ms);
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 f925 	bl	8000d88 <HAL_Delay>
	for (uint8_t step = 1; step <= steps; step++)
 8000b3e:	7dbb      	ldrb	r3, [r7, #22]
 8000b40:	3301      	adds	r3, #1
 8000b42:	75bb      	strb	r3, [r7, #22]
 8000b44:	7dba      	ldrb	r2, [r7, #22]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d98f      	bls.n	8000a6c <ws2812_gradient+0xe8>
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	371c      	adds	r7, #28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000404 	.word	0x20000404
 8000b5c:	20002028 	.word	0x20002028
 8000b60:	2000208c 	.word	0x2000208c
 8000b64:	200020f0 	.word	0x200020f0
 8000b68:	20000274 	.word	0x20000274
 8000b6c:	20002154 	.word	0x20002154
 8000b70:	200022e4 	.word	0x200022e4
 8000b74:	20002474 	.word	0x20002474

08000b78 <ws2812_set_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void ws2812_set_rgb(uint8_t led_id, uint8_t r, uint8_t g, uint8_t b)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4604      	mov	r4, r0
 8000b80:	4608      	mov	r0, r1
 8000b82:	4611      	mov	r1, r2
 8000b84:	461a      	mov	r2, r3
 8000b86:	4623      	mov	r3, r4
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71bb      	strb	r3, [r7, #6]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	717b      	strb	r3, [r7, #5]
 8000b92:	4613      	mov	r3, r2
 8000b94:	713b      	strb	r3, [r7, #4]
	ws2812_color[led_id] = rgb_to_color(r, g, b);
 8000b96:	79fc      	ldrb	r4, [r7, #7]
 8000b98:	793a      	ldrb	r2, [r7, #4]
 8000b9a:	7979      	ldrb	r1, [r7, #5]
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f826 	bl	8000bf0 <rgb_to_color>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4a03      	ldr	r2, [pc, #12]	@ (8000bb4 <ws2812_set_rgb+0x3c>)
 8000ba8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	20000274 	.word	0x20000274

08000bb8 <ws2812_set_all>:
/**
 * @brief  设置所有LED颜色（24bit颜色格式）
 * @param  color: 24bit颜色
 */
void ws2812_set_all(uint32_t color)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e007      	b.n	8000bd6 <ws2812_set_all+0x1e>
	{
		ws2812_color[led_id] = color;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	4908      	ldr	r1, [pc, #32]	@ (8000bec <ws2812_set_all+0x34>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	2b63      	cmp	r3, #99	@ 0x63
 8000bda:	d9f4      	bls.n	8000bc6 <ws2812_set_all+0xe>
	}
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000274 	.word	0x20000274

08000bf0 <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	041a      	lsls	r2, r3, #16
 8000c06:	79bb      	ldrb	r3, [r7, #6]
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	797b      	ldrb	r3, [r7, #5]
 8000c0e:	4313      	orrs	r3, r2
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff fdfe 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f009 fe41 	bl	800a908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fac7 	bl	8000218 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   r0, =_estack
 8000c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000c98:	0800a9c8 	.word	0x0800a9c8
  ldr r2, =_sbss
 8000c9c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000ca0:	20003fd8 	.word	0x20003fd8

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>

08000ca6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f9a7 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f000 f80e 	bl	8000cd8 <HAL_InitTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc8:	f7ff fc84 	bl	80005d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ce4:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <HAL_InitTick+0x68>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d022      	beq.n	8000d32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_InitTick+0x6c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <HAL_InitTick+0x68>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f9b2 	bl	800106a <HAL_SYSTICK_Config>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10f      	bne.n	8000d2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d809      	bhi.n	8000d26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d12:	2200      	movs	r2, #0
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1a:	f000 f97e 	bl	800101a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_InitTick+0x70>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e007      	b.n	8000d36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e004      	b.n	8000d36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e001      	b.n	8000d36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a03      	ldr	r2, [pc, #12]	@ (8000d68 <HAL_IncTick+0x1c>)
 8000d5c:	6013      	str	r3, [r2, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	20002604 	.word	0x20002604
 8000d6c:	20000008 	.word	0x20000008

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20002604 	.word	0x20002604

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff ffee 	bl	8000d70 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d004      	beq.n	8000dac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <HAL_Delay+0x40>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4413      	add	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dac:	bf00      	nop
 8000dae:	f7ff ffdf 	bl	8000d70 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d8f7      	bhi.n	8000dae <HAL_Delay+0x26>
  {
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000ddc:	4904      	ldr	r1, [pc, #16]	@ (8000df0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40010030 	.word	0x40010030

08000df4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f023 0202 	bic.w	r2, r3, #2
 8000e04:	4904      	ldr	r1, [pc, #16]	@ (8000e18 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40010030 	.word	0x40010030

08000e1c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000e2e:	f7ff ff9f 	bl	8000d70 <HAL_GetTick>
 8000e32:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000e34:	e008      	b.n	8000e48 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000e36:	f7ff ff9b 	bl	8000d70 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b0a      	cmp	r3, #10
 8000e42:	d901      	bls.n	8000e48 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e006      	b.n	8000e56 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f0      	beq.n	8000e36 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40010030 	.word	0x40010030

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff29 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff40 	bl	8000eac <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff33 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffa4 	bl	8000fc0 <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e08d      	b.n	80011b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	4b47      	ldr	r3, [pc, #284]	@ (80011bc <HAL_DMA_Init+0x138>)
 800109e:	429a      	cmp	r2, r3
 80010a0:	d80f      	bhi.n	80010c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b45      	ldr	r3, [pc, #276]	@ (80011c0 <HAL_DMA_Init+0x13c>)
 80010aa:	4413      	add	r3, r2
 80010ac:	4a45      	ldr	r2, [pc, #276]	@ (80011c4 <HAL_DMA_Init+0x140>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	009a      	lsls	r2, r3, #2
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a42      	ldr	r2, [pc, #264]	@ (80011c8 <HAL_DMA_Init+0x144>)
 80010be:	641a      	str	r2, [r3, #64]	@ 0x40
 80010c0:	e00e      	b.n	80010e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b40      	ldr	r3, [pc, #256]	@ (80011cc <HAL_DMA_Init+0x148>)
 80010ca:	4413      	add	r3, r2
 80010cc:	4a3d      	ldr	r2, [pc, #244]	@ (80011c4 <HAL_DMA_Init+0x140>)
 80010ce:	fba2 2303 	umull	r2, r3, r2, r3
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	009a      	lsls	r2, r3, #2
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a3c      	ldr	r2, [pc, #240]	@ (80011d0 <HAL_DMA_Init+0x14c>)
 80010de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2202      	movs	r2, #2
 80010e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80010f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80010fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001104:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001110:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800111c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f9b6 	bl	80014a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001140:	d102      	bne.n	8001148 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800115c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d010      	beq.n	8001188 <HAL_DMA_Init+0x104>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b04      	cmp	r3, #4
 800116c:	d80c      	bhi.n	8001188 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f9d6 	bl	8001520 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	e008      	b.n	800119a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020407 	.word	0x40020407
 80011c0:	bffdfff8 	.word	0xbffdfff8
 80011c4:	cccccccd 	.word	0xcccccccd
 80011c8:	40020000 	.word	0x40020000
 80011cc:	bffdfbf8 	.word	0xbffdfbf8
 80011d0:	40020400 	.word	0x40020400

080011d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_DMA_Start_IT+0x20>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e066      	b.n	80012c2 <HAL_DMA_Start_IT+0xee>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d155      	bne.n	80012b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2202      	movs	r2, #2
 800120c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f000 f8fb 	bl	8001428 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	2b00      	cmp	r3, #0
 8001238:	d008      	beq.n	800124c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 020e 	orr.w	r2, r2, #14
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e00f      	b.n	800126c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0204 	bic.w	r2, r2, #4
 800125a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 020a 	orr.w	r2, r2, #10
 800126a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001288:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800129c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0201 	orr.w	r2, r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e005      	b.n	80012c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012bc:	2302      	movs	r3, #2
 80012be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	2204      	movs	r2, #4
 80012ec:	409a      	lsls	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d026      	beq.n	8001344 <HAL_DMA_IRQHandler+0x7a>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d021      	beq.n	8001344 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	2b00      	cmp	r3, #0
 800130c:	d107      	bne.n	800131e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0204 	bic.w	r2, r2, #4
 800131c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f003 021f 	and.w	r2, r3, #31
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	2104      	movs	r1, #4
 800132c:	fa01 f202 	lsl.w	r2, r1, r2
 8001330:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	2b00      	cmp	r3, #0
 8001338:	d071      	beq.n	800141e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001342:	e06c      	b.n	800141e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	2202      	movs	r2, #2
 800134e:	409a      	lsls	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d02e      	beq.n	80013b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d029      	beq.n	80013b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10b      	bne.n	8001388 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 020a 	bic.w	r2, r2, #10
 800137e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	2102      	movs	r1, #2
 8001396:	fa01 f202 	lsl.w	r2, r1, r2
 800139a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d038      	beq.n	800141e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013b4:	e033      	b.n	800141e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	2208      	movs	r2, #8
 80013c0:	409a      	lsls	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d02a      	beq.n	8001420 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d025      	beq.n	8001420 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 020e 	bic.w	r2, r2, #14
 80013e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800141e:	bf00      	nop
 8001420:	bf00      	nop
}
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800143e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001450:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f003 021f 	and.w	r2, r3, #31
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f202 	lsl.w	r2, r1, r2
 8001464:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b10      	cmp	r3, #16
 8001474:	d108      	bne.n	8001488 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001486:	e007      	b.n	8001498 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b16      	ldr	r3, [pc, #88]	@ (800150c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d802      	bhi.n	80014be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e001      	b.n	80014c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80014c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3b08      	subs	r3, #8
 80014ce:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	009a      	lsls	r2, r3, #2
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4413      	add	r3, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a0b      	ldr	r2, [pc, #44]	@ (800151c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80014ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 031f 	and.w	r3, r3, #31
 80014f6:	2201      	movs	r2, #1
 80014f8:	409a      	lsls	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80014fe:	bf00      	nop
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40020407 	.word	0x40020407
 8001510:	40020800 	.word	0x40020800
 8001514:	40020820 	.word	0x40020820
 8001518:	cccccccd 	.word	0xcccccccd
 800151c:	40020880 	.word	0x40020880

08001520 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a08      	ldr	r2, [pc, #32]	@ (8001564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001542:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3b01      	subs	r3, #1
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	2201      	movs	r2, #1
 800154e:	409a      	lsls	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	1000823f 	.word	0x1000823f
 8001564:	40020940 	.word	0x40020940

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001576:	e15a      	b.n	800182e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2101      	movs	r1, #1
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	fa01 f303 	lsl.w	r3, r1, r3
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 814c 	beq.w	8001828 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b01      	cmp	r3, #1
 800159a:	d005      	beq.n	80015a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d130      	bne.n	800160a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015de:	2201      	movs	r2, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 0201 	and.w	r2, r3, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b03      	cmp	r3, #3
 8001614:	d017      	beq.n	8001646 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d123      	bne.n	800169a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	08da      	lsrs	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3208      	adds	r2, #8
 800165a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	691a      	ldr	r2, [r3, #16]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	08da      	lsrs	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3208      	adds	r2, #8
 8001694:	6939      	ldr	r1, [r7, #16]
 8001696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0203 	and.w	r2, r3, #3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80a6 	beq.w	8001828 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016dc:	4b5b      	ldr	r3, [pc, #364]	@ (800184c <HAL_GPIO_Init+0x2e4>)
 80016de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e0:	4a5a      	ldr	r2, [pc, #360]	@ (800184c <HAL_GPIO_Init+0x2e4>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80016e8:	4b58      	ldr	r3, [pc, #352]	@ (800184c <HAL_GPIO_Init+0x2e4>)
 80016ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f4:	4a56      	ldr	r2, [pc, #344]	@ (8001850 <HAL_GPIO_Init+0x2e8>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	220f      	movs	r2, #15
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800171e:	d01f      	beq.n	8001760 <HAL_GPIO_Init+0x1f8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a4c      	ldr	r2, [pc, #304]	@ (8001854 <HAL_GPIO_Init+0x2ec>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d019      	beq.n	800175c <HAL_GPIO_Init+0x1f4>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a4b      	ldr	r2, [pc, #300]	@ (8001858 <HAL_GPIO_Init+0x2f0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d013      	beq.n	8001758 <HAL_GPIO_Init+0x1f0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a4a      	ldr	r2, [pc, #296]	@ (800185c <HAL_GPIO_Init+0x2f4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d00d      	beq.n	8001754 <HAL_GPIO_Init+0x1ec>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a49      	ldr	r2, [pc, #292]	@ (8001860 <HAL_GPIO_Init+0x2f8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d007      	beq.n	8001750 <HAL_GPIO_Init+0x1e8>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a48      	ldr	r2, [pc, #288]	@ (8001864 <HAL_GPIO_Init+0x2fc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_GPIO_Init+0x1e4>
 8001748:	2305      	movs	r3, #5
 800174a:	e00a      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 800174c:	2306      	movs	r3, #6
 800174e:	e008      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001750:	2304      	movs	r3, #4
 8001752:	e006      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001754:	2303      	movs	r3, #3
 8001756:	e004      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001758:	2302      	movs	r3, #2
 800175a:	e002      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001760:	2300      	movs	r3, #0
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	f002 0203 	and.w	r2, r2, #3
 8001768:	0092      	lsls	r2, r2, #2
 800176a:	4093      	lsls	r3, r2
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001772:	4937      	ldr	r1, [pc, #220]	@ (8001850 <HAL_GPIO_Init+0x2e8>)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001780:	4b39      	ldr	r3, [pc, #228]	@ (8001868 <HAL_GPIO_Init+0x300>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017a4:	4a30      	ldr	r2, [pc, #192]	@ (8001868 <HAL_GPIO_Init+0x300>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <HAL_GPIO_Init+0x300>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017ce:	4a26      	ldr	r2, [pc, #152]	@ (8001868 <HAL_GPIO_Init+0x300>)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80017d4:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <HAL_GPIO_Init+0x300>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001868 <HAL_GPIO_Init+0x300>)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <HAL_GPIO_Init+0x300>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001822:	4a11      	ldr	r2, [pc, #68]	@ (8001868 <HAL_GPIO_Init+0x300>)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	f47f ae9d 	bne.w	8001578 <HAL_GPIO_Init+0x10>
  }
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	371c      	adds	r7, #28
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40021000 	.word	0x40021000
 8001850:	40010000 	.word	0x40010000
 8001854:	48000400 	.word	0x48000400
 8001858:	48000800 	.word	0x48000800
 800185c:	48000c00 	.word	0x48000c00
 8001860:	48001000 	.word	0x48001000
 8001864:	48001400 	.word	0x48001400
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
 8001878:	4613      	mov	r3, r2
 800187a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800187c:	787b      	ldrb	r3, [r7, #1]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001882:	887a      	ldrh	r2, [r7, #2]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001888:	e002      	b.n	8001890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0c0      	b.n	8001a30 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f008 fd14 	bl	800a2f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2203      	movs	r2, #3
 80018cc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f004 fbb4 	bl	8006042 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	e03e      	b.n	800195e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	3311      	adds	r3, #17
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	3310      	adds	r3, #16
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3313      	adds	r3, #19
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	3320      	adds	r3, #32
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	3324      	adds	r3, #36	@ 0x24
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	440b      	add	r3, r1
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	3301      	adds	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	791b      	ldrb	r3, [r3, #4]
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	429a      	cmp	r2, r3
 8001966:	d3bb      	bcc.n	80018e0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e044      	b.n	80019f8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	440b      	add	r3, r1
 800197c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	3301      	adds	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	791b      	ldrb	r3, [r3, #4]
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3b5      	bcc.n	800196e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a0e:	f004 fb33 	bl	8006078 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7a9b      	ldrb	r3, [r3, #10]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d102      	bne.n	8001a2e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f001 fc40 	bl	80032ae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_PCD_Start+0x16>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e012      	b.n	8001a74 <HAL_PCD_Start+0x3c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 fada 	bl	8006014 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f006 fd9a 	bl	800859e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f006 fd9f 	bl	80085cc <USB_ReadInterrupts>
 8001a8e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fb04 	bl	80020a8 <PCD_EP_ISR_Handler>

    return;
 8001aa0:	e110      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f008 fca4 	bl	800a412 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001aca:	2100      	movs	r1, #0
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8fc 	bl	8001cca <HAL_PCD_SetAddress>

    return;
 8001ad2:	e0f7      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001af0:	b292      	uxth	r2, r2
 8001af2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001af6:	e0e5      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00c      	beq.n	8001b1c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b14:	b292      	uxth	r2, r2
 8001b16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b1a:	e0d3      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d034      	beq.n	8001b90 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0204 	bic.w	r2, r2, #4
 8001b38:	b292      	uxth	r2, r2
 8001b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0208 	bic.w	r2, r2, #8
 8001b50:	b292      	uxth	r2, r2
 8001b52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d107      	bne.n	8001b70 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f008 fe44 	bl	800a7f8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f008 fc87 	bl	800a484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b88:	b292      	uxth	r2, r2
 8001b8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b8e:	e099      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d027      	beq.n	8001bea <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0208 	orr.w	r2, r2, #8
 8001bac:	b292      	uxth	r2, r2
 8001bae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bc4:	b292      	uxth	r2, r2
 8001bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0204 	orr.w	r2, r2, #4
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f008 fc34 	bl	800a450 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001be8:	e06c      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d040      	beq.n	8001c76 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c06:	b292      	uxth	r2, r2
 8001c08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d12b      	bne.n	8001c6e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0204 	orr.w	r2, r2, #4
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0208 	orr.w	r2, r2, #8
 8001c40:	b292      	uxth	r2, r2
 8001c42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c64:	2101      	movs	r1, #1
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f008 fdc6 	bl	800a7f8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001c6c:	e02a      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f008 fbee 	bl	800a450 <HAL_PCD_SuspendCallback>
    return;
 8001c74:	e026      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00f      	beq.n	8001ca0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c92:	b292      	uxth	r2, r2
 8001c94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f008 fbac 	bl	800a3f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001c9e:	e011      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cbc:	b292      	uxth	r2, r2
 8001cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001cc2:	bf00      	nop
  }
}
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_PCD_SetAddress+0x1a>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e012      	b.n	8001d0a <HAL_PCD_SetAddress+0x40>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	78fa      	ldrb	r2, [r7, #3]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f006 fc3b 	bl	8008576 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	4608      	mov	r0, r1
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4603      	mov	r3, r0
 8001d22:	70fb      	strb	r3, [r7, #3]
 8001d24:	460b      	mov	r3, r1
 8001d26:	803b      	strh	r3, [r7, #0]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	da0e      	bge.n	8001d56 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 0207 	and.w	r2, r3, #7
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	3310      	adds	r3, #16
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	705a      	strb	r2, [r3, #1]
 8001d54:	e00e      	b.n	8001d74 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	f003 0207 	and.w	r2, r3, #7
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d80:	883a      	ldrh	r2, [r7, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	78ba      	ldrb	r2, [r7, #2]
 8001d8a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d8c:	78bb      	ldrb	r3, [r7, #2]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d102      	bne.n	8001d98 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_PCD_EP_Open+0x94>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e00e      	b.n	8001dc4 <HAL_PCD_EP_Open+0xb2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68f9      	ldr	r1, [r7, #12]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 f97d 	bl	80060b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da0e      	bge.n	8001dfe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 0207 	and.w	r2, r3, #7
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	3310      	adds	r3, #16
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	705a      	strb	r2, [r3, #1]
 8001dfc:	e00e      	b.n	8001e1c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	f003 0207 	and.w	r2, r3, #7
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_PCD_EP_Close+0x6a>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e00e      	b.n	8001e54 <HAL_PCD_EP_Close+0x88>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 fcf9 	bl	800683c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	f003 0207 	and.w	r2, r3, #7
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4413      	add	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6979      	ldr	r1, [r7, #20]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 feb1 	bl	8006c16 <USB_EPStartXfer>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f003 0207 	and.w	r2, r3, #7
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001ee0:	681b      	ldr	r3, [r3, #0]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	460b      	mov	r3, r1
 8001efc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	f003 0207 	and.w	r2, r3, #7
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2200      	movs	r2, #0
 8001f32:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2201      	movs	r2, #1
 8001f38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6979      	ldr	r1, [r7, #20]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f004 fe62 	bl	8006c16 <USB_EPStartXfer>

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	7912      	ldrb	r2, [r2, #4]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e03e      	b.n	8001ff8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	da0e      	bge.n	8001fa0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 0207 	and.w	r2, r3, #7
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	3310      	adds	r3, #16
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	705a      	strb	r2, [r3, #1]
 8001f9e:	e00c      	b.n	8001fba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_PCD_EP_SetStall+0x7e>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e00e      	b.n	8001ff8 <HAL_PCD_EP_SetStall+0x9c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68f9      	ldr	r1, [r7, #12]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f006 f9c5 	bl	8008378 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	7912      	ldrb	r2, [r2, #4]
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e040      	b.n	80020a0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800201e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002022:	2b00      	cmp	r3, #0
 8002024:	da0e      	bge.n	8002044 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 0207 	and.w	r2, r3, #7
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	3310      	adds	r3, #16
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	705a      	strb	r2, [r3, #1]
 8002042:	e00e      	b.n	8002062 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 0207 	and.w	r2, r3, #7
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	b2da      	uxtb	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_PCD_EP_ClrStall+0x82>
 800207e:	2302      	movs	r3, #2
 8002080:	e00e      	b.n	80020a0 <HAL_PCD_EP_ClrStall+0xa0>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68f9      	ldr	r1, [r7, #12]
 8002090:	4618      	mov	r0, r3
 8002092:	f006 f9c2 	bl	800841a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b096      	sub	sp, #88	@ 0x58
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020b0:	e3ad      	b.n	800280e <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80020cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f040 816f 	bne.w	80023b4 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d14c      	bne.n	800217c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80020ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020f2:	81fb      	strh	r3, [r7, #14]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002102:	b29b      	uxth	r3, r3
 8002104:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3310      	adds	r3, #16
 800210a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	4413      	add	r3, r2
 8002126:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002132:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	441a      	add	r2, r3
 800213e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002140:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002142:	2100      	movs	r1, #0
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f008 f93c 	bl	800a3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7b1b      	ldrb	r3, [r3, #12]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 835c 	beq.w	800280e <PCD_EP_ISR_Handler+0x766>
 8002156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 8357 	bne.w	800280e <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7b1b      	ldrb	r3, [r3, #12]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800216a:	b2da      	uxtb	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	731a      	strb	r2, [r3, #12]
 800217a:	e348      	b.n	800280e <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002182:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800218e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002196:	2b00      	cmp	r3, #0
 8002198:	d032      	beq.n	8002200 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80021cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f006 fa4b 	bl	8008670 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80021e6:	4013      	ands	r3, r2
 80021e8:	823b      	strh	r3, [r7, #16]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	8a3a      	ldrh	r2, [r7, #16]
 80021f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021f4:	b292      	uxth	r2, r2
 80021f6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f008 f8b5 	bl	800a368 <HAL_PCD_SetupStageCallback>
 80021fe:	e306      	b.n	800280e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002200:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002204:	2b00      	cmp	r3, #0
 8002206:	f280 8302 	bge.w	800280e <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b29a      	uxth	r2, r3
 8002212:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002216:	4013      	ands	r3, r2
 8002218:	83fb      	strh	r3, [r7, #30]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	8bfa      	ldrh	r2, [r7, #30]
 8002220:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002224:	b292      	uxth	r2, r2
 8002226:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	4413      	add	r3, r2
 8002242:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800224c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800224e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d019      	beq.n	800228c <PCD_EP_ISR_Handler+0x1e4>
 8002258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d015      	beq.n	800228c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002266:	6959      	ldr	r1, [r3, #20]
 8002268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800226c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002270:	b29b      	uxth	r3, r3
 8002272:	f006 f9fd 	bl	8008670 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	441a      	add	r2, r3
 8002280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002282:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002284:	2100      	movs	r1, #0
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f008 f880 	bl	800a38c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002296:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800229a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 82b5 	bne.w	800280e <PCD_EP_ISR_Handler+0x766>
 80022a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022a8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80022ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80022b0:	f000 82ad 	beq.w	800280e <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4413      	add	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022de:	b29a      	uxth	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80022ea:	d91d      	bls.n	8002328 <PCD_EP_ISR_Handler+0x280>
 80022ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <PCD_EP_ISR_Handler+0x25e>
 8002300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002302:	3b01      	subs	r3, #1
 8002304:	647b      	str	r3, [r7, #68]	@ 0x44
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b29a      	uxth	r2, r3
 800230c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800230e:	b29b      	uxth	r3, r3
 8002310:	029b      	lsls	r3, r3, #10
 8002312:	b29b      	uxth	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800231c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002320:	b29a      	uxth	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	801a      	strh	r2, [r3, #0]
 8002326:	e026      	b.n	8002376 <PCD_EP_ISR_Handler+0x2ce>
 8002328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10a      	bne.n	8002346 <PCD_EP_ISR_Handler+0x29e>
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800233a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800233e:	b29a      	uxth	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	801a      	strh	r2, [r3, #0]
 8002344:	e017      	b.n	8002376 <PCD_EP_ISR_Handler+0x2ce>
 8002346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	085b      	lsrs	r3, r3, #1
 800234c:	647b      	str	r3, [r7, #68]	@ 0x44
 800234e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <PCD_EP_ISR_Handler+0x2b8>
 800235a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800235c:	3301      	adds	r3, #1
 800235e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29a      	uxth	r2, r3
 8002366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002368:	b29b      	uxth	r3, r3
 800236a:	029b      	lsls	r3, r3, #10
 800236c:	b29b      	uxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b29a      	uxth	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002386:	827b      	strh	r3, [r7, #18]
 8002388:	8a7b      	ldrh	r3, [r7, #18]
 800238a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800238e:	827b      	strh	r3, [r7, #18]
 8002390:	8a7b      	ldrh	r3, [r7, #18]
 8002392:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002396:	827b      	strh	r3, [r7, #18]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	8a7b      	ldrh	r3, [r7, #18]
 800239e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	8013      	strh	r3, [r2, #0]
 80023b2:	e22c      	b.n	800280e <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023c8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f280 80f6 	bge.w	80025be <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80023e8:	4013      	ands	r3, r2
 80023ea:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002400:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002404:	b292      	uxth	r2, r2
 8002406:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002408:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800241e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002420:	7b1b      	ldrb	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d123      	bne.n	800246e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	4413      	add	r3, r2
 8002440:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800244e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 808e 	beq.w	8002574 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800245e:	6959      	ldr	r1, [r3, #20]
 8002460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002462:	88da      	ldrh	r2, [r3, #6]
 8002464:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002468:	f006 f902 	bl	8008670 <USB_ReadPMA>
 800246c:	e082      	b.n	8002574 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800246e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002470:	78db      	ldrb	r3, [r3, #3]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d10a      	bne.n	800248c <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002476:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800247a:	461a      	mov	r2, r3
 800247c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9d3 	bl	800282a <HAL_PCD_EP_DB_Receive>
 8002484:	4603      	mov	r3, r0
 8002486:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800248a:	e073      	b.n	8002574 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024a6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	441a      	add	r2, r3
 80024b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80024bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d022      	beq.n	8002530 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	4413      	add	r3, r2
 8002504:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002512:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002516:	2b00      	cmp	r3, #0
 8002518:	d02c      	beq.n	8002574 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002520:	6959      	ldr	r1, [r3, #20]
 8002522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002524:	891a      	ldrh	r2, [r3, #8]
 8002526:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800252a:	f006 f8a1 	bl	8008670 <USB_ReadPMA>
 800252e:	e021      	b.n	8002574 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002538:	b29b      	uxth	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	4413      	add	r3, r2
 800254a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002554:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002558:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002566:	6959      	ldr	r1, [r3, #20]
 8002568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256a:	895a      	ldrh	r2, [r3, #10]
 800256c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002570:	f006 f87e 	bl	8008670 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800257c:	441a      	add	r2, r3
 800257e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002580:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800258a:	441a      	add	r2, r3
 800258c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <PCD_EP_ISR_Handler+0x4fc>
 8002598:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800259c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d206      	bcs.n	80025b2 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f007 feee 	bl	800a38c <HAL_PCD_DataOutStageCallback>
 80025b0:	e005      	b.n	80025be <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025b8:	4618      	mov	r0, r3
 80025ba:	f004 fb2c 	bl	8006c16 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8121 	beq.w	800280e <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80025cc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	3310      	adds	r3, #16
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80025f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	441a      	add	r2, r3
 800260c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002618:	b29b      	uxth	r3, r3
 800261a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800261c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800261e:	78db      	ldrb	r3, [r3, #3]
 8002620:	2b01      	cmp	r3, #1
 8002622:	f040 80a2 	bne.w	800276a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8002626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800262c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262e:	7b1b      	ldrb	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8093 	beq.w	800275c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002636:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800263a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d046      	beq.n	80026d0 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	785b      	ldrb	r3, [r3, #1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d126      	bne.n	8002698 <PCD_EP_ISR_Handler+0x5f0>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002658:	b29b      	uxth	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	4413      	add	r3, r2
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
 8002662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	00da      	lsls	r2, r3, #3
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	4413      	add	r3, r2
 800266c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267c:	b29a      	uxth	r2, r3
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002690:	b29a      	uxth	r2, r3
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	e061      	b.n	800275c <PCD_EP_ISR_Handler+0x6b4>
 8002698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d15d      	bne.n	800275c <PCD_EP_ISR_Handler+0x6b4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b4:	4413      	add	r3, r2
 80026b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	00da      	lsls	r2, r3, #3
 80026be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c0:	4413      	add	r3, r2
 80026c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80026c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ca:	2200      	movs	r2, #0
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	e045      	b.n	800275c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d8:	785b      	ldrb	r3, [r3, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d126      	bne.n	800272c <PCD_EP_ISR_Handler+0x684>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f2:	4413      	add	r3, r2
 80026f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80026f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	00da      	lsls	r2, r3, #3
 80026fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fe:	4413      	add	r3, r2
 8002700:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002704:	633b      	str	r3, [r7, #48]	@ 0x30
 8002706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002710:	b29a      	uxth	r2, r3
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	801a      	strh	r2, [r3, #0]
 8002716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002724:	b29a      	uxth	r2, r3
 8002726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002728:	801a      	strh	r2, [r3, #0]
 800272a:	e017      	b.n	800275c <PCD_EP_ISR_Handler+0x6b4>
 800272c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d113      	bne.n	800275c <PCD_EP_ISR_Handler+0x6b4>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800273c:	b29b      	uxth	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002742:	4413      	add	r3, r2
 8002744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	00da      	lsls	r2, r3, #3
 800274c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800274e:	4413      	add	r3, r2
 8002750:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002754:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002758:	2200      	movs	r2, #0
 800275a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800275c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f007 fe2d 	bl	800a3c2 <HAL_PCD_DataInStageCallback>
 8002768:	e051      	b.n	800280e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800276a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d144      	bne.n	8002800 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	4413      	add	r3, r2
 8002790:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800279a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800279e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d907      	bls.n	80027ba <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80027aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80027b2:	1ad2      	subs	r2, r2, r3
 80027b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b6:	619a      	str	r2, [r3, #24]
 80027b8:	e002      	b.n	80027c0 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80027ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80027c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f007 fdf7 	bl	800a3c2 <HAL_PCD_DataInStageCallback>
 80027d4:	e01b      	b.n	800280e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80027d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80027de:	441a      	add	r2, r3
 80027e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80027e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80027ec:	441a      	add	r2, r3
 80027ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027f8:	4618      	mov	r0, r3
 80027fa:	f004 fa0c 	bl	8006c16 <USB_EPStartXfer>
 80027fe:	e006      	b.n	800280e <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002800:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002804:	461a      	mov	r2, r3
 8002806:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f917 	bl	8002a3c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002816:	b29b      	uxth	r3, r3
 8002818:	b21b      	sxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	f6ff ac49 	blt.w	80020b2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3758      	adds	r7, #88	@ 0x58
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b088      	sub	sp, #32
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	4613      	mov	r3, r2
 8002836:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d07c      	beq.n	800293c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	4413      	add	r3, r2
 800285c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002866:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	699a      	ldr	r2, [r3, #24]
 800286c:	8b7b      	ldrh	r3, [r7, #26]
 800286e:	429a      	cmp	r2, r3
 8002870:	d306      	bcc.n	8002880 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	8b7b      	ldrh	r3, [r7, #26]
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	619a      	str	r2, [r3, #24]
 800287e:	e002      	b.n	8002886 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d123      	bne.n	80028d6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028a8:	833b      	strh	r3, [r7, #24]
 80028aa:	8b3b      	ldrh	r3, [r7, #24]
 80028ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028b0:	833b      	strh	r3, [r7, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	8b3b      	ldrh	r3, [r7, #24]
 80028c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01f      	beq.n	8002920 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028fa:	82fb      	strh	r3, [r7, #22]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	441a      	add	r2, r3
 800290a:	8afb      	ldrh	r3, [r7, #22]
 800290c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002918:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800291c:	b29b      	uxth	r3, r3
 800291e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002920:	8b7b      	ldrh	r3, [r7, #26]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8085 	beq.w	8002a32 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6959      	ldr	r1, [r3, #20]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	891a      	ldrh	r2, [r3, #8]
 8002934:	8b7b      	ldrh	r3, [r7, #26]
 8002936:	f005 fe9b 	bl	8008670 <USB_ReadPMA>
 800293a:	e07a      	b.n	8002a32 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	4413      	add	r3, r2
 8002956:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002960:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	8b7b      	ldrh	r3, [r7, #26]
 8002968:	429a      	cmp	r2, r3
 800296a:	d306      	bcc.n	800297a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	8b7b      	ldrh	r3, [r7, #26]
 8002972:	1ad2      	subs	r2, r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	619a      	str	r2, [r3, #24]
 8002978:	e002      	b.n	8002980 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d123      	bne.n	80029d0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800299e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a2:	83fb      	strh	r3, [r7, #30]
 80029a4:	8bfb      	ldrh	r3, [r7, #30]
 80029a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80029aa:	83fb      	strh	r3, [r7, #30]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	441a      	add	r2, r3
 80029ba:	8bfb      	ldrh	r3, [r7, #30]
 80029bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d11f      	bne.n	8002a1a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f4:	83bb      	strh	r3, [r7, #28]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	441a      	add	r2, r3
 8002a04:	8bbb      	ldrh	r3, [r7, #28]
 8002a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a1a:	8b7b      	ldrh	r3, [r7, #26]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6959      	ldr	r1, [r3, #20]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	895a      	ldrh	r2, [r3, #10]
 8002a2c:	8b7b      	ldrh	r3, [r7, #26]
 8002a2e:	f005 fe1f 	bl	8008670 <USB_ReadPMA>
    }
  }

  return count;
 8002a32:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b0a4      	sub	sp, #144	@ 0x90
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 81db 	beq.w	8002e0c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d907      	bls.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a92:	1ad2      	subs	r2, r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	619a      	str	r2, [r3, #24]
 8002a98:	e002      	b.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 80b9 	bne.w	8002c1c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d126      	bne.n	8002b00 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	4413      	add	r3, r2
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	00da      	lsls	r2, r3, #3
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	e01a      	b.n	8002b36 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d116      	bne.n	8002b36 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1c:	4413      	add	r3, r2
 8002b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	00da      	lsls	r2, r3, #3
 8002b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b28:	4413      	add	r3, r2
 8002b2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002b2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	2200      	movs	r2, #0
 8002b34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	785b      	ldrb	r3, [r3, #1]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d126      	bne.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x156>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	00da      	lsls	r2, r3, #3
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	e017      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x186>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d113      	bne.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x186>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	4413      	add	r3, r2
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	00da      	lsls	r2, r3, #3
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002bba:	623b      	str	r3, [r7, #32]
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f007 fbfa 	bl	800a3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 82fa 	beq.w	80031ce <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf4:	82fb      	strh	r3, [r7, #22]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	441a      	add	r2, r3
 8002c04:	8afb      	ldrh	r3, [r7, #22]
 8002c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
 8002c1a:	e2d8      	b.n	80031ce <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d021      	beq.n	8002c6a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	441a      	add	r2, r3
 8002c52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 82ac 	bne.w	80031ce <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c7e:	441a      	add	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d30b      	bcc.n	8002cb6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	6a1a      	ldr	r2, [r3, #32]
 8002caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cae:	1ad2      	subs	r2, r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	621a      	str	r2, [r3, #32]
 8002cb4:	e017      	b.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d108      	bne.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002cbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002cce:	e00a      	b.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d165      	bne.n	8002dba <HAL_PCD_EP_DB_Transmit+0x37e>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d02:	4413      	add	r3, r2
 8002d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	00da      	lsls	r2, r3, #3
 8002d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0e:	4413      	add	r3, r2
 8002d10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002d14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d2c:	d91d      	bls.n	8002d6a <HAL_PCD_EP_DB_Transmit+0x32e>
 8002d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d44:	3b01      	subs	r3, #1
 8002d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	029b      	lsls	r3, r3, #10
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	e044      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d84:	801a      	strh	r2, [r3, #0]
 8002d86:	e035      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x366>
 8002d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d9e:	3301      	adds	r3, #1
 8002da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	029b      	lsls	r3, r3, #10
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db6:	801a      	strh	r2, [r3, #0]
 8002db8:	e01c      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d118      	bne.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd6:	4413      	add	r3, r2
 8002dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	00da      	lsls	r2, r3, #3
 8002de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de2:	4413      	add	r3, r2
 8002de4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002de8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	6959      	ldr	r1, [r3, #20]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	891a      	ldrh	r2, [r3, #8]
 8002e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f005 fbf1 	bl	80085ec <USB_WritePMA>
 8002e0a:	e1e0      	b.n	80031ce <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	4413      	add	r3, r2
 8002e26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e30:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d307      	bcc.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	699a      	ldr	r2, [r3, #24]
 8002e44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e48:	1ad2      	subs	r2, r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	619a      	str	r2, [r3, #24]
 8002e4e:	e002      	b.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2200      	movs	r2, #0
 8002e54:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 80c0 	bne.w	8002fe0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	785b      	ldrb	r3, [r3, #1]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d126      	bne.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e7c:	4413      	add	r3, r2
 8002e7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	00da      	lsls	r2, r3, #3
 8002e86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e88:	4413      	add	r3, r2
 8002e8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e9e:	801a      	strh	r2, [r3, #0]
 8002ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002eb2:	801a      	strh	r2, [r3, #0]
 8002eb4:	e01a      	b.n	8002eec <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d116      	bne.n	8002eec <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ed2:	4413      	add	r3, r2
 8002ed4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	00da      	lsls	r2, r3, #3
 8002edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ede:	4413      	add	r3, r2
 8002ee0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ee4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ee6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ee8:	2200      	movs	r2, #0
 8002eea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d12b      	bne.n	8002f52 <HAL_PCD_EP_DB_Transmit+0x516>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f0e:	4413      	add	r3, r2
 8002f10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	00da      	lsls	r2, r3, #3
 8002f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f36:	801a      	strh	r2, [r3, #0]
 8002f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f4e:	801a      	strh	r2, [r3, #0]
 8002f50:	e017      	b.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x546>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	785b      	ldrb	r3, [r3, #1]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d113      	bne.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x546>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f68:	4413      	add	r3, r2
 8002f6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	00da      	lsls	r2, r3, #3
 8002f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f74:	4413      	add	r3, r2
 8002f76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f7e:	2200      	movs	r2, #0
 8002f80:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f007 fa1a 	bl	800a3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f040 811a 	bne.w	80031ce <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fb4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	8013      	strh	r3, [r2, #0]
 8002fde:	e0f6      	b.n	80031ce <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d121      	bne.n	800302e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003004:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800301a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800301e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003022:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800302a:	b29b      	uxth	r3, r3
 800302c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003034:	2b01      	cmp	r3, #1
 8003036:	f040 80ca 	bne.w	80031ce <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003042:	441a      	add	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003050:	441a      	add	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6a1a      	ldr	r2, [r3, #32]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	429a      	cmp	r2, r3
 8003060:	d30b      	bcc.n	800307a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003072:	1ad2      	subs	r2, r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	621a      	str	r2, [r3, #32]
 8003078:	e017      	b.n	80030aa <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003082:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003086:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003092:	e00a      	b.n	80030aa <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2200      	movs	r2, #0
 80030a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	785b      	ldrb	r3, [r3, #1]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d165      	bne.n	8003184 <HAL_PCD_EP_DB_Transmit+0x748>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030cc:	4413      	add	r3, r2
 80030ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	00da      	lsls	r2, r3, #3
 80030d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030d8:	4413      	add	r3, r2
 80030da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030ee:	801a      	strh	r2, [r3, #0]
 80030f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80030f6:	d91d      	bls.n	8003134 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80030f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003100:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800310c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800310e:	3b01      	subs	r3, #1
 8003110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003112:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	b29a      	uxth	r2, r3
 8003118:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800311a:	b29b      	uxth	r3, r3
 800311c:	029b      	lsls	r3, r3, #10
 800311e:	b29b      	uxth	r3, r3
 8003120:	4313      	orrs	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800312c:	b29a      	uxth	r2, r3
 800312e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003130:	801a      	strh	r2, [r3, #0]
 8003132:	e041      	b.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003134:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <HAL_PCD_EP_DB_Transmit+0x716>
 800313c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800314a:	b29a      	uxth	r2, r3
 800314c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800314e:	801a      	strh	r2, [r3, #0]
 8003150:	e032      	b.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800315a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_PCD_EP_DB_Transmit+0x730>
 8003166:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003168:	3301      	adds	r3, #1
 800316a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800316c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b29a      	uxth	r2, r3
 8003172:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003174:	b29b      	uxth	r3, r3
 8003176:	029b      	lsls	r3, r3, #10
 8003178:	b29b      	uxth	r3, r3
 800317a:	4313      	orrs	r3, r2
 800317c:	b29a      	uxth	r2, r3
 800317e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	e019      	b.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d115      	bne.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x77c>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003194:	b29b      	uxth	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319a:	4413      	add	r3, r2
 800319c:	657b      	str	r3, [r7, #84]	@ 0x54
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	00da      	lsls	r2, r3, #3
 80031a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a6:	4413      	add	r3, r2
 80031a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80031ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80031ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6959      	ldr	r1, [r3, #20]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	895a      	ldrh	r2, [r3, #10]
 80031c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f005 fa0f 	bl	80085ec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e8:	82bb      	strh	r3, [r7, #20]
 80031ea:	8abb      	ldrh	r3, [r7, #20]
 80031ec:	f083 0310 	eor.w	r3, r3, #16
 80031f0:	82bb      	strh	r3, [r7, #20]
 80031f2:	8abb      	ldrh	r3, [r7, #20]
 80031f4:	f083 0320 	eor.w	r3, r3, #32
 80031f8:	82bb      	strh	r3, [r7, #20]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	8abb      	ldrh	r3, [r7, #20]
 800320a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800320e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800321a:	b29b      	uxth	r3, r3
 800321c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3790      	adds	r7, #144	@ 0x90
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	817b      	strh	r3, [r7, #10]
 8003236:	4613      	mov	r3, r2
 8003238:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800323a:	897b      	ldrh	r3, [r7, #10]
 800323c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003246:	897b      	ldrh	r3, [r7, #10]
 8003248:	f003 0207 	and.w	r2, r3, #7
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	3310      	adds	r3, #16
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e009      	b.n	8003272 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800325e:	897a      	ldrh	r2, [r7, #10]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003272:	893b      	ldrh	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2200      	movs	r2, #0
 800327c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	b29a      	uxth	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	80da      	strh	r2, [r3, #6]
 8003286:	e00b      	b.n	80032a0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2201      	movs	r2, #1
 800328c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	b29a      	uxth	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	b29a      	uxth	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a04      	ldr	r2, [pc, #16]	@ (8003320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800330e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40007000 	.word	0x40007000

08003324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d141      	bne.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003332:	4b4b      	ldr	r3, [pc, #300]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800333e:	d131      	bne.n	80033a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003340:	4b47      	ldr	r3, [pc, #284]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003346:	4a46      	ldr	r2, [pc, #280]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800334c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003350:	4b43      	ldr	r3, [pc, #268]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003358:	4a41      	ldr	r2, [pc, #260]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800335e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003360:	4b40      	ldr	r3, [pc, #256]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2232      	movs	r2, #50	@ 0x32
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	4a3f      	ldr	r2, [pc, #252]	@ (8003468 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	0c9b      	lsrs	r3, r3, #18
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003376:	e002      	b.n	800337e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3b01      	subs	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800337e:	4b38      	ldr	r3, [pc, #224]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338a:	d102      	bne.n	8003392 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f2      	bne.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003392:	4b33      	ldr	r3, [pc, #204]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339e:	d158      	bne.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e057      	b.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033b4:	e04d      	b.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033bc:	d141      	bne.n	8003442 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033be:	4b28      	ldr	r3, [pc, #160]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ca:	d131      	bne.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033cc:	4b24      	ldr	r3, [pc, #144]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033d2:	4a23      	ldr	r2, [pc, #140]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033dc:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2232      	movs	r2, #50	@ 0x32
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003468 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	0c9b      	lsrs	r3, r3, #18
 80033fe:	3301      	adds	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003402:	e002      	b.n	800340a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3b01      	subs	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800340a:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003416:	d102      	bne.n	800341e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f2      	bne.n	8003404 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800341e:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800342a:	d112      	bne.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e011      	b.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003436:	4a0a      	ldr	r2, [pc, #40]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003440:	e007      	b.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003442:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800344a:	4a05      	ldr	r2, [pc, #20]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003450:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40007000 	.word	0x40007000
 8003464:	20000000 	.word	0x20000000
 8003468:	431bde83 	.word	0x431bde83

0800346c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a04      	ldr	r2, [pc, #16]	@ (8003488 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003476:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800347a:	6093      	str	r3, [r2, #8]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40007000 	.word	0x40007000

0800348c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e2fe      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d075      	beq.n	8003596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034aa:	4b97      	ldr	r3, [pc, #604]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b4:	4b94      	ldr	r3, [pc, #592]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_OscConfig+0x3e>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_OscConfig+0x44>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d10b      	bne.n	80034e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	4b8d      	ldr	r3, [pc, #564]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d05b      	beq.n	8003594 <HAL_RCC_OscConfig+0x108>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d157      	bne.n	8003594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e2d9      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f0:	d106      	bne.n	8003500 <HAL_RCC_OscConfig+0x74>
 80034f2:	4b85      	ldr	r3, [pc, #532]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a84      	ldr	r2, [pc, #528]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e01d      	b.n	800353c <HAL_RCC_OscConfig+0xb0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0x98>
 800350a:	4b7f      	ldr	r3, [pc, #508]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a7e      	ldr	r2, [pc, #504]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b7c      	ldr	r3, [pc, #496]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a7b      	ldr	r2, [pc, #492]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e00b      	b.n	800353c <HAL_RCC_OscConfig+0xb0>
 8003524:	4b78      	ldr	r3, [pc, #480]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a77      	ldr	r2, [pc, #476]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 800352a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b75      	ldr	r3, [pc, #468]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a74      	ldr	r2, [pc, #464]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800353a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d013      	beq.n	800356c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fd fc14 	bl	8000d70 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7fd fc10 	bl	8000d70 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	@ 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e29e      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355e:	4b6a      	ldr	r3, [pc, #424]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0xc0>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd fc00 	bl	8000d70 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fd fbfc 	bl	8000d70 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	@ 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e28a      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003586:	4b60      	ldr	r3, [pc, #384]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0xe8>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d075      	beq.n	800368e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a2:	4b59      	ldr	r3, [pc, #356]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ac:	4b56      	ldr	r3, [pc, #344]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	d102      	bne.n	80035c2 <HAL_RCC_OscConfig+0x136>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d002      	beq.n	80035c8 <HAL_RCC_OscConfig+0x13c>
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d11f      	bne.n	8003608 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_OscConfig+0x154>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e25d      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e0:	4b49      	ldr	r3, [pc, #292]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	061b      	lsls	r3, r3, #24
 80035ee:	4946      	ldr	r1, [pc, #280]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035f4:	4b45      	ldr	r3, [pc, #276]	@ (800370c <HAL_RCC_OscConfig+0x280>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fb6d 	bl	8000cd8 <HAL_InitTick>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d043      	beq.n	800368c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e249      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003610:	4b3d      	ldr	r3, [pc, #244]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a3c      	ldr	r2, [pc, #240]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd fba8 	bl	8000d70 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003624:	f7fd fba4 	bl	8000d70 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e232      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003636:	4b34      	ldr	r3, [pc, #208]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b31      	ldr	r3, [pc, #196]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	061b      	lsls	r3, r3, #24
 8003650:	492d      	ldr	r1, [pc, #180]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
 8003656:	e01a      	b.n	800368e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003658:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a2a      	ldr	r2, [pc, #168]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 800365e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fd fb84 	bl	8000d70 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366c:	f7fd fb80 	bl	8000d70 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e20e      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800367e:	4b22      	ldr	r3, [pc, #136]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x1e0>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d041      	beq.n	800371e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01c      	beq.n	80036dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a2:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80036a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a8:	4a17      	ldr	r2, [pc, #92]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fd fb5d 	bl	8000d70 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ba:	f7fd fb59 	bl	8000d70 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e1e7      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80036ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0ef      	beq.n	80036ba <HAL_RCC_OscConfig+0x22e>
 80036da:	e020      	b.n	800371e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80036de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e2:	4a09      	ldr	r2, [pc, #36]	@ (8003708 <HAL_RCC_OscConfig+0x27c>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fd fb40 	bl	8000d70 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f2:	e00d      	b.n	8003710 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f4:	f7fd fb3c 	bl	8000d70 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d906      	bls.n	8003710 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1ca      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
 800370c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003710:	4b8c      	ldr	r3, [pc, #560]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 8003712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1ea      	bne.n	80036f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80a6 	beq.w	8003878 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003730:	4b84      	ldr	r3, [pc, #528]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_OscConfig+0x2b4>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x2b6>
 8003740:	2300      	movs	r3, #0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003746:	4b7f      	ldr	r3, [pc, #508]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	4a7e      	ldr	r2, [pc, #504]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003750:	6593      	str	r3, [r2, #88]	@ 0x58
 8003752:	4b7c      	ldr	r3, [pc, #496]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003762:	4b79      	ldr	r3, [pc, #484]	@ (8003948 <HAL_RCC_OscConfig+0x4bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800376e:	4b76      	ldr	r3, [pc, #472]	@ (8003948 <HAL_RCC_OscConfig+0x4bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a75      	ldr	r2, [pc, #468]	@ (8003948 <HAL_RCC_OscConfig+0x4bc>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377a:	f7fd faf9 	bl	8000d70 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fd faf5 	bl	8000d70 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e183      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003794:	4b6c      	ldr	r3, [pc, #432]	@ (8003948 <HAL_RCC_OscConfig+0x4bc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d108      	bne.n	80037ba <HAL_RCC_OscConfig+0x32e>
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ae:	4a65      	ldr	r2, [pc, #404]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037b8:	e024      	b.n	8003804 <HAL_RCC_OscConfig+0x378>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d110      	bne.n	80037e4 <HAL_RCC_OscConfig+0x358>
 80037c2:	4b60      	ldr	r3, [pc, #384]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037e2:	e00f      	b.n	8003804 <HAL_RCC_OscConfig+0x378>
 80037e4:	4b57      	ldr	r3, [pc, #348]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	4a56      	ldr	r2, [pc, #344]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037f4:	4b53      	ldr	r3, [pc, #332]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	4a52      	ldr	r2, [pc, #328]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d016      	beq.n	800383a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fd fab0 	bl	8000d70 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fd faac 	bl	8000d70 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e138      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382a:	4b46      	ldr	r3, [pc, #280]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ed      	beq.n	8003814 <HAL_RCC_OscConfig+0x388>
 8003838:	e015      	b.n	8003866 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fd fa99 	bl	8000d70 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fd fa95 	bl	8000d70 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e121      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003858:	4b3a      	ldr	r3, [pc, #232]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ed      	bne.n	8003842 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003866:	7ffb      	ldrb	r3, [r7, #31]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d105      	bne.n	8003878 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386c:	4b35      	ldr	r3, [pc, #212]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	4a34      	ldr	r2, [pc, #208]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003876:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d03c      	beq.n	80038fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01c      	beq.n	80038c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800388c:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 800388e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003892:	4a2c      	ldr	r2, [pc, #176]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fd fa68 	bl	8000d70 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a4:	f7fd fa64 	bl	8000d70 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0f2      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038b6:	4b23      	ldr	r3, [pc, #140]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80038b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ef      	beq.n	80038a4 <HAL_RCC_OscConfig+0x418>
 80038c4:	e01b      	b.n	80038fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80038c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fd fa4b 	bl	8000d70 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038de:	f7fd fa47 	bl	8000d70 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0d5      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f0:	4b14      	ldr	r3, [pc, #80]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 80038f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ef      	bne.n	80038de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80c9 	beq.w	8003a9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003908:	4b0e      	ldr	r3, [pc, #56]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b0c      	cmp	r3, #12
 8003912:	f000 8083 	beq.w	8003a1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d15e      	bne.n	80039dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391e:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a08      	ldr	r2, [pc, #32]	@ (8003944 <HAL_RCC_OscConfig+0x4b8>)
 8003924:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7fd fa21 	bl	8000d70 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003930:	e00c      	b.n	800394c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003932:	f7fd fa1d 	bl	8000d70 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d905      	bls.n	800394c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0ab      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
 8003944:	40021000 	.word	0x40021000
 8003948:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394c:	4b55      	ldr	r3, [pc, #340]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ec      	bne.n	8003932 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003958:	4b52      	ldr	r3, [pc, #328]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	4b52      	ldr	r3, [pc, #328]	@ (8003aa8 <HAL_RCC_OscConfig+0x61c>)
 800395e:	4013      	ands	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6a11      	ldr	r1, [r2, #32]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003968:	3a01      	subs	r2, #1
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	4311      	orrs	r1, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003972:	0212      	lsls	r2, r2, #8
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800397a:	0852      	lsrs	r2, r2, #1
 800397c:	3a01      	subs	r2, #1
 800397e:	0552      	lsls	r2, r2, #21
 8003980:	4311      	orrs	r1, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003986:	0852      	lsrs	r2, r2, #1
 8003988:	3a01      	subs	r2, #1
 800398a:	0652      	lsls	r2, r2, #25
 800398c:	4311      	orrs	r1, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003992:	06d2      	lsls	r2, r2, #27
 8003994:	430a      	orrs	r2, r1
 8003996:	4943      	ldr	r1, [pc, #268]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 8003998:	4313      	orrs	r3, r2
 800399a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800399c:	4b41      	ldr	r3, [pc, #260]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a40      	ldr	r2, [pc, #256]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 80039a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a8:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4a3d      	ldr	r2, [pc, #244]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 80039ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd f9dc 	bl	8000d70 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd f9d8 	bl	8000d70 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e066      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ce:	4b35      	ldr	r3, [pc, #212]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x530>
 80039da:	e05e      	b.n	8003a9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039dc:	4b31      	ldr	r3, [pc, #196]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a30      	ldr	r2, [pc, #192]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 80039e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd f9c2 	bl	8000d70 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd f9be 	bl	8000d70 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e04c      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a02:	4b28      	ldr	r3, [pc, #160]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a0e:	4b25      	ldr	r3, [pc, #148]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	4924      	ldr	r1, [pc, #144]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 8003a14:	4b25      	ldr	r3, [pc, #148]	@ (8003aac <HAL_RCC_OscConfig+0x620>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	60cb      	str	r3, [r1, #12]
 8003a1a:	e03e      	b.n	8003a9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e039      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a28:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa4 <HAL_RCC_OscConfig+0x618>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0203 	and.w	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d12c      	bne.n	8003a96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	3b01      	subs	r3, #1
 8003a48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d123      	bne.n	8003a96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d11b      	bne.n	8003a96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d113      	bne.n	8003a96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a78:	085b      	lsrs	r3, r3, #1
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	019f800c 	.word	0x019f800c
 8003aac:	feeefffc 	.word	0xfeeefffc

08003ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e11e      	b.n	8003d06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b91      	ldr	r3, [pc, #580]	@ (8003d10 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d910      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b8e      	ldr	r3, [pc, #568]	@ (8003d10 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 020f 	bic.w	r2, r3, #15
 8003ade:	498c      	ldr	r1, [pc, #560]	@ (8003d10 <HAL_RCC_ClockConfig+0x260>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b8a      	ldr	r3, [pc, #552]	@ (8003d10 <HAL_RCC_ClockConfig+0x260>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e106      	b.n	8003d06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d073      	beq.n	8003bec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d129      	bne.n	8003b60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0c:	4b81      	ldr	r3, [pc, #516]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0f4      	b.n	8003d06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b1c:	f000 f966 	bl	8003dec <RCC_GetSysClockFreqFromPLLSource>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4a7c      	ldr	r2, [pc, #496]	@ (8003d18 <HAL_RCC_ClockConfig+0x268>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d93f      	bls.n	8003baa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d033      	beq.n	8003baa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d12f      	bne.n	8003baa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b4a:	4b72      	ldr	r3, [pc, #456]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b52:	4a70      	ldr	r2, [pc, #448]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b5a:	2380      	movs	r3, #128	@ 0x80
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e024      	b.n	8003baa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b68:	4b6a      	ldr	r3, [pc, #424]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0c6      	b.n	8003d06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b78:	4b66      	ldr	r3, [pc, #408]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0be      	b.n	8003d06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b88:	f000 f8ce 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4a61      	ldr	r2, [pc, #388]	@ (8003d18 <HAL_RCC_ClockConfig+0x268>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d909      	bls.n	8003baa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b96:	4b5f      	ldr	r3, [pc, #380]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b9e:	4a5d      	ldr	r2, [pc, #372]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ba6:	2380      	movs	r3, #128	@ 0x80
 8003ba8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003baa:	4b5a      	ldr	r3, [pc, #360]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f023 0203 	bic.w	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4957      	ldr	r1, [pc, #348]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bbc:	f7fd f8d8 	bl	8000d70 <HAL_GetTick>
 8003bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc4:	f7fd f8d4 	bl	8000d70 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e095      	b.n	8003d06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bda:	4b4e      	ldr	r3, [pc, #312]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 020c 	and.w	r2, r3, #12
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d1eb      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d023      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c04:	4b43      	ldr	r3, [pc, #268]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a42      	ldr	r2, [pc, #264]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003c0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c24:	4a3b      	ldr	r2, [pc, #236]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003c26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b39      	ldr	r3, [pc, #228]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4936      	ldr	r1, [pc, #216]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b80      	cmp	r3, #128	@ 0x80
 8003c44:	d105      	bne.n	8003c52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c46:	4b33      	ldr	r3, [pc, #204]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4a32      	ldr	r2, [pc, #200]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003c4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c52:	4b2f      	ldr	r3, [pc, #188]	@ (8003d10 <HAL_RCC_ClockConfig+0x260>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d21d      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c60:	4b2b      	ldr	r3, [pc, #172]	@ (8003d10 <HAL_RCC_ClockConfig+0x260>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 020f 	bic.w	r2, r3, #15
 8003c68:	4929      	ldr	r1, [pc, #164]	@ (8003d10 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c70:	f7fd f87e 	bl	8000d70 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fd f87a 	bl	8000d70 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e03b      	b.n	8003d06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <HAL_RCC_ClockConfig+0x260>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1ed      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4917      	ldr	r1, [pc, #92]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cc6:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	490f      	ldr	r1, [pc, #60]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cda:	f000 f825 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <HAL_RCC_ClockConfig+0x264>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	490c      	ldr	r1, [pc, #48]	@ (8003d1c <HAL_RCC_ClockConfig+0x26c>)
 8003cec:	5ccb      	ldrb	r3, [r1, r3]
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8003d20 <HAL_RCC_ClockConfig+0x270>)
 8003cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003d24 <HAL_RCC_ClockConfig+0x274>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc ffea 	bl	8000cd8 <HAL_InitTick>
 8003d04:	4603      	mov	r3, r0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40022000 	.word	0x40022000
 8003d14:	40021000 	.word	0x40021000
 8003d18:	04c4b400 	.word	0x04c4b400
 8003d1c:	0800a9b0 	.word	0x0800a9b0
 8003d20:	20000000 	.word	0x20000000
 8003d24:	20000004 	.word	0x20000004

08003d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d102      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	e047      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d40:	4b27      	ldr	r3, [pc, #156]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d102      	bne.n	8003d52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d4c:	4b26      	ldr	r3, [pc, #152]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	e03e      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d52:	4b23      	ldr	r3, [pc, #140]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	d136      	bne.n	8003dcc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5e:	4b20      	ldr	r3, [pc, #128]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d68:	4b1d      	ldr	r3, [pc, #116]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	3301      	adds	r3, #1
 8003d74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d10c      	bne.n	8003d96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	4a16      	ldr	r2, [pc, #88]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d86:	68d2      	ldr	r2, [r2, #12]
 8003d88:	0a12      	lsrs	r2, r2, #8
 8003d8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	617b      	str	r3, [r7, #20]
      break;
 8003d94:	e00c      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d96:	4a13      	ldr	r2, [pc, #76]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9e:	4a10      	ldr	r2, [pc, #64]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da0:	68d2      	ldr	r2, [r2, #12]
 8003da2:	0a12      	lsrs	r2, r2, #8
 8003da4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]
      break;
 8003dae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	0e5b      	lsrs	r3, r3, #25
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	e001      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003dd0:	693b      	ldr	r3, [r7, #16]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	00f42400 	.word	0x00f42400
 8003de8:	007a1200 	.word	0x007a1200

08003dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003df2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	3301      	adds	r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d10c      	bne.n	8003e2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e10:	4a17      	ldr	r2, [pc, #92]	@ (8003e70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	4a14      	ldr	r2, [pc, #80]	@ (8003e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e1a:	68d2      	ldr	r2, [r2, #12]
 8003e1c:	0a12      	lsrs	r2, r2, #8
 8003e1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	617b      	str	r3, [r7, #20]
    break;
 8003e28:	e00c      	b.n	8003e44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e2a:	4a12      	ldr	r2, [pc, #72]	@ (8003e74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	4a0e      	ldr	r2, [pc, #56]	@ (8003e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e34:	68d2      	ldr	r2, [r2, #12]
 8003e36:	0a12      	lsrs	r2, r2, #8
 8003e38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e3c:	fb02 f303 	mul.w	r3, r2, r3
 8003e40:	617b      	str	r3, [r7, #20]
    break;
 8003e42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e44:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	0e5b      	lsrs	r3, r3, #25
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e5e:	687b      	ldr	r3, [r7, #4]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	007a1200 	.word	0x007a1200
 8003e74:	00f42400 	.word	0x00f42400

08003e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e80:	2300      	movs	r3, #0
 8003e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e84:	2300      	movs	r3, #0
 8003e86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8098 	beq.w	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9a:	4b43      	ldr	r3, [pc, #268]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	4b40      	ldr	r3, [pc, #256]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a39      	ldr	r2, [pc, #228]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ecc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ece:	f7fc ff4f 	bl	8000d70 <HAL_GetTick>
 8003ed2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ed4:	e009      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed6:	f7fc ff4b 	bl	8000d70 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d902      	bls.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	74fb      	strb	r3, [r7, #19]
        break;
 8003ee8:	e005      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eea:	4b30      	ldr	r3, [pc, #192]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0ef      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d159      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003efc:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01e      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d019      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f18:	4b23      	ldr	r3, [pc, #140]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f24:	4b20      	ldr	r3, [pc, #128]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f34:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f44:	4a18      	ldr	r2, [pc, #96]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d016      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fc ff0b 	bl	8000d70 <HAL_GetTick>
 8003f5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5c:	e00b      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fc ff07 	bl	8000d70 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d902      	bls.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	74fb      	strb	r3, [r7, #19]
            break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f76:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ec      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f8a:	4b07      	ldr	r3, [pc, #28]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f98:	4903      	ldr	r1, [pc, #12]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	74bb      	strb	r3, [r7, #18]
 8003fa6:	e005      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb4:	7c7b      	ldrb	r3, [r7, #17]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d105      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fba:	4ba7      	ldr	r3, [pc, #668]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbe:	4aa6      	ldr	r2, [pc, #664]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd2:	4ba1      	ldr	r3, [pc, #644]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd8:	f023 0203 	bic.w	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	499d      	ldr	r1, [pc, #628]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ff4:	4b98      	ldr	r3, [pc, #608]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffa:	f023 020c 	bic.w	r2, r3, #12
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	4995      	ldr	r1, [pc, #596]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004016:	4b90      	ldr	r3, [pc, #576]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	498c      	ldr	r1, [pc, #560]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004038:	4b87      	ldr	r3, [pc, #540]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	4984      	ldr	r1, [pc, #528]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800405a:	4b7f      	ldr	r3, [pc, #508]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004060:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	497b      	ldr	r1, [pc, #492]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800407c:	4b76      	ldr	r3, [pc, #472]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004082:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	4973      	ldr	r1, [pc, #460]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800409e:	4b6e      	ldr	r3, [pc, #440]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	496a      	ldr	r1, [pc, #424]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040c0:	4b65      	ldr	r3, [pc, #404]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4962      	ldr	r1, [pc, #392]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	4959      	ldr	r1, [pc, #356]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004104:	4b54      	ldr	r3, [pc, #336]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004106:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800410a:	f023 0203 	bic.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004112:	4951      	ldr	r1, [pc, #324]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004126:	4b4c      	ldr	r3, [pc, #304]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	4948      	ldr	r1, [pc, #288]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d015      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004148:	4b43      	ldr	r3, [pc, #268]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	4940      	ldr	r1, [pc, #256]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004166:	d105      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004168:	4b3b      	ldr	r3, [pc, #236]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a3a      	ldr	r2, [pc, #232]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004172:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004180:	4b35      	ldr	r3, [pc, #212]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418e:	4932      	ldr	r1, [pc, #200]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800419e:	d105      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041b8:	4b27      	ldr	r3, [pc, #156]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c6:	4924      	ldr	r1, [pc, #144]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041f0:	4b19      	ldr	r3, [pc, #100]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fe:	4916      	ldr	r1, [pc, #88]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004210:	4b11      	ldr	r3, [pc, #68]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a10      	ldr	r2, [pc, #64]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800421a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d019      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	4908      	ldr	r1, [pc, #32]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004246:	d109      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a02      	ldr	r2, [pc, #8]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
 8004254:	e002      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d015      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004268:	4b29      	ldr	r3, [pc, #164]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	4926      	ldr	r1, [pc, #152]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004286:	d105      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004288:	4b21      	ldr	r3, [pc, #132]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4a20      	ldr	r2, [pc, #128]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004292:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d015      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ae:	4918      	ldr	r1, [pc, #96]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042be:	d105      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042c0:	4b13      	ldr	r3, [pc, #76]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d015      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e6:	490a      	ldr	r1, [pc, #40]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042f6:	d105      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f8:	4b05      	ldr	r3, [pc, #20]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a04      	ldr	r2, [pc, #16]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004302:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004304:	7cbb      	ldrb	r3, [r7, #18]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000

08004314 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d070      	beq.n	8004408 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc f976 	bl	800062c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b10      	cmp	r3, #16
 8004354:	d04f      	beq.n	80043f6 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	22ca      	movs	r2, #202	@ 0xca
 800435c:	625a      	str	r2, [r3, #36]	@ 0x24
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2253      	movs	r2, #83	@ 0x53
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f878 	bl	800445c <RTC_EnterInitMode>
 800436c:	4603      	mov	r3, r0
 800436e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d126      	bne.n	80043c4 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8004384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004388:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6999      	ldr	r1, [r3, #24]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68d9      	ldr	r1, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	041a      	lsls	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f884 	bl	80044c8 <RTC_ExitInitMode>
 80043c0:	4603      	mov	r3, r0
 80043c2:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d110      	bne.n	80043ec <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	22ff      	movs	r2, #255	@ 0xff
 80043f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80043f4:	e001      	b.n	80043fa <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8004408:	7bfb      	ldrb	r3, [r7, #15]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0d      	ldr	r2, [pc, #52]	@ (8004458 <HAL_RTC_WaitForSynchro+0x44>)
 8004422:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004424:	f7fc fca4 	bl	8000d70 <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800442a:	e009      	b.n	8004440 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800442c:	f7fc fca0 	bl	8000d70 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800443a:	d901      	bls.n	8004440 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e007      	b.n	8004450 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ee      	beq.n	800442c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	0001005f 	.word	0x0001005f

0800445c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d123      	bne.n	80044be <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004484:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004486:	f7fc fc73 	bl	8000d70 <HAL_GetTick>
 800448a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800448c:	e00d      	b.n	80044aa <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800448e:	f7fc fc6f 	bl	8000d70 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800449c:	d905      	bls.n	80044aa <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2203      	movs	r2, #3
 80044a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <RTC_EnterInitMode+0x62>
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d1e7      	bne.n	800448e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80044be:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044e2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10c      	bne.n	800450c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff ff8e 	bl	8004414 <HAL_RTC_WaitForSynchro>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d022      	beq.n	8004544 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2203      	movs	r2, #3
 8004502:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	73fb      	strb	r3, [r7, #15]
 800450a:	e01b      	b.n	8004544 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0220 	bic.w	r2, r2, #32
 800451a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff79 	bl	8004414 <HAL_RTC_WaitForSynchro>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2203      	movs	r2, #3
 800452c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0220 	orr.w	r2, r2, #32
 8004542:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e049      	b.n	80045f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7fc f895 	bl	80006a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3304      	adds	r3, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f000 ffc5 	bl	800551c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d001      	beq.n	8004614 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e04c      	b.n	80046ae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a26      	ldr	r2, [pc, #152]	@ (80046bc <HAL_TIM_Base_Start+0xc0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d022      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462e:	d01d      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a22      	ldr	r2, [pc, #136]	@ (80046c0 <HAL_TIM_Base_Start+0xc4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d018      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a21      	ldr	r2, [pc, #132]	@ (80046c4 <HAL_TIM_Base_Start+0xc8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d013      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1f      	ldr	r2, [pc, #124]	@ (80046c8 <HAL_TIM_Base_Start+0xcc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <HAL_TIM_Base_Start+0xd0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1c      	ldr	r2, [pc, #112]	@ (80046d0 <HAL_TIM_Base_Start+0xd4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1b      	ldr	r2, [pc, #108]	@ (80046d4 <HAL_TIM_Base_Start+0xd8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d115      	bne.n	8004698 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <HAL_TIM_Base_Start+0xdc>)
 8004674:	4013      	ands	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d015      	beq.n	80046aa <HAL_TIM_Base_Start+0xae>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004684:	d011      	beq.n	80046aa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004696:	e008      	b.n	80046aa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e000      	b.n	80046ac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800
 80046c8:	40000c00 	.word	0x40000c00
 80046cc:	40013400 	.word	0x40013400
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40015000 	.word	0x40015000
 80046d8:	00010007 	.word	0x00010007

080046dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e049      	b.n	8004782 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f841 	bl	800478a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f000 fefe 	bl	800551c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_TIM_PWM_Start_DMA+0x2c>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e03c      	b.n	8004846 <HAL_TIM_PWM_Start_DMA+0xa6>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d109      	bne.n	80047e6 <HAL_TIM_PWM_Start_DMA+0x46>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	bf0c      	ite	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	2300      	movne	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	e02f      	b.n	8004846 <HAL_TIM_PWM_Start_DMA+0xa6>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d109      	bne.n	8004800 <HAL_TIM_PWM_Start_DMA+0x60>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e022      	b.n	8004846 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b0c      	cmp	r3, #12
 8004804:	d109      	bne.n	800481a <HAL_TIM_PWM_Start_DMA+0x7a>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	e015      	b.n	8004846 <HAL_TIM_PWM_Start_DMA+0xa6>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b10      	cmp	r3, #16
 800481e:	d109      	bne.n	8004834 <HAL_TIM_PWM_Start_DMA+0x94>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e008      	b.n	8004846 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800484a:	2302      	movs	r3, #2
 800484c:	e1b5      	b.n	8004bba <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e03c      	b.n	80048e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d109      	bne.n	8004882 <HAL_TIM_PWM_Start_DMA+0xe2>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	bf0c      	ite	eq
 800487a:	2301      	moveq	r3, #1
 800487c:	2300      	movne	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e02f      	b.n	80048e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d109      	bne.n	800489c <HAL_TIM_PWM_Start_DMA+0xfc>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e022      	b.n	80048e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d109      	bne.n	80048b6 <HAL_TIM_PWM_Start_DMA+0x116>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	e015      	b.n	80048e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d109      	bne.n	80048d0 <HAL_TIM_PWM_Start_DMA+0x130>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e008      	b.n	80048e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d034      	beq.n	8004950 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_TIM_PWM_Start_DMA+0x152>
 80048ec:	887b      	ldrh	r3, [r7, #2]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e161      	b.n	8004bba <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start_DMA+0x166>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004904:	e026      	b.n	8004954 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start_DMA+0x176>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004914:	e01e      	b.n	8004954 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start_DMA+0x186>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004924:	e016      	b.n	8004954 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start_DMA+0x196>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004934:	e00e      	b.n	8004954 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b10      	cmp	r3, #16
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004944:	e006      	b.n	8004954 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800494e:	e001      	b.n	8004954 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e132      	b.n	8004bba <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	f200 80ae 	bhi.w	8004ab8 <HAL_TIM_PWM_Start_DMA+0x318>
 800495c:	a201      	add	r2, pc, #4	@ (adr r2, 8004964 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08004999 	.word	0x08004999
 8004968:	08004ab9 	.word	0x08004ab9
 800496c:	08004ab9 	.word	0x08004ab9
 8004970:	08004ab9 	.word	0x08004ab9
 8004974:	080049e1 	.word	0x080049e1
 8004978:	08004ab9 	.word	0x08004ab9
 800497c:	08004ab9 	.word	0x08004ab9
 8004980:	08004ab9 	.word	0x08004ab9
 8004984:	08004a29 	.word	0x08004a29
 8004988:	08004ab9 	.word	0x08004ab9
 800498c:	08004ab9 	.word	0x08004ab9
 8004990:	08004ab9 	.word	0x08004ab9
 8004994:	08004a71 	.word	0x08004a71
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	4a89      	ldr	r2, [pc, #548]	@ (8004bc4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800499e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	4a88      	ldr	r2, [pc, #544]	@ (8004bc8 <HAL_TIM_PWM_Start_DMA+0x428>)
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	4a87      	ldr	r2, [pc, #540]	@ (8004bcc <HAL_TIM_PWM_Start_DMA+0x42c>)
 80049ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3334      	adds	r3, #52	@ 0x34
 80049bc:	461a      	mov	r2, r3
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	f7fc fc08 	bl	80011d4 <HAL_DMA_Start_IT>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0f5      	b.n	8004bba <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049dc:	60da      	str	r2, [r3, #12]
      break;
 80049de:	e06e      	b.n	8004abe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	4a77      	ldr	r2, [pc, #476]	@ (8004bc4 <HAL_TIM_PWM_Start_DMA+0x424>)
 80049e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ec:	4a76      	ldr	r2, [pc, #472]	@ (8004bc8 <HAL_TIM_PWM_Start_DMA+0x428>)
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	4a75      	ldr	r2, [pc, #468]	@ (8004bcc <HAL_TIM_PWM_Start_DMA+0x42c>)
 80049f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3338      	adds	r3, #56	@ 0x38
 8004a04:	461a      	mov	r2, r3
 8004a06:	887b      	ldrh	r3, [r7, #2]
 8004a08:	f7fc fbe4 	bl	80011d4 <HAL_DMA_Start_IT>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e0d1      	b.n	8004bba <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a24:	60da      	str	r2, [r3, #12]
      break;
 8004a26:	e04a      	b.n	8004abe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	4a65      	ldr	r2, [pc, #404]	@ (8004bc4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	4a64      	ldr	r2, [pc, #400]	@ (8004bc8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	4a63      	ldr	r2, [pc, #396]	@ (8004bcc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004a3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	333c      	adds	r3, #60	@ 0x3c
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	887b      	ldrh	r3, [r7, #2]
 8004a50:	f7fc fbc0 	bl	80011d4 <HAL_DMA_Start_IT>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0ad      	b.n	8004bba <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a6c:	60da      	str	r2, [r3, #12]
      break;
 8004a6e:	e026      	b.n	8004abe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	4a53      	ldr	r2, [pc, #332]	@ (8004bc4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004a76:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	4a52      	ldr	r2, [pc, #328]	@ (8004bc8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004a7e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	4a51      	ldr	r2, [pc, #324]	@ (8004bcc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004a86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3340      	adds	r3, #64	@ 0x40
 8004a94:	461a      	mov	r2, r3
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	f7fc fb9c 	bl	80011d4 <HAL_DMA_Start_IT>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e089      	b.n	8004bba <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ab4:	60da      	str	r2, [r3, #12]
      break;
 8004ab6:	e002      	b.n	8004abe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
      break;
 8004abc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d179      	bne.n	8004bb8 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 f99f 	bl	8005e10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8004bd0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d018      	beq.n	8004b0e <HAL_TIM_PWM_Start_DMA+0x36e>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <HAL_TIM_PWM_Start_DMA+0x36e>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a3b      	ldr	r2, [pc, #236]	@ (8004bd8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00e      	beq.n	8004b0e <HAL_TIM_PWM_Start_DMA+0x36e>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a39      	ldr	r2, [pc, #228]	@ (8004bdc <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d009      	beq.n	8004b0e <HAL_TIM_PWM_Start_DMA+0x36e>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a38      	ldr	r2, [pc, #224]	@ (8004be0 <HAL_TIM_PWM_Start_DMA+0x440>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_TIM_PWM_Start_DMA+0x36e>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a36      	ldr	r2, [pc, #216]	@ (8004be4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_PWM_Start_DMA+0x372>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <HAL_TIM_PWM_Start_DMA+0x374>
 8004b12:	2300      	movs	r3, #0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b26:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a28      	ldr	r2, [pc, #160]	@ (8004bd0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d022      	beq.n	8004b78 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3a:	d01d      	beq.n	8004b78 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a29      	ldr	r2, [pc, #164]	@ (8004be8 <HAL_TIM_PWM_Start_DMA+0x448>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d018      	beq.n	8004b78 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a28      	ldr	r2, [pc, #160]	@ (8004bec <HAL_TIM_PWM_Start_DMA+0x44c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a26      	ldr	r2, [pc, #152]	@ (8004bf0 <HAL_TIM_PWM_Start_DMA+0x450>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00e      	beq.n	8004b78 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1c      	ldr	r2, [pc, #112]	@ (8004be4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d115      	bne.n	8004ba4 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf4 <HAL_TIM_PWM_Start_DMA+0x454>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d015      	beq.n	8004bb6 <HAL_TIM_PWM_Start_DMA+0x416>
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b90:	d011      	beq.n	8004bb6 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	e008      	b.n	8004bb6 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e000      	b.n	8004bb8 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	0800540b 	.word	0x0800540b
 8004bc8:	080054b3 	.word	0x080054b3
 8004bcc:	08005379 	.word	0x08005379
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800
 8004be4:	40015000 	.word	0x40015000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	00010007 	.word	0x00010007

08004bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d020      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01b      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0202 	mvn.w	r2, #2
 8004c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fb66 	bl	8005314 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fb58 	bl	8005300 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fb69 	bl	8005328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d020      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01b      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0204 	mvn.w	r2, #4
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fb40 	bl	8005314 <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fb32 	bl	8005300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fb43 	bl	8005328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0208 	mvn.w	r2, #8
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fb1a 	bl	8005314 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fb0c 	bl	8005300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fb1d 	bl	8005328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d020      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0210 	mvn.w	r2, #16
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2208      	movs	r2, #8
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 faf4 	bl	8005314 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fae6 	bl	8005300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 faf7 	bl	8005328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0201 	mvn.w	r2, #1
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fac4 	bl	80052ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d104      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f001 f905 	bl	8005f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00c      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f001 f8fd 	bl	8005fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00c      	beq.n	8004dda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fabb 	bl	8005350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f06f 0220 	mvn.w	r2, #32
 8004df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f001 f8c5 	bl	8005f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00c      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 f8d1 	bl	8005fc4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00c      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f001 f8c9 	bl	8005fd8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f001 f8c1 	bl	8005fec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00c      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f001 f8b9 	bl	8006000 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e0ff      	b.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b14      	cmp	r3, #20
 8004ec2:	f200 80f0 	bhi.w	80050a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004f21 	.word	0x08004f21
 8004ed0:	080050a7 	.word	0x080050a7
 8004ed4:	080050a7 	.word	0x080050a7
 8004ed8:	080050a7 	.word	0x080050a7
 8004edc:	08004f61 	.word	0x08004f61
 8004ee0:	080050a7 	.word	0x080050a7
 8004ee4:	080050a7 	.word	0x080050a7
 8004ee8:	080050a7 	.word	0x080050a7
 8004eec:	08004fa3 	.word	0x08004fa3
 8004ef0:	080050a7 	.word	0x080050a7
 8004ef4:	080050a7 	.word	0x080050a7
 8004ef8:	080050a7 	.word	0x080050a7
 8004efc:	08004fe3 	.word	0x08004fe3
 8004f00:	080050a7 	.word	0x080050a7
 8004f04:	080050a7 	.word	0x080050a7
 8004f08:	080050a7 	.word	0x080050a7
 8004f0c:	08005025 	.word	0x08005025
 8004f10:	080050a7 	.word	0x080050a7
 8004f14:	080050a7 	.word	0x080050a7
 8004f18:	080050a7 	.word	0x080050a7
 8004f1c:	08005065 	.word	0x08005065
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fbac 	bl	8005684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0208 	orr.w	r2, r2, #8
 8004f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0204 	bic.w	r2, r2, #4
 8004f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6999      	ldr	r1, [r3, #24]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	619a      	str	r2, [r3, #24]
      break;
 8004f5e:	e0a5      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fc26 	bl	80057b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6999      	ldr	r1, [r3, #24]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	021a      	lsls	r2, r3, #8
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	619a      	str	r2, [r3, #24]
      break;
 8004fa0:	e084      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fc99 	bl	80058e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0208 	orr.w	r2, r2, #8
 8004fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0204 	bic.w	r2, r2, #4
 8004fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	61da      	str	r2, [r3, #28]
      break;
 8004fe0:	e064      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fd0b 	bl	8005a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800500c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69d9      	ldr	r1, [r3, #28]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	021a      	lsls	r2, r3, #8
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	61da      	str	r2, [r3, #28]
      break;
 8005022:	e043      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fd7e 	bl	8005b2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0208 	orr.w	r2, r2, #8
 800503e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0204 	bic.w	r2, r2, #4
 800504e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005062:	e023      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fdc8 	bl	8005c00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800507e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800508e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	021a      	lsls	r2, r3, #8
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80050a4:	e002      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
      break;
 80050aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop

080050c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_ConfigClockSource+0x1c>
 80050d8:	2302      	movs	r3, #2
 80050da:	e0f6      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x20a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80050fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a6f      	ldr	r2, [pc, #444]	@ (80052d4 <HAL_TIM_ConfigClockSource+0x214>)
 8005116:	4293      	cmp	r3, r2
 8005118:	f000 80c1 	beq.w	800529e <HAL_TIM_ConfigClockSource+0x1de>
 800511c:	4a6d      	ldr	r2, [pc, #436]	@ (80052d4 <HAL_TIM_ConfigClockSource+0x214>)
 800511e:	4293      	cmp	r3, r2
 8005120:	f200 80c6 	bhi.w	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005124:	4a6c      	ldr	r2, [pc, #432]	@ (80052d8 <HAL_TIM_ConfigClockSource+0x218>)
 8005126:	4293      	cmp	r3, r2
 8005128:	f000 80b9 	beq.w	800529e <HAL_TIM_ConfigClockSource+0x1de>
 800512c:	4a6a      	ldr	r2, [pc, #424]	@ (80052d8 <HAL_TIM_ConfigClockSource+0x218>)
 800512e:	4293      	cmp	r3, r2
 8005130:	f200 80be 	bhi.w	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005134:	4a69      	ldr	r2, [pc, #420]	@ (80052dc <HAL_TIM_ConfigClockSource+0x21c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	f000 80b1 	beq.w	800529e <HAL_TIM_ConfigClockSource+0x1de>
 800513c:	4a67      	ldr	r2, [pc, #412]	@ (80052dc <HAL_TIM_ConfigClockSource+0x21c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	f200 80b6 	bhi.w	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005144:	4a66      	ldr	r2, [pc, #408]	@ (80052e0 <HAL_TIM_ConfigClockSource+0x220>)
 8005146:	4293      	cmp	r3, r2
 8005148:	f000 80a9 	beq.w	800529e <HAL_TIM_ConfigClockSource+0x1de>
 800514c:	4a64      	ldr	r2, [pc, #400]	@ (80052e0 <HAL_TIM_ConfigClockSource+0x220>)
 800514e:	4293      	cmp	r3, r2
 8005150:	f200 80ae 	bhi.w	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005154:	4a63      	ldr	r2, [pc, #396]	@ (80052e4 <HAL_TIM_ConfigClockSource+0x224>)
 8005156:	4293      	cmp	r3, r2
 8005158:	f000 80a1 	beq.w	800529e <HAL_TIM_ConfigClockSource+0x1de>
 800515c:	4a61      	ldr	r2, [pc, #388]	@ (80052e4 <HAL_TIM_ConfigClockSource+0x224>)
 800515e:	4293      	cmp	r3, r2
 8005160:	f200 80a6 	bhi.w	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005164:	4a60      	ldr	r2, [pc, #384]	@ (80052e8 <HAL_TIM_ConfigClockSource+0x228>)
 8005166:	4293      	cmp	r3, r2
 8005168:	f000 8099 	beq.w	800529e <HAL_TIM_ConfigClockSource+0x1de>
 800516c:	4a5e      	ldr	r2, [pc, #376]	@ (80052e8 <HAL_TIM_ConfigClockSource+0x228>)
 800516e:	4293      	cmp	r3, r2
 8005170:	f200 809e 	bhi.w	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005174:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005178:	f000 8091 	beq.w	800529e <HAL_TIM_ConfigClockSource+0x1de>
 800517c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005180:	f200 8096 	bhi.w	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005184:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005188:	f000 8089 	beq.w	800529e <HAL_TIM_ConfigClockSource+0x1de>
 800518c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005190:	f200 808e 	bhi.w	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005198:	d03e      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x158>
 800519a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800519e:	f200 8087 	bhi.w	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80051a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051a6:	f000 8086 	beq.w	80052b6 <HAL_TIM_ConfigClockSource+0x1f6>
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ae:	d87f      	bhi.n	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80051b0:	2b70      	cmp	r3, #112	@ 0x70
 80051b2:	d01a      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x12a>
 80051b4:	2b70      	cmp	r3, #112	@ 0x70
 80051b6:	d87b      	bhi.n	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80051b8:	2b60      	cmp	r3, #96	@ 0x60
 80051ba:	d050      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x19e>
 80051bc:	2b60      	cmp	r3, #96	@ 0x60
 80051be:	d877      	bhi.n	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80051c0:	2b50      	cmp	r3, #80	@ 0x50
 80051c2:	d03c      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x17e>
 80051c4:	2b50      	cmp	r3, #80	@ 0x50
 80051c6:	d873      	bhi.n	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80051c8:	2b40      	cmp	r3, #64	@ 0x40
 80051ca:	d058      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x1be>
 80051cc:	2b40      	cmp	r3, #64	@ 0x40
 80051ce:	d86f      	bhi.n	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80051d0:	2b30      	cmp	r3, #48	@ 0x30
 80051d2:	d064      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x1de>
 80051d4:	2b30      	cmp	r3, #48	@ 0x30
 80051d6:	d86b      	bhi.n	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d060      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x1de>
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d867      	bhi.n	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d05c      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x1de>
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d05a      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x1de>
 80051e8:	e062      	b.n	80052b0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051fa:	f000 fde9 	bl	8005dd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800520c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	609a      	str	r2, [r3, #8]
      break;
 8005216:	e04f      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005228:	f000 fdd2 	bl	8005dd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800523a:	609a      	str	r2, [r3, #8]
      break;
 800523c:	e03c      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800524a:	461a      	mov	r2, r3
 800524c:	f000 fd44 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2150      	movs	r1, #80	@ 0x50
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fd9d 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 800525c:	e02c      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800526a:	461a      	mov	r2, r3
 800526c:	f000 fd63 	bl	8005d36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2160      	movs	r1, #96	@ 0x60
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fd8d 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 800527c:	e01c      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800528a:	461a      	mov	r2, r3
 800528c:	f000 fd24 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2140      	movs	r1, #64	@ 0x40
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fd7d 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 800529c:	e00c      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f000 fd74 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 80052ae:	e003      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
      break;
 80052b4:	e000      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80052b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	00100070 	.word	0x00100070
 80052d8:	00100060 	.word	0x00100060
 80052dc:	00100050 	.word	0x00100050
 80052e0:	00100040 	.word	0x00100040
 80052e4:	00100030 	.word	0x00100030
 80052e8:	00100020 	.word	0x00100020

080052ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d107      	bne.n	80053a0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800539e:	e02a      	b.n	80053f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d107      	bne.n	80053ba <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2202      	movs	r2, #2
 80053ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053b8:	e01d      	b.n	80053f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d107      	bne.n	80053d4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2204      	movs	r2, #4
 80053c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053d2:	e010      	b.n	80053f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d107      	bne.n	80053ee <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2208      	movs	r2, #8
 80053e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053ec:	e003      	b.n	80053f6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7ff ffb4 	bl	8005364 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	771a      	strb	r2, [r3, #28]
}
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005416:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d10b      	bne.n	800543a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d136      	bne.n	800549e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005438:	e031      	b.n	800549e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	d10b      	bne.n	800545c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2202      	movs	r2, #2
 8005448:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d125      	bne.n	800549e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800545a:	e020      	b.n	800549e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	429a      	cmp	r2, r3
 8005464:	d10b      	bne.n	800547e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2204      	movs	r2, #4
 800546a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d114      	bne.n	800549e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800547c:	e00f      	b.n	800549e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d10a      	bne.n	800549e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2208      	movs	r2, #8
 800548c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d103      	bne.n	800549e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff ff42 	bl	8005328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	771a      	strb	r2, [r3, #28]
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d103      	bne.n	80054d2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	771a      	strb	r2, [r3, #28]
 80054d0:	e019      	b.n	8005506 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d103      	bne.n	80054e4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2202      	movs	r2, #2
 80054e0:	771a      	strb	r2, [r3, #28]
 80054e2:	e010      	b.n	8005506 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d103      	bne.n	80054f6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2204      	movs	r2, #4
 80054f2:	771a      	strb	r2, [r3, #28]
 80054f4:	e007      	b.n	8005506 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d102      	bne.n	8005506 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2208      	movs	r2, #8
 8005504:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff ff18 	bl	800533c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	771a      	strb	r2, [r3, #28]
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a4c      	ldr	r2, [pc, #304]	@ (8005660 <TIM_Base_SetConfig+0x144>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d017      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800553a:	d013      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a49      	ldr	r2, [pc, #292]	@ (8005664 <TIM_Base_SetConfig+0x148>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00f      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a48      	ldr	r2, [pc, #288]	@ (8005668 <TIM_Base_SetConfig+0x14c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00b      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a47      	ldr	r2, [pc, #284]	@ (800566c <TIM_Base_SetConfig+0x150>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d007      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a46      	ldr	r2, [pc, #280]	@ (8005670 <TIM_Base_SetConfig+0x154>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a45      	ldr	r2, [pc, #276]	@ (8005674 <TIM_Base_SetConfig+0x158>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d108      	bne.n	8005576 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a39      	ldr	r2, [pc, #228]	@ (8005660 <TIM_Base_SetConfig+0x144>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d023      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005584:	d01f      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a36      	ldr	r2, [pc, #216]	@ (8005664 <TIM_Base_SetConfig+0x148>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01b      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a35      	ldr	r2, [pc, #212]	@ (8005668 <TIM_Base_SetConfig+0x14c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d017      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a34      	ldr	r2, [pc, #208]	@ (800566c <TIM_Base_SetConfig+0x150>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a33      	ldr	r2, [pc, #204]	@ (8005670 <TIM_Base_SetConfig+0x154>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a33      	ldr	r2, [pc, #204]	@ (8005678 <TIM_Base_SetConfig+0x15c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a32      	ldr	r2, [pc, #200]	@ (800567c <TIM_Base_SetConfig+0x160>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a31      	ldr	r2, [pc, #196]	@ (8005680 <TIM_Base_SetConfig+0x164>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005674 <TIM_Base_SetConfig+0x158>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d108      	bne.n	80055d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a18      	ldr	r2, [pc, #96]	@ (8005660 <TIM_Base_SetConfig+0x144>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <TIM_Base_SetConfig+0x110>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a1a      	ldr	r2, [pc, #104]	@ (8005670 <TIM_Base_SetConfig+0x154>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00f      	beq.n	800562c <TIM_Base_SetConfig+0x110>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a1a      	ldr	r2, [pc, #104]	@ (8005678 <TIM_Base_SetConfig+0x15c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00b      	beq.n	800562c <TIM_Base_SetConfig+0x110>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a19      	ldr	r2, [pc, #100]	@ (800567c <TIM_Base_SetConfig+0x160>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_Base_SetConfig+0x110>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a18      	ldr	r2, [pc, #96]	@ (8005680 <TIM_Base_SetConfig+0x164>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0x110>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a13      	ldr	r2, [pc, #76]	@ (8005674 <TIM_Base_SetConfig+0x158>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d103      	bne.n	8005634 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f023 0201 	bic.w	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]
  }
}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40013400 	.word	0x40013400
 8005674:	40015000 	.word	0x40015000
 8005678:	40014000 	.word	0x40014000
 800567c:	40014400 	.word	0x40014400
 8005680:	40014800 	.word	0x40014800

08005684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f023 0201 	bic.w	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0303 	bic.w	r3, r3, #3
 80056be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f023 0302 	bic.w	r3, r3, #2
 80056d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a30      	ldr	r2, [pc, #192]	@ (80057a0 <TIM_OC1_SetConfig+0x11c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <TIM_OC1_SetConfig+0x88>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a2f      	ldr	r2, [pc, #188]	@ (80057a4 <TIM_OC1_SetConfig+0x120>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_OC1_SetConfig+0x88>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a2e      	ldr	r2, [pc, #184]	@ (80057a8 <TIM_OC1_SetConfig+0x124>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_OC1_SetConfig+0x88>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a2d      	ldr	r2, [pc, #180]	@ (80057ac <TIM_OC1_SetConfig+0x128>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_OC1_SetConfig+0x88>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a2c      	ldr	r2, [pc, #176]	@ (80057b0 <TIM_OC1_SetConfig+0x12c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_OC1_SetConfig+0x88>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a2b      	ldr	r2, [pc, #172]	@ (80057b4 <TIM_OC1_SetConfig+0x130>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10c      	bne.n	8005726 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f023 0308 	bic.w	r3, r3, #8
 8005712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 0304 	bic.w	r3, r3, #4
 8005724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a1d      	ldr	r2, [pc, #116]	@ (80057a0 <TIM_OC1_SetConfig+0x11c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <TIM_OC1_SetConfig+0xd2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a1c      	ldr	r2, [pc, #112]	@ (80057a4 <TIM_OC1_SetConfig+0x120>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00f      	beq.n	8005756 <TIM_OC1_SetConfig+0xd2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1b      	ldr	r2, [pc, #108]	@ (80057a8 <TIM_OC1_SetConfig+0x124>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_OC1_SetConfig+0xd2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a1a      	ldr	r2, [pc, #104]	@ (80057ac <TIM_OC1_SetConfig+0x128>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <TIM_OC1_SetConfig+0xd2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a19      	ldr	r2, [pc, #100]	@ (80057b0 <TIM_OC1_SetConfig+0x12c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_OC1_SetConfig+0xd2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a18      	ldr	r2, [pc, #96]	@ (80057b4 <TIM_OC1_SetConfig+0x130>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d111      	bne.n	800577a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800575c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40012c00 	.word	0x40012c00
 80057a4:	40013400 	.word	0x40013400
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800
 80057b4:	40015000 	.word	0x40015000

080057b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	f023 0210 	bic.w	r2, r3, #16
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 0320 	bic.w	r3, r3, #32
 8005806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a2c      	ldr	r2, [pc, #176]	@ (80058c8 <TIM_OC2_SetConfig+0x110>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d007      	beq.n	800582c <TIM_OC2_SetConfig+0x74>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a2b      	ldr	r2, [pc, #172]	@ (80058cc <TIM_OC2_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_OC2_SetConfig+0x74>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2a      	ldr	r2, [pc, #168]	@ (80058d0 <TIM_OC2_SetConfig+0x118>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d10d      	bne.n	8005848 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005846:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a1f      	ldr	r2, [pc, #124]	@ (80058c8 <TIM_OC2_SetConfig+0x110>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <TIM_OC2_SetConfig+0xc0>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a1e      	ldr	r2, [pc, #120]	@ (80058cc <TIM_OC2_SetConfig+0x114>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00f      	beq.n	8005878 <TIM_OC2_SetConfig+0xc0>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a1e      	ldr	r2, [pc, #120]	@ (80058d4 <TIM_OC2_SetConfig+0x11c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00b      	beq.n	8005878 <TIM_OC2_SetConfig+0xc0>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a1d      	ldr	r2, [pc, #116]	@ (80058d8 <TIM_OC2_SetConfig+0x120>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_OC2_SetConfig+0xc0>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a1c      	ldr	r2, [pc, #112]	@ (80058dc <TIM_OC2_SetConfig+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_OC2_SetConfig+0xc0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a17      	ldr	r2, [pc, #92]	@ (80058d0 <TIM_OC2_SetConfig+0x118>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d113      	bne.n	80058a0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800587e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40015000 	.word	0x40015000
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800

080058e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800590e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800592c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2b      	ldr	r2, [pc, #172]	@ (80059ec <TIM_OC3_SetConfig+0x10c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <TIM_OC3_SetConfig+0x72>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2a      	ldr	r2, [pc, #168]	@ (80059f0 <TIM_OC3_SetConfig+0x110>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC3_SetConfig+0x72>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a29      	ldr	r2, [pc, #164]	@ (80059f4 <TIM_OC3_SetConfig+0x114>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10d      	bne.n	800596e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800596c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a1e      	ldr	r2, [pc, #120]	@ (80059ec <TIM_OC3_SetConfig+0x10c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <TIM_OC3_SetConfig+0xbe>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1d      	ldr	r2, [pc, #116]	@ (80059f0 <TIM_OC3_SetConfig+0x110>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00f      	beq.n	800599e <TIM_OC3_SetConfig+0xbe>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1d      	ldr	r2, [pc, #116]	@ (80059f8 <TIM_OC3_SetConfig+0x118>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00b      	beq.n	800599e <TIM_OC3_SetConfig+0xbe>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1c      	ldr	r2, [pc, #112]	@ (80059fc <TIM_OC3_SetConfig+0x11c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d007      	beq.n	800599e <TIM_OC3_SetConfig+0xbe>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1b      	ldr	r2, [pc, #108]	@ (8005a00 <TIM_OC3_SetConfig+0x120>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <TIM_OC3_SetConfig+0xbe>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a16      	ldr	r2, [pc, #88]	@ (80059f4 <TIM_OC3_SetConfig+0x114>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d113      	bne.n	80059c6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40013400 	.word	0x40013400
 80059f4:	40015000 	.word	0x40015000
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400
 8005a00:	40014800 	.word	0x40014800

08005a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	031b      	lsls	r3, r3, #12
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a2c      	ldr	r2, [pc, #176]	@ (8005b14 <TIM_OC4_SetConfig+0x110>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_OC4_SetConfig+0x74>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8005b18 <TIM_OC4_SetConfig+0x114>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC4_SetConfig+0x74>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a2a      	ldr	r2, [pc, #168]	@ (8005b1c <TIM_OC4_SetConfig+0x118>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d10d      	bne.n	8005a94 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	031b      	lsls	r3, r3, #12
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1f      	ldr	r2, [pc, #124]	@ (8005b14 <TIM_OC4_SetConfig+0x110>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d013      	beq.n	8005ac4 <TIM_OC4_SetConfig+0xc0>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005b18 <TIM_OC4_SetConfig+0x114>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00f      	beq.n	8005ac4 <TIM_OC4_SetConfig+0xc0>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b20 <TIM_OC4_SetConfig+0x11c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_OC4_SetConfig+0xc0>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a1d      	ldr	r2, [pc, #116]	@ (8005b24 <TIM_OC4_SetConfig+0x120>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_OC4_SetConfig+0xc0>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b28 <TIM_OC4_SetConfig+0x124>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC4_SetConfig+0xc0>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a17      	ldr	r2, [pc, #92]	@ (8005b1c <TIM_OC4_SetConfig+0x118>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d113      	bne.n	8005aec <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ad2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	019b      	lsls	r3, r3, #6
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40013400 	.word	0x40013400
 8005b1c:	40015000 	.word	0x40015000
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800

08005b2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a19      	ldr	r2, [pc, #100]	@ (8005be8 <TIM_OC5_SetConfig+0xbc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <TIM_OC5_SetConfig+0x82>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a18      	ldr	r2, [pc, #96]	@ (8005bec <TIM_OC5_SetConfig+0xc0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00f      	beq.n	8005bae <TIM_OC5_SetConfig+0x82>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a17      	ldr	r2, [pc, #92]	@ (8005bf0 <TIM_OC5_SetConfig+0xc4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00b      	beq.n	8005bae <TIM_OC5_SetConfig+0x82>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a16      	ldr	r2, [pc, #88]	@ (8005bf4 <TIM_OC5_SetConfig+0xc8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d007      	beq.n	8005bae <TIM_OC5_SetConfig+0x82>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a15      	ldr	r2, [pc, #84]	@ (8005bf8 <TIM_OC5_SetConfig+0xcc>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d003      	beq.n	8005bae <TIM_OC5_SetConfig+0x82>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a14      	ldr	r2, [pc, #80]	@ (8005bfc <TIM_OC5_SetConfig+0xd0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d109      	bne.n	8005bc2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	621a      	str	r2, [r3, #32]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40013400 	.word	0x40013400
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40014400 	.word	0x40014400
 8005bf8:	40014800 	.word	0x40014800
 8005bfc:	40015000 	.word	0x40015000

08005c00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	051b      	lsls	r3, r3, #20
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc0 <TIM_OC6_SetConfig+0xc0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d013      	beq.n	8005c84 <TIM_OC6_SetConfig+0x84>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a19      	ldr	r2, [pc, #100]	@ (8005cc4 <TIM_OC6_SetConfig+0xc4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00f      	beq.n	8005c84 <TIM_OC6_SetConfig+0x84>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a18      	ldr	r2, [pc, #96]	@ (8005cc8 <TIM_OC6_SetConfig+0xc8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00b      	beq.n	8005c84 <TIM_OC6_SetConfig+0x84>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a17      	ldr	r2, [pc, #92]	@ (8005ccc <TIM_OC6_SetConfig+0xcc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d007      	beq.n	8005c84 <TIM_OC6_SetConfig+0x84>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a16      	ldr	r2, [pc, #88]	@ (8005cd0 <TIM_OC6_SetConfig+0xd0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC6_SetConfig+0x84>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a15      	ldr	r2, [pc, #84]	@ (8005cd4 <TIM_OC6_SetConfig+0xd4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d109      	bne.n	8005c98 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	029b      	lsls	r3, r3, #10
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40012c00 	.word	0x40012c00
 8005cc4:	40013400 	.word	0x40013400
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40014400 	.word	0x40014400
 8005cd0:	40014800 	.word	0x40014800
 8005cd4:	40015000 	.word	0x40015000

08005cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f023 0201 	bic.w	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f023 030a 	bic.w	r3, r3, #10
 8005d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b087      	sub	sp, #28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f023 0210 	bic.w	r2, r3, #16
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	031b      	lsls	r3, r3, #12
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f043 0307 	orr.w	r3, r3, #7
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	609a      	str	r2, [r3, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	021a      	lsls	r2, r3, #8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	609a      	str	r2, [r3, #8]
}
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	2201      	movs	r2, #1
 8005e24:	fa02 f303 	lsl.w	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1a      	ldr	r2, [r3, #32]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	401a      	ands	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 031f 	and.w	r3, r3, #31
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	fa01 f303 	lsl.w	r3, r1, r3
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e074      	b.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a34      	ldr	r2, [pc, #208]	@ (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a33      	ldr	r2, [pc, #204]	@ (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a31      	ldr	r2, [pc, #196]	@ (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d108      	bne.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005eb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a21      	ldr	r2, [pc, #132]	@ (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d022      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef4:	d01d      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1f      	ldr	r2, [pc, #124]	@ (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d018      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1d      	ldr	r2, [pc, #116]	@ (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a15      	ldr	r2, [pc, #84]	@ (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a18      	ldr	r2, [pc, #96]	@ (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a11      	ldr	r2, [pc, #68]	@ (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d10c      	bne.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40012c00 	.word	0x40012c00
 8005f70:	40013400 	.word	0x40013400
 8005f74:	40015000 	.word	0x40015000
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40014000 	.word	0x40014000

08005f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006024:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006028:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	b29a      	uxth	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800604a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800604e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	b29b      	uxth	r3, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	b29b      	uxth	r3, r3
 8006060:	4013      	ands	r3, r2
 8006062:	b29a      	uxth	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	1d3b      	adds	r3, r7, #4
 8006082:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b09d      	sub	sp, #116	@ 0x74
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80060d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060da:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	78db      	ldrb	r3, [r3, #3]
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d81f      	bhi.n	8006126 <USB_ActivateEndpoint+0x72>
 80060e6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <USB_ActivateEndpoint+0x38>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	080060fd 	.word	0x080060fd
 80060f0:	08006119 	.word	0x08006119
 80060f4:	0800612f 	.word	0x0800612f
 80060f8:	0800610b 	.word	0x0800610b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80060fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006100:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006104:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006108:	e012      	b.n	8006130 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800610a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800610e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006112:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006116:	e00b      	b.n	8006130 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006118:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800611c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006120:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006124:	e004      	b.n	8006130 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800612c:	e000      	b.n	8006130 <USB_ActivateEndpoint+0x7c>
      break;
 800612e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800613e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800614a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800614e:	b29b      	uxth	r3, r3
 8006150:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	b21b      	sxth	r3, r3
 8006162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800616a:	b21a      	sxth	r2, r3
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	b21b      	sxth	r3, r3
 8006172:	4313      	orrs	r3, r2
 8006174:	b21b      	sxth	r3, r3
 8006176:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	441a      	add	r2, r3
 8006184:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800618c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006198:	b29b      	uxth	r3, r3
 800619a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	7b1b      	ldrb	r3, [r3, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f040 8178 	bne.w	8006496 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8084 	beq.w	80062b8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	4413      	add	r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	00da      	lsls	r2, r3, #3
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	88db      	ldrh	r3, [r3, #6]
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	b29b      	uxth	r3, r3
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	827b      	strh	r3, [r7, #18]
 80061f2:	8a7b      	ldrh	r3, [r7, #18]
 80061f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01b      	beq.n	8006234 <USB_ActivateEndpoint+0x180>
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006212:	823b      	strh	r3, [r7, #16]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	441a      	add	r2, r3
 800621e:	8a3b      	ldrh	r3, [r7, #16]
 8006220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800622c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006230:	b29b      	uxth	r3, r3
 8006232:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	78db      	ldrb	r3, [r3, #3]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d020      	beq.n	800627e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800624e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006252:	81bb      	strh	r3, [r7, #12]
 8006254:	89bb      	ldrh	r3, [r7, #12]
 8006256:	f083 0320 	eor.w	r3, r3, #32
 800625a:	81bb      	strh	r3, [r7, #12]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	89bb      	ldrh	r3, [r7, #12]
 8006268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800626c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006278:	b29b      	uxth	r3, r3
 800627a:	8013      	strh	r3, [r2, #0]
 800627c:	e2d5      	b.n	800682a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006294:	81fb      	strh	r3, [r7, #14]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	441a      	add	r2, r3
 80062a0:	89fb      	ldrh	r3, [r7, #14]
 80062a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	8013      	strh	r3, [r2, #0]
 80062b6:	e2b8      	b.n	800682a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	4413      	add	r3, r2
 80062ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	00da      	lsls	r2, r3, #3
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	4413      	add	r3, r2
 80062d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	88db      	ldrh	r3, [r3, #6]
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fc:	4413      	add	r3, r2
 80062fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	00da      	lsls	r2, r3, #3
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	4413      	add	r3, r2
 800630a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800631a:	b29a      	uxth	r2, r3
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	801a      	strh	r2, [r3, #0]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	2b3e      	cmp	r3, #62	@ 0x3e
 8006326:	d91d      	bls.n	8006364 <USB_ActivateEndpoint+0x2b0>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <USB_ActivateEndpoint+0x28e>
 800633c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800633e:	3b01      	subs	r3, #1
 8006340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29a      	uxth	r2, r3
 8006348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800634a:	b29b      	uxth	r3, r3
 800634c:	029b      	lsls	r3, r3, #10
 800634e:	b29b      	uxth	r3, r3
 8006350:	4313      	orrs	r3, r2
 8006352:	b29b      	uxth	r3, r3
 8006354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635c:	b29a      	uxth	r2, r3
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e026      	b.n	80063b2 <USB_ActivateEndpoint+0x2fe>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <USB_ActivateEndpoint+0x2ce>
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637a:	b29a      	uxth	r2, r3
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e017      	b.n	80063b2 <USB_ActivateEndpoint+0x2fe>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <USB_ActivateEndpoint+0x2e8>
 8006396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006398:	3301      	adds	r3, #1
 800639a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	029b      	lsls	r3, r3, #10
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	4313      	orrs	r3, r2
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	847b      	strh	r3, [r7, #34]	@ 0x22
 80063c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01b      	beq.n	8006402 <USB_ActivateEndpoint+0x34e>
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e0:	843b      	strh	r3, [r7, #32]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	441a      	add	r2, r3
 80063ec:	8c3b      	ldrh	r3, [r7, #32]
 80063ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063fe:	b29b      	uxth	r3, r3
 8006400:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d124      	bne.n	8006454 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800641c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006420:	83bb      	strh	r3, [r7, #28]
 8006422:	8bbb      	ldrh	r3, [r7, #28]
 8006424:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006428:	83bb      	strh	r3, [r7, #28]
 800642a:	8bbb      	ldrh	r3, [r7, #28]
 800642c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006430:	83bb      	strh	r3, [r7, #28]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	8bbb      	ldrh	r3, [r7, #28]
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800644a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
 8006452:	e1ea      	b.n	800682a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800646a:	83fb      	strh	r3, [r7, #30]
 800646c:	8bfb      	ldrh	r3, [r7, #30]
 800646e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006472:	83fb      	strh	r3, [r7, #30]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	441a      	add	r2, r3
 800647e:	8bfb      	ldrh	r3, [r7, #30]
 8006480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800648c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006490:	b29b      	uxth	r3, r3
 8006492:	8013      	strh	r3, [r2, #0]
 8006494:	e1c9      	b.n	800682a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	78db      	ldrb	r3, [r3, #3]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d11e      	bne.n	80064dc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	441a      	add	r2, r3
 80064c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80064c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80064d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	8013      	strh	r3, [r2, #0]
 80064da:	e01d      	b.n	8006518 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80064ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	441a      	add	r2, r3
 8006500:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800650c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006514:	b29b      	uxth	r3, r3
 8006516:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006528:	4413      	add	r3, r2
 800652a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	00da      	lsls	r2, r3, #3
 8006532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006534:	4413      	add	r3, r2
 8006536:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800653a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	891b      	ldrh	r3, [r3, #8]
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	b29b      	uxth	r3, r3
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006556:	b29b      	uxth	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800655c:	4413      	add	r3, r2
 800655e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	00da      	lsls	r2, r3, #3
 8006566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006568:	4413      	add	r3, r2
 800656a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800656e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	895b      	ldrh	r3, [r3, #10]
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	b29b      	uxth	r3, r3
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800657e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	785b      	ldrb	r3, [r3, #1]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 8093 	bne.w	80066b0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800659a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800659e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d01b      	beq.n	80065de <USB_ActivateEndpoint+0x52a>
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	441a      	add	r2, r3
 80065c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80065ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065da:	b29b      	uxth	r3, r3
 80065dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80065ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80065ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01b      	beq.n	800662e <USB_ActivateEndpoint+0x57a>
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	441a      	add	r2, r3
 8006618:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800661a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800661e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006626:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800662a:	b29b      	uxth	r3, r3
 800662c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006644:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006646:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006648:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800664c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800664e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006650:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006654:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	441a      	add	r2, r3
 8006660:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800666a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006672:	b29b      	uxth	r3, r3
 8006674:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800668c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	441a      	add	r2, r3
 8006698:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800669a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800669e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8013      	strh	r3, [r2, #0]
 80066ae:	e0bc      	b.n	800682a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80066c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80066c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01d      	beq.n	8006708 <USB_ActivateEndpoint+0x654>
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80066f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006704:	b29b      	uxth	r3, r3
 8006706:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006718:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800671c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01d      	beq.n	8006760 <USB_ActivateEndpoint+0x6ac>
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800674c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006750:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006758:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800675c:	b29b      	uxth	r3, r3
 800675e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	78db      	ldrb	r3, [r3, #3]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d024      	beq.n	80067b2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800677a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800677e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006782:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006786:	f083 0320 	eor.w	r3, r3, #32
 800678a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800679c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	8013      	strh	r3, [r2, #0]
 80067b0:	e01d      	b.n	80067ee <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067c8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	441a      	add	r2, r3
 80067d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80067da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006804:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800681a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800681e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800682a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800682e:	4618      	mov	r0, r3
 8006830:	3774      	adds	r7, #116	@ 0x74
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop

0800683c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800683c:	b480      	push	{r7}
 800683e:	b08d      	sub	sp, #52	@ 0x34
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	7b1b      	ldrb	r3, [r3, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f040 808e 	bne.w	800696c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d044      	beq.n	80068e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	81bb      	strh	r3, [r7, #12]
 8006866:	89bb      	ldrh	r3, [r7, #12]
 8006868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d01b      	beq.n	80068a8 <USB_DeactivateEndpoint+0x6c>
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006886:	817b      	strh	r3, [r7, #10]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	441a      	add	r2, r3
 8006892:	897b      	ldrh	r3, [r7, #10]
 8006894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800689c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068be:	813b      	strh	r3, [r7, #8]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	441a      	add	r2, r3
 80068ca:	893b      	ldrh	r3, [r7, #8]
 80068cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068dc:	b29b      	uxth	r3, r3
 80068de:	8013      	strh	r3, [r2, #0]
 80068e0:	e192      	b.n	8006c08 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	827b      	strh	r3, [r7, #18]
 80068f0:	8a7b      	ldrh	r3, [r7, #18]
 80068f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d01b      	beq.n	8006932 <USB_DeactivateEndpoint+0xf6>
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800690c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006910:	823b      	strh	r3, [r7, #16]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	441a      	add	r2, r3
 800691c:	8a3b      	ldrh	r3, [r7, #16]
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006926:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800692a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006948:	81fb      	strh	r3, [r7, #14]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	441a      	add	r2, r3
 8006954:	89fb      	ldrh	r3, [r7, #14]
 8006956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800695a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800695e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006966:	b29b      	uxth	r3, r3
 8006968:	8013      	strh	r3, [r2, #0]
 800696a:	e14d      	b.n	8006c08 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 80a5 	bne.w	8006ac0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	843b      	strh	r3, [r7, #32]
 8006984:	8c3b      	ldrh	r3, [r7, #32]
 8006986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01b      	beq.n	80069c6 <USB_DeactivateEndpoint+0x18a>
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a4:	83fb      	strh	r3, [r7, #30]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	441a      	add	r2, r3
 80069b0:	8bfb      	ldrh	r3, [r7, #30]
 80069b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	83bb      	strh	r3, [r7, #28]
 80069d4:	8bbb      	ldrh	r3, [r7, #28]
 80069d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01b      	beq.n	8006a16 <USB_DeactivateEndpoint+0x1da>
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f4:	837b      	strh	r3, [r7, #26]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	441a      	add	r2, r3
 8006a00:	8b7b      	ldrh	r3, [r7, #26]
 8006a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2c:	833b      	strh	r3, [r7, #24]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	441a      	add	r2, r3
 8006a38:	8b3b      	ldrh	r3, [r7, #24]
 8006a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a64:	82fb      	strh	r3, [r7, #22]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	441a      	add	r2, r3
 8006a70:	8afb      	ldrh	r3, [r7, #22]
 8006a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a9c:	82bb      	strh	r3, [r7, #20]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	441a      	add	r2, r3
 8006aa8:	8abb      	ldrh	r3, [r7, #20]
 8006aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	8013      	strh	r3, [r2, #0]
 8006abe:	e0a3      	b.n	8006c08 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006ace:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01b      	beq.n	8006b10 <USB_DeactivateEndpoint+0x2d4>
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006afc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006b1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01b      	beq.n	8006b60 <USB_DeactivateEndpoint+0x324>
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	441a      	add	r2, r3
 8006b4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006b4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b76:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	441a      	add	r2, r3
 8006b82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006baa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	441a      	add	r2, r3
 8006bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	441a      	add	r2, r3
 8006bf2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3734      	adds	r7, #52	@ 0x34
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b0c2      	sub	sp, #264	@ 0x108
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c24:	6018      	str	r0, [r3, #0]
 8006c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	f040 86b7 	bne.w	80079b0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d908      	bls.n	8006c70 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006c6e:	e007      	b.n	8006c80 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	7b1b      	ldrb	r3, [r3, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d13a      	bne.n	8006d06 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6959      	ldr	r1, [r3, #20]
 8006c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	88da      	ldrh	r2, [r3, #6]
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cb2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cb6:	6800      	ldr	r0, [r0, #0]
 8006cb8:	f001 fc98 	bl	80085ec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	4413      	add	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	00da      	lsls	r2, r3, #3
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	f000 be1f 	b.w	8007944 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	78db      	ldrb	r3, [r3, #3]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	f040 8462 	bne.w	80075dc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6a1a      	ldr	r2, [r3, #32]
 8006d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	f240 83df 	bls.w	80074f4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d5c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	441a      	add	r2, r3
 8006d7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d86:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6a1a      	ldr	r2, [r3, #32]
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da2:	1ad2      	subs	r2, r2, r3
 8006da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 81c7 	beq.w	8007166 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ddc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	785b      	ldrb	r3, [r3, #1]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d177      	bne.n	8006ee4 <USB_EPStartXfer+0x2ce>
 8006df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	4413      	add	r3, r2
 8006e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	00da      	lsls	r2, r3, #3
 8006e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e28:	4413      	add	r3, r2
 8006e2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e44:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e46:	d921      	bls.n	8006e8c <USB_EPStartXfer+0x276>
 8006e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e56:	f003 031f 	and.w	r3, r3, #31
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <USB_EPStartXfer+0x252>
 8006e5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e62:	3b01      	subs	r3, #1
 8006e64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	029b      	lsls	r3, r3, #10
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	e050      	b.n	8006f2e <USB_EPStartXfer+0x318>
 8006e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <USB_EPStartXfer+0x294>
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	801a      	strh	r2, [r3, #0]
 8006ea8:	e041      	b.n	8006f2e <USB_EPStartXfer+0x318>
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <USB_EPStartXfer+0x2b4>
 8006ec0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	029b      	lsls	r3, r3, #10
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	4313      	orrs	r3, r2
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	801a      	strh	r2, [r3, #0]
 8006ee2:	e024      	b.n	8006f2e <USB_EPStartXfer+0x318>
 8006ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d11c      	bne.n	8006f2e <USB_EPStartXfer+0x318>
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	4413      	add	r3, r2
 8006f0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	00da      	lsls	r2, r3, #3
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	895b      	ldrh	r3, [r3, #10]
 8006f3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6959      	ldr	r1, [r3, #20]
 8006f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f5c:	6800      	ldr	r0, [r0, #0]
 8006f5e:	f001 fb45 	bl	80085ec <USB_WritePMA>
            ep->xfer_buff += len;
 8006f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695a      	ldr	r2, [r3, #20]
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f72:	441a      	add	r2, r3
 8006f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6a1a      	ldr	r2, [r3, #32]
 8006f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d90f      	bls.n	8006fbc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6a1a      	ldr	r2, [r3, #32]
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fac:	1ad2      	subs	r2, r2, r3
 8006fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	621a      	str	r2, [r3, #32]
 8006fba:	e00e      	b.n	8006fda <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d177      	bne.n	80070da <USB_EPStartXfer+0x4c4>
 8006fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007004:	b29b      	uxth	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	4413      	add	r3, r2
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	00da      	lsls	r2, r3, #3
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	4413      	add	r3, r2
 8007020:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007030:	b29a      	uxth	r2, r3
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703a:	2b3e      	cmp	r3, #62	@ 0x3e
 800703c:	d921      	bls.n	8007082 <USB_EPStartXfer+0x46c>
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <USB_EPStartXfer+0x448>
 8007054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007058:	3b01      	subs	r3, #1
 800705a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29a      	uxth	r2, r3
 8007064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007068:	b29b      	uxth	r3, r3
 800706a:	029b      	lsls	r3, r3, #10
 800706c:	b29b      	uxth	r3, r3
 800706e:	4313      	orrs	r3, r2
 8007070:	b29b      	uxth	r3, r3
 8007072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707a:	b29a      	uxth	r2, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	801a      	strh	r2, [r3, #0]
 8007080:	e056      	b.n	8007130 <USB_EPStartXfer+0x51a>
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <USB_EPStartXfer+0x48a>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007098:	b29a      	uxth	r2, r3
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e047      	b.n	8007130 <USB_EPStartXfer+0x51a>
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <USB_EPStartXfer+0x4aa>
 80070b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ba:	3301      	adds	r3, #1
 80070bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	029b      	lsls	r3, r3, #10
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	4313      	orrs	r3, r2
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	e02a      	b.n	8007130 <USB_EPStartXfer+0x51a>
 80070da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d122      	bne.n	8007130 <USB_EPStartXfer+0x51a>
 80070ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	623b      	str	r3, [r7, #32]
 80070f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007104:	b29b      	uxth	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	4413      	add	r3, r2
 800710c:	623b      	str	r3, [r7, #32]
 800710e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	00da      	lsls	r2, r3, #3
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	4413      	add	r3, r2
 8007120:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007124:	61fb      	str	r3, [r7, #28]
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	b29a      	uxth	r2, r3
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	891b      	ldrh	r3, [r3, #8]
 800713c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6959      	ldr	r1, [r3, #20]
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007150:	b29b      	uxth	r3, r3
 8007152:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007156:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800715a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800715e:	6800      	ldr	r0, [r0, #0]
 8007160:	f001 fa44 	bl	80085ec <USB_WritePMA>
 8007164:	e3ee      	b.n	8007944 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d177      	bne.n	8007266 <USB_EPStartXfer+0x650>
 8007176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007190:	b29b      	uxth	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007196:	4413      	add	r3, r2
 8007198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800719a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	00da      	lsls	r2, r3, #3
 80071a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071aa:	4413      	add	r3, r2
 80071ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071bc:	b29a      	uxth	r2, r3
 80071be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80071c8:	d921      	bls.n	800720e <USB_EPStartXfer+0x5f8>
 80071ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d8:	f003 031f 	and.w	r3, r3, #31
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <USB_EPStartXfer+0x5d4>
 80071e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071e4:	3b01      	subs	r3, #1
 80071e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	029b      	lsls	r3, r3, #10
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007206:	b29a      	uxth	r2, r3
 8007208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	e056      	b.n	80072bc <USB_EPStartXfer+0x6a6>
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10a      	bne.n	800722c <USB_EPStartXfer+0x616>
 8007216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007224:	b29a      	uxth	r2, r3
 8007226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	e047      	b.n	80072bc <USB_EPStartXfer+0x6a6>
 800722c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <USB_EPStartXfer+0x636>
 8007242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007246:	3301      	adds	r3, #1
 8007248:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800724c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29a      	uxth	r2, r3
 8007252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007256:	b29b      	uxth	r3, r3
 8007258:	029b      	lsls	r3, r3, #10
 800725a:	b29b      	uxth	r3, r3
 800725c:	4313      	orrs	r3, r2
 800725e:	b29a      	uxth	r2, r3
 8007260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e02a      	b.n	80072bc <USB_EPStartXfer+0x6a6>
 8007266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d122      	bne.n	80072bc <USB_EPStartXfer+0x6a6>
 8007276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	653b      	str	r3, [r7, #80]	@ 0x50
 8007282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007290:	b29b      	uxth	r3, r3
 8007292:	461a      	mov	r2, r3
 8007294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007296:	4413      	add	r3, r2
 8007298:	653b      	str	r3, [r7, #80]	@ 0x50
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	00da      	lsls	r2, r3, #3
 80072a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072aa:	4413      	add	r3, r2
 80072ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	891b      	ldrh	r3, [r3, #8]
 80072c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6959      	ldr	r1, [r3, #20]
 80072d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072ea:	6800      	ldr	r0, [r0, #0]
 80072ec:	f001 f97e 	bl	80085ec <USB_WritePMA>
            ep->xfer_buff += len;
 80072f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	695a      	ldr	r2, [r3, #20]
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007300:	441a      	add	r2, r3
 8007302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800730e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6a1a      	ldr	r2, [r3, #32]
 800731a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	429a      	cmp	r2, r3
 8007328:	d90f      	bls.n	800734a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800732a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6a1a      	ldr	r2, [r3, #32]
 8007336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800733a:	1ad2      	subs	r2, r2, r3
 800733c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	621a      	str	r2, [r3, #32]
 8007348:	e00e      	b.n	8007368 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800735a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2200      	movs	r2, #0
 8007366:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	643b      	str	r3, [r7, #64]	@ 0x40
 8007374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d177      	bne.n	8007474 <USB_EPStartXfer+0x85e>
 8007384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800739e:	b29b      	uxth	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	4413      	add	r3, r2
 80073a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	00da      	lsls	r2, r3, #3
 80073b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b8:	4413      	add	r3, r2
 80073ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073be:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ce:	801a      	strh	r2, [r3, #0]
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80073d6:	d921      	bls.n	800741c <USB_EPStartXfer+0x806>
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073dc:	095b      	lsrs	r3, r3, #5
 80073de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e6:	f003 031f 	and.w	r3, r3, #31
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d104      	bne.n	80073f8 <USB_EPStartXfer+0x7e2>
 80073ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f2:	3b01      	subs	r3, #1
 80073f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007402:	b29b      	uxth	r3, r3
 8007404:	029b      	lsls	r3, r3, #10
 8007406:	b29b      	uxth	r3, r3
 8007408:	4313      	orrs	r3, r2
 800740a:	b29b      	uxth	r3, r3
 800740c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007414:	b29a      	uxth	r2, r3
 8007416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007418:	801a      	strh	r2, [r3, #0]
 800741a:	e050      	b.n	80074be <USB_EPStartXfer+0x8a8>
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10a      	bne.n	800743a <USB_EPStartXfer+0x824>
 8007424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007432:	b29a      	uxth	r2, r3
 8007434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007436:	801a      	strh	r2, [r3, #0]
 8007438:	e041      	b.n	80074be <USB_EPStartXfer+0x8a8>
 800743a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <USB_EPStartXfer+0x844>
 8007450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007454:	3301      	adds	r3, #1
 8007456:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800745a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29a      	uxth	r2, r3
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007464:	b29b      	uxth	r3, r3
 8007466:	029b      	lsls	r3, r3, #10
 8007468:	b29b      	uxth	r3, r3
 800746a:	4313      	orrs	r3, r2
 800746c:	b29a      	uxth	r2, r3
 800746e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	e024      	b.n	80074be <USB_EPStartXfer+0x8a8>
 8007474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d11c      	bne.n	80074be <USB_EPStartXfer+0x8a8>
 8007484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007488:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007492:	b29b      	uxth	r3, r3
 8007494:	461a      	mov	r2, r3
 8007496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007498:	4413      	add	r3, r2
 800749a:	643b      	str	r3, [r7, #64]	@ 0x40
 800749c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	00da      	lsls	r2, r3, #3
 80074aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ac:	4413      	add	r3, r2
 80074ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	895b      	ldrh	r3, [r3, #10]
 80074ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6959      	ldr	r1, [r3, #20]
 80074da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074de:	b29b      	uxth	r3, r3
 80074e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074ec:	6800      	ldr	r0, [r0, #0]
 80074ee:	f001 f87d 	bl	80085ec <USB_WritePMA>
 80074f2:	e227      	b.n	8007944 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80074f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800752e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	441a      	add	r2, r3
 8007548:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800754c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800755c:	b29b      	uxth	r3, r3
 800755e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800757a:	b29b      	uxth	r3, r3
 800757c:	461a      	mov	r2, r3
 800757e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007580:	4413      	add	r3, r2
 8007582:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	00da      	lsls	r2, r3, #3
 8007592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007594:	4413      	add	r3, r2
 8007596:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800759a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	891b      	ldrh	r3, [r3, #8]
 80075b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6959      	ldr	r1, [r3, #20]
 80075c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075d4:	6800      	ldr	r0, [r0, #0]
 80075d6:	f001 f809 	bl	80085ec <USB_WritePMA>
 80075da:	e1b3      	b.n	8007944 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80075dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6a1a      	ldr	r2, [r3, #32]
 80075e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ec:	1ad2      	subs	r2, r2, r3
 80075ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 80c6 	beq.w	80077ae <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	673b      	str	r3, [r7, #112]	@ 0x70
 800762e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d177      	bne.n	800772e <USB_EPStartXfer+0xb18>
 800763e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800764a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007658:	b29b      	uxth	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800765e:	4413      	add	r3, r2
 8007660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	00da      	lsls	r2, r3, #3
 8007670:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007672:	4413      	add	r3, r2
 8007674:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007678:	667b      	str	r3, [r7, #100]	@ 0x64
 800767a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007684:	b29a      	uxth	r2, r3
 8007686:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007688:	801a      	strh	r2, [r3, #0]
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007690:	d921      	bls.n	80076d6 <USB_EPStartXfer+0xac0>
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a0:	f003 031f 	and.w	r3, r3, #31
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <USB_EPStartXfer+0xa9c>
 80076a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80076ac:	3b01      	subs	r3, #1
 80076ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80076b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80076bc:	b29b      	uxth	r3, r3
 80076be:	029b      	lsls	r3, r3, #10
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	4313      	orrs	r3, r2
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076d2:	801a      	strh	r2, [r3, #0]
 80076d4:	e050      	b.n	8007778 <USB_EPStartXfer+0xb62>
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10a      	bne.n	80076f4 <USB_EPStartXfer+0xade>
 80076de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	e041      	b.n	8007778 <USB_EPStartXfer+0xb62>
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <USB_EPStartXfer+0xafe>
 800770a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800770e:	3301      	adds	r3, #1
 8007710:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	b29a      	uxth	r2, r3
 800771a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800771e:	b29b      	uxth	r3, r3
 8007720:	029b      	lsls	r3, r3, #10
 8007722:	b29b      	uxth	r3, r3
 8007724:	4313      	orrs	r3, r2
 8007726:	b29a      	uxth	r2, r3
 8007728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	e024      	b.n	8007778 <USB_EPStartXfer+0xb62>
 800772e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d11c      	bne.n	8007778 <USB_EPStartXfer+0xb62>
 800773e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800774c:	b29b      	uxth	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007752:	4413      	add	r3, r2
 8007754:	673b      	str	r3, [r7, #112]	@ 0x70
 8007756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	00da      	lsls	r2, r3, #3
 8007764:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007766:	4413      	add	r3, r2
 8007768:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800776c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800776e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007772:	b29a      	uxth	r2, r3
 8007774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007776:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	895b      	ldrh	r3, [r3, #10]
 8007784:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6959      	ldr	r1, [r3, #20]
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007798:	b29b      	uxth	r3, r3
 800779a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800779e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80077a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077a6:	6800      	ldr	r0, [r0, #0]
 80077a8:	f000 ff20 	bl	80085ec <USB_WritePMA>
 80077ac:	e0ca      	b.n	8007944 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	785b      	ldrb	r3, [r3, #1]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d177      	bne.n	80078ae <USB_EPStartXfer+0xc98>
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077d8:	b29b      	uxth	r3, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077de:	4413      	add	r3, r2
 80077e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	00da      	lsls	r2, r3, #3
 80077f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077f2:	4413      	add	r3, r2
 80077f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007804:	b29a      	uxth	r2, r3
 8007806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007810:	d921      	bls.n	8007856 <USB_EPStartXfer+0xc40>
 8007812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007820:	f003 031f 	and.w	r3, r3, #31
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <USB_EPStartXfer+0xc1c>
 8007828:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800782c:	3b01      	subs	r3, #1
 800782e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007832:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29a      	uxth	r2, r3
 8007838:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800783c:	b29b      	uxth	r3, r3
 800783e:	029b      	lsls	r3, r3, #10
 8007840:	b29b      	uxth	r3, r3
 8007842:	4313      	orrs	r3, r2
 8007844:	b29b      	uxth	r3, r3
 8007846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784e:	b29a      	uxth	r2, r3
 8007850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e05c      	b.n	8007910 <USB_EPStartXfer+0xcfa>
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <USB_EPStartXfer+0xc5e>
 800785e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786c:	b29a      	uxth	r2, r3
 800786e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e04d      	b.n	8007910 <USB_EPStartXfer+0xcfa>
 8007874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007878:	085b      	lsrs	r3, r3, #1
 800787a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d004      	beq.n	8007894 <USB_EPStartXfer+0xc7e>
 800788a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800788e:	3301      	adds	r3, #1
 8007890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007894:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29a      	uxth	r2, r3
 800789a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800789e:	b29b      	uxth	r3, r3
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	4313      	orrs	r3, r2
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	e030      	b.n	8007910 <USB_EPStartXfer+0xcfa>
 80078ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d128      	bne.n	8007910 <USB_EPStartXfer+0xcfa>
 80078be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078da:	b29b      	uxth	r3, r3
 80078dc:	461a      	mov	r2, r3
 80078de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078e2:	4413      	add	r3, r2
 80078e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	00da      	lsls	r2, r3, #3
 80078f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078fa:	4413      	add	r3, r2
 80078fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007900:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007908:	b29a      	uxth	r2, r3
 800790a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800790e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	891b      	ldrh	r3, [r3, #8]
 800791c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6959      	ldr	r1, [r3, #20]
 800792c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007930:	b29b      	uxth	r3, r3
 8007932:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007936:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800793a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800793e:	6800      	ldr	r0, [r0, #0]
 8007940:	f000 fe54 	bl	80085ec <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29b      	uxth	r3, r3
 8007962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800796a:	817b      	strh	r3, [r7, #10]
 800796c:	897b      	ldrh	r3, [r7, #10]
 800796e:	f083 0310 	eor.w	r3, r3, #16
 8007972:	817b      	strh	r3, [r7, #10]
 8007974:	897b      	ldrh	r3, [r7, #10]
 8007976:	f083 0320 	eor.w	r3, r3, #32
 800797a:	817b      	strh	r3, [r7, #10]
 800797c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007980:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	441a      	add	r2, r3
 8007996:	897b      	ldrh	r3, [r7, #10]
 8007998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800799c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	8013      	strh	r3, [r2, #0]
 80079ac:	f000 bcde 	b.w	800836c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80079b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	7b1b      	ldrb	r3, [r3, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 80bb 	bne.w	8007b38 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d917      	bls.n	8007a0e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80079de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80079ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699a      	ldr	r2, [r3, #24]
 80079fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	619a      	str	r2, [r3, #24]
 8007a0c:	e00e      	b.n	8007a2c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a50:	4413      	add	r3, r2
 8007a52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	00da      	lsls	r2, r3, #3
 8007a64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a68:	4413      	add	r3, r2
 8007a6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a84:	801a      	strh	r2, [r3, #0]
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a8c:	d924      	bls.n	8007ad8 <USB_EPStartXfer+0xec2>
 8007a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9c:	f003 031f 	and.w	r3, r3, #31
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <USB_EPStartXfer+0xe98>
 8007aa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	029b      	lsls	r3, r3, #10
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ad2:	801a      	strh	r2, [r3, #0]
 8007ad4:	f000 bc10 	b.w	80082f8 <USB_EPStartXfer+0x16e2>
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10c      	bne.n	8007afa <USB_EPStartXfer+0xee4>
 8007ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007af6:	801a      	strh	r2, [r3, #0]
 8007af8:	e3fe      	b.n	80082f8 <USB_EPStartXfer+0x16e2>
 8007afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afe:	085b      	lsrs	r3, r3, #1
 8007b00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d004      	beq.n	8007b1a <USB_EPStartXfer+0xf04>
 8007b10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007b14:	3301      	adds	r3, #1
 8007b16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	029b      	lsls	r3, r3, #10
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b34:	801a      	strh	r2, [r3, #0]
 8007b36:	e3df      	b.n	80082f8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	78db      	ldrb	r3, [r3, #3]
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	f040 8218 	bne.w	8007f7a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f040 809d 	bne.w	8007c96 <USB_EPStartXfer+0x1080>
 8007b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b80:	4413      	add	r3, r2
 8007b82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	00da      	lsls	r2, r3, #3
 8007b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b98:	4413      	add	r3, r2
 8007b9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bb4:	801a      	strh	r2, [r3, #0]
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bc4:	d92b      	bls.n	8007c1e <USB_EPStartXfer+0x1008>
 8007bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f003 031f 	and.w	r3, r3, #31
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <USB_EPStartXfer+0xfe0>
 8007bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	029b      	lsls	r3, r3, #10
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c1a:	801a      	strh	r2, [r3, #0]
 8007c1c:	e070      	b.n	8007d00 <USB_EPStartXfer+0x10ea>
 8007c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10c      	bne.n	8007c48 <USB_EPStartXfer+0x1032>
 8007c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c44:	801a      	strh	r2, [r3, #0]
 8007c46:	e05b      	b.n	8007d00 <USB_EPStartXfer+0x10ea>
 8007c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	085b      	lsrs	r3, r3, #1
 8007c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <USB_EPStartXfer+0x1062>
 8007c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c72:	3301      	adds	r3, #1
 8007c74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	029b      	lsls	r3, r3, #10
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	e034      	b.n	8007d00 <USB_EPStartXfer+0x10ea>
 8007c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	785b      	ldrb	r3, [r3, #1]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d12c      	bne.n	8007d00 <USB_EPStartXfer+0x10ea>
 8007ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cca:	4413      	add	r3, r2
 8007ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	00da      	lsls	r2, r3, #3
 8007cde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007cfe:	801a      	strh	r2, [r3, #0]
 8007d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	785b      	ldrb	r3, [r3, #1]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f040 809d 	bne.w	8007e5a <USB_EPStartXfer+0x1244>
 8007d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d44:	4413      	add	r3, r2
 8007d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	00da      	lsls	r2, r3, #3
 8007d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d88:	d92b      	bls.n	8007de2 <USB_EPStartXfer+0x11cc>
 8007d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	095b      	lsrs	r3, r3, #5
 8007d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f003 031f 	and.w	r3, r3, #31
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d104      	bne.n	8007dba <USB_EPStartXfer+0x11a4>
 8007db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db4:	3b01      	subs	r3, #1
 8007db6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	029b      	lsls	r3, r3, #10
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dde:	801a      	strh	r2, [r3, #0]
 8007de0:	e069      	b.n	8007eb6 <USB_EPStartXfer+0x12a0>
 8007de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10c      	bne.n	8007e0c <USB_EPStartXfer+0x11f6>
 8007df2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e08:	801a      	strh	r2, [r3, #0]
 8007e0a:	e054      	b.n	8007eb6 <USB_EPStartXfer+0x12a0>
 8007e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	085b      	lsrs	r3, r3, #1
 8007e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d004      	beq.n	8007e3c <USB_EPStartXfer+0x1226>
 8007e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e36:	3301      	adds	r3, #1
 8007e38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	029b      	lsls	r3, r3, #10
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e56:	801a      	strh	r2, [r3, #0]
 8007e58:	e02d      	b.n	8007eb6 <USB_EPStartXfer+0x12a0>
 8007e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	785b      	ldrb	r3, [r3, #1]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d125      	bne.n	8007eb6 <USB_EPStartXfer+0x12a0>
 8007e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e80:	4413      	add	r3, r2
 8007e82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	00da      	lsls	r2, r3, #3
 8007e94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e98:	4413      	add	r3, r2
 8007e9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007eb4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 8218 	beq.w	80082f8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ecc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ee8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007eec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <USB_EPStartXfer+0x12ea>
 8007ef4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10d      	bne.n	8007f1c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f00:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f040 81f5 	bne.w	80082f8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f040 81ee 	bne.w	80082f8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f42:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	441a      	add	r2, r3
 8007f60:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	8013      	strh	r3, [r2, #0]
 8007f78:	e1be      	b.n	80082f8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	78db      	ldrb	r3, [r3, #3]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	f040 81b4 	bne.w	80082f4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699a      	ldr	r2, [r3, #24]
 8007f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d917      	bls.n	8007fd8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699a      	ldr	r2, [r3, #24]
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc8:	1ad2      	subs	r2, r2, r3
 8007fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	619a      	str	r2, [r3, #24]
 8007fd6:	e00e      	b.n	8007ff6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b00      	cmp	r3, #0
 8008004:	f040 8085 	bne.w	8008112 <USB_EPStartXfer+0x14fc>
 8008008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800801a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008024:	b29b      	uxth	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800802c:	4413      	add	r3, r2
 800802e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	00da      	lsls	r2, r3, #3
 8008040:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008044:	4413      	add	r3, r2
 8008046:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800804a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800804e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800805a:	b29a      	uxth	r2, r3
 800805c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008066:	2b3e      	cmp	r3, #62	@ 0x3e
 8008068:	d923      	bls.n	80080b2 <USB_EPStartXfer+0x149c>
 800806a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806e:	095b      	lsrs	r3, r3, #5
 8008070:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008078:	f003 031f 	and.w	r3, r3, #31
 800807c:	2b00      	cmp	r3, #0
 800807e:	d104      	bne.n	800808a <USB_EPStartXfer+0x1474>
 8008080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008084:	3b01      	subs	r3, #1
 8008086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800808a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29a      	uxth	r2, r3
 8008092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008096:	b29b      	uxth	r3, r3
 8008098:	029b      	lsls	r3, r3, #10
 800809a:	b29b      	uxth	r3, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	b29b      	uxth	r3, r3
 80080a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080ae:	801a      	strh	r2, [r3, #0]
 80080b0:	e060      	b.n	8008174 <USB_EPStartXfer+0x155e>
 80080b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10c      	bne.n	80080d4 <USB_EPStartXfer+0x14be>
 80080ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	e04f      	b.n	8008174 <USB_EPStartXfer+0x155e>
 80080d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80080de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <USB_EPStartXfer+0x14de>
 80080ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080ee:	3301      	adds	r3, #1
 80080f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80080f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008100:	b29b      	uxth	r3, r3
 8008102:	029b      	lsls	r3, r3, #10
 8008104:	b29b      	uxth	r3, r3
 8008106:	4313      	orrs	r3, r2
 8008108:	b29a      	uxth	r2, r3
 800810a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800810e:	801a      	strh	r2, [r3, #0]
 8008110:	e030      	b.n	8008174 <USB_EPStartXfer+0x155e>
 8008112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d128      	bne.n	8008174 <USB_EPStartXfer+0x155e>
 8008122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800813e:	b29b      	uxth	r3, r3
 8008140:	461a      	mov	r2, r3
 8008142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008146:	4413      	add	r3, r2
 8008148:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800814c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	00da      	lsls	r2, r3, #3
 800815a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800815e:	4413      	add	r3, r2
 8008160:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816c:	b29a      	uxth	r2, r3
 800816e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008172:	801a      	strh	r2, [r3, #0]
 8008174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f040 8085 	bne.w	800829e <USB_EPStartXfer+0x1688>
 8008194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80081a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	461a      	mov	r2, r3
 80081b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081b8:	4413      	add	r3, r2
 80081ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80081be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	00da      	lsls	r2, r3, #3
 80081cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081d0:	4413      	add	r3, r2
 80081d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80081f4:	d923      	bls.n	800823e <USB_EPStartXfer+0x1628>
 80081f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <USB_EPStartXfer+0x1600>
 800820c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008210:	3b01      	subs	r3, #1
 8008212:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29a      	uxth	r2, r3
 800821e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008222:	b29b      	uxth	r3, r3
 8008224:	029b      	lsls	r3, r3, #10
 8008226:	b29b      	uxth	r3, r3
 8008228:	4313      	orrs	r3, r2
 800822a:	b29b      	uxth	r3, r3
 800822c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008234:	b29a      	uxth	r2, r3
 8008236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	e05c      	b.n	80082f8 <USB_EPStartXfer+0x16e2>
 800823e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10c      	bne.n	8008260 <USB_EPStartXfer+0x164a>
 8008246:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	b29b      	uxth	r3, r3
 800824e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008256:	b29a      	uxth	r2, r3
 8008258:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800825c:	801a      	strh	r2, [r3, #0]
 800825e:	e04b      	b.n	80082f8 <USB_EPStartXfer+0x16e2>
 8008260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800826a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <USB_EPStartXfer+0x166a>
 8008276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800827a:	3301      	adds	r3, #1
 800827c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29a      	uxth	r2, r3
 8008288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800828c:	b29b      	uxth	r3, r3
 800828e:	029b      	lsls	r3, r3, #10
 8008290:	b29b      	uxth	r3, r3
 8008292:	4313      	orrs	r3, r2
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	e02c      	b.n	80082f8 <USB_EPStartXfer+0x16e2>
 800829e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d124      	bne.n	80082f8 <USB_EPStartXfer+0x16e2>
 80082ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082bc:	b29b      	uxth	r3, r3
 80082be:	461a      	mov	r2, r3
 80082c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082c4:	4413      	add	r3, r2
 80082c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	00da      	lsls	r2, r3, #3
 80082d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082dc:	4413      	add	r3, r2
 80082de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80082f0:	801a      	strh	r2, [r3, #0]
 80082f2:	e001      	b.n	80082f8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e03a      	b.n	800836e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800831a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008322:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008326:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800832a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800832e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008332:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008336:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800833a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	441a      	add	r2, r3
 8008354:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800835c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008368:	b29b      	uxth	r3, r3
 800836a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d020      	beq.n	80083cc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800839c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083a0:	81bb      	strh	r3, [r7, #12]
 80083a2:	89bb      	ldrh	r3, [r7, #12]
 80083a4:	f083 0310 	eor.w	r3, r3, #16
 80083a8:	81bb      	strh	r3, [r7, #12]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	441a      	add	r2, r3
 80083b4:	89bb      	ldrh	r3, [r7, #12]
 80083b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	8013      	strh	r3, [r2, #0]
 80083ca:	e01f      	b.n	800840c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e2:	81fb      	strh	r3, [r7, #14]
 80083e4:	89fb      	ldrh	r3, [r7, #14]
 80083e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80083ea:	81fb      	strh	r3, [r7, #14]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	441a      	add	r2, r3
 80083f6:	89fb      	ldrh	r3, [r7, #14]
 80083f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008400:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008408:	b29b      	uxth	r3, r3
 800840a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800841a:	b480      	push	{r7}
 800841c:	b087      	sub	sp, #28
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	7b1b      	ldrb	r3, [r3, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	f040 809d 	bne.w	8008568 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	785b      	ldrb	r3, [r3, #1]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d04c      	beq.n	80084d0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	823b      	strh	r3, [r7, #16]
 8008444:	8a3b      	ldrh	r3, [r7, #16]
 8008446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	d01b      	beq.n	8008486 <USB_EPClearStall+0x6c>
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008464:	81fb      	strh	r3, [r7, #14]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	441a      	add	r2, r3
 8008470:	89fb      	ldrh	r3, [r7, #14]
 8008472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800847a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800847e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008482:	b29b      	uxth	r3, r3
 8008484:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	78db      	ldrb	r3, [r3, #3]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d06c      	beq.n	8008568 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084a4:	81bb      	strh	r3, [r7, #12]
 80084a6:	89bb      	ldrh	r3, [r7, #12]
 80084a8:	f083 0320 	eor.w	r3, r3, #32
 80084ac:	81bb      	strh	r3, [r7, #12]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	441a      	add	r2, r3
 80084b8:	89bb      	ldrh	r3, [r7, #12]
 80084ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	8013      	strh	r3, [r2, #0]
 80084ce:	e04b      	b.n	8008568 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	82fb      	strh	r3, [r7, #22]
 80084de:	8afb      	ldrh	r3, [r7, #22]
 80084e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01b      	beq.n	8008520 <USB_EPClearStall+0x106>
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084fe:	82bb      	strh	r3, [r7, #20]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	441a      	add	r2, r3
 800850a:	8abb      	ldrh	r3, [r7, #20]
 800850c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008514:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800851c:	b29b      	uxth	r3, r3
 800851e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b29b      	uxth	r3, r3
 800852e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008536:	827b      	strh	r3, [r7, #18]
 8008538:	8a7b      	ldrh	r3, [r7, #18]
 800853a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800853e:	827b      	strh	r3, [r7, #18]
 8008540:	8a7b      	ldrh	r3, [r7, #18]
 8008542:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008546:	827b      	strh	r3, [r7, #18]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	441a      	add	r2, r3
 8008552:	8a7b      	ldrh	r3, [r7, #18]
 8008554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800855c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008564:	b29b      	uxth	r3, r3
 8008566:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	460b      	mov	r3, r1
 8008580:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d103      	bne.n	8008590 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2280      	movs	r2, #128	@ 0x80
 800858c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80085da:	b29b      	uxth	r3, r3
 80085dc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80085de:	68fb      	ldr	r3, [r7, #12]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b08b      	sub	sp, #44	@ 0x2c
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4611      	mov	r1, r2
 80085f8:	461a      	mov	r2, r3
 80085fa:	460b      	mov	r3, r1
 80085fc:	80fb      	strh	r3, [r7, #6]
 80085fe:	4613      	mov	r3, r2
 8008600:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008602:	88bb      	ldrh	r3, [r7, #4]
 8008604:	3301      	adds	r3, #1
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008612:	88fa      	ldrh	r2, [r7, #6]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800861c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	627b      	str	r3, [r7, #36]	@ 0x24
 8008622:	e01b      	b.n	800865c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	3301      	adds	r3, #1
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	b21a      	sxth	r2, r3
 8008634:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008638:	4313      	orrs	r3, r2
 800863a:	b21b      	sxth	r3, r3
 800863c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	8a7a      	ldrh	r2, [r7, #18]
 8008642:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	3302      	adds	r3, #2
 8008648:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	3301      	adds	r3, #1
 800864e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	3301      	adds	r3, #1
 8008654:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008658:	3b01      	subs	r3, #1
 800865a:	627b      	str	r3, [r7, #36]	@ 0x24
 800865c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e0      	bne.n	8008624 <USB_WritePMA+0x38>
  }
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	372c      	adds	r7, #44	@ 0x2c
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008670:	b480      	push	{r7}
 8008672:	b08b      	sub	sp, #44	@ 0x2c
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	4611      	mov	r1, r2
 800867c:	461a      	mov	r2, r3
 800867e:	460b      	mov	r3, r1
 8008680:	80fb      	strh	r3, [r7, #6]
 8008682:	4613      	mov	r3, r2
 8008684:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008686:	88bb      	ldrh	r3, [r7, #4]
 8008688:	085b      	lsrs	r3, r3, #1
 800868a:	b29b      	uxth	r3, r3
 800868c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008696:	88fa      	ldrh	r2, [r7, #6]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80086a6:	e018      	b.n	80086da <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	3302      	adds	r3, #2
 80086b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	3301      	adds	r3, #1
 80086c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	0a1b      	lsrs	r3, r3, #8
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	3301      	adds	r3, #1
 80086d2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80086d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d6:	3b01      	subs	r3, #1
 80086d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e3      	bne.n	80086a8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80086e0:	88bb      	ldrh	r3, [r7, #4]
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d007      	beq.n	80086fc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	701a      	strb	r2, [r3, #0]
  }
}
 80086fc:	bf00      	nop
 80086fe:	372c      	adds	r7, #44	@ 0x2c
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008714:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008718:	f002 f8a4 	bl	800a864 <USBD_static_malloc>
 800871c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d105      	bne.n	8008730 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800872c:	2302      	movs	r3, #2
 800872e:	e066      	b.n	80087fe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	7c1b      	ldrb	r3, [r3, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d119      	bne.n	8008774 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008744:	2202      	movs	r2, #2
 8008746:	2181      	movs	r1, #129	@ 0x81
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 ff32 	bl	800a5b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008754:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008758:	2202      	movs	r2, #2
 800875a:	2101      	movs	r1, #1
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 ff28 	bl	800a5b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2210      	movs	r2, #16
 800876e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8008772:	e016      	b.n	80087a2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008774:	2340      	movs	r3, #64	@ 0x40
 8008776:	2202      	movs	r2, #2
 8008778:	2181      	movs	r1, #129	@ 0x81
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 ff19 	bl	800a5b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008786:	2340      	movs	r3, #64	@ 0x40
 8008788:	2202      	movs	r2, #2
 800878a:	2101      	movs	r1, #1
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 ff10 	bl	800a5b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2210      	movs	r2, #16
 800879e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087a2:	2308      	movs	r3, #8
 80087a4:	2203      	movs	r2, #3
 80087a6:	2182      	movs	r1, #130	@ 0x82
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 ff02 	bl	800a5b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	7c1b      	ldrb	r3, [r3, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087e2:	2101      	movs	r1, #1
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 ffd3 	bl	800a790 <USBD_LL_PrepareReceive>
 80087ea:	e007      	b.n	80087fc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087f2:	2340      	movs	r3, #64	@ 0x40
 80087f4:	2101      	movs	r1, #1
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 ffca 	bl	800a790 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008812:	2181      	movs	r1, #129	@ 0x81
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 fef2 	bl	800a5fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008820:	2101      	movs	r1, #1
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 feeb 	bl	800a5fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008830:	2182      	movs	r1, #130	@ 0x82
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 fee3 	bl	800a5fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00e      	beq.n	8008870 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008862:	4618      	mov	r0, r3
 8008864:	f002 f80c 	bl	800a880 <USBD_static_free>
    pdev->pClassData = NULL;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800888c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e0af      	b.n	8008a04 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d03f      	beq.n	8008930 <USBD_CDC_Setup+0xb4>
 80088b0:	2b20      	cmp	r3, #32
 80088b2:	f040 809f 	bne.w	80089f4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	88db      	ldrh	r3, [r3, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d02e      	beq.n	800891c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	b25b      	sxtb	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da16      	bge.n	80088f6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80088d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	88d2      	ldrh	r2, [r2, #6]
 80088da:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	88db      	ldrh	r3, [r3, #6]
 80088e0:	2b07      	cmp	r3, #7
 80088e2:	bf28      	it	cs
 80088e4:	2307      	movcs	r3, #7
 80088e6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	89fa      	ldrh	r2, [r7, #14]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fa9d 	bl	8009e2e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80088f4:	e085      	b.n	8008a02 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	785a      	ldrb	r2, [r3, #1]
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	88db      	ldrh	r3, [r3, #6]
 8008904:	b2da      	uxtb	r2, r3
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800890c:	6939      	ldr	r1, [r7, #16]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	88db      	ldrh	r3, [r3, #6]
 8008912:	461a      	mov	r2, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 fab6 	bl	8009e86 <USBD_CtlPrepareRx>
      break;
 800891a:	e072      	b.n	8008a02 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	7850      	ldrb	r0, [r2, #1]
 8008928:	2200      	movs	r2, #0
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	4798      	blx	r3
      break;
 800892e:	e068      	b.n	8008a02 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	785b      	ldrb	r3, [r3, #1]
 8008934:	2b0b      	cmp	r3, #11
 8008936:	d852      	bhi.n	80089de <USBD_CDC_Setup+0x162>
 8008938:	a201      	add	r2, pc, #4	@ (adr r2, 8008940 <USBD_CDC_Setup+0xc4>)
 800893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893e:	bf00      	nop
 8008940:	08008971 	.word	0x08008971
 8008944:	080089ed 	.word	0x080089ed
 8008948:	080089df 	.word	0x080089df
 800894c:	080089df 	.word	0x080089df
 8008950:	080089df 	.word	0x080089df
 8008954:	080089df 	.word	0x080089df
 8008958:	080089df 	.word	0x080089df
 800895c:	080089df 	.word	0x080089df
 8008960:	080089df 	.word	0x080089df
 8008964:	080089df 	.word	0x080089df
 8008968:	0800899b 	.word	0x0800899b
 800896c:	080089c5 	.word	0x080089c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b03      	cmp	r3, #3
 800897a:	d107      	bne.n	800898c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800897c:	f107 030a 	add.w	r3, r7, #10
 8008980:	2202      	movs	r2, #2
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fa52 	bl	8009e2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800898a:	e032      	b.n	80089f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 f9dc 	bl	8009d4c <USBD_CtlError>
            ret = USBD_FAIL;
 8008994:	2303      	movs	r3, #3
 8008996:	75fb      	strb	r3, [r7, #23]
          break;
 8008998:	e02b      	b.n	80089f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d107      	bne.n	80089b6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80089a6:	f107 030d 	add.w	r3, r7, #13
 80089aa:	2201      	movs	r2, #1
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 fa3d 	bl	8009e2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089b4:	e01d      	b.n	80089f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 f9c7 	bl	8009d4c <USBD_CtlError>
            ret = USBD_FAIL;
 80089be:	2303      	movs	r3, #3
 80089c0:	75fb      	strb	r3, [r7, #23]
          break;
 80089c2:	e016      	b.n	80089f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d00f      	beq.n	80089f0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 f9ba 	bl	8009d4c <USBD_CtlError>
            ret = USBD_FAIL;
 80089d8:	2303      	movs	r3, #3
 80089da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089dc:	e008      	b.n	80089f0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 f9b3 	bl	8009d4c <USBD_CtlError>
          ret = USBD_FAIL;
 80089e6:	2303      	movs	r3, #3
 80089e8:	75fb      	strb	r3, [r7, #23]
          break;
 80089ea:	e002      	b.n	80089f2 <USBD_CDC_Setup+0x176>
          break;
 80089ec:	bf00      	nop
 80089ee:	e008      	b.n	8008a02 <USBD_CDC_Setup+0x186>
          break;
 80089f0:	bf00      	nop
      }
      break;
 80089f2:	e006      	b.n	8008a02 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 f9a8 	bl	8009d4c <USBD_CtlError>
      ret = USBD_FAIL;
 80089fc:	2303      	movs	r3, #3
 80089fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008a00:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008a1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e04f      	b.n	8008ace <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	3318      	adds	r3, #24
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d029      	beq.n	8008aa0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	4613      	mov	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	3318      	adds	r3, #24
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	78f9      	ldrb	r1, [r7, #3]
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	460b      	mov	r3, r1
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	4403      	add	r3, r0
 8008a6c:	3320      	adds	r3, #32
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a74:	fb01 f303 	mul.w	r3, r1, r3
 8008a78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d110      	bne.n	8008aa0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	3318      	adds	r3, #24
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a92:	78f9      	ldrb	r1, [r7, #3]
 8008a94:	2300      	movs	r3, #0
 8008a96:	2200      	movs	r2, #0
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fe58 	bl	800a74e <USBD_LL_Transmit>
 8008a9e:	e015      	b.n	8008acc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00b      	beq.n	8008acc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008ac8:	78fa      	ldrb	r2, [r7, #3]
 8008aca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ae8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e015      	b.n	8008b24 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 fe68 	bl	800a7d2 <USBD_LL_GetRxDataSize>
 8008b02:	4602      	mov	r2, r0
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b1e:	4611      	mov	r1, r2
 8008b20:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e01a      	b.n	8008b7c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d014      	beq.n	8008b7a <USBD_CDC_EP0_RxReady+0x4e>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008b56:	2bff      	cmp	r3, #255	@ 0xff
 8008b58:	d00f      	beq.n	8008b7a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008b68:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b70:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	22ff      	movs	r2, #255	@ 0xff
 8008b76:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2243      	movs	r2, #67	@ 0x43
 8008b90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008b92:	4b03      	ldr	r3, [pc, #12]	@ (8008ba0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20000094 	.word	0x20000094

08008ba4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2243      	movs	r2, #67	@ 0x43
 8008bb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008bb2:	4b03      	ldr	r3, [pc, #12]	@ (8008bc0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	20000050 	.word	0x20000050

08008bc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2243      	movs	r2, #67	@ 0x43
 8008bd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008bd2:	4b03      	ldr	r3, [pc, #12]	@ (8008be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	200000d8 	.word	0x200000d8

08008be4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	220a      	movs	r2, #10
 8008bf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008bf2:	4b03      	ldr	r3, [pc, #12]	@ (8008c00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	2000000c 	.word	0x2000000c

08008c04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e004      	b.n	8008c22 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b087      	sub	sp, #28
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c40:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e008      	b.n	8008c5e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e004      	b.n	8008c90 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008caa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e016      	b.n	8008ce8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	7c1b      	ldrb	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d109      	bne.n	8008cd6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ccc:	2101      	movs	r1, #1
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fd5e 	bl	800a790 <USBD_LL_PrepareReceive>
 8008cd4:	e007      	b.n	8008ce6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cdc:	2340      	movs	r3, #64	@ 0x40
 8008cde:	2101      	movs	r1, #1
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 fd55 	bl	800a790 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e01f      	b.n	8008d48 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	79fa      	ldrb	r2, [r7, #7]
 8008d3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f001 fbbd 	bl	800a4bc <USBD_LL_Init>
 8008d42:	4603      	mov	r3, r0
 8008d44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e016      	b.n	8008d96 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00b      	beq.n	8008d94 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d84:	f107 020e 	add.w	r2, r7, #14
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4798      	blx	r3
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f001 fbe8 	bl	800a57c <USBD_LL_Start>
 8008dac:	4603      	mov	r3, r0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	78fa      	ldrb	r2, [r7, #3]
 8008df0:	4611      	mov	r1, r2
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d007      	beq.n	8008e2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	78fa      	ldrb	r2, [r7, #3]
 8008e24:	4611      	mov	r1, r2
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	4798      	blx	r3
  }

  return USBD_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 ff46 	bl	8009cd8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e68:	f003 031f 	and.w	r3, r3, #31
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d01a      	beq.n	8008ea6 <USBD_LL_SetupStage+0x72>
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d822      	bhi.n	8008eba <USBD_LL_SetupStage+0x86>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <USBD_LL_SetupStage+0x4a>
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d00a      	beq.n	8008e92 <USBD_LL_SetupStage+0x5e>
 8008e7c:	e01d      	b.n	8008eba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f9ee 	bl	8009268 <USBD_StdDevReq>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e90:	e020      	b.n	8008ed4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa52 	bl	8009344 <USBD_StdItfReq>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea4:	e016      	b.n	8008ed4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa91 	bl	80093d6 <USBD_StdEPReq>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8008eb8:	e00c      	b.n	8008ed4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ec0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 fbb7 	bl	800a63c <USBD_LL_StallEP>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed2:	bf00      	nop
  }

  return ret;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b086      	sub	sp, #24
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	607a      	str	r2, [r7, #4]
 8008eea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008eec:	7afb      	ldrb	r3, [r7, #11]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d138      	bne.n	8008f64 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008ef8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d14a      	bne.n	8008f9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d913      	bls.n	8008f38 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	1ad2      	subs	r2, r2, r3
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	68da      	ldr	r2, [r3, #12]
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	4293      	cmp	r3, r2
 8008f28:	bf28      	it	cs
 8008f2a:	4613      	movcs	r3, r2
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 ffc5 	bl	8009ec0 <USBD_CtlContinueRx>
 8008f36:	e030      	b.n	8008f9a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d10b      	bne.n	8008f5c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d005      	beq.n	8008f5c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 ffc0 	bl	8009ee2 <USBD_CtlSendStatus>
 8008f62:	e01a      	b.n	8008f9a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d114      	bne.n	8008f9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00e      	beq.n	8008f9a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	7afa      	ldrb	r2, [r7, #11]
 8008f86:	4611      	mov	r1, r2
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	4798      	blx	r3
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	e000      	b.n	8008f9c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	460b      	mov	r3, r1
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d16b      	bne.n	8009090 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3314      	adds	r3, #20
 8008fbc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d156      	bne.n	8009076 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d914      	bls.n	8008ffe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	1ad2      	subs	r2, r2, r3
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	6879      	ldr	r1, [r7, #4]
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 ff3a 	bl	8009e64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f001 fbca 	bl	800a790 <USBD_LL_PrepareReceive>
 8008ffc:	e03b      	b.n	8009076 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	429a      	cmp	r2, r3
 8009008:	d11c      	bne.n	8009044 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009012:	429a      	cmp	r2, r3
 8009014:	d316      	bcc.n	8009044 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009020:	429a      	cmp	r2, r3
 8009022:	d20f      	bcs.n	8009044 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009024:	2200      	movs	r2, #0
 8009026:	2100      	movs	r1, #0
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 ff1b 	bl	8009e64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009036:	2300      	movs	r3, #0
 8009038:	2200      	movs	r2, #0
 800903a:	2100      	movs	r1, #0
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f001 fba7 	bl	800a790 <USBD_LL_PrepareReceive>
 8009042:	e018      	b.n	8009076 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b03      	cmp	r3, #3
 800904e:	d10b      	bne.n	8009068 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009068:	2180      	movs	r1, #128	@ 0x80
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f001 fae6 	bl	800a63c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 ff49 	bl	8009f08 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800907c:	2b01      	cmp	r3, #1
 800907e:	d122      	bne.n	80090c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f7ff fe98 	bl	8008db6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800908e:	e01a      	b.n	80090c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b03      	cmp	r3, #3
 800909a:	d114      	bne.n	80090c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00e      	beq.n	80090c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	7afa      	ldrb	r2, [r7, #11]
 80090b2:	4611      	mov	r1, r2
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	4798      	blx	r3
 80090b8:	4603      	mov	r3, r0
 80090ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
 80090c4:	e000      	b.n	80090c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009100:	2303      	movs	r3, #3
 8009102:	e02f      	b.n	8009164 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00f      	beq.n	800912e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d009      	beq.n	800912e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	6852      	ldr	r2, [r2, #4]
 8009126:	b2d2      	uxtb	r2, r2
 8009128:	4611      	mov	r1, r2
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800912e:	2340      	movs	r3, #64	@ 0x40
 8009130:	2200      	movs	r2, #0
 8009132:	2100      	movs	r1, #0
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 fa3c 	bl	800a5b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2240      	movs	r2, #64	@ 0x40
 8009146:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800914a:	2340      	movs	r3, #64	@ 0x40
 800914c:	2200      	movs	r2, #0
 800914e:	2180      	movs	r1, #128	@ 0x80
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 fa2e 	bl	800a5b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2240      	movs	r2, #64	@ 0x40
 8009160:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	78fa      	ldrb	r2, [r7, #3]
 800917c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800919a:	b2da      	uxtb	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2204      	movs	r2, #4
 80091a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d106      	bne.n	80091da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e012      	b.n	8009224 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b03      	cmp	r3, #3
 8009208:	d10b      	bne.n	8009222 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d005      	beq.n	8009222 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	3301      	adds	r3, #1
 8009242:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800924a:	8a3b      	ldrh	r3, [r7, #16]
 800924c:	021b      	lsls	r3, r3, #8
 800924e:	b21a      	sxth	r2, r3
 8009250:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009254:	4313      	orrs	r3, r2
 8009256:	b21b      	sxth	r3, r3
 8009258:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800925a:	89fb      	ldrh	r3, [r7, #14]
}
 800925c:	4618      	mov	r0, r3
 800925e:	371c      	adds	r7, #28
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800927e:	2b40      	cmp	r3, #64	@ 0x40
 8009280:	d005      	beq.n	800928e <USBD_StdDevReq+0x26>
 8009282:	2b40      	cmp	r3, #64	@ 0x40
 8009284:	d853      	bhi.n	800932e <USBD_StdDevReq+0xc6>
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00b      	beq.n	80092a2 <USBD_StdDevReq+0x3a>
 800928a:	2b20      	cmp	r3, #32
 800928c:	d14f      	bne.n	800932e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	4798      	blx	r3
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]
      break;
 80092a0:	e04a      	b.n	8009338 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	785b      	ldrb	r3, [r3, #1]
 80092a6:	2b09      	cmp	r3, #9
 80092a8:	d83b      	bhi.n	8009322 <USBD_StdDevReq+0xba>
 80092aa:	a201      	add	r2, pc, #4	@ (adr r2, 80092b0 <USBD_StdDevReq+0x48>)
 80092ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b0:	08009305 	.word	0x08009305
 80092b4:	08009319 	.word	0x08009319
 80092b8:	08009323 	.word	0x08009323
 80092bc:	0800930f 	.word	0x0800930f
 80092c0:	08009323 	.word	0x08009323
 80092c4:	080092e3 	.word	0x080092e3
 80092c8:	080092d9 	.word	0x080092d9
 80092cc:	08009323 	.word	0x08009323
 80092d0:	080092fb 	.word	0x080092fb
 80092d4:	080092ed 	.word	0x080092ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f9de 	bl	800969c <USBD_GetDescriptor>
          break;
 80092e0:	e024      	b.n	800932c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fb6d 	bl	80099c4 <USBD_SetAddress>
          break;
 80092ea:	e01f      	b.n	800932c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fbac 	bl	8009a4c <USBD_SetConfig>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]
          break;
 80092f8:	e018      	b.n	800932c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fc4b 	bl	8009b98 <USBD_GetConfig>
          break;
 8009302:	e013      	b.n	800932c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fc7c 	bl	8009c04 <USBD_GetStatus>
          break;
 800930c:	e00e      	b.n	800932c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fcab 	bl	8009c6c <USBD_SetFeature>
          break;
 8009316:	e009      	b.n	800932c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fcba 	bl	8009c94 <USBD_ClrFeature>
          break;
 8009320:	e004      	b.n	800932c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fd11 	bl	8009d4c <USBD_CtlError>
          break;
 800932a:	bf00      	nop
      }
      break;
 800932c:	e004      	b.n	8009338 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fd0b 	bl	8009d4c <USBD_CtlError>
      break;
 8009336:	bf00      	nop
  }

  return ret;
 8009338:	7bfb      	ldrb	r3, [r7, #15]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop

08009344 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800935a:	2b40      	cmp	r3, #64	@ 0x40
 800935c:	d005      	beq.n	800936a <USBD_StdItfReq+0x26>
 800935e:	2b40      	cmp	r3, #64	@ 0x40
 8009360:	d82f      	bhi.n	80093c2 <USBD_StdItfReq+0x7e>
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <USBD_StdItfReq+0x26>
 8009366:	2b20      	cmp	r3, #32
 8009368:	d12b      	bne.n	80093c2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009370:	b2db      	uxtb	r3, r3
 8009372:	3b01      	subs	r3, #1
 8009374:	2b02      	cmp	r3, #2
 8009376:	d81d      	bhi.n	80093b4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	889b      	ldrh	r3, [r3, #4]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b01      	cmp	r3, #1
 8009380:	d813      	bhi.n	80093aa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	4798      	blx	r3
 8009390:	4603      	mov	r3, r0
 8009392:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	88db      	ldrh	r3, [r3, #6]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d110      	bne.n	80093be <USBD_StdItfReq+0x7a>
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10d      	bne.n	80093be <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fd9d 	bl	8009ee2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093a8:	e009      	b.n	80093be <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fccd 	bl	8009d4c <USBD_CtlError>
          break;
 80093b2:	e004      	b.n	80093be <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fcc8 	bl	8009d4c <USBD_CtlError>
          break;
 80093bc:	e000      	b.n	80093c0 <USBD_StdItfReq+0x7c>
          break;
 80093be:	bf00      	nop
      }
      break;
 80093c0:	e004      	b.n	80093cc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fcc1 	bl	8009d4c <USBD_CtlError>
      break;
 80093ca:	bf00      	nop
  }

  return ret;
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	889b      	ldrh	r3, [r3, #4]
 80093e8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093f2:	2b40      	cmp	r3, #64	@ 0x40
 80093f4:	d007      	beq.n	8009406 <USBD_StdEPReq+0x30>
 80093f6:	2b40      	cmp	r3, #64	@ 0x40
 80093f8:	f200 8145 	bhi.w	8009686 <USBD_StdEPReq+0x2b0>
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00c      	beq.n	800941a <USBD_StdEPReq+0x44>
 8009400:	2b20      	cmp	r3, #32
 8009402:	f040 8140 	bne.w	8009686 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	4798      	blx	r3
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]
      break;
 8009418:	e13a      	b.n	8009690 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	2b03      	cmp	r3, #3
 8009420:	d007      	beq.n	8009432 <USBD_StdEPReq+0x5c>
 8009422:	2b03      	cmp	r3, #3
 8009424:	f300 8129 	bgt.w	800967a <USBD_StdEPReq+0x2a4>
 8009428:	2b00      	cmp	r3, #0
 800942a:	d07f      	beq.n	800952c <USBD_StdEPReq+0x156>
 800942c:	2b01      	cmp	r3, #1
 800942e:	d03c      	beq.n	80094aa <USBD_StdEPReq+0xd4>
 8009430:	e123      	b.n	800967a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d002      	beq.n	8009444 <USBD_StdEPReq+0x6e>
 800943e:	2b03      	cmp	r3, #3
 8009440:	d016      	beq.n	8009470 <USBD_StdEPReq+0x9a>
 8009442:	e02c      	b.n	800949e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00d      	beq.n	8009466 <USBD_StdEPReq+0x90>
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	2b80      	cmp	r3, #128	@ 0x80
 800944e:	d00a      	beq.n	8009466 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 f8f1 	bl	800a63c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800945a:	2180      	movs	r1, #128	@ 0x80
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f001 f8ed 	bl	800a63c <USBD_LL_StallEP>
 8009462:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009464:	e020      	b.n	80094a8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fc6f 	bl	8009d4c <USBD_CtlError>
              break;
 800946e:	e01b      	b.n	80094a8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	885b      	ldrh	r3, [r3, #2]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10e      	bne.n	8009496 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00b      	beq.n	8009496 <USBD_StdEPReq+0xc0>
 800947e:	7bbb      	ldrb	r3, [r7, #14]
 8009480:	2b80      	cmp	r3, #128	@ 0x80
 8009482:	d008      	beq.n	8009496 <USBD_StdEPReq+0xc0>
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	88db      	ldrh	r3, [r3, #6]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d104      	bne.n	8009496 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800948c:	7bbb      	ldrb	r3, [r7, #14]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f001 f8d3 	bl	800a63c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fd23 	bl	8009ee2 <USBD_CtlSendStatus>

              break;
 800949c:	e004      	b.n	80094a8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fc53 	bl	8009d4c <USBD_CtlError>
              break;
 80094a6:	bf00      	nop
          }
          break;
 80094a8:	e0ec      	b.n	8009684 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d002      	beq.n	80094bc <USBD_StdEPReq+0xe6>
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d016      	beq.n	80094e8 <USBD_StdEPReq+0x112>
 80094ba:	e030      	b.n	800951e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00d      	beq.n	80094de <USBD_StdEPReq+0x108>
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	2b80      	cmp	r3, #128	@ 0x80
 80094c6:	d00a      	beq.n	80094de <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f001 f8b5 	bl	800a63c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094d2:	2180      	movs	r1, #128	@ 0x80
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f001 f8b1 	bl	800a63c <USBD_LL_StallEP>
 80094da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094dc:	e025      	b.n	800952a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fc33 	bl	8009d4c <USBD_CtlError>
              break;
 80094e6:	e020      	b.n	800952a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	885b      	ldrh	r3, [r3, #2]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d11b      	bne.n	8009528 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d004      	beq.n	8009504 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 f8bb 	bl	800a67a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fcec 	bl	8009ee2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	4798      	blx	r3
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800951c:	e004      	b.n	8009528 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fc13 	bl	8009d4c <USBD_CtlError>
              break;
 8009526:	e000      	b.n	800952a <USBD_StdEPReq+0x154>
              break;
 8009528:	bf00      	nop
          }
          break;
 800952a:	e0ab      	b.n	8009684 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b02      	cmp	r3, #2
 8009536:	d002      	beq.n	800953e <USBD_StdEPReq+0x168>
 8009538:	2b03      	cmp	r3, #3
 800953a:	d032      	beq.n	80095a2 <USBD_StdEPReq+0x1cc>
 800953c:	e097      	b.n	800966e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <USBD_StdEPReq+0x17e>
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	2b80      	cmp	r3, #128	@ 0x80
 8009548:	d004      	beq.n	8009554 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fbfd 	bl	8009d4c <USBD_CtlError>
                break;
 8009552:	e091      	b.n	8009678 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009558:	2b00      	cmp	r3, #0
 800955a:	da0b      	bge.n	8009574 <USBD_StdEPReq+0x19e>
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	3310      	adds	r3, #16
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	4413      	add	r3, r2
 8009570:	3304      	adds	r3, #4
 8009572:	e00b      	b.n	800958c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	4413      	add	r3, r2
 800958a:	3304      	adds	r3, #4
 800958c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2202      	movs	r2, #2
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fc47 	bl	8009e2e <USBD_CtlSendData>
              break;
 80095a0:	e06a      	b.n	8009678 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	da11      	bge.n	80095ce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095aa:	7bbb      	ldrb	r3, [r7, #14]
 80095ac:	f003 020f 	and.w	r2, r3, #15
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	440b      	add	r3, r1
 80095bc:	3324      	adds	r3, #36	@ 0x24
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d117      	bne.n	80095f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fbc0 	bl	8009d4c <USBD_CtlError>
                  break;
 80095cc:	e054      	b.n	8009678 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	f003 020f 	and.w	r2, r3, #15
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	440b      	add	r3, r1
 80095e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d104      	bne.n	80095f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80095ea:	6839      	ldr	r1, [r7, #0]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fbad 	bl	8009d4c <USBD_CtlError>
                  break;
 80095f2:	e041      	b.n	8009678 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	da0b      	bge.n	8009614 <USBD_StdEPReq+0x23e>
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	3310      	adds	r3, #16
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	4413      	add	r3, r2
 8009610:	3304      	adds	r3, #4
 8009612:	e00b      	b.n	800962c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800961a:	4613      	mov	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4413      	add	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	4413      	add	r3, r2
 800962a:	3304      	adds	r3, #4
 800962c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <USBD_StdEPReq+0x264>
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	2b80      	cmp	r3, #128	@ 0x80
 8009638:	d103      	bne.n	8009642 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2200      	movs	r2, #0
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	e00e      	b.n	8009660 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f001 f836 	bl	800a6b8 <USBD_LL_IsStallEP>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2201      	movs	r2, #1
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	e002      	b.n	8009660 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	2200      	movs	r2, #0
 800965e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2202      	movs	r2, #2
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fbe1 	bl	8009e2e <USBD_CtlSendData>
              break;
 800966c:	e004      	b.n	8009678 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fb6b 	bl	8009d4c <USBD_CtlError>
              break;
 8009676:	bf00      	nop
          }
          break;
 8009678:	e004      	b.n	8009684 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fb65 	bl	8009d4c <USBD_CtlError>
          break;
 8009682:	bf00      	nop
      }
      break;
 8009684:	e004      	b.n	8009690 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fb5f 	bl	8009d4c <USBD_CtlError>
      break;
 800968e:	bf00      	nop
  }

  return ret;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096a6:	2300      	movs	r3, #0
 80096a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	885b      	ldrh	r3, [r3, #2]
 80096b6:	0a1b      	lsrs	r3, r3, #8
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	3b01      	subs	r3, #1
 80096bc:	2b0e      	cmp	r3, #14
 80096be:	f200 8152 	bhi.w	8009966 <USBD_GetDescriptor+0x2ca>
 80096c2:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <USBD_GetDescriptor+0x2c>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	08009739 	.word	0x08009739
 80096cc:	08009751 	.word	0x08009751
 80096d0:	08009791 	.word	0x08009791
 80096d4:	08009967 	.word	0x08009967
 80096d8:	08009967 	.word	0x08009967
 80096dc:	08009907 	.word	0x08009907
 80096e0:	08009933 	.word	0x08009933
 80096e4:	08009967 	.word	0x08009967
 80096e8:	08009967 	.word	0x08009967
 80096ec:	08009967 	.word	0x08009967
 80096f0:	08009967 	.word	0x08009967
 80096f4:	08009967 	.word	0x08009967
 80096f8:	08009967 	.word	0x08009967
 80096fc:	08009967 	.word	0x08009967
 8009700:	08009705 	.word	0x08009705
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	7c12      	ldrb	r2, [r2, #16]
 800971c:	f107 0108 	add.w	r1, r7, #8
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
 8009724:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009726:	e126      	b.n	8009976 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fb0e 	bl	8009d4c <USBD_CtlError>
        err++;
 8009730:	7afb      	ldrb	r3, [r7, #11]
 8009732:	3301      	adds	r3, #1
 8009734:	72fb      	strb	r3, [r7, #11]
      break;
 8009736:	e11e      	b.n	8009976 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	7c12      	ldrb	r2, [r2, #16]
 8009744:	f107 0108 	add.w	r1, r7, #8
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
 800974c:	60f8      	str	r0, [r7, #12]
      break;
 800974e:	e112      	b.n	8009976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	7c1b      	ldrb	r3, [r3, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10d      	bne.n	8009774 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800975e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009760:	f107 0208 	add.w	r2, r7, #8
 8009764:	4610      	mov	r0, r2
 8009766:	4798      	blx	r3
 8009768:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3301      	adds	r3, #1
 800976e:	2202      	movs	r2, #2
 8009770:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009772:	e100      	b.n	8009976 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800977a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977c:	f107 0208 	add.w	r2, r7, #8
 8009780:	4610      	mov	r0, r2
 8009782:	4798      	blx	r3
 8009784:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3301      	adds	r3, #1
 800978a:	2202      	movs	r2, #2
 800978c:	701a      	strb	r2, [r3, #0]
      break;
 800978e:	e0f2      	b.n	8009976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	885b      	ldrh	r3, [r3, #2]
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b05      	cmp	r3, #5
 8009798:	f200 80ac 	bhi.w	80098f4 <USBD_GetDescriptor+0x258>
 800979c:	a201      	add	r2, pc, #4	@ (adr r2, 80097a4 <USBD_GetDescriptor+0x108>)
 800979e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a2:	bf00      	nop
 80097a4:	080097bd 	.word	0x080097bd
 80097a8:	080097f1 	.word	0x080097f1
 80097ac:	08009825 	.word	0x08009825
 80097b0:	08009859 	.word	0x08009859
 80097b4:	0800988d 	.word	0x0800988d
 80097b8:	080098c1 	.word	0x080098c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00b      	beq.n	80097e0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	7c12      	ldrb	r2, [r2, #16]
 80097d4:	f107 0108 	add.w	r1, r7, #8
 80097d8:	4610      	mov	r0, r2
 80097da:	4798      	blx	r3
 80097dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097de:	e091      	b.n	8009904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fab2 	bl	8009d4c <USBD_CtlError>
            err++;
 80097e8:	7afb      	ldrb	r3, [r7, #11]
 80097ea:	3301      	adds	r3, #1
 80097ec:	72fb      	strb	r3, [r7, #11]
          break;
 80097ee:	e089      	b.n	8009904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00b      	beq.n	8009814 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	7c12      	ldrb	r2, [r2, #16]
 8009808:	f107 0108 	add.w	r1, r7, #8
 800980c:	4610      	mov	r0, r2
 800980e:	4798      	blx	r3
 8009810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009812:	e077      	b.n	8009904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fa98 	bl	8009d4c <USBD_CtlError>
            err++;
 800981c:	7afb      	ldrb	r3, [r7, #11]
 800981e:	3301      	adds	r3, #1
 8009820:	72fb      	strb	r3, [r7, #11]
          break;
 8009822:	e06f      	b.n	8009904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	7c12      	ldrb	r2, [r2, #16]
 800983c:	f107 0108 	add.w	r1, r7, #8
 8009840:	4610      	mov	r0, r2
 8009842:	4798      	blx	r3
 8009844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009846:	e05d      	b.n	8009904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fa7e 	bl	8009d4c <USBD_CtlError>
            err++;
 8009850:	7afb      	ldrb	r3, [r7, #11]
 8009852:	3301      	adds	r3, #1
 8009854:	72fb      	strb	r3, [r7, #11]
          break;
 8009856:	e055      	b.n	8009904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00b      	beq.n	800987c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	7c12      	ldrb	r2, [r2, #16]
 8009870:	f107 0108 	add.w	r1, r7, #8
 8009874:	4610      	mov	r0, r2
 8009876:	4798      	blx	r3
 8009878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800987a:	e043      	b.n	8009904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fa64 	bl	8009d4c <USBD_CtlError>
            err++;
 8009884:	7afb      	ldrb	r3, [r7, #11]
 8009886:	3301      	adds	r3, #1
 8009888:	72fb      	strb	r3, [r7, #11]
          break;
 800988a:	e03b      	b.n	8009904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	7c12      	ldrb	r2, [r2, #16]
 80098a4:	f107 0108 	add.w	r1, r7, #8
 80098a8:	4610      	mov	r0, r2
 80098aa:	4798      	blx	r3
 80098ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ae:	e029      	b.n	8009904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fa4a 	bl	8009d4c <USBD_CtlError>
            err++;
 80098b8:	7afb      	ldrb	r3, [r7, #11]
 80098ba:	3301      	adds	r3, #1
 80098bc:	72fb      	strb	r3, [r7, #11]
          break;
 80098be:	e021      	b.n	8009904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00b      	beq.n	80098e4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	7c12      	ldrb	r2, [r2, #16]
 80098d8:	f107 0108 	add.w	r1, r7, #8
 80098dc:	4610      	mov	r0, r2
 80098de:	4798      	blx	r3
 80098e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098e2:	e00f      	b.n	8009904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa30 	bl	8009d4c <USBD_CtlError>
            err++;
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	3301      	adds	r3, #1
 80098f0:	72fb      	strb	r3, [r7, #11]
          break;
 80098f2:	e007      	b.n	8009904 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fa28 	bl	8009d4c <USBD_CtlError>
          err++;
 80098fc:	7afb      	ldrb	r3, [r7, #11]
 80098fe:	3301      	adds	r3, #1
 8009900:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009902:	bf00      	nop
      }
      break;
 8009904:	e037      	b.n	8009976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	7c1b      	ldrb	r3, [r3, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d109      	bne.n	8009922 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009916:	f107 0208 	add.w	r2, r7, #8
 800991a:	4610      	mov	r0, r2
 800991c:	4798      	blx	r3
 800991e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009920:	e029      	b.n	8009976 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fa11 	bl	8009d4c <USBD_CtlError>
        err++;
 800992a:	7afb      	ldrb	r3, [r7, #11]
 800992c:	3301      	adds	r3, #1
 800992e:	72fb      	strb	r3, [r7, #11]
      break;
 8009930:	e021      	b.n	8009976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	7c1b      	ldrb	r3, [r3, #16]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10d      	bne.n	8009956 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009942:	f107 0208 	add.w	r2, r7, #8
 8009946:	4610      	mov	r0, r2
 8009948:	4798      	blx	r3
 800994a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3301      	adds	r3, #1
 8009950:	2207      	movs	r2, #7
 8009952:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009954:	e00f      	b.n	8009976 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f9f7 	bl	8009d4c <USBD_CtlError>
        err++;
 800995e:	7afb      	ldrb	r3, [r7, #11]
 8009960:	3301      	adds	r3, #1
 8009962:	72fb      	strb	r3, [r7, #11]
      break;
 8009964:	e007      	b.n	8009976 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f9ef 	bl	8009d4c <USBD_CtlError>
      err++;
 800996e:	7afb      	ldrb	r3, [r7, #11]
 8009970:	3301      	adds	r3, #1
 8009972:	72fb      	strb	r3, [r7, #11]
      break;
 8009974:	bf00      	nop
  }

  if (err != 0U)
 8009976:	7afb      	ldrb	r3, [r7, #11]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d11e      	bne.n	80099ba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	88db      	ldrh	r3, [r3, #6]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d016      	beq.n	80099b2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009984:	893b      	ldrh	r3, [r7, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00e      	beq.n	80099a8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	88da      	ldrh	r2, [r3, #6]
 800998e:	893b      	ldrh	r3, [r7, #8]
 8009990:	4293      	cmp	r3, r2
 8009992:	bf28      	it	cs
 8009994:	4613      	movcs	r3, r2
 8009996:	b29b      	uxth	r3, r3
 8009998:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800999a:	893b      	ldrh	r3, [r7, #8]
 800999c:	461a      	mov	r2, r3
 800999e:	68f9      	ldr	r1, [r7, #12]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fa44 	bl	8009e2e <USBD_CtlSendData>
 80099a6:	e009      	b.n	80099bc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f9ce 	bl	8009d4c <USBD_CtlError>
 80099b0:	e004      	b.n	80099bc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fa95 	bl	8009ee2 <USBD_CtlSendStatus>
 80099b8:	e000      	b.n	80099bc <USBD_GetDescriptor+0x320>
    return;
 80099ba:	bf00      	nop
  }
}
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop

080099c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	889b      	ldrh	r3, [r3, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d131      	bne.n	8009a3a <USBD_SetAddress+0x76>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	88db      	ldrh	r3, [r3, #6]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d12d      	bne.n	8009a3a <USBD_SetAddress+0x76>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	885b      	ldrh	r3, [r3, #2]
 80099e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80099e4:	d829      	bhi.n	8009a3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	885b      	ldrh	r3, [r3, #2]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d104      	bne.n	8009a08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f9a3 	bl	8009d4c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a06:	e01d      	b.n	8009a44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	7bfa      	ldrb	r2, [r7, #15]
 8009a0c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fe7b 	bl	800a710 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fa61 	bl	8009ee2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d004      	beq.n	8009a30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a2e:	e009      	b.n	8009a44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a38:	e004      	b.n	8009a44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f985 	bl	8009d4c <USBD_CtlError>
  }
}
 8009a42:	bf00      	nop
 8009a44:	bf00      	nop
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	885b      	ldrh	r3, [r3, #2]
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	4b4c      	ldr	r3, [pc, #304]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009a62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a64:	4b4b      	ldr	r3, [pc, #300]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d905      	bls.n	8009a78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f96c 	bl	8009d4c <USBD_CtlError>
    return USBD_FAIL;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e088      	b.n	8009b8a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d002      	beq.n	8009a8a <USBD_SetConfig+0x3e>
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d025      	beq.n	8009ad4 <USBD_SetConfig+0x88>
 8009a88:	e071      	b.n	8009b6e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a8a:	4b42      	ldr	r3, [pc, #264]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d01c      	beq.n	8009acc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009a92:	4b40      	ldr	r3, [pc, #256]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7ff f992 	bl	8008dcc <USBD_SetClassConfig>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d004      	beq.n	8009abc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f949 	bl	8009d4c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009aba:	e065      	b.n	8009b88 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fa10 	bl	8009ee2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2203      	movs	r2, #3
 8009ac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009aca:	e05d      	b.n	8009b88 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fa08 	bl	8009ee2 <USBD_CtlSendStatus>
      break;
 8009ad2:	e059      	b.n	8009b88 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d112      	bne.n	8009b02 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009aee:	4b29      	ldr	r3, [pc, #164]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7ff f985 	bl	8008e04 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f9f1 	bl	8009ee2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b00:	e042      	b.n	8009b88 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009b02:	4b24      	ldr	r3, [pc, #144]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d02a      	beq.n	8009b66 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff f973 	bl	8008e04 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b28:	4b1a      	ldr	r3, [pc, #104]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff f94c 	bl	8008dcc <USBD_SetClassConfig>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00f      	beq.n	8009b5e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f903 	bl	8009d4c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff f958 	bl	8008e04 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2202      	movs	r2, #2
 8009b58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009b5c:	e014      	b.n	8009b88 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f9bf 	bl	8009ee2 <USBD_CtlSendStatus>
      break;
 8009b64:	e010      	b.n	8009b88 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f9bb 	bl	8009ee2 <USBD_CtlSendStatus>
      break;
 8009b6c:	e00c      	b.n	8009b88 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f8eb 	bl	8009d4c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b76:	4b07      	ldr	r3, [pc, #28]	@ (8009b94 <USBD_SetConfig+0x148>)
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7ff f941 	bl	8008e04 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b82:	2303      	movs	r3, #3
 8009b84:	73fb      	strb	r3, [r7, #15]
      break;
 8009b86:	bf00      	nop
  }

  return ret;
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20002608 	.word	0x20002608

08009b98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d004      	beq.n	8009bb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f8cd 	bl	8009d4c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bb2:	e023      	b.n	8009bfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	dc02      	bgt.n	8009bc6 <USBD_GetConfig+0x2e>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dc03      	bgt.n	8009bcc <USBD_GetConfig+0x34>
 8009bc4:	e015      	b.n	8009bf2 <USBD_GetConfig+0x5a>
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d00b      	beq.n	8009be2 <USBD_GetConfig+0x4a>
 8009bca:	e012      	b.n	8009bf2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f927 	bl	8009e2e <USBD_CtlSendData>
        break;
 8009be0:	e00c      	b.n	8009bfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3304      	adds	r3, #4
 8009be6:	2201      	movs	r2, #1
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f91f 	bl	8009e2e <USBD_CtlSendData>
        break;
 8009bf0:	e004      	b.n	8009bfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f8a9 	bl	8009d4c <USBD_CtlError>
        break;
 8009bfa:	bf00      	nop
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	3b01      	subs	r3, #1
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d81e      	bhi.n	8009c5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	88db      	ldrh	r3, [r3, #6]
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d004      	beq.n	8009c2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f890 	bl	8009d4c <USBD_CtlError>
        break;
 8009c2c:	e01a      	b.n	8009c64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d005      	beq.n	8009c4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f043 0202 	orr.w	r2, r3, #2
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	330c      	adds	r3, #12
 8009c4e:	2202      	movs	r2, #2
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f8eb 	bl	8009e2e <USBD_CtlSendData>
      break;
 8009c58:	e004      	b.n	8009c64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f875 	bl	8009d4c <USBD_CtlError>
      break;
 8009c62:	bf00      	nop
  }
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	885b      	ldrh	r3, [r3, #2]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d106      	bne.n	8009c8c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f92b 	bl	8009ee2 <USBD_CtlSendStatus>
  }
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d80b      	bhi.n	8009cc4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	885b      	ldrh	r3, [r3, #2]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d10c      	bne.n	8009cce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f910 	bl	8009ee2 <USBD_CtlSendStatus>
      }
      break;
 8009cc2:	e004      	b.n	8009cce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f840 	bl	8009d4c <USBD_CtlError>
      break;
 8009ccc:	e000      	b.n	8009cd0 <USBD_ClrFeature+0x3c>
      break;
 8009cce:	bf00      	nop
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	781a      	ldrb	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f7ff fa92 	bl	800922c <SWAPBYTE>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	3301      	adds	r3, #1
 8009d14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7ff fa85 	bl	800922c <SWAPBYTE>
 8009d22:	4603      	mov	r3, r0
 8009d24:	461a      	mov	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3301      	adds	r3, #1
 8009d34:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f7ff fa78 	bl	800922c <SWAPBYTE>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	80da      	strh	r2, [r3, #6]
}
 8009d44:	bf00      	nop
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d56:	2180      	movs	r1, #128	@ 0x80
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fc6f 	bl	800a63c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d5e:	2100      	movs	r1, #0
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fc6b 	bl	800a63c <USBD_LL_StallEP>
}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b086      	sub	sp, #24
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d036      	beq.n	8009df2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009d88:	6938      	ldr	r0, [r7, #16]
 8009d8a:	f000 f836 	bl	8009dfa <USBD_GetLen>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	3301      	adds	r3, #1
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d9c:	7dfb      	ldrb	r3, [r7, #23]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	4413      	add	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	7812      	ldrb	r2, [r2, #0]
 8009da6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	3301      	adds	r3, #1
 8009dac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	4413      	add	r3, r2
 8009db4:	2203      	movs	r2, #3
 8009db6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009dbe:	e013      	b.n	8009de8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	7812      	ldrb	r2, [r2, #0]
 8009dca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	613b      	str	r3, [r7, #16]
    idx++;
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	4413      	add	r3, r2
 8009dde:	2200      	movs	r2, #0
 8009de0:	701a      	strb	r2, [r3, #0]
    idx++;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	3301      	adds	r3, #1
 8009de6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1e7      	bne.n	8009dc0 <USBD_GetString+0x52>
 8009df0:	e000      	b.n	8009df4 <USBD_GetString+0x86>
    return;
 8009df2:	bf00      	nop
  }
}
 8009df4:	3718      	adds	r7, #24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b085      	sub	sp, #20
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e0a:	e005      	b.n	8009e18 <USBD_GetLen+0x1e>
  {
    len++;
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	3301      	adds	r3, #1
 8009e16:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1f5      	bne.n	8009e0c <USBD_GetLen+0x12>
  }

  return len;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	60f8      	str	r0, [r7, #12]
 8009e36:	60b9      	str	r1, [r7, #8]
 8009e38:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	2100      	movs	r1, #0
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fc7a 	bl	800a74e <USBD_LL_Transmit>

  return USBD_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	2100      	movs	r1, #0
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 fc69 	bl	800a74e <USBD_LL_Transmit>

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2203      	movs	r2, #3
 8009e96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	2100      	movs	r1, #0
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 fc6d 	bl	800a790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 fc5c 	bl	800a790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2204      	movs	r2, #4
 8009eee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fc28 	bl	800a74e <USBD_LL_Transmit>

  return USBD_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2205      	movs	r2, #5
 8009f14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f18:	2300      	movs	r3, #0
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fc36 	bl	800a790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009f34:	2200      	movs	r2, #0
 8009f36:	4912      	ldr	r1, [pc, #72]	@ (8009f80 <MX_USB_Device_Init+0x50>)
 8009f38:	4812      	ldr	r0, [pc, #72]	@ (8009f84 <MX_USB_Device_Init+0x54>)
 8009f3a:	f7fe fed9 	bl	8008cf0 <USBD_Init>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009f44:	f7f6 fb40 	bl	80005c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009f48:	490f      	ldr	r1, [pc, #60]	@ (8009f88 <MX_USB_Device_Init+0x58>)
 8009f4a:	480e      	ldr	r0, [pc, #56]	@ (8009f84 <MX_USB_Device_Init+0x54>)
 8009f4c:	f7fe ff00 	bl	8008d50 <USBD_RegisterClass>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009f56:	f7f6 fb37 	bl	80005c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009f5a:	490c      	ldr	r1, [pc, #48]	@ (8009f8c <MX_USB_Device_Init+0x5c>)
 8009f5c:	4809      	ldr	r0, [pc, #36]	@ (8009f84 <MX_USB_Device_Init+0x54>)
 8009f5e:	f7fe fe51 	bl	8008c04 <USBD_CDC_RegisterInterface>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009f68:	f7f6 fb2e 	bl	80005c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009f6c:	4805      	ldr	r0, [pc, #20]	@ (8009f84 <MX_USB_Device_Init+0x54>)
 8009f6e:	f7fe ff16 	bl	8008d9e <USBD_Start>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009f78:	f7f6 fb26 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009f7c:	bf00      	nop
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	20000130 	.word	0x20000130
 8009f84:	2000260c 	.word	0x2000260c
 8009f88:	20000018 	.word	0x20000018
 8009f8c:	2000011c 	.word	0x2000011c

08009f90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f94:	2200      	movs	r2, #0
 8009f96:	4905      	ldr	r1, [pc, #20]	@ (8009fac <CDC_Init_FS+0x1c>)
 8009f98:	4805      	ldr	r0, [pc, #20]	@ (8009fb0 <CDC_Init_FS+0x20>)
 8009f9a:	f7fe fe48 	bl	8008c2e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f9e:	4905      	ldr	r1, [pc, #20]	@ (8009fb4 <CDC_Init_FS+0x24>)
 8009fa0:	4803      	ldr	r0, [pc, #12]	@ (8009fb0 <CDC_Init_FS+0x20>)
 8009fa2:	f7fe fe62 	bl	8008c6a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	200030dc 	.word	0x200030dc
 8009fb0:	2000260c 	.word	0x2000260c
 8009fb4:	200028dc 	.word	0x200028dc

08009fb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	6039      	str	r1, [r7, #0]
 8009fd2:	71fb      	strb	r3, [r7, #7]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	2b23      	cmp	r3, #35	@ 0x23
 8009fdc:	d84a      	bhi.n	800a074 <CDC_Control_FS+0xac>
 8009fde:	a201      	add	r2, pc, #4	@ (adr r2, 8009fe4 <CDC_Control_FS+0x1c>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	0800a075 	.word	0x0800a075
 8009fe8:	0800a075 	.word	0x0800a075
 8009fec:	0800a075 	.word	0x0800a075
 8009ff0:	0800a075 	.word	0x0800a075
 8009ff4:	0800a075 	.word	0x0800a075
 8009ff8:	0800a075 	.word	0x0800a075
 8009ffc:	0800a075 	.word	0x0800a075
 800a000:	0800a075 	.word	0x0800a075
 800a004:	0800a075 	.word	0x0800a075
 800a008:	0800a075 	.word	0x0800a075
 800a00c:	0800a075 	.word	0x0800a075
 800a010:	0800a075 	.word	0x0800a075
 800a014:	0800a075 	.word	0x0800a075
 800a018:	0800a075 	.word	0x0800a075
 800a01c:	0800a075 	.word	0x0800a075
 800a020:	0800a075 	.word	0x0800a075
 800a024:	0800a075 	.word	0x0800a075
 800a028:	0800a075 	.word	0x0800a075
 800a02c:	0800a075 	.word	0x0800a075
 800a030:	0800a075 	.word	0x0800a075
 800a034:	0800a075 	.word	0x0800a075
 800a038:	0800a075 	.word	0x0800a075
 800a03c:	0800a075 	.word	0x0800a075
 800a040:	0800a075 	.word	0x0800a075
 800a044:	0800a075 	.word	0x0800a075
 800a048:	0800a075 	.word	0x0800a075
 800a04c:	0800a075 	.word	0x0800a075
 800a050:	0800a075 	.word	0x0800a075
 800a054:	0800a075 	.word	0x0800a075
 800a058:	0800a075 	.word	0x0800a075
 800a05c:	0800a075 	.word	0x0800a075
 800a060:	0800a075 	.word	0x0800a075
 800a064:	0800a075 	.word	0x0800a075
 800a068:	0800a075 	.word	0x0800a075
 800a06c:	0800a075 	.word	0x0800a075
 800a070:	0800a075 	.word	0x0800a075
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a074:	bf00      	nop
  }

  return (USBD_OK);
 800a076:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a078:	4618      	mov	r0, r3
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	4805      	ldr	r0, [pc, #20]	@ (800a0a8 <CDC_Receive_FS+0x24>)
 800a092:	f7fe fdea 	bl	8008c6a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a096:	4804      	ldr	r0, [pc, #16]	@ (800a0a8 <CDC_Receive_FS+0x24>)
 800a098:	f7fe fe00 	bl	8008c9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a09c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	2000260c 	.word	0x2000260c

0800a0ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a0be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
	...

0800a0d0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	6039      	str	r1, [r7, #0]
 800a0da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2212      	movs	r2, #18
 800a0e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a0e2:	4b03      	ldr	r3, [pc, #12]	@ (800a0f0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr
 800a0f0:	20000150 	.word	0x20000150

0800a0f4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	6039      	str	r1, [r7, #0]
 800a0fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	2204      	movs	r2, #4
 800a104:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a106:	4b03      	ldr	r3, [pc, #12]	@ (800a114 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	20000164 	.word	0x20000164

0800a118 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	4603      	mov	r3, r0
 800a120:	6039      	str	r1, [r7, #0]
 800a122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a124:	79fb      	ldrb	r3, [r7, #7]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d105      	bne.n	800a136 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	4907      	ldr	r1, [pc, #28]	@ (800a14c <USBD_CDC_ProductStrDescriptor+0x34>)
 800a12e:	4808      	ldr	r0, [pc, #32]	@ (800a150 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a130:	f7ff fe1d 	bl	8009d6e <USBD_GetString>
 800a134:	e004      	b.n	800a140 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	4904      	ldr	r1, [pc, #16]	@ (800a14c <USBD_CDC_ProductStrDescriptor+0x34>)
 800a13a:	4805      	ldr	r0, [pc, #20]	@ (800a150 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a13c:	f7ff fe17 	bl	8009d6e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a140:	4b02      	ldr	r3, [pc, #8]	@ (800a14c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a142:	4618      	mov	r0, r3
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	200038dc 	.word	0x200038dc
 800a150:	0800a968 	.word	0x0800a968

0800a154 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	4603      	mov	r3, r0
 800a15c:	6039      	str	r1, [r7, #0]
 800a15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	4904      	ldr	r1, [pc, #16]	@ (800a174 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a164:	4804      	ldr	r0, [pc, #16]	@ (800a178 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a166:	f7ff fe02 	bl	8009d6e <USBD_GetString>
  return USBD_StrDesc;
 800a16a:	4b02      	ldr	r3, [pc, #8]	@ (800a174 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	200038dc 	.word	0x200038dc
 800a178:	0800a980 	.word	0x0800a980

0800a17c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	6039      	str	r1, [r7, #0]
 800a186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	221a      	movs	r2, #26
 800a18c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a18e:	f000 f843 	bl	800a218 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a192:	4b02      	ldr	r3, [pc, #8]	@ (800a19c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20000168 	.word	0x20000168

0800a1a0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	6039      	str	r1, [r7, #0]
 800a1aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d105      	bne.n	800a1be <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	4907      	ldr	r1, [pc, #28]	@ (800a1d4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a1b6:	4808      	ldr	r0, [pc, #32]	@ (800a1d8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a1b8:	f7ff fdd9 	bl	8009d6e <USBD_GetString>
 800a1bc:	e004      	b.n	800a1c8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	4904      	ldr	r1, [pc, #16]	@ (800a1d4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a1c2:	4805      	ldr	r0, [pc, #20]	@ (800a1d8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a1c4:	f7ff fdd3 	bl	8009d6e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1c8:	4b02      	ldr	r3, [pc, #8]	@ (800a1d4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	200038dc 	.word	0x200038dc
 800a1d8:	0800a994 	.word	0x0800a994

0800a1dc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	6039      	str	r1, [r7, #0]
 800a1e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1e8:	79fb      	ldrb	r3, [r7, #7]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d105      	bne.n	800a1fa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	4907      	ldr	r1, [pc, #28]	@ (800a210 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a1f2:	4808      	ldr	r0, [pc, #32]	@ (800a214 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a1f4:	f7ff fdbb 	bl	8009d6e <USBD_GetString>
 800a1f8:	e004      	b.n	800a204 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	4904      	ldr	r1, [pc, #16]	@ (800a210 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a1fe:	4805      	ldr	r0, [pc, #20]	@ (800a214 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a200:	f7ff fdb5 	bl	8009d6e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a204:	4b02      	ldr	r3, [pc, #8]	@ (800a210 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	200038dc 	.word	0x200038dc
 800a214:	0800a9a0 	.word	0x0800a9a0

0800a218 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a21e:	4b0f      	ldr	r3, [pc, #60]	@ (800a25c <Get_SerialNum+0x44>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a224:	4b0e      	ldr	r3, [pc, #56]	@ (800a260 <Get_SerialNum+0x48>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a22a:	4b0e      	ldr	r3, [pc, #56]	@ (800a264 <Get_SerialNum+0x4c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4413      	add	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d009      	beq.n	800a252 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a23e:	2208      	movs	r2, #8
 800a240:	4909      	ldr	r1, [pc, #36]	@ (800a268 <Get_SerialNum+0x50>)
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 f814 	bl	800a270 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a248:	2204      	movs	r2, #4
 800a24a:	4908      	ldr	r1, [pc, #32]	@ (800a26c <Get_SerialNum+0x54>)
 800a24c:	68b8      	ldr	r0, [r7, #8]
 800a24e:	f000 f80f 	bl	800a270 <IntToUnicode>
  }
}
 800a252:	bf00      	nop
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	1fff7590 	.word	0x1fff7590
 800a260:	1fff7594 	.word	0x1fff7594
 800a264:	1fff7598 	.word	0x1fff7598
 800a268:	2000016a 	.word	0x2000016a
 800a26c:	2000017a 	.word	0x2000017a

0800a270 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	4613      	mov	r3, r2
 800a27c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a282:	2300      	movs	r3, #0
 800a284:	75fb      	strb	r3, [r7, #23]
 800a286:	e027      	b.n	800a2d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	0f1b      	lsrs	r3, r3, #28
 800a28c:	2b09      	cmp	r3, #9
 800a28e:	d80b      	bhi.n	800a2a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	0f1b      	lsrs	r3, r3, #28
 800a294:	b2da      	uxtb	r2, r3
 800a296:	7dfb      	ldrb	r3, [r7, #23]
 800a298:	005b      	lsls	r3, r3, #1
 800a29a:	4619      	mov	r1, r3
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	440b      	add	r3, r1
 800a2a0:	3230      	adds	r2, #48	@ 0x30
 800a2a2:	b2d2      	uxtb	r2, r2
 800a2a4:	701a      	strb	r2, [r3, #0]
 800a2a6:	e00a      	b.n	800a2be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	0f1b      	lsrs	r3, r3, #28
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
 800a2b0:	005b      	lsls	r3, r3, #1
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	440b      	add	r3, r1
 800a2b8:	3237      	adds	r2, #55	@ 0x37
 800a2ba:	b2d2      	uxtb	r2, r2
 800a2bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	011b      	lsls	r3, r3, #4
 800a2c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	75fb      	strb	r3, [r7, #23]
 800a2d8:	7dfa      	ldrb	r2, [r7, #23]
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d3d3      	bcc.n	800a288 <IntToUnicode+0x18>
  }
}
 800a2e0:	bf00      	nop
 800a2e2:	bf00      	nop
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
	...

0800a2f0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b098      	sub	sp, #96	@ 0x60
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a2f8:	f107 030c 	add.w	r3, r7, #12
 800a2fc:	2254      	movs	r2, #84	@ 0x54
 800a2fe:	2100      	movs	r1, #0
 800a300:	4618      	mov	r0, r3
 800a302:	f000 faf9 	bl	800a8f8 <memset>
  if(pcdHandle->Instance==USB)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a15      	ldr	r2, [pc, #84]	@ (800a360 <HAL_PCD_MspInit+0x70>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d122      	bne.n	800a356 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a314:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a316:	2300      	movs	r3, #0
 800a318:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a31a:	f107 030c 	add.w	r3, r7, #12
 800a31e:	4618      	mov	r0, r3
 800a320:	f7f9 fdaa 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a32a:	f7f6 f94d 	bl	80005c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a32e:	4b0d      	ldr	r3, [pc, #52]	@ (800a364 <HAL_PCD_MspInit+0x74>)
 800a330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a332:	4a0c      	ldr	r2, [pc, #48]	@ (800a364 <HAL_PCD_MspInit+0x74>)
 800a334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a338:	6593      	str	r3, [r2, #88]	@ 0x58
 800a33a:	4b0a      	ldr	r3, [pc, #40]	@ (800a364 <HAL_PCD_MspInit+0x74>)
 800a33c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a33e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a342:	60bb      	str	r3, [r7, #8]
 800a344:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a346:	2200      	movs	r2, #0
 800a348:	2100      	movs	r1, #0
 800a34a:	2014      	movs	r0, #20
 800a34c:	f7f6 fe65 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a350:	2014      	movs	r0, #20
 800a352:	f7f6 fe7c 	bl	800104e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a356:	bf00      	nop
 800a358:	3760      	adds	r7, #96	@ 0x60
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	40005c00 	.word	0x40005c00
 800a364:	40021000 	.word	0x40021000

0800a368 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a37c:	4619      	mov	r1, r3
 800a37e:	4610      	mov	r0, r2
 800a380:	f7fe fd58 	bl	8008e34 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a39e:	78fa      	ldrb	r2, [r7, #3]
 800a3a0:	6879      	ldr	r1, [r7, #4]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	00db      	lsls	r3, r3, #3
 800a3aa:	440b      	add	r3, r1
 800a3ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	78fb      	ldrb	r3, [r7, #3]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	f7fe fd92 	bl	8008ede <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a3ba:	bf00      	nop
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	00db      	lsls	r3, r3, #3
 800a3e0:	440b      	add	r3, r1
 800a3e2:	3324      	adds	r3, #36	@ 0x24
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	78fb      	ldrb	r3, [r7, #3]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	f7fe fddb 	bl	8008fa4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a3ee:	bf00      	nop
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a404:	4618      	mov	r0, r3
 800a406:	f7fe feef 	bl	80091e8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a40a:	bf00      	nop
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a41a:	2301      	movs	r3, #1
 800a41c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	795b      	ldrb	r3, [r3, #5]
 800a422:	2b02      	cmp	r3, #2
 800a424:	d001      	beq.n	800a42a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a426:	f7f6 f8cf 	bl	80005c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a430:	7bfa      	ldrb	r2, [r7, #15]
 800a432:	4611      	mov	r1, r2
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe fe99 	bl	800916c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a440:	4618      	mov	r0, r3
 800a442:	f7fe fe45 	bl	80090d0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a446:	bf00      	nop
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
	...

0800a450 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fe94 	bl	800918c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	7a5b      	ldrb	r3, [r3, #9]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d005      	beq.n	800a478 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a46c:	4b04      	ldr	r3, [pc, #16]	@ (800a480 <HAL_PCD_SuspendCallback+0x30>)
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	4a03      	ldr	r2, [pc, #12]	@ (800a480 <HAL_PCD_SuspendCallback+0x30>)
 800a472:	f043 0306 	orr.w	r3, r3, #6
 800a476:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a478:	bf00      	nop
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	e000ed00 	.word	0xe000ed00

0800a484 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	7a5b      	ldrb	r3, [r3, #9]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d007      	beq.n	800a4a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a494:	4b08      	ldr	r3, [pc, #32]	@ (800a4b8 <HAL_PCD_ResumeCallback+0x34>)
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	4a07      	ldr	r2, [pc, #28]	@ (800a4b8 <HAL_PCD_ResumeCallback+0x34>)
 800a49a:	f023 0306 	bic.w	r3, r3, #6
 800a49e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a4a0:	f000 f9f8 	bl	800a894 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe fe84 	bl	80091b8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a4b0:	bf00      	nop
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	e000ed00 	.word	0xe000ed00

0800a4bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a4c4:	4a2b      	ldr	r2, [pc, #172]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a29      	ldr	r2, [pc, #164]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a4d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a4d4:	4b27      	ldr	r3, [pc, #156]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a4d6:	4a28      	ldr	r2, [pc, #160]	@ (800a578 <USBD_LL_Init+0xbc>)
 800a4d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a4da:	4b26      	ldr	r3, [pc, #152]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a4dc:	2208      	movs	r2, #8
 800a4de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a4e0:	4b24      	ldr	r3, [pc, #144]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4e6:	4b23      	ldr	r3, [pc, #140]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a4e8:	2202      	movs	r2, #2
 800a4ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a4ec:	4b21      	ldr	r3, [pc, #132]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a4f2:	4b20      	ldr	r3, [pc, #128]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a4f8:	4b1e      	ldr	r3, [pc, #120]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a4fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a500:	2200      	movs	r2, #0
 800a502:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a504:	481b      	ldr	r0, [pc, #108]	@ (800a574 <USBD_LL_Init+0xb8>)
 800a506:	f7f7 f9c9 	bl	800189c <HAL_PCD_Init>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a510:	f7f6 f85a 	bl	80005c8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a51a:	2318      	movs	r3, #24
 800a51c:	2200      	movs	r2, #0
 800a51e:	2100      	movs	r1, #0
 800a520:	f7f8 fe82 	bl	8003228 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a52a:	2358      	movs	r3, #88	@ 0x58
 800a52c:	2200      	movs	r2, #0
 800a52e:	2180      	movs	r1, #128	@ 0x80
 800a530:	f7f8 fe7a 	bl	8003228 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a53a:	23c0      	movs	r3, #192	@ 0xc0
 800a53c:	2200      	movs	r2, #0
 800a53e:	2181      	movs	r1, #129	@ 0x81
 800a540:	f7f8 fe72 	bl	8003228 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a54a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a54e:	2200      	movs	r2, #0
 800a550:	2101      	movs	r1, #1
 800a552:	f7f8 fe69 	bl	8003228 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a55c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a560:	2200      	movs	r2, #0
 800a562:	2182      	movs	r1, #130	@ 0x82
 800a564:	f7f8 fe60 	bl	8003228 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20003adc 	.word	0x20003adc
 800a578:	40005c00 	.word	0x40005c00

0800a57c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a592:	4618      	mov	r0, r3
 800a594:	f7f7 fa50 	bl	8001a38 <HAL_PCD_Start>
 800a598:	4603      	mov	r3, r0
 800a59a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 f97e 	bl	800a8a0 <USBD_Get_USB_Status>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	4611      	mov	r1, r2
 800a5be:	461a      	mov	r2, r3
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	70fb      	strb	r3, [r7, #3]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	70bb      	strb	r3, [r7, #2]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a5da:	78bb      	ldrb	r3, [r7, #2]
 800a5dc:	883a      	ldrh	r2, [r7, #0]
 800a5de:	78f9      	ldrb	r1, [r7, #3]
 800a5e0:	f7f7 fb97 	bl	8001d12 <HAL_PCD_EP_Open>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 f958 	bl	800a8a0 <USBD_Get_USB_Status>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b084      	sub	sp, #16
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a618:	78fa      	ldrb	r2, [r7, #3]
 800a61a:	4611      	mov	r1, r2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7f7 fbd5 	bl	8001dcc <HAL_PCD_EP_Close>
 800a622:	4603      	mov	r3, r0
 800a624:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a626:	7bfb      	ldrb	r3, [r7, #15]
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 f939 	bl	800a8a0 <USBD_Get_USB_Status>
 800a62e:	4603      	mov	r3, r0
 800a630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a632:	7bbb      	ldrb	r3, [r7, #14]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a656:	78fa      	ldrb	r2, [r7, #3]
 800a658:	4611      	mov	r1, r2
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7f7 fc7e 	bl	8001f5c <HAL_PCD_EP_SetStall>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	4618      	mov	r0, r3
 800a668:	f000 f91a 	bl	800a8a0 <USBD_Get_USB_Status>
 800a66c:	4603      	mov	r3, r0
 800a66e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a670:	7bbb      	ldrb	r3, [r7, #14]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b084      	sub	sp, #16
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	460b      	mov	r3, r1
 800a684:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a694:	78fa      	ldrb	r2, [r7, #3]
 800a696:	4611      	mov	r1, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f7f7 fcb1 	bl	8002000 <HAL_PCD_EP_ClrStall>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 f8fb 	bl	800a8a0 <USBD_Get_USB_Status>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a6ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a6cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	da0b      	bge.n	800a6ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6da:	68f9      	ldr	r1, [r7, #12]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	00db      	lsls	r3, r3, #3
 800a6e4:	440b      	add	r3, r1
 800a6e6:	3312      	adds	r3, #18
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	e00b      	b.n	800a704 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6f2:	68f9      	ldr	r1, [r7, #12]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	440b      	add	r3, r1
 800a6fe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a702:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a704:	4618      	mov	r0, r3
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a72a:	78fa      	ldrb	r2, [r7, #3]
 800a72c:	4611      	mov	r1, r2
 800a72e:	4618      	mov	r0, r3
 800a730:	f7f7 facb 	bl	8001cca <HAL_PCD_SetAddress>
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 f8b0 	bl	800a8a0 <USBD_Get_USB_Status>
 800a740:	4603      	mov	r3, r0
 800a742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a744:	7bbb      	ldrb	r3, [r7, #14]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b086      	sub	sp, #24
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
 800a75a:	460b      	mov	r3, r1
 800a75c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a76c:	7af9      	ldrb	r1, [r7, #11]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	f7f7 fbbc 	bl	8001eee <HAL_PCD_EP_Transmit>
 800a776:	4603      	mov	r3, r0
 800a778:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 f88f 	bl	800a8a0 <USBD_Get_USB_Status>
 800a782:	4603      	mov	r3, r0
 800a784:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a786:	7dbb      	ldrb	r3, [r7, #22]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3718      	adds	r7, #24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	607a      	str	r2, [r7, #4]
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	460b      	mov	r3, r1
 800a79e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a7ae:	7af9      	ldrb	r1, [r7, #11]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	f7f7 fb52 	bl	8001e5c <HAL_PCD_EP_Receive>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7bc:	7dfb      	ldrb	r3, [r7, #23]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 f86e 	bl	800a8a0 <USBD_Get_USB_Status>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a7e4:	78fa      	ldrb	r2, [r7, #3]
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7f7 fb68 	bl	8001ebe <HAL_PCD_EP_GetRxCount>
 800a7ee:	4603      	mov	r3, r0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	460b      	mov	r3, r1
 800a802:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <HAL_PCDEx_LPM_Callback+0x18>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d013      	beq.n	800a836 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a80e:	e023      	b.n	800a858 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	7a5b      	ldrb	r3, [r3, #9]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d007      	beq.n	800a828 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a818:	f000 f83c 	bl	800a894 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a81c:	4b10      	ldr	r3, [pc, #64]	@ (800a860 <HAL_PCDEx_LPM_Callback+0x68>)
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	4a0f      	ldr	r2, [pc, #60]	@ (800a860 <HAL_PCDEx_LPM_Callback+0x68>)
 800a822:	f023 0306 	bic.w	r3, r3, #6
 800a826:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fe fcc2 	bl	80091b8 <USBD_LL_Resume>
    break;
 800a834:	e010      	b.n	800a858 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fe fca5 	bl	800918c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	7a5b      	ldrb	r3, [r3, #9]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d005      	beq.n	800a856 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a84a:	4b05      	ldr	r3, [pc, #20]	@ (800a860 <HAL_PCDEx_LPM_Callback+0x68>)
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	4a04      	ldr	r2, [pc, #16]	@ (800a860 <HAL_PCDEx_LPM_Callback+0x68>)
 800a850:	f043 0306 	orr.w	r3, r3, #6
 800a854:	6113      	str	r3, [r2, #16]
    break;
 800a856:	bf00      	nop
}
 800a858:	bf00      	nop
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	e000ed00 	.word	0xe000ed00

0800a864 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a86c:	4b03      	ldr	r3, [pc, #12]	@ (800a87c <USBD_static_malloc+0x18>)
}
 800a86e:	4618      	mov	r0, r3
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	20003db8 	.word	0x20003db8

0800a880 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]

}
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a898:	f7f5 fd1a 	bl	80002d0 <SystemClock_Config>
}
 800a89c:	bf00      	nop
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8ae:	79fb      	ldrb	r3, [r7, #7]
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d817      	bhi.n	800a8e4 <USBD_Get_USB_Status+0x44>
 800a8b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8bc <USBD_Get_USB_Status+0x1c>)
 800a8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ba:	bf00      	nop
 800a8bc:	0800a8cd 	.word	0x0800a8cd
 800a8c0:	0800a8d3 	.word	0x0800a8d3
 800a8c4:	0800a8d9 	.word	0x0800a8d9
 800a8c8:	0800a8df 	.word	0x0800a8df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d0:	e00b      	b.n	800a8ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d6:	e008      	b.n	800a8ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	73fb      	strb	r3, [r7, #15]
    break;
 800a8dc:	e005      	b.n	800a8ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e2:	e002      	b.n	800a8ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e8:	bf00      	nop
  }
  return usb_status;
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <memset>:
 800a8f8:	4402      	add	r2, r0
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d100      	bne.n	800a902 <memset+0xa>
 800a900:	4770      	bx	lr
 800a902:	f803 1b01 	strb.w	r1, [r3], #1
 800a906:	e7f9      	b.n	800a8fc <memset+0x4>

0800a908 <__libc_init_array>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	4d0d      	ldr	r5, [pc, #52]	@ (800a940 <__libc_init_array+0x38>)
 800a90c:	4c0d      	ldr	r4, [pc, #52]	@ (800a944 <__libc_init_array+0x3c>)
 800a90e:	1b64      	subs	r4, r4, r5
 800a910:	10a4      	asrs	r4, r4, #2
 800a912:	2600      	movs	r6, #0
 800a914:	42a6      	cmp	r6, r4
 800a916:	d109      	bne.n	800a92c <__libc_init_array+0x24>
 800a918:	4d0b      	ldr	r5, [pc, #44]	@ (800a948 <__libc_init_array+0x40>)
 800a91a:	4c0c      	ldr	r4, [pc, #48]	@ (800a94c <__libc_init_array+0x44>)
 800a91c:	f000 f818 	bl	800a950 <_init>
 800a920:	1b64      	subs	r4, r4, r5
 800a922:	10a4      	asrs	r4, r4, #2
 800a924:	2600      	movs	r6, #0
 800a926:	42a6      	cmp	r6, r4
 800a928:	d105      	bne.n	800a936 <__libc_init_array+0x2e>
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a930:	4798      	blx	r3
 800a932:	3601      	adds	r6, #1
 800a934:	e7ee      	b.n	800a914 <__libc_init_array+0xc>
 800a936:	f855 3b04 	ldr.w	r3, [r5], #4
 800a93a:	4798      	blx	r3
 800a93c:	3601      	adds	r6, #1
 800a93e:	e7f2      	b.n	800a926 <__libc_init_array+0x1e>
 800a940:	0800a9c0 	.word	0x0800a9c0
 800a944:	0800a9c0 	.word	0x0800a9c0
 800a948:	0800a9c0 	.word	0x0800a9c0
 800a94c:	0800a9c4 	.word	0x0800a9c4

0800a950 <_init>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr

0800a95c <_fini>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr
