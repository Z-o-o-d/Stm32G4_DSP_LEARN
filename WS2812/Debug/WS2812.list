
WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b760  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b938  0800b938  0000c938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b990  0800b990  0000d184  2**0
                  CONTENTS
  4 .ARM          00000000  0800b990  0800b990  0000d184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b990  0800b990  0000d184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b990  0800b990  0000c990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b994  0800b994  0000c994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800b998  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f50  20000184  0800bb1c  0000d184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040d4  0800bb1c  0000e0d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc8f  00000000  00000000  0000d1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041c1  00000000  00000000  0002ae43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  0002f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001443  00000000  00000000  00030a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd98  00000000  00000000  00031ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f68d  00000000  00000000  0005dc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001210dc  00000000  00000000  0007d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019e3a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fdc  00000000  00000000  0019e3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001a53c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b920 	.word	0x0800b920

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800b920 	.word	0x0800b920

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fe6d 	bl	8000efa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f858 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fa4c 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 fa20 	bl	800066c <MX_DMA_Init>
  MX_TIM3_Init();
 800022c:	f000 f9a8 	bl	8000580 <MX_TIM3_Init>
  MX_USB_Device_Init();
 8000230:	f00a fe66 	bl	800af00 <MX_USB_Device_Init>
  MX_RTC_Init();
 8000234:	f000 f978 	bl	8000528 <MX_RTC_Init>
  MX_HRTIM1_Init();
 8000238:	f000 f8a6 	bl	8000388 <MX_HRTIM1_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Base_Start(&htim3);
 800023c:	4824      	ldr	r0, [pc, #144]	@ (80002d0 <main+0xb8>)
 800023e:	f005 f9c5 	bl	80055cc <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	2110      	movs	r1, #16
 8000246:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800024a:	f001 fc39 	bl	8001ac0 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800024e:	2001      	movs	r0, #1
 8000250:	f000 fec4 	bl	8000fdc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000254:	2201      	movs	r2, #1
 8000256:	2110      	movs	r1, #16
 8000258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800025c:	f001 fc30 	bl	8001ac0 <HAL_GPIO_WritePin>
//      for (int period = 0; period < 100; period++) {
//          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 70);

          HAL_Delay(7);
 8000260:	2007      	movs	r0, #7
 8000262:	f000 febb 	bl	8000fdc <HAL_Delay>
//      for (int period = 100; period >= 0; period--) {
//          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 140);
//          HAL_Delay(7);
//      }
//          for (int i = 0; i < 100000; ++i) {
	 ws2812_set_all(rgb_to_color(0xff, 0x00, 0x00));
 8000266:	2200      	movs	r2, #0
 8000268:	2100      	movs	r1, #0
 800026a:	20ff      	movs	r0, #255	@ 0xff
 800026c:	f000 fdea 	bl	8000e44 <rgb_to_color>
 8000270:	4603      	mov	r3, r0
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fdca 	bl	8000e0c <ws2812_set_all>
	 ws2812_gradient(100, 10);
 8000278:	210a      	movs	r1, #10
 800027a:	2064      	movs	r0, #100	@ 0x64
 800027c:	f000 fcac 	bl	8000bd8 <ws2812_gradient>
	 HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000284:	f000 feaa 	bl	8000fdc <HAL_Delay>
	 ws2812_set_all(rgb_to_color(0x00, 0x00, 0xff));
 8000288:	22ff      	movs	r2, #255	@ 0xff
 800028a:	2100      	movs	r1, #0
 800028c:	2000      	movs	r0, #0
 800028e:	f000 fdd9 	bl	8000e44 <rgb_to_color>
 8000292:	4603      	mov	r3, r0
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fdb9 	bl	8000e0c <ws2812_set_all>
	 ws2812_gradient(100, 10);
 800029a:	210a      	movs	r1, #10
 800029c:	2064      	movs	r0, #100	@ 0x64
 800029e:	f000 fc9b 	bl	8000bd8 <ws2812_gradient>
	 HAL_Delay(1000);
 80002a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002a6:	f000 fe99 	bl	8000fdc <HAL_Delay>
	 ws2812_set_all(rgb_to_color(0x00, 0xff, 0x00));
 80002aa:	2200      	movs	r2, #0
 80002ac:	21ff      	movs	r1, #255	@ 0xff
 80002ae:	2000      	movs	r0, #0
 80002b0:	f000 fdc8 	bl	8000e44 <rgb_to_color>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fda8 	bl	8000e0c <ws2812_set_all>
	 ws2812_gradient(100, 10);
 80002bc:	210a      	movs	r1, #10
 80002be:	2064      	movs	r0, #100	@ 0x64
 80002c0:	f000 fc8a 	bl	8000bd8 <ws2812_gradient>
	 HAL_Delay(1000);
 80002c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002c8:	f000 fe88 	bl	8000fdc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80002cc:	bf00      	nop
 80002ce:	e7b8      	b.n	8000242 <main+0x2a>
 80002d0:	200002c4 	.word	0x200002c4

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b094      	sub	sp, #80	@ 0x50
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2238      	movs	r2, #56	@ 0x38
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f00b faf0 	bl	800b8c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002f6:	2000      	movs	r0, #0
 80002f8:	f003 fffc 	bl	80042f4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002fc:	f003 ffea 	bl	80042d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000300:	4b20      	ldr	r3, [pc, #128]	@ (8000384 <SystemClock_Config+0xb0>)
 8000302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000306:	4a1f      	ldr	r2, [pc, #124]	@ (8000384 <SystemClock_Config+0xb0>)
 8000308:	f023 0318 	bic.w	r3, r3, #24
 800030c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000310:	2325      	movs	r3, #37	@ 0x25
 8000312:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000318:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	2302      	movs	r3, #2
 8000324:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000326:	2303      	movs	r3, #3
 8000328:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800032a:	2302      	movs	r3, #2
 800032c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800032e:	2355      	movs	r3, #85	@ 0x55
 8000330:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000332:	2302      	movs	r3, #2
 8000334:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000336:	2302      	movs	r3, #2
 8000338:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800033a:	2302      	movs	r3, #2
 800033c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	4618      	mov	r0, r3
 8000344:	f004 f88a 	bl	800445c <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800034e:	f000 fa0d 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2303      	movs	r3, #3
 8000358:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2104      	movs	r1, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f004 fb88 	bl	8004a80 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000376:	f000 f9f9 	bl	800076c <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3750      	adds	r7, #80	@ 0x50
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b0ac      	sub	sp, #176	@ 0xb0
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800038e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 800039c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
 80003ac:	615a      	str	r2, [r3, #20]
 80003ae:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80003b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003b4:	2260      	movs	r2, #96	@ 0x60
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f00b fa85 	bl	800b8c8 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2220      	movs	r2, #32
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f00b fa7f 	bl	800b8c8 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80003ca:	4b55      	ldr	r3, [pc, #340]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 80003cc:	4a55      	ldr	r2, [pc, #340]	@ (8000524 <MX_HRTIM1_Init+0x19c>)
 80003ce:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80003d0:	4b53      	ldr	r3, [pc, #332]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80003d6:	4b52      	ldr	r3, [pc, #328]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80003dc:	4850      	ldr	r0, [pc, #320]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 80003de:	f001 fb87 	bl	8001af0 <HAL_HRTIM_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 80003e8:	f000 f9c0 	bl	800076c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80003ec:	210c      	movs	r1, #12
 80003ee:	484c      	ldr	r0, [pc, #304]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 80003f0:	f001 fc4e 	bl	8001c90 <HAL_HRTIM_DLLCalibrationStart>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 80003fa:	f000 f9b7 	bl	800076c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80003fe:	210a      	movs	r1, #10
 8000400:	4847      	ldr	r0, [pc, #284]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 8000402:	f001 fc9d 	bl	8001d40 <HAL_HRTIM_PollForDLLCalibration>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 800040c:	f000 f9ae 	bl	800076c <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8000410:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 8000414:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000418:	2300      	movs	r3, #0
 800041a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 800041e:	2300      	movs	r3, #0
 8000420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000424:	2308      	movs	r3, #8
 8000426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800042a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800042e:	461a      	mov	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	483b      	ldr	r0, [pc, #236]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 8000434:	f001 fcb8 	bl	8001da8 <HAL_HRTIM_TimeBaseConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 800043e:	f000 f995 	bl	800076c <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8000442:	2300      	movs	r3, #0
 8000444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000448:	2300      	movs	r3, #0
 800044a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 800044e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000452:	461a      	mov	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	4832      	ldr	r0, [pc, #200]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 8000458:	f001 fd5b 	bl	8001f12 <HAL_HRTIM_WaveformTimerControl>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 8000462:	f000 f983 	bl	800076c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000466:	2300      	movs	r3, #0
 8000468:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800046a:	2300      	movs	r3, #0
 800046c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 800046e:	2300      	movs	r3, #0
 8000470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8000472:	2300      	movs	r3, #0
 8000474:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 8000476:	2301      	movs	r3, #1
 8000478:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800047a:	2300      	movs	r3, #0
 800047c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800047e:	2300      	movs	r3, #0
 8000480:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000482:	2300      	movs	r3, #0
 8000484:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000486:	2300      	movs	r3, #0
 8000488:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800048a:	2300      	movs	r3, #0
 800048c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800048e:	2300      	movs	r3, #0
 8000490:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000492:	2300      	movs	r3, #0
 8000494:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000496:	2300      	movs	r3, #0
 8000498:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800049a:	2300      	movs	r3, #0
 800049c:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800049e:	2300      	movs	r3, #0
 80004a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80004aa:	2300      	movs	r3, #0
 80004ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80004ae:	2300      	movs	r3, #0
 80004b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80004b6:	2300      	movs	r3, #0
 80004b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80004ba:	2300      	movs	r3, #0
 80004bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80004be:	2300      	movs	r3, #0
 80004c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80004c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004c8:	461a      	mov	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	4814      	ldr	r0, [pc, #80]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 80004ce:	f001 fc93 	bl	8001df8 <HAL_HRTIM_WaveformTimerConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 80004d8:	f000 f948 	bl	800076c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80004dc:	2300      	movs	r3, #0
 80004de:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2201      	movs	r2, #1
 8000500:	2100      	movs	r1, #0
 8000502:	4807      	ldr	r0, [pc, #28]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 8000504:	f001 fd38 	bl	8001f78 <HAL_HRTIM_WaveformOutputConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_HRTIM1_Init+0x18a>
  {
    Error_Handler();
 800050e:	f000 f92d 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000512:	4803      	ldr	r0, [pc, #12]	@ (8000520 <MX_HRTIM1_Init+0x198>)
 8000514:	f000 f97c 	bl	8000810 <HAL_HRTIM_MspPostInit>

}
 8000518:	bf00      	nop
 800051a:	37b0      	adds	r7, #176	@ 0xb0
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200001a0 	.word	0x200001a0
 8000524:	40016800 	.word	0x40016800

08000528 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800052c:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <MX_RTC_Init+0x50>)
 800052e:	4a13      	ldr	r2, [pc, #76]	@ (800057c <MX_RTC_Init+0x54>)
 8000530:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000532:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <MX_RTC_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000538:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <MX_RTC_Init+0x50>)
 800053a:	227f      	movs	r2, #127	@ 0x7f
 800053c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800053e:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <MX_RTC_Init+0x50>)
 8000540:	22ff      	movs	r2, #255	@ 0xff
 8000542:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000544:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <MX_RTC_Init+0x50>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800054a:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <MX_RTC_Init+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000550:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <MX_RTC_Init+0x50>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <MX_RTC_Init+0x50>)
 8000558:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800055c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <MX_RTC_Init+0x50>)
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000564:	4804      	ldr	r0, [pc, #16]	@ (8000578 <MX_RTC_Init+0x50>)
 8000566:	f004 febd 	bl	80052e4 <HAL_RTC_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000570:	f000 f8fc 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000029c 	.word	0x2000029c
 800057c:	40002800 	.word	0x40002800

08000580 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	@ 0x38
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000586:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000664 <MX_TIM3_Init+0xe4>)
 80005b4:	4a2c      	ldr	r2, [pc, #176]	@ (8000668 <MX_TIM3_Init+0xe8>)
 80005b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <MX_TIM3_Init+0xe4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005be:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <MX_TIM3_Init+0xe4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 214;
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <MX_TIM3_Init+0xe4>)
 80005c6:	22d6      	movs	r2, #214	@ 0xd6
 80005c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ca:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <MX_TIM3_Init+0xe4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005d0:	4b24      	ldr	r3, [pc, #144]	@ (8000664 <MX_TIM3_Init+0xe4>)
 80005d2:	2280      	movs	r2, #128	@ 0x80
 80005d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005d6:	4823      	ldr	r0, [pc, #140]	@ (8000664 <MX_TIM3_Init+0xe4>)
 80005d8:	f004 ffa1 	bl	800551e <HAL_TIM_Base_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80005e2:	f000 f8c3 	bl	800076c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005f0:	4619      	mov	r1, r3
 80005f2:	481c      	ldr	r0, [pc, #112]	@ (8000664 <MX_TIM3_Init+0xe4>)
 80005f4:	f005 fd4c 	bl	8006090 <HAL_TIM_ConfigClockSource>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80005fe:	f000 f8b5 	bl	800076c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000602:	4818      	ldr	r0, [pc, #96]	@ (8000664 <MX_TIM3_Init+0xe4>)
 8000604:	f005 f852 	bl	80056ac <HAL_TIM_PWM_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800060e:	f000 f8ad 	bl	800076c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4810      	ldr	r0, [pc, #64]	@ (8000664 <MX_TIM3_Init+0xe4>)
 8000622:	f006 fc03 	bl	8006e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800062c:	f000 f89e 	bl	800076c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000630:	2360      	movs	r3, #96	@ 0x60
 8000632:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	220c      	movs	r2, #12
 8000644:	4619      	mov	r1, r3
 8000646:	4807      	ldr	r0, [pc, #28]	@ (8000664 <MX_TIM3_Init+0xe4>)
 8000648:	f005 fc0e 	bl	8005e68 <HAL_TIM_PWM_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000652:	f000 f88b 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000656:	4803      	ldr	r0, [pc, #12]	@ (8000664 <MX_TIM3_Init+0xe4>)
 8000658:	f000 f9a2 	bl	80009a0 <HAL_TIM_MspPostInit>

}
 800065c:	bf00      	nop
 800065e:	3738      	adds	r7, #56	@ 0x38
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200002c4 	.word	0x200002c4
 8000668:	40000400 	.word	0x40000400

0800066c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000672:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_DMA_Init+0x50>)
 8000674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000676:	4a11      	ldr	r2, [pc, #68]	@ (80006bc <MX_DMA_Init+0x50>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6493      	str	r3, [r2, #72]	@ 0x48
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_DMA_Init+0x50>)
 8000680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_DMA_Init+0x50>)
 800068c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800068e:	4a0b      	ldr	r2, [pc, #44]	@ (80006bc <MX_DMA_Init+0x50>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6493      	str	r3, [r2, #72]	@ 0x48
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_DMA_Init+0x50>)
 8000698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	200b      	movs	r0, #11
 80006a8:	f000 fde1 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006ac:	200b      	movs	r0, #11
 80006ae:	f000 fdf8 	bl	80012a2 <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a23      	ldr	r2, [pc, #140]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0320 	and.w	r3, r3, #32
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_GPIO_Init+0xa8>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a17      	ldr	r2, [pc, #92]	@ (8000768 <MX_GPIO_Init+0xa8>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_GPIO_Init+0xa8>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_GPIO_Init+0xa8>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <MX_GPIO_Init+0xa8>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_GPIO_Init+0xa8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2110      	movs	r1, #16
 800073a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073e:	f001 f9bf 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000742:	2310      	movs	r3, #16
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075c:	f001 f82e 	bl	80017bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	@ 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <Error_Handler+0x8>

08000778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <HAL_MspInit+0x54>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <HAL_MspInit+0x54>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6613      	str	r3, [r2, #96]	@ 0x60
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <HAL_MspInit+0x54>)
 800078c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <HAL_MspInit+0x54>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079a:	4a0c      	ldr	r2, [pc, #48]	@ (80007cc <HAL_MspInit+0x54>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a2:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <HAL_MspInit+0x54>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fc36 	bl	8001020 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80007b4:	f000 fc5c 	bl	8001070 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fc45 	bl	8001048 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007be:	f003 fe3d 	bl	800443c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <HAL_HRTIM_MspInit+0x38>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10b      	bne.n	80007fa <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <HAL_HRTIM_MspInit+0x3c>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e6:	4a09      	ldr	r2, [pc, #36]	@ (800080c <HAL_HRTIM_MspInit+0x3c>)
 80007e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <HAL_HRTIM_MspInit+0x3c>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40016800 	.word	0x40016800
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <HAL_HRTIM_MspPostInit+0x68>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d11d      	bne.n	800086e <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_HRTIM_MspPostInit+0x6c>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	4a11      	ldr	r2, [pc, #68]	@ (800087c <HAL_HRTIM_MspPostInit+0x6c>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <HAL_HRTIM_MspPostInit+0x6c>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PA8     ------> HRTIM1_CHA1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800084a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800084e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 800085c:	230d      	movs	r3, #13
 800085e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086a:	f000 ffa7 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40016800 	.word	0x40016800
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b098      	sub	sp, #96	@ 0x60
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2254      	movs	r2, #84	@ 0x54
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f00b f819 	bl	800b8c8 <memset>
  if(hrtc->Instance==RTC)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a15      	ldr	r2, [pc, #84]	@ (80008f0 <HAL_RTC_MspInit+0x70>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d123      	bne.n	80008e8 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80008a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4618      	mov	r0, r3
 80008b2:	f004 fac9 	bl	8004e48 <HAL_RCCEx_PeriphCLKConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80008bc:	f7ff ff56 	bl	800076c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_RTC_MspInit+0x74>)
 80008c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80008c6:	4a0b      	ldr	r2, [pc, #44]	@ (80008f4 <HAL_RTC_MspInit+0x74>)
 80008c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <HAL_RTC_MspInit+0x74>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d4:	4a07      	ldr	r2, [pc, #28]	@ (80008f4 <HAL_RTC_MspInit+0x74>)
 80008d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008da:	6593      	str	r3, [r2, #88]	@ 0x58
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_RTC_MspInit+0x74>)
 80008de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3760      	adds	r7, #96	@ 0x60
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40002800 	.word	0x40002800
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a22      	ldr	r2, [pc, #136]	@ (8000990 <HAL_TIM_Base_MspInit+0x98>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d13e      	bne.n	8000988 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800090a:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <HAL_TIM_Base_MspInit+0x9c>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <HAL_TIM_Base_MspInit+0x9c>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6593      	str	r3, [r2, #88]	@ 0x58
 8000916:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <HAL_TIM_Base_MspInit+0x9c>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4 Init */
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 8000922:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 8000924:	4a1d      	ldr	r2, [pc, #116]	@ (800099c <HAL_TIM_Base_MspInit+0xa4>)
 8000926:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 800092a:	2240      	movs	r2, #64	@ 0x40
 800092c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 8000930:	2210      	movs	r2, #16
 8000932:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 8000942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000946:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 800094a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800094e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 800095c:	480e      	ldr	r0, [pc, #56]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 800095e:	f000 fcbb 	bl	80012d8 <HAL_DMA_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000968:	f7ff ff00 	bl	800076c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 8000970:	631a      	str	r2, [r3, #48]	@ 0x30
 8000972:	4a09      	ldr	r2, [pc, #36]	@ (8000998 <HAL_TIM_Base_MspInit+0xa0>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	201d      	movs	r0, #29
 800097e:	f000 fc76 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000982:	201d      	movs	r0, #29
 8000984:	f000 fc8d 	bl	80012a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40000400 	.word	0x40000400
 8000994:	40021000 	.word	0x40021000
 8000998:	20000310 	.word	0x20000310
 800099c:	40020008 	.word	0x40020008

080009a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a11      	ldr	r2, [pc, #68]	@ (8000a04 <HAL_TIM_MspPostInit+0x64>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d11b      	bne.n	80009fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a10      	ldr	r2, [pc, #64]	@ (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB7     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009da:	2380      	movs	r3, #128	@ 0x80
 80009dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 80009ea:	230a      	movs	r3, #10
 80009ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <HAL_TIM_MspPostInit+0x6c>)
 80009f6:	f000 fee1 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40000400 	.word	0x40000400
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000400 	.word	0x48000400

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f000 fa9b 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <DMA1_Channel1_IRQHandler+0x10>)
 8000a76:	f000 fd52 	bl	800151e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000310 	.word	0x20000310

08000a84 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <USB_LP_IRQHandler+0x10>)
 8000a8a:	f001 ffdf 	bl	8002a4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20003bd8 	.word	0x20003bd8

08000a98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <TIM3_IRQHandler+0x10>)
 8000a9e:	f005 f893 	bl	8005bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200002c4 	.word	0x200002c4

08000aac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <ws2812_update>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	e061      	b.n	8000ba0 <ws2812_update+0xd0>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4936      	ldr	r1, [pc, #216]	@ (8000bbc <ws2812_update+0xec>)
 8000ae2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ae6:	4936      	ldr	r1, [pc, #216]	@ (8000bc0 <ws2812_update+0xf0>)
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4a34      	ldr	r2, [pc, #208]	@ (8000bc0 <ws2812_update+0xf0>)
 8000af0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000af4:	4b33      	ldr	r3, [pc, #204]	@ (8000bc4 <ws2812_update+0xf4>)
 8000af6:	4a34      	ldr	r2, [pc, #208]	@ (8000bc8 <ws2812_update+0xf8>)
 8000af8:	4934      	ldr	r1, [pc, #208]	@ (8000bcc <ws2812_update+0xfc>)
 8000afa:	f000 f9b9 	bl	8000e70 <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	4613      	mov	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000b0c:	4a30      	ldr	r2, [pc, #192]	@ (8000bd0 <ws2812_update+0x100>)
 8000b0e:	4413      	add	r3, r2
 8000b10:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	71bb      	strb	r3, [r7, #6]
 8000b16:	e03d      	b.n	8000b94 <ws2812_update+0xc4>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8000b18:	4b2c      	ldr	r3, [pc, #176]	@ (8000bcc <ws2812_update+0xfc>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	79bb      	ldrb	r3, [r7, #6]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <ws2812_update+0x60>
 8000b2c:	218c      	movs	r1, #140	@ 0x8c
 8000b2e:	e000      	b.n	8000b32 <ws2812_update+0x62>
 8000b30:	2146      	movs	r1, #70	@ 0x46
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	460a      	mov	r2, r1
 8000b3c:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8000b3e:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <ws2812_update+0xf8>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <ws2812_update+0x86>
 8000b52:	218c      	movs	r1, #140	@ 0x8c
 8000b54:	e000      	b.n	8000b58 <ws2812_update+0x88>
 8000b56:	2146      	movs	r1, #70	@ 0x46
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	460a      	mov	r2, r1
 8000b64:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8000b66:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <ws2812_update+0xf4>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <ws2812_update+0xae>
 8000b7a:	218c      	movs	r1, #140	@ 0x8c
 8000b7c:	e000      	b.n	8000b80 <ws2812_update+0xb0>
 8000b7e:	2146      	movs	r1, #70	@ 0x46
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	3310      	adds	r3, #16
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	460a      	mov	r2, r1
 8000b8c:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	3301      	adds	r3, #1
 8000b92:	71bb      	strb	r3, [r7, #6]
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	d9be      	bls.n	8000b18 <ws2812_update+0x48>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b63      	cmp	r3, #99	@ 0x63
 8000ba4:	d99a      	bls.n	8000adc <ws2812_update+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)ws2812_data,
 8000ba6:	f640 5348 	movw	r3, #3400	@ 0xd48
 8000baa:	4a09      	ldr	r2, [pc, #36]	@ (8000bd0 <ws2812_update+0x100>)
 8000bac:	210c      	movs	r1, #12
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <ws2812_update+0x104>)
 8000bb0:	f004 fdde 	bl	8005770 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000370 	.word	0x20000370
 8000bc0:	20000500 	.word	0x20000500
 8000bc4:	20000692 	.word	0x20000692
 8000bc8:	20000691 	.word	0x20000691
 8000bcc:	20000690 	.word	0x20000690
 8000bd0:	20000694 	.word	0x20000694
 8000bd4:	200002c4 	.word	0x200002c4

08000bd8 <ws2812_gradient>:
 * @brief  通过渐变方式更新LED颜色（线性插值）
 * @param  steps: 渐变步数
 * @param  delay_ms: 每步之间的延迟时间（毫秒）
 */
void ws2812_gradient(uint8_t steps, uint16_t delay_ms)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b087      	sub	sp, #28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	80bb      	strh	r3, [r7, #4]
	static uint8_t start_r[WS2812_NUM], start_g[WS2812_NUM], start_b[WS2812_NUM];
	static float r_step[WS2812_NUM], g_step[WS2812_NUM], b_step[WS2812_NUM];

	// 提取初始颜色，并计算每步的渐变步长
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	75fb      	strb	r3, [r7, #23]
 8000bec:	e062      	b.n	8000cb4 <ws2812_gradient+0xdc>
	{
		color_to_rgb(_ws2812_color_current[i], &start_r[i], &start_g[i], &start_b[i]);
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
 8000bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8000dac <ws2812_gradient+0x1d4>)
 8000bf2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bf6:	7dfb      	ldrb	r3, [r7, #23]
 8000bf8:	4a6d      	ldr	r2, [pc, #436]	@ (8000db0 <ws2812_gradient+0x1d8>)
 8000bfa:	1899      	adds	r1, r3, r2
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	4a6d      	ldr	r2, [pc, #436]	@ (8000db4 <ws2812_gradient+0x1dc>)
 8000c00:	441a      	add	r2, r3
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
 8000c04:	4c6c      	ldr	r4, [pc, #432]	@ (8000db8 <ws2812_gradient+0x1e0>)
 8000c06:	4423      	add	r3, r4
 8000c08:	f000 f932 	bl	8000e70 <color_to_rgb>
		uint8_t target_r, target_g, target_b;
		color_to_rgb(ws2812_color[i], &target_r, &target_g, &target_b);
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	4a6b      	ldr	r2, [pc, #428]	@ (8000dbc <ws2812_gradient+0x1e4>)
 8000c10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c14:	f107 030f 	add.w	r3, r7, #15
 8000c18:	f107 0210 	add.w	r2, r7, #16
 8000c1c:	f107 0111 	add.w	r1, r7, #17
 8000c20:	f000 f926 	bl	8000e70 <color_to_rgb>

		r_step[i] = (float)(target_r - start_r[i]) / steps;
 8000c24:	7c7b      	ldrb	r3, [r7, #17]
 8000c26:	4619      	mov	r1, r3
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
 8000c2a:	4a61      	ldr	r2, [pc, #388]	@ (8000db0 <ws2812_gradient+0x1d8>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	1acb      	subs	r3, r1, r3
 8000c30:	ee07 3a90 	vmov	s15, r3
 8000c34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c48:	4a5d      	ldr	r2, [pc, #372]	@ (8000dc0 <ws2812_gradient+0x1e8>)
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	edc3 7a00 	vstr	s15, [r3]
		g_step[i] = (float)(target_g - start_g[i]) / steps;
 8000c52:	7c3b      	ldrb	r3, [r7, #16]
 8000c54:	4619      	mov	r1, r3
 8000c56:	7dfb      	ldrb	r3, [r7, #23]
 8000c58:	4a56      	ldr	r2, [pc, #344]	@ (8000db4 <ws2812_gradient+0x1dc>)
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	1acb      	subs	r3, r1, r3
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	ee07 3a90 	vmov	s15, r3
 8000c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c70:	7dfb      	ldrb	r3, [r7, #23]
 8000c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c76:	4a53      	ldr	r2, [pc, #332]	@ (8000dc4 <ws2812_gradient+0x1ec>)
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
		b_step[i] = (float)(target_b - start_b[i]) / steps;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	4619      	mov	r1, r3
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	4a4c      	ldr	r2, [pc, #304]	@ (8000db8 <ws2812_gradient+0x1e0>)
 8000c88:	5cd3      	ldrb	r3, [r2, r3]
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	ee07 3a90 	vmov	s15, r3
 8000c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca4:	4a48      	ldr	r2, [pc, #288]	@ (8000dc8 <ws2812_gradient+0x1f0>)
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	75fb      	strb	r3, [r7, #23]
 8000cb4:	7dfb      	ldrb	r3, [r7, #23]
 8000cb6:	2b63      	cmp	r3, #99	@ 0x63
 8000cb8:	d999      	bls.n	8000bee <ws2812_gradient+0x16>
	}

	// 逐步渐变
	for (uint8_t step = 1; step <= steps; step++)
 8000cba:	2301      	movs	r3, #1
 8000cbc:	75bb      	strb	r3, [r7, #22]
 8000cbe:	e06b      	b.n	8000d98 <ws2812_gradient+0x1c0>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	757b      	strb	r3, [r7, #21]
 8000cc4:	e05c      	b.n	8000d80 <ws2812_gradient+0x1a8>
		{
			// 计算当前步的颜色
			uint8_t r = (uint8_t)(start_r[led_id] + r_step[led_id] * step);
 8000cc6:	7d7b      	ldrb	r3, [r7, #21]
 8000cc8:	4a39      	ldr	r2, [pc, #228]	@ (8000db0 <ws2812_gradient+0x1d8>)
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cd4:	7d7b      	ldrb	r3, [r7, #21]
 8000cd6:	4a3a      	ldr	r2, [pc, #232]	@ (8000dc0 <ws2812_gradient+0x1e8>)
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	edd3 6a00 	vldr	s13, [r3]
 8000ce0:	7dbb      	ldrb	r3, [r7, #22]
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf6:	edc7 7a00 	vstr	s15, [r7]
 8000cfa:	783b      	ldrb	r3, [r7, #0]
 8000cfc:	753b      	strb	r3, [r7, #20]
			uint8_t g = (uint8_t)(start_g[led_id] + g_step[led_id] * step);
 8000cfe:	7d7b      	ldrb	r3, [r7, #21]
 8000d00:	4a2c      	ldr	r2, [pc, #176]	@ (8000db4 <ws2812_gradient+0x1dc>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d0c:	7d7b      	ldrb	r3, [r7, #21]
 8000d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000dc4 <ws2812_gradient+0x1ec>)
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	edd3 6a00 	vldr	s13, [r3]
 8000d18:	7dbb      	ldrb	r3, [r7, #22]
 8000d1a:	ee07 3a90 	vmov	s15, r3
 8000d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d2e:	edc7 7a00 	vstr	s15, [r7]
 8000d32:	783b      	ldrb	r3, [r7, #0]
 8000d34:	74fb      	strb	r3, [r7, #19]
			uint8_t b = (uint8_t)(start_b[led_id] + b_step[led_id] * step);
 8000d36:	7d7b      	ldrb	r3, [r7, #21]
 8000d38:	4a1f      	ldr	r2, [pc, #124]	@ (8000db8 <ws2812_gradient+0x1e0>)
 8000d3a:	5cd3      	ldrb	r3, [r2, r3]
 8000d3c:	ee07 3a90 	vmov	s15, r3
 8000d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d44:	7d7b      	ldrb	r3, [r7, #21]
 8000d46:	4a20      	ldr	r2, [pc, #128]	@ (8000dc8 <ws2812_gradient+0x1f0>)
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	edd3 6a00 	vldr	s13, [r3]
 8000d50:	7dbb      	ldrb	r3, [r7, #22]
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d66:	edc7 7a00 	vstr	s15, [r7]
 8000d6a:	783b      	ldrb	r3, [r7, #0]
 8000d6c:	74bb      	strb	r3, [r7, #18]

			ws2812_set_rgb(led_id, r, g, b);
 8000d6e:	7cbb      	ldrb	r3, [r7, #18]
 8000d70:	7cfa      	ldrb	r2, [r7, #19]
 8000d72:	7d39      	ldrb	r1, [r7, #20]
 8000d74:	7d78      	ldrb	r0, [r7, #21]
 8000d76:	f000 f829 	bl	8000dcc <ws2812_set_rgb>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000d7a:	7d7b      	ldrb	r3, [r7, #21]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	757b      	strb	r3, [r7, #21]
 8000d80:	7d7b      	ldrb	r3, [r7, #21]
 8000d82:	2b63      	cmp	r3, #99	@ 0x63
 8000d84:	d99f      	bls.n	8000cc6 <ws2812_gradient+0xee>
		}

		ws2812_update();
 8000d86:	f7ff fea3 	bl	8000ad0 <ws2812_update>
		HAL_Delay(delay_ms);
 8000d8a:	88bb      	ldrh	r3, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 f925 	bl	8000fdc <HAL_Delay>
	for (uint8_t step = 1; step <= steps; step++)
 8000d92:	7dbb      	ldrb	r3, [r7, #22]
 8000d94:	3301      	adds	r3, #1
 8000d96:	75bb      	strb	r3, [r7, #22]
 8000d98:	7dba      	ldrb	r2, [r7, #22]
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d98f      	bls.n	8000cc0 <ws2812_gradient+0xe8>
	}
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	371c      	adds	r7, #28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000500 	.word	0x20000500
 8000db0:	20002124 	.word	0x20002124
 8000db4:	20002188 	.word	0x20002188
 8000db8:	200021ec 	.word	0x200021ec
 8000dbc:	20000370 	.word	0x20000370
 8000dc0:	20002250 	.word	0x20002250
 8000dc4:	200023e0 	.word	0x200023e0
 8000dc8:	20002570 	.word	0x20002570

08000dcc <ws2812_set_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void ws2812_set_rgb(uint8_t led_id, uint8_t r, uint8_t g, uint8_t b)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4623      	mov	r3, r4
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	4603      	mov	r3, r0
 8000de0:	71bb      	strb	r3, [r7, #6]
 8000de2:	460b      	mov	r3, r1
 8000de4:	717b      	strb	r3, [r7, #5]
 8000de6:	4613      	mov	r3, r2
 8000de8:	713b      	strb	r3, [r7, #4]
	ws2812_color[led_id] = rgb_to_color(r, g, b);
 8000dea:	79fc      	ldrb	r4, [r7, #7]
 8000dec:	793a      	ldrb	r2, [r7, #4]
 8000dee:	7979      	ldrb	r1, [r7, #5]
 8000df0:	79bb      	ldrb	r3, [r7, #6]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f826 	bl	8000e44 <rgb_to_color>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a03      	ldr	r2, [pc, #12]	@ (8000e08 <ws2812_set_rgb+0x3c>)
 8000dfc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	20000370 	.word	0x20000370

08000e0c <ws2812_set_all>:
/**
 * @brief  设置所有LED颜色（24bit颜色格式）
 * @param  color: 24bit颜色
 */
void ws2812_set_all(uint32_t color)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	e007      	b.n	8000e2a <ws2812_set_all+0x1e>
	{
		ws2812_color[led_id] = color;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <ws2812_set_all+0x34>)
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	3301      	adds	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b63      	cmp	r3, #99	@ 0x63
 8000e2e:	d9f4      	bls.n	8000e1a <ws2812_set_all+0xe>
	}
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000370 	.word	0x20000370

08000e44 <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	71bb      	strb	r3, [r7, #6]
 8000e52:	4613      	mov	r3, r2
 8000e54:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	041a      	lsls	r2, r3, #16
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	797b      	ldrb	r3, [r7, #5]
 8000e62:	4313      	orrs	r3, r2
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	0c1b      	lsrs	r3, r3, #16
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea8:	480d      	ldr	r0, [pc, #52]	@ (8000ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eaa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eac:	f7ff fdfe 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb0:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb2:	490d      	ldr	r1, [pc, #52]	@ (8000ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <LoopForever+0xe>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef4 <LoopForever+0x16>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f00a fcff 	bl	800b8d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eda:	f7ff f99d 	bl	8000218 <main>

08000ede <LoopForever>:

LoopForever:
    b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   r0, =_estack
 8000ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000eec:	0800b998 	.word	0x0800b998
  ldr r2, =_sbss
 8000ef0:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000ef4:	200040d4 	.word	0x200040d4

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>

08000efa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f9a7 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f80e 	bl	8000f2c <HAL_InitTick>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	e001      	b.n	8000f20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f1c:	f7ff fc2c 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f20:	79fb      	ldrb	r3, [r7, #7]

}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <HAL_InitTick+0x68>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d022      	beq.n	8000f86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f40:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <HAL_InitTick+0x6c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <HAL_InitTick+0x68>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f9b2 	bl	80012be <HAL_SYSTICK_Config>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10f      	bne.n	8000f80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	d809      	bhi.n	8000f7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f66:	2200      	movs	r2, #0
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6e:	f000 f97e 	bl	800126e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f72:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <HAL_InitTick+0x70>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	e007      	b.n	8000f8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e004      	b.n	8000f8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	e001      	b.n	8000f8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a03      	ldr	r2, [pc, #12]	@ (8000fbc <HAL_IncTick+0x1c>)
 8000fb0:	6013      	str	r3, [r2, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20002700 	.word	0x20002700
 8000fc0:	20000008 	.word	0x20000008

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20002700 	.word	0x20002700

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d004      	beq.n	8001000 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_Delay+0x40>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001000:	bf00      	nop
 8001002:	f7ff ffdf 	bl	8000fc4 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	d8f7      	bhi.n	8001002 <HAL_Delay+0x26>
  {
  }
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000008 	.word	0x20000008

08001020 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001030:	4904      	ldr	r1, [pc, #16]	@ (8001044 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4313      	orrs	r3, r2
 8001036:	600b      	str	r3, [r1, #0]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	40010030 	.word	0x40010030

08001048 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 0202 	bic.w	r2, r3, #2
 8001058:	4904      	ldr	r1, [pc, #16]	@ (800106c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40010030 	.word	0x40010030

08001070 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001082:	f7ff ff9f 	bl	8000fc4 <HAL_GetTick>
 8001086:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001088:	e008      	b.n	800109c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800108a:	f7ff ff9b 	bl	8000fc4 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b0a      	cmp	r3, #10
 8001096:	d901      	bls.n	800109c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e006      	b.n	80010aa <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f0      	beq.n	800108a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40010030 	.word	0x40010030

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	@ (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	@ (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	@ (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	@ 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff8e 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff29 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff40 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff90 	bl	80011ac <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5f 	bl	8001158 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff33 	bl	800111c <__NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffa4 	bl	8001214 <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e08d      	b.n	8001406 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <HAL_DMA_Init+0x138>)
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d80f      	bhi.n	8001316 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b45      	ldr	r3, [pc, #276]	@ (8001414 <HAL_DMA_Init+0x13c>)
 80012fe:	4413      	add	r3, r2
 8001300:	4a45      	ldr	r2, [pc, #276]	@ (8001418 <HAL_DMA_Init+0x140>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	009a      	lsls	r2, r3, #2
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a42      	ldr	r2, [pc, #264]	@ (800141c <HAL_DMA_Init+0x144>)
 8001312:	641a      	str	r2, [r3, #64]	@ 0x40
 8001314:	e00e      	b.n	8001334 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b40      	ldr	r3, [pc, #256]	@ (8001420 <HAL_DMA_Init+0x148>)
 800131e:	4413      	add	r3, r2
 8001320:	4a3d      	ldr	r2, [pc, #244]	@ (8001418 <HAL_DMA_Init+0x140>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	009a      	lsls	r2, r3, #2
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a3c      	ldr	r2, [pc, #240]	@ (8001424 <HAL_DMA_Init+0x14c>)
 8001332:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2202      	movs	r2, #2
 8001338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800134a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800134e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f9b6 	bl	80016f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001394:	d102      	bne.n	800139c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d010      	beq.n	80013dc <HAL_DMA_Init+0x104>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d80c      	bhi.n	80013dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f9d6 	bl	8001774 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	e008      	b.n	80013ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40020407 	.word	0x40020407
 8001414:	bffdfff8 	.word	0xbffdfff8
 8001418:	cccccccd 	.word	0xcccccccd
 800141c:	40020000 	.word	0x40020000
 8001420:	bffdfbf8 	.word	0xbffdfbf8
 8001424:	40020400 	.word	0x40020400

08001428 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_DMA_Start_IT+0x20>
 8001444:	2302      	movs	r3, #2
 8001446:	e066      	b.n	8001516 <HAL_DMA_Start_IT+0xee>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d155      	bne.n	8001508 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 f8fb 	bl	800167c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 020e 	orr.w	r2, r2, #14
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e00f      	b.n	80014c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0204 	bic.w	r2, r2, #4
 80014ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 020a 	orr.w	r2, r2, #10
 80014be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e005      	b.n	8001514 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001510:	2302      	movs	r3, #2
 8001512:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001514:	7dfb      	ldrb	r3, [r7, #23]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	2204      	movs	r2, #4
 8001540:	409a      	lsls	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d026      	beq.n	8001598 <HAL_DMA_IRQHandler+0x7a>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d021      	beq.n	8001598 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0320 	and.w	r3, r3, #32
 800155e:	2b00      	cmp	r3, #0
 8001560:	d107      	bne.n	8001572 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0204 	bic.w	r2, r2, #4
 8001570:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f003 021f 	and.w	r2, r3, #31
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	2104      	movs	r1, #4
 8001580:	fa01 f202 	lsl.w	r2, r1, r2
 8001584:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	2b00      	cmp	r3, #0
 800158c:	d071      	beq.n	8001672 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001596:	e06c      	b.n	8001672 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	2202      	movs	r2, #2
 80015a2:	409a      	lsls	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d02e      	beq.n	800160a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d029      	beq.n	800160a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10b      	bne.n	80015dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 020a 	bic.w	r2, r2, #10
 80015d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	2102      	movs	r1, #2
 80015ea:	fa01 f202 	lsl.w	r2, r1, r2
 80015ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d038      	beq.n	8001672 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001608:	e033      	b.n	8001672 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	2208      	movs	r2, #8
 8001614:	409a      	lsls	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d02a      	beq.n	8001674 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d025      	beq.n	8001674 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 020e 	bic.w	r2, r2, #14
 8001636:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163c:	f003 021f 	and.w	r2, r3, #31
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f202 	lsl.w	r2, r1, r2
 800164a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001672:	bf00      	nop
 8001674:	bf00      	nop
}
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001692:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	f003 021f 	and.w	r2, r3, #31
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d108      	bne.n	80016dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016da:	e007      	b.n	80016ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	60da      	str	r2, [r3, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001708:	429a      	cmp	r2, r3
 800170a:	d802      	bhi.n	8001712 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800170c:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e001      	b.n	8001716 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001714:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	3b08      	subs	r3, #8
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	009a      	lsls	r2, r3, #2
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4413      	add	r3, r2
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a0b      	ldr	r2, [pc, #44]	@ (8001770 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001742:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	2201      	movs	r2, #1
 800174c:	409a      	lsls	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001752:	bf00      	nop
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40020407 	.word	0x40020407
 8001764:	40020800 	.word	0x40020800
 8001768:	40020820 	.word	0x40020820
 800176c:	cccccccd 	.word	0xcccccccd
 8001770:	40020880 	.word	0x40020880

08001774 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001796:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3b01      	subs	r3, #1
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	2201      	movs	r2, #1
 80017a2:	409a      	lsls	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	1000823f 	.word	0x1000823f
 80017b8:	40020940 	.word	0x40020940

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017ca:	e15a      	b.n	8001a82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 814c 	beq.w	8001a7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d005      	beq.n	80017fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d130      	bne.n	800185e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001832:	2201      	movs	r2, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 0201 	and.w	r2, r3, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b03      	cmp	r3, #3
 8001868:	d017      	beq.n	800189a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d123      	bne.n	80018ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	6939      	ldr	r1, [r7, #16]
 80018ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80a6 	beq.w	8001a7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001930:	4b5b      	ldr	r3, [pc, #364]	@ (8001aa0 <HAL_GPIO_Init+0x2e4>)
 8001932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001934:	4a5a      	ldr	r2, [pc, #360]	@ (8001aa0 <HAL_GPIO_Init+0x2e4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6613      	str	r3, [r2, #96]	@ 0x60
 800193c:	4b58      	ldr	r3, [pc, #352]	@ (8001aa0 <HAL_GPIO_Init+0x2e4>)
 800193e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001948:	4a56      	ldr	r2, [pc, #344]	@ (8001aa4 <HAL_GPIO_Init+0x2e8>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001972:	d01f      	beq.n	80019b4 <HAL_GPIO_Init+0x1f8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa8 <HAL_GPIO_Init+0x2ec>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d019      	beq.n	80019b0 <HAL_GPIO_Init+0x1f4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a4b      	ldr	r2, [pc, #300]	@ (8001aac <HAL_GPIO_Init+0x2f0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <HAL_GPIO_Init+0x1f0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a4a      	ldr	r2, [pc, #296]	@ (8001ab0 <HAL_GPIO_Init+0x2f4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d00d      	beq.n	80019a8 <HAL_GPIO_Init+0x1ec>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a49      	ldr	r2, [pc, #292]	@ (8001ab4 <HAL_GPIO_Init+0x2f8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d007      	beq.n	80019a4 <HAL_GPIO_Init+0x1e8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a48      	ldr	r2, [pc, #288]	@ (8001ab8 <HAL_GPIO_Init+0x2fc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_GPIO_Init+0x1e4>
 800199c:	2305      	movs	r3, #5
 800199e:	e00a      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019a0:	2306      	movs	r3, #6
 80019a2:	e008      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019a4:	2304      	movs	r3, #4
 80019a6:	e006      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019a8:	2303      	movs	r3, #3
 80019aa:	e004      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e002      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019b4:	2300      	movs	r3, #0
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	f002 0203 	and.w	r2, r2, #3
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	4093      	lsls	r3, r2
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c6:	4937      	ldr	r1, [pc, #220]	@ (8001aa4 <HAL_GPIO_Init+0x2e8>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019d4:	4b39      	ldr	r3, [pc, #228]	@ (8001abc <HAL_GPIO_Init+0x300>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019f8:	4a30      	ldr	r2, [pc, #192]	@ (8001abc <HAL_GPIO_Init+0x300>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019fe:	4b2f      	ldr	r3, [pc, #188]	@ (8001abc <HAL_GPIO_Init+0x300>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a22:	4a26      	ldr	r2, [pc, #152]	@ (8001abc <HAL_GPIO_Init+0x300>)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a28:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <HAL_GPIO_Init+0x300>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001abc <HAL_GPIO_Init+0x300>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <HAL_GPIO_Init+0x300>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a76:	4a11      	ldr	r2, [pc, #68]	@ (8001abc <HAL_GPIO_Init+0x300>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f47f ae9d 	bne.w	80017cc <HAL_GPIO_Init+0x10>
  }
}
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	48000800 	.word	0x48000800
 8001ab0:	48000c00 	.word	0x48000c00
 8001ab4:	48001000 	.word	0x48001000
 8001ab8:	48001400 	.word	0x48001400
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0be      	b.n	8001c80 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d02e      	beq.n	8001bac <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a4d      	ldr	r2, [pc, #308]	@ (8001c88 <HAL_HRTIM_Init+0x198>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d10b      	bne.n	8001b70 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001b58:	4b4c      	ldr	r3, [pc, #304]	@ (8001c8c <HAL_HRTIM_Init+0x19c>)
 8001b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c8c <HAL_HRTIM_Init+0x19c>)
 8001b5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b62:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b64:	4b49      	ldr	r3, [pc, #292]	@ (8001c8c <HAL_HRTIM_Init+0x19c>)
 8001b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b7e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b94:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7fe fe0f 	bl	80007d0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d012      	beq.n	8001be4 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bcc:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	75fb      	strb	r3, [r7, #23]
 8001bf8:	e03e      	b.n	8001c78 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8001bfa:	7dfa      	ldrb	r2, [r7, #23]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3318      	adds	r3, #24
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8001c0e:	7dfa      	ldrb	r2, [r7, #23]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	331c      	adds	r3, #28
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8001c22:	7dfa      	ldrb	r2, [r7, #23]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3320      	adds	r3, #32
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001c36:	7dfa      	ldrb	r2, [r7, #23]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	3324      	adds	r3, #36	@ 0x24
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001c4a:	7dfa      	ldrb	r2, [r7, #23]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	3328      	adds	r3, #40	@ 0x28
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001c5e:	7dfa      	ldrb	r2, [r7, #23]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3330      	adds	r3, #48	@ 0x30
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
 8001c74:	3301      	adds	r3, #1
 8001c76:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d9bd      	bls.n	8001bfa <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40016800 	.word	0x40016800
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e045      	b.n	8001d34 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d114      	bne.n	8001cea <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0202 	bic.w	r2, r2, #2
 8001cd0:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8001ce8:	e01f      	b.n	8001d2a <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0202 	orr.w	r2, r2, #2
 8001cfa:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8001d06:	f023 010c 	bic.w	r1, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8001d4a:	f7ff f93b 	bl	8000fc4 <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8001d50:	e014      	b.n	8001d7c <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d010      	beq.n	8001d7c <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff f933 	bl	8000fc4 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2207      	movs	r2, #7
 8001d74:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e011      	b.n	8001da0 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8001d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d8c:	d1e1      	bne.n	8001d52 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e015      	b.n	8001df0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d104      	bne.n	8001ddc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f900 	bl	8001fda <HRTIM_MasterBase_Config>
 8001dda:	e004      	b.n	8001de6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f929 	bl	8002038 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d101      	bne.n	8001e14 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8001e10:	2302      	movs	r3, #2
 8001e12:	e07a      	b.n	8001f0a <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e073      	b.n	8001f0a <HAL_HRTIM_WaveformTimerConfig+0x112>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b06      	cmp	r3, #6
 8001e36:	d104      	bne.n	8001e42 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f93c 	bl	80020b8 <HRTIM_MasterWaveform_Config>
 8001e40:	e004      	b.n	8001e4c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f9d4 	bl	80021f4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6819      	ldr	r1, [r3, #0]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4403      	add	r3, r0
 8001e5e:	3320      	adds	r3, #32
 8001e60:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4403      	add	r3, r0
 8001e74:	3324      	adds	r3, #36	@ 0x24
 8001e76:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4403      	add	r3, r0
 8001e8a:	3328      	adds	r3, #40	@ 0x28
 8001e8c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68d9      	ldr	r1, [r3, #12]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4403      	add	r3, r0
 8001ea0:	332c      	adds	r3, #44	@ 0x2c
 8001ea2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6919      	ldr	r1, [r3, #16]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4403      	add	r3, r0
 8001eb6:	3330      	adds	r3, #48	@ 0x30
 8001eb8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fc67 	bl	8002790 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b06      	cmp	r3, #6
 8001ec6:	d017      	beq.n	8001ef8 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d113      	bne.n	8001ef8 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	01db      	lsls	r3, r3, #7
 8001eda:	4413      	add	r3, r2
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee6:	025b      	lsls	r3, r3, #9
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	6809      	ldr	r1, [r1, #0]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	01db      	lsls	r3, r3, #7
 8001ef4:	440b      	add	r3, r1
 8001ef6:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d101      	bne.n	8001f2e <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e020      	b.n	8001f70 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_HRTIM_WaveformTimerControl+0x2a>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e019      	b.n	8001f70 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 fad5 	bl	8002500 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 fc19 	bl	8002790 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d101      	bne.n	8001f96 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	e01d      	b.n	8001fd2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e016      	b.n	8001fd2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fb00 	bl	80025c0 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0307 	bic.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f023 0318 	bic.w	r3, r3, #24
 8002004:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	6852      	ldr	r2, [r2, #4]
 800202a:	619a      	str	r2, [r3, #24]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3301      	adds	r3, #1
 800204c:	01db      	lsls	r3, r3, #7
 800204e:	4413      	add	r3, r2
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f023 0307 	bic.w	r3, r3, #7
 800205a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4313      	orrs	r3, r2
 8002064:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f023 0318 	bic.w	r3, r3, #24
 800206c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3301      	adds	r3, #1
 8002080:	01db      	lsls	r3, r3, #7
 8002082:	4413      	add	r3, r2
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6819      	ldr	r1, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	01db      	lsls	r3, r3, #7
 8002094:	440b      	add	r3, r1
 8002096:	3394      	adds	r3, #148	@ 0x94
 8002098:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	01db      	lsls	r3, r3, #7
 80020a6:	440b      	add	r3, r1
 80020a8:	3398      	adds	r3, #152	@ 0x98
 80020aa:	601a      	str	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	371c      	adds	r7, #28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80020d2:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0320 	bic.w	r3, r3, #32
 80020da:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80020ec:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	d003      	beq.n	80020fe <HRTIM_MasterWaveform_Config+0x46>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d108      	bne.n	8002110 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002104:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f043 0320 	orr.w	r3, r3, #32
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e021      	b.n	8002154 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d108      	bne.n	800212a <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800211e:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e014      	b.n	8002154 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d108      	bne.n	8002144 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002138:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e007      	b.n	8002154 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0320 	bic.w	r3, r3, #32
 800214a:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002152:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800215a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800216c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800217e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8002190:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80021a2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80021b6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c8:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b08b      	sub	sp, #44	@ 0x2c
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	3301      	adds	r3, #1
 8002208:	01db      	lsls	r3, r3, #7
 800220a:	4413      	add	r3, r2
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	6811      	ldr	r1, [r2, #0]
 8002212:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3301      	adds	r3, #1
 800221a:	01db      	lsls	r3, r3, #7
 800221c:	440b      	add	r3, r1
 800221e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	01db      	lsls	r3, r3, #7
 800222a:	4413      	add	r3, r2
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	01db      	lsls	r3, r3, #7
 8002238:	4413      	add	r3, r2
 800223a:	33e8      	adds	r3, #232	@ 0xe8
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	01db      	lsls	r3, r3, #7
 8002248:	4413      	add	r3, r2
 800224a:	33e4      	adds	r3, #228	@ 0xe4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8002258:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	f023 0320 	bic.w	r3, r3, #32
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002268:	4313      	orrs	r3, r2
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	2b20      	cmp	r3, #32
 8002272:	d003      	beq.n	800227c <HRTIM_TimingUnitWaveform_Config+0x88>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d108      	bne.n	800228e <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	f043 0320 	orr.w	r3, r3, #32
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
 800228c:	e021      	b.n	80022d2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d108      	bne.n	80022a8 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a6:	e014      	b.n	80022d2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d108      	bne.n	80022c2 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c0:	e007      	b.n	80022d2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	f023 0320 	bic.w	r3, r3, #32
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e0:	4313      	orrs	r3, r2
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f2:	4313      	orrs	r3, r2
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002304:	4313      	orrs	r3, r2
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002316:	4313      	orrs	r3, r2
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	4313      	orrs	r3, r2
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800233c:	d103      	bne.n	8002346 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002354:	4313      	orrs	r3, r2
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002366:	4313      	orrs	r3, r2
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8002370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800237a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800237c:	4313      	orrs	r3, r2
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002386:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800239c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023ae:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b4:	6a3a      	ldr	r2, [r7, #32]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023be:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80023c2:	d004      	beq.n	80023ce <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c8:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80023cc:	d103      	bne.n	80023d6 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d2:	2b40      	cmp	r3, #64	@ 0x40
 80023d4:	d108      	bne.n	80023e8 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 80023dc:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e2:	6a3a      	ldr	r2, [r7, #32]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023ee:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f4:	6a3a      	ldr	r2, [r7, #32]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fe:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d850      	bhi.n	80024a8 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8002406:	a201      	add	r2, pc, #4	@ (adr r2, 800240c <HRTIM_TimingUnitWaveform_Config+0x218>)
 8002408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240c:	08002425 	.word	0x08002425
 8002410:	0800243b 	.word	0x0800243b
 8002414:	08002451 	.word	0x08002451
 8002418:	08002467 	.word	0x08002467
 800241c:	0800247d 	.word	0x0800247d
 8002420:	08002493 	.word	0x08002493
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800242a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	4313      	orrs	r3, r2
 8002436:	61fb      	str	r3, [r7, #28]
      break;
 8002438:	e037      	b.n	80024aa <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002440:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	4313      	orrs	r3, r2
 800244c:	61fb      	str	r3, [r7, #28]
      break;
 800244e:	e02c      	b.n	80024aa <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002456:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	4313      	orrs	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
      break;
 8002464:	e021      	b.n	80024aa <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800246c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	4313      	orrs	r3, r2
 8002478:	61fb      	str	r3, [r7, #28]
      break;
 800247a:	e016      	b.n	80024aa <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002482:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	015b      	lsls	r3, r3, #5
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	4313      	orrs	r3, r2
 800248e:	61fb      	str	r3, [r7, #28]
      break;
 8002490:	e00b      	b.n	80024aa <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002498:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	019b      	lsls	r3, r3, #6
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61fb      	str	r3, [r7, #28]
      break;
 80024a6:	e000      	b.n	80024aa <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 80024a8:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3301      	adds	r3, #1
 80024b2:	01db      	lsls	r3, r3, #7
 80024b4:	4413      	add	r3, r2
 80024b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024b8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	01db      	lsls	r3, r3, #7
 80024c2:	4413      	add	r3, r2
 80024c4:	33e8      	adds	r3, #232	@ 0xe8
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	01db      	lsls	r3, r3, #7
 80024d2:	4413      	add	r3, r2
 80024d4:	33e4      	adds	r3, #228	@ 0xe4
 80024d6:	6a3a      	ldr	r2, [r7, #32]
 80024d8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	01db      	lsls	r3, r3, #7
 80024e2:	4413      	add	r3, r2
 80024e4:	33d4      	adds	r3, #212	@ 0xd4
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80024f4:	bf00      	nop
 80024f6:	372c      	adds	r7, #44	@ 0x2c
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	01db      	lsls	r3, r3, #7
 8002514:	4413      	add	r3, r2
 8002516:	33ec      	adds	r3, #236	@ 0xec
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f023 0310 	bic.w	r3, r3, #16
 8002522:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002536:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002548:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800255a:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d11a      	bne.n	80025a4 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f023 0302 	bic.w	r3, r3, #2
 8002586:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	01db      	lsls	r3, r3, #7
 80025ac:	4413      	add	r3, r2
 80025ae:	33ec      	adds	r3, #236	@ 0xec
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	601a      	str	r2, [r3, #0]

}
 80025b4:	bf00      	nop
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	@ 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	01db      	lsls	r3, r3, #7
 80025da:	4413      	add	r3, r2
 80025dc:	33e4      	adds	r3, #228	@ 0xe4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	01db      	lsls	r3, r3, #7
 80025ea:	4413      	add	r3, r2
 80025ec:	33b8      	adds	r3, #184	@ 0xb8
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	617b      	str	r3, [r7, #20]

  switch (Output)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025f8:	d05d      	beq.n	80026b6 <HRTIM_OutputConfig+0xf6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002600:	d86e      	bhi.n	80026e0 <HRTIM_OutputConfig+0x120>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002608:	d042      	beq.n	8002690 <HRTIM_OutputConfig+0xd0>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002610:	d866      	bhi.n	80026e0 <HRTIM_OutputConfig+0x120>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002618:	d04d      	beq.n	80026b6 <HRTIM_OutputConfig+0xf6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002620:	d85e      	bhi.n	80026e0 <HRTIM_OutputConfig+0x120>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002628:	d032      	beq.n	8002690 <HRTIM_OutputConfig+0xd0>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002630:	d856      	bhi.n	80026e0 <HRTIM_OutputConfig+0x120>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b80      	cmp	r3, #128	@ 0x80
 8002636:	d03e      	beq.n	80026b6 <HRTIM_OutputConfig+0xf6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b80      	cmp	r3, #128	@ 0x80
 800263c:	d850      	bhi.n	80026e0 <HRTIM_OutputConfig+0x120>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b40      	cmp	r3, #64	@ 0x40
 8002642:	d025      	beq.n	8002690 <HRTIM_OutputConfig+0xd0>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b40      	cmp	r3, #64	@ 0x40
 8002648:	d84a      	bhi.n	80026e0 <HRTIM_OutputConfig+0x120>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d01f      	beq.n	8002690 <HRTIM_OutputConfig+0xd0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d044      	beq.n	80026e0 <HRTIM_OutputConfig+0x120>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b20      	cmp	r3, #32
 800265a:	d841      	bhi.n	80026e0 <HRTIM_OutputConfig+0x120>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d33e      	bcc.n	80026e0 <HRTIM_OutputConfig+0x120>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3b02      	subs	r3, #2
 8002666:	2201      	movs	r2, #1
 8002668:	409a      	lsls	r2, r3
 800266a:	4b48      	ldr	r3, [pc, #288]	@ (800278c <HRTIM_OutputConfig+0x1cc>)
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	bf14      	ite	ne
 8002672:	2301      	movne	r3, #1
 8002674:	2300      	moveq	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11c      	bne.n	80026b6 <HRTIM_OutputConfig+0xf6>
 800267c:	f244 0304 	movw	r3, #16388	@ 0x4004
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d027      	beq.n	80026e0 <HRTIM_OutputConfig+0x120>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	01db      	lsls	r3, r3, #7
 800269c:	440b      	add	r3, r1
 800269e:	33bc      	adds	r3, #188	@ 0xbc
 80026a0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	01db      	lsls	r3, r3, #7
 80026ae:	440b      	add	r3, r1
 80026b0:	33c0      	adds	r3, #192	@ 0xc0
 80026b2:	601a      	str	r2, [r3, #0]
      break;
 80026b4:	e015      	b.n	80026e2 <HRTIM_OutputConfig+0x122>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	01db      	lsls	r3, r3, #7
 80026c2:	440b      	add	r3, r1
 80026c4:	33c4      	adds	r3, #196	@ 0xc4
 80026c6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6819      	ldr	r1, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	01db      	lsls	r3, r3, #7
 80026d4:	440b      	add	r3, r1
 80026d6:	33c8      	adds	r3, #200	@ 0xc8
 80026d8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80026da:	2310      	movs	r3, #16
 80026dc:	61bb      	str	r3, [r7, #24]
      break;
 80026de:	e000      	b.n	80026e2 <HRTIM_OutputConfig+0x122>
    }

  default:
    break;
 80026e0:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80026e2:	22fe      	movs	r2, #254	@ 0xfe
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	4313      	orrs	r3, r2
 8002710:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	4313      	orrs	r3, r2
 8002720:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	4313      	orrs	r3, r2
 8002730:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	4313      	orrs	r3, r2
 8002740:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b08      	cmp	r3, #8
 8002748:	d111      	bne.n	800276e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10c      	bne.n	800276e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	4313      	orrs	r3, r2
 800276c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	01db      	lsls	r3, r3, #7
 8002776:	4413      	add	r3, r2
 8002778:	33e4      	adds	r3, #228	@ 0xe4
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	601a      	str	r2, [r3, #0]
}
 800277e:	bf00      	nop
 8002780:	3724      	adds	r7, #36	@ 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40000041 	.word	0x40000041

08002790 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b06      	cmp	r3, #6
 800279e:	d85e      	bhi.n	800285e <HRTIM_ForceRegistersUpdate+0xce>
 80027a0:	a201      	add	r2, pc, #4	@ (adr r2, 80027a8 <HRTIM_ForceRegistersUpdate+0x18>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027db 	.word	0x080027db
 80027ac:	080027f1 	.word	0x080027f1
 80027b0:	08002807 	.word	0x08002807
 80027b4:	0800281d 	.word	0x0800281d
 80027b8:	08002833 	.word	0x08002833
 80027bc:	08002849 	.word	0x08002849
 80027c0:	080027c5 	.word	0x080027c5
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80027d8:	e042      	b.n	8002860 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0202 	orr.w	r2, r2, #2
 80027ea:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80027ee:	e037      	b.n	8002860 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0204 	orr.w	r2, r2, #4
 8002800:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002804:	e02c      	b.n	8002860 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0208 	orr.w	r2, r2, #8
 8002816:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800281a:	e021      	b.n	8002860 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0210 	orr.w	r2, r2, #16
 800282c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002830:	e016      	b.n	8002860 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002846:	e00b      	b.n	8002860 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002858:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800285c:	e000      	b.n	8002860 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800285e:	bf00      	nop
  }
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0c0      	b.n	8002a00 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f008 fd14 	bl	800b2c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2203      	movs	r2, #3
 800289c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 fbb4 	bl	8007012 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	e03e      	b.n	800292e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	3311      	adds	r3, #17
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	3310      	adds	r3, #16
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	3313      	adds	r3, #19
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	3320      	adds	r3, #32
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	3324      	adds	r3, #36	@ 0x24
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	3301      	adds	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	791b      	ldrb	r3, [r3, #4]
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	429a      	cmp	r2, r3
 8002936:	d3bb      	bcc.n	80028b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002938:	2300      	movs	r3, #0
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e044      	b.n	80029c8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	3301      	adds	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	791b      	ldrb	r3, [r3, #4]
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3b5      	bcc.n	800293e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80029de:	f004 fb33 	bl	8007048 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7a9b      	ldrb	r3, [r3, #10]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d102      	bne.n	80029fe <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f001 fc40 	bl	800427e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_PCD_Start+0x16>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e012      	b.n	8002a44 <HAL_PCD_Start+0x3c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 fada 	bl	8006fe4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f006 fd9a 	bl	800956e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f006 fd9f 	bl	800959c <USB_ReadInterrupts>
 8002a5e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fb04 	bl	8003078 <PCD_EP_ISR_Handler>

    return;
 8002a70:	e110      	b.n	8002c94 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f008 fca4 	bl	800b3e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f8fc 	bl	8002c9a <HAL_PCD_SetAddress>

    return;
 8002aa2:	e0f7      	b.n	8002c94 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ac6:	e0e5      	b.n	8002c94 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ae4:	b292      	uxth	r2, r2
 8002ae6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002aea:	e0d3      	b.n	8002c94 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d034      	beq.n	8002b60 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0204 	bic.w	r2, r2, #4
 8002b08:	b292      	uxth	r2, r2
 8002b0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0208 	bic.w	r2, r2, #8
 8002b20:	b292      	uxth	r2, r2
 8002b22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d107      	bne.n	8002b40 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b38:	2100      	movs	r1, #0
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f008 fe44 	bl	800b7c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f008 fc87 	bl	800b454 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b58:	b292      	uxth	r2, r2
 8002b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b5e:	e099      	b.n	8002c94 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d027      	beq.n	8002bba <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0208 	orr.w	r2, r2, #8
 8002b7c:	b292      	uxth	r2, r2
 8002b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b94:	b292      	uxth	r2, r2
 8002b96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0204 	orr.w	r2, r2, #4
 8002bac:	b292      	uxth	r2, r2
 8002bae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f008 fc34 	bl	800b420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002bb8:	e06c      	b.n	8002c94 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d040      	beq.n	8002c46 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd6:	b292      	uxth	r2, r2
 8002bd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d12b      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0204 	orr.w	r2, r2, #4
 8002bf8:	b292      	uxth	r2, r2
 8002bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0208 	orr.w	r2, r2, #8
 8002c10:	b292      	uxth	r2, r2
 8002c12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002c34:	2101      	movs	r1, #1
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f008 fdc6 	bl	800b7c8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002c3c:	e02a      	b.n	8002c94 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f008 fbee 	bl	800b420 <HAL_PCD_SuspendCallback>
    return;
 8002c44:	e026      	b.n	8002c94 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00f      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c62:	b292      	uxth	r2, r2
 8002c64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f008 fbac 	bl	800b3c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c6e:	e011      	b.n	8002c94 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00c      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c8c:	b292      	uxth	r2, r2
 8002c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c92:	bf00      	nop
  }
}
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_SetAddress+0x1a>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e012      	b.n	8002cda <HAL_PCD_SetAddress+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f006 fc3b 	bl	8009546 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	4608      	mov	r0, r1
 8002cec:	4611      	mov	r1, r2
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	70fb      	strb	r3, [r7, #3]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	803b      	strh	r3, [r7, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da0e      	bge.n	8002d26 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 0207 	and.w	r2, r3, #7
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	3310      	adds	r3, #16
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	705a      	strb	r2, [r3, #1]
 8002d24:	e00e      	b.n	8002d44 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 0207 	and.w	r2, r3, #7
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d50:	883a      	ldrh	r2, [r7, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	78ba      	ldrb	r2, [r7, #2]
 8002d5a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d5c:	78bb      	ldrb	r3, [r7, #2]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d102      	bne.n	8002d68 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_PCD_EP_Open+0x94>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e00e      	b.n	8002d94 <HAL_PCD_EP_Open+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68f9      	ldr	r1, [r7, #12]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f004 f97d 	bl	8007084 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002d92:	7afb      	ldrb	r3, [r7, #11]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	da0e      	bge.n	8002dce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	f003 0207 	and.w	r2, r3, #7
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	3310      	adds	r3, #16
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	705a      	strb	r2, [r3, #1]
 8002dcc:	e00e      	b.n	8002dec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	f003 0207 	and.w	r2, r3, #7
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_PCD_EP_Close+0x6a>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e00e      	b.n	8002e24 <HAL_PCD_EP_Close+0x88>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 fcf9 	bl	800780c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e3c:	7afb      	ldrb	r3, [r7, #11]
 8002e3e:	f003 0207 	and.w	r2, r3, #7
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4413      	add	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6979      	ldr	r1, [r7, #20]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 feb1 	bl	8007be6 <USB_EPStartXfer>

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	f003 0207 	and.w	r2, r3, #7
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002eb0:	681b      	ldr	r3, [r3, #0]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ece:	7afb      	ldrb	r3, [r7, #11]
 8002ed0:	f003 0207 	and.w	r2, r3, #7
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	3310      	adds	r3, #16
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2200      	movs	r2, #0
 8002f02:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2201      	movs	r2, #1
 8002f08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f0a:	7afb      	ldrb	r3, [r7, #11]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6979      	ldr	r1, [r7, #20]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f004 fe62 	bl	8007be6 <USB_EPStartXfer>

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	7912      	ldrb	r2, [r2, #4]
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e03e      	b.n	8002fc8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da0e      	bge.n	8002f70 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 0207 	and.w	r2, r3, #7
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	3310      	adds	r3, #16
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	705a      	strb	r2, [r3, #1]
 8002f6e:	e00c      	b.n	8002f8a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_PCD_EP_SetStall+0x7e>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e00e      	b.n	8002fc8 <HAL_PCD_EP_SetStall+0x9c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f006 f9c5 	bl	8009348 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	7912      	ldrb	r2, [r2, #4]
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e040      	b.n	8003070 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da0e      	bge.n	8003014 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 0207 	and.w	r2, r3, #7
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	3310      	adds	r3, #16
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	705a      	strb	r2, [r3, #1]
 8003012:	e00e      	b.n	8003032 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 0207 	and.w	r2, r3, #7
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	b2da      	uxtb	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_PCD_EP_ClrStall+0x82>
 800304e:	2302      	movs	r3, #2
 8003050:	e00e      	b.n	8003070 <HAL_PCD_EP_ClrStall+0xa0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68f9      	ldr	r1, [r7, #12]
 8003060:	4618      	mov	r0, r3
 8003062:	f006 f9c2 	bl	80093ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b096      	sub	sp, #88	@ 0x58
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003080:	e3ad      	b.n	80037de <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800308a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800308e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800309c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f040 816f 	bne.w	8003384 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d14c      	bne.n	800314c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80030be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c2:	81fb      	strh	r3, [r7, #14]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	89fb      	ldrh	r3, [r7, #14]
 80030ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3310      	adds	r3, #16
 80030da:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003102:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	441a      	add	r2, r3
 800310e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003110:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003112:	2100      	movs	r1, #0
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f008 f93c 	bl	800b392 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7b1b      	ldrb	r3, [r3, #12]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 835c 	beq.w	80037de <PCD_EP_ISR_Handler+0x766>
 8003126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 8357 	bne.w	80037de <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7b1b      	ldrb	r3, [r3, #12]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800313a:	b2da      	uxtb	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	731a      	strb	r2, [r3, #12]
 800314a:	e348      	b.n	80037de <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003152:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800315e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003166:	2b00      	cmp	r3, #0
 8003168:	d032      	beq.n	80031d0 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	4413      	add	r3, r2
 8003184:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800318e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003190:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800319c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f006 fa4b 	bl	8009640 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031b6:	4013      	ands	r3, r2
 80031b8:	823b      	strh	r3, [r7, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	8a3a      	ldrh	r2, [r7, #16]
 80031c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031c4:	b292      	uxth	r2, r2
 80031c6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f008 f8b5 	bl	800b338 <HAL_PCD_SetupStageCallback>
 80031ce:	e306      	b.n	80037de <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f280 8302 	bge.w	80037de <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031e6:	4013      	ands	r3, r2
 80031e8:	83fb      	strh	r3, [r7, #30]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	8bfa      	ldrh	r2, [r7, #30]
 80031f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031f4:	b292      	uxth	r2, r2
 80031f6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003200:	b29b      	uxth	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	4413      	add	r3, r2
 8003212:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800321c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d019      	beq.n	800325c <PCD_EP_ISR_Handler+0x1e4>
 8003228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d015      	beq.n	800325c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003236:	6959      	ldr	r1, [r3, #20]
 8003238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800323c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003240:	b29b      	uxth	r3, r3
 8003242:	f006 f9fd 	bl	8009640 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	441a      	add	r2, r3
 8003250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003252:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003254:	2100      	movs	r1, #0
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f008 f880 	bl	800b35c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003266:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800326a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 82b5 	bne.w	80037de <PCD_EP_ISR_Handler+0x766>
 8003274:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003278:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800327c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003280:	f000 82ad 	beq.w	80037de <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	4413      	add	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	801a      	strh	r2, [r3, #0]
 80032b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80032ba:	d91d      	bls.n	80032f8 <PCD_EP_ISR_Handler+0x280>
 80032bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <PCD_EP_ISR_Handler+0x25e>
 80032d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d2:	3b01      	subs	r3, #1
 80032d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29a      	uxth	r2, r3
 80032dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032de:	b29b      	uxth	r3, r3
 80032e0:	029b      	lsls	r3, r3, #10
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	4313      	orrs	r3, r2
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	e026      	b.n	8003346 <PCD_EP_ISR_Handler+0x2ce>
 80032f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <PCD_EP_ISR_Handler+0x29e>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b29b      	uxth	r3, r3
 8003306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800330a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800330e:	b29a      	uxth	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	e017      	b.n	8003346 <PCD_EP_ISR_Handler+0x2ce>
 8003316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	647b      	str	r3, [r7, #68]	@ 0x44
 800331e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <PCD_EP_ISR_Handler+0x2b8>
 800332a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800332c:	3301      	adds	r3, #1
 800332e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29a      	uxth	r2, r3
 8003336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003338:	b29b      	uxth	r3, r3
 800333a:	029b      	lsls	r3, r3, #10
 800333c:	b29b      	uxth	r3, r3
 800333e:	4313      	orrs	r3, r2
 8003340:	b29a      	uxth	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003356:	827b      	strh	r3, [r7, #18]
 8003358:	8a7b      	ldrh	r3, [r7, #18]
 800335a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800335e:	827b      	strh	r3, [r7, #18]
 8003360:	8a7b      	ldrh	r3, [r7, #18]
 8003362:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003366:	827b      	strh	r3, [r7, #18]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	8a7b      	ldrh	r3, [r7, #18]
 800336e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800337a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800337e:	b29b      	uxth	r3, r3
 8003380:	8013      	strh	r3, [r2, #0]
 8003382:	e22c      	b.n	80037de <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003398:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800339c:	2b00      	cmp	r3, #0
 800339e:	f280 80f6 	bge.w	800358e <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033b8:	4013      	ands	r3, r2
 80033ba:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80033d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033d4:	b292      	uxth	r2, r2
 80033d6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033d8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f0:	7b1b      	ldrb	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d123      	bne.n	800343e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033fe:	b29b      	uxth	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	4413      	add	r3, r2
 8003410:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800341e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 808e 	beq.w	8003544 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342e:	6959      	ldr	r1, [r3, #20]
 8003430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003432:	88da      	ldrh	r2, [r3, #6]
 8003434:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003438:	f006 f902 	bl	8009640 <USB_ReadPMA>
 800343c:	e082      	b.n	8003544 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800343e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003440:	78db      	ldrb	r3, [r3, #3]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d10a      	bne.n	800345c <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003446:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800344a:	461a      	mov	r2, r3
 800344c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9d3 	bl	80037fa <HAL_PCD_EP_DB_Receive>
 8003454:	4603      	mov	r3, r0
 8003456:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800345a:	e073      	b.n	8003544 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003476:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	441a      	add	r2, r3
 8003488:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800348c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003498:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800349c:	b29b      	uxth	r3, r3
 800349e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d022      	beq.n	8003500 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034de:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80034e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d02c      	beq.n	8003544 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f0:	6959      	ldr	r1, [r3, #20]
 80034f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f4:	891a      	ldrh	r2, [r3, #8]
 80034f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034fa:	f006 f8a1 	bl	8009640 <USB_ReadPMA>
 80034fe:	e021      	b.n	8003544 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003508:	b29b      	uxth	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	4413      	add	r3, r2
 800351a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003524:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003528:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003536:	6959      	ldr	r1, [r3, #20]
 8003538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353a:	895a      	ldrh	r2, [r3, #10]
 800353c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003540:	f006 f87e 	bl	8009640 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800354c:	441a      	add	r2, r3
 800354e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003550:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800355a:	441a      	add	r2, r3
 800355c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <PCD_EP_ISR_Handler+0x4fc>
 8003568:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800356c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	429a      	cmp	r2, r3
 8003572:	d206      	bcs.n	8003582 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f007 feee 	bl	800b35c <HAL_PCD_DataOutStageCallback>
 8003580:	e005      	b.n	800358e <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003588:	4618      	mov	r0, r3
 800358a:	f004 fb2c 	bl	8007be6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800358e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8121 	beq.w	80037de <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800359c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	3310      	adds	r3, #16
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80035c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	441a      	add	r2, r3
 80035dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80035e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80035ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ee:	78db      	ldrb	r3, [r3, #3]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	f040 80a2 	bne.w	800373a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80035f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f8:	2200      	movs	r2, #0
 80035fa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fe:	7b1b      	ldrb	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8093 	beq.w	800372c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003606:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800360a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d046      	beq.n	80036a0 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d126      	bne.n	8003668 <PCD_EP_ISR_Handler+0x5f0>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003628:	b29b      	uxth	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	4413      	add	r3, r2
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
 8003632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	00da      	lsls	r2, r3, #3
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	4413      	add	r3, r2
 800363c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800364c:	b29a      	uxth	r2, r3
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003660:	b29a      	uxth	r2, r3
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	e061      	b.n	800372c <PCD_EP_ISR_Handler+0x6b4>
 8003668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d15d      	bne.n	800372c <PCD_EP_ISR_Handler+0x6b4>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800367e:	b29b      	uxth	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003684:	4413      	add	r3, r2
 8003686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	00da      	lsls	r2, r3, #3
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	4413      	add	r3, r2
 8003692:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369a:	2200      	movs	r2, #0
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	e045      	b.n	800372c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a8:	785b      	ldrb	r3, [r3, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d126      	bne.n	80036fc <PCD_EP_ISR_Handler+0x684>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036bc:	b29b      	uxth	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c2:	4413      	add	r3, r2
 80036c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	00da      	lsls	r2, r3, #3
 80036cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ce:	4413      	add	r3, r2
 80036d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e4:	801a      	strh	r2, [r3, #0]
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	e017      	b.n	800372c <PCD_EP_ISR_Handler+0x6b4>
 80036fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d113      	bne.n	800372c <PCD_EP_ISR_Handler+0x6b4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800370c:	b29b      	uxth	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003712:	4413      	add	r3, r2
 8003714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	00da      	lsls	r2, r3, #3
 800371c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800371e:	4413      	add	r3, r2
 8003720:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003724:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003728:	2200      	movs	r2, #0
 800372a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800372c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f007 fe2d 	bl	800b392 <HAL_PCD_DataInStageCallback>
 8003738:	e051      	b.n	80037de <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800373a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800373e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d144      	bne.n	80037d0 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800374e:	b29b      	uxth	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	4413      	add	r3, r2
 8003760:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800376a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800376e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003776:	429a      	cmp	r2, r3
 8003778:	d907      	bls.n	800378a <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800377a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003782:	1ad2      	subs	r2, r2, r3
 8003784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003786:	619a      	str	r2, [r3, #24]
 8003788:	e002      	b.n	8003790 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800378a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f007 fdf7 	bl	800b392 <HAL_PCD_DataInStageCallback>
 80037a4:	e01b      	b.n	80037de <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80037a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037ae:	441a      	add	r2, r3
 80037b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80037b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037bc:	441a      	add	r2, r3
 80037be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037c8:	4618      	mov	r0, r3
 80037ca:	f004 fa0c 	bl	8007be6 <USB_EPStartXfer>
 80037ce:	e006      	b.n	80037de <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037d4:	461a      	mov	r2, r3
 80037d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f917 	bl	8003a0c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	b21b      	sxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f6ff ac49 	blt.w	8003082 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3758      	adds	r7, #88	@ 0x58
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b088      	sub	sp, #32
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	4613      	mov	r3, r2
 8003806:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d07c      	beq.n	800390c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800381a:	b29b      	uxth	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	4413      	add	r3, r2
 800382c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003836:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	699a      	ldr	r2, [r3, #24]
 800383c:	8b7b      	ldrh	r3, [r7, #26]
 800383e:	429a      	cmp	r2, r3
 8003840:	d306      	bcc.n	8003850 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	8b7b      	ldrh	r3, [r7, #26]
 8003848:	1ad2      	subs	r2, r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	619a      	str	r2, [r3, #24]
 800384e:	e002      	b.n	8003856 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2200      	movs	r2, #0
 8003854:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d123      	bne.n	80038a6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003878:	833b      	strh	r3, [r7, #24]
 800387a:	8b3b      	ldrh	r3, [r7, #24]
 800387c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003880:	833b      	strh	r3, [r7, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	441a      	add	r2, r3
 8003890:	8b3b      	ldrh	r3, [r7, #24]
 8003892:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800389a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800389e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01f      	beq.n	80038f0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ca:	82fb      	strh	r3, [r7, #22]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	441a      	add	r2, r3
 80038da:	8afb      	ldrh	r3, [r7, #22]
 80038dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038f0:	8b7b      	ldrh	r3, [r7, #26]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 8085 	beq.w	8003a02 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6959      	ldr	r1, [r3, #20]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	891a      	ldrh	r2, [r3, #8]
 8003904:	8b7b      	ldrh	r3, [r7, #26]
 8003906:	f005 fe9b 	bl	8009640 <USB_ReadPMA>
 800390a:	e07a      	b.n	8003a02 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003914:	b29b      	uxth	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	4413      	add	r3, r2
 8003926:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003930:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	8b7b      	ldrh	r3, [r7, #26]
 8003938:	429a      	cmp	r2, r3
 800393a:	d306      	bcc.n	800394a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	8b7b      	ldrh	r3, [r7, #26]
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	619a      	str	r2, [r3, #24]
 8003948:	e002      	b.n	8003950 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d123      	bne.n	80039a0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	83fb      	strh	r3, [r7, #30]
 8003974:	8bfb      	ldrh	r3, [r7, #30]
 8003976:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800397a:	83fb      	strh	r3, [r7, #30]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	8bfb      	ldrh	r3, [r7, #30]
 800398c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800399c:	b29b      	uxth	r3, r3
 800399e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11f      	bne.n	80039ea <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c4:	83bb      	strh	r3, [r7, #28]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	441a      	add	r2, r3
 80039d4:	8bbb      	ldrh	r3, [r7, #28]
 80039d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039ea:	8b7b      	ldrh	r3, [r7, #26]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	6959      	ldr	r1, [r3, #20]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	895a      	ldrh	r2, [r3, #10]
 80039fc:	8b7b      	ldrh	r3, [r7, #26]
 80039fe:	f005 fe1f 	bl	8009640 <USB_ReadPMA>
    }
  }

  return count;
 8003a02:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b0a4      	sub	sp, #144	@ 0x90
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 81db 	beq.w	8003ddc <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4413      	add	r3, r2
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d907      	bls.n	8003a6a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	619a      	str	r2, [r3, #24]
 8003a68:	e002      	b.n	8003a70 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 80b9 	bne.w	8003bec <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d126      	bne.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	4413      	add	r3, r2
 8003a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	00da      	lsls	r2, r3, #3
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab8:	801a      	strh	r2, [r3, #0]
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	e01a      	b.n	8003b06 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	785b      	ldrb	r3, [r3, #1]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d116      	bne.n	8003b06 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aec:	4413      	add	r3, r2
 8003aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	00da      	lsls	r2, r3, #3
 8003af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af8:	4413      	add	r3, r2
 8003afa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	2200      	movs	r2, #0
 8003b04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	785b      	ldrb	r3, [r3, #1]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d126      	bne.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x156>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	4413      	add	r3, r2
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	00da      	lsls	r2, r3, #3
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	801a      	strh	r2, [r3, #0]
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	801a      	strh	r2, [r3, #0]
 8003b60:	e017      	b.n	8003b92 <HAL_PCD_EP_DB_Transmit+0x186>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d113      	bne.n	8003b92 <HAL_PCD_EP_DB_Transmit+0x186>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	4413      	add	r3, r2
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	00da      	lsls	r2, r3, #3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	4413      	add	r3, r2
 8003b86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f007 fbfa 	bl	800b392 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 82fa 	beq.w	800419e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc4:	82fb      	strh	r3, [r7, #22]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	441a      	add	r2, r3
 8003bd4:	8afb      	ldrh	r3, [r7, #22]
 8003bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	8013      	strh	r3, [r2, #0]
 8003bea:	e2d8      	b.n	800419e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d021      	beq.n	8003c3a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 82ac 	bne.w	800419e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c4e:	441a      	add	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c5c:	441a      	add	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	6a1a      	ldr	r2, [r3, #32]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d30b      	bcc.n	8003c86 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6a1a      	ldr	r2, [r3, #32]
 8003c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c7e:	1ad2      	subs	r2, r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	621a      	str	r2, [r3, #32]
 8003c84:	e017      	b.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d108      	bne.n	8003ca0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003c8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c9e:	e00a      	b.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	785b      	ldrb	r3, [r3, #1]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d165      	bne.n	8003d8a <HAL_PCD_EP_DB_Transmit+0x37e>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd2:	4413      	add	r3, r2
 8003cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	00da      	lsls	r2, r3, #3
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cde:	4413      	add	r3, r2
 8003ce0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cfa:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cfc:	d91d      	bls.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x32e>
 8003cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d14:	3b01      	subs	r3, #1
 8003d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	029b      	lsls	r3, r3, #10
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4313      	orrs	r3, r2
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	e044      	b.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d54:	801a      	strh	r2, [r3, #0]
 8003d56:	e035      	b.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_PCD_EP_DB_Transmit+0x366>
 8003d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d6e:	3301      	adds	r3, #1
 8003d70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	029b      	lsls	r3, r3, #10
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	e01c      	b.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	785b      	ldrb	r3, [r3, #1]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d118      	bne.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003da6:	4413      	add	r3, r2
 8003da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	00da      	lsls	r2, r3, #3
 8003db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db2:	4413      	add	r3, r2
 8003db4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6959      	ldr	r1, [r3, #20]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	891a      	ldrh	r2, [r3, #8]
 8003dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f005 fbf1 	bl	80095bc <USB_WritePMA>
 8003dda:	e1e0      	b.n	800419e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e00:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d307      	bcc.n	8003e20 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e18:	1ad2      	subs	r2, r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	619a      	str	r2, [r3, #24]
 8003e1e:	e002      	b.n	8003e26 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2200      	movs	r2, #0
 8003e24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 80c0 	bne.w	8003fb0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d126      	bne.n	8003e86 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e4c:	4413      	add	r3, r2
 8003e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	00da      	lsls	r2, r3, #3
 8003e56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e58:	4413      	add	r3, r2
 8003e5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e6e:	801a      	strh	r2, [r3, #0]
 8003e70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e82:	801a      	strh	r2, [r3, #0]
 8003e84:	e01a      	b.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	785b      	ldrb	r3, [r3, #1]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d116      	bne.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ea2:	4413      	add	r3, r2
 8003ea4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	00da      	lsls	r2, r3, #3
 8003eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eae:	4413      	add	r3, r2
 8003eb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003eb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eb8:	2200      	movs	r2, #0
 8003eba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	785b      	ldrb	r3, [r3, #1]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d12b      	bne.n	8003f22 <HAL_PCD_EP_DB_Transmit+0x516>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ede:	4413      	add	r3, r2
 8003ee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	00da      	lsls	r2, r3, #3
 8003ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eea:	4413      	add	r3, r2
 8003eec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	e017      	b.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x546>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	785b      	ldrb	r3, [r3, #1]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d113      	bne.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x546>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f38:	4413      	add	r3, r2
 8003f3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	00da      	lsls	r2, r3, #3
 8003f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f44:	4413      	add	r3, r2
 8003f46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f4e:	2200      	movs	r2, #0
 8003f50:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	4619      	mov	r1, r3
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f007 fa1a 	bl	800b392 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f040 811a 	bne.w	800419e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f84:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	8013      	strh	r3, [r2, #0]
 8003fae:	e0f6      	b.n	800419e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d121      	bne.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	441a      	add	r2, r3
 8003fe6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003fea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ff2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 80ca 	bne.w	800419e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004012:	441a      	add	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004020:	441a      	add	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6a1a      	ldr	r2, [r3, #32]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	429a      	cmp	r2, r3
 8004030:	d30b      	bcc.n	800404a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	621a      	str	r2, [r3, #32]
 8004048:	e017      	b.n	800407a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d108      	bne.n	8004064 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004052:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004062:	e00a      	b.n	800407a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2200      	movs	r2, #0
 8004070:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d165      	bne.n	8004154 <HAL_PCD_EP_DB_Transmit+0x748>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800409c:	4413      	add	r3, r2
 800409e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	00da      	lsls	r2, r3, #3
 80040a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a8:	4413      	add	r3, r2
 80040aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040be:	801a      	strh	r2, [r3, #0]
 80040c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80040c6:	d91d      	bls.n	8004104 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80040c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80040dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040de:	3b01      	subs	r3, #1
 80040e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	029b      	lsls	r3, r3, #10
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	4313      	orrs	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004100:	801a      	strh	r2, [r3, #0]
 8004102:	e041      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <HAL_PCD_EP_DB_Transmit+0x716>
 800410c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800411a:	b29a      	uxth	r2, r3
 800411c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800411e:	801a      	strh	r2, [r3, #0]
 8004120:	e032      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800412a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_PCD_EP_DB_Transmit+0x730>
 8004136:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004138:	3301      	adds	r3, #1
 800413a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800413c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29a      	uxth	r2, r3
 8004142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004144:	b29b      	uxth	r3, r3
 8004146:	029b      	lsls	r3, r3, #10
 8004148:	b29b      	uxth	r3, r3
 800414a:	4313      	orrs	r3, r2
 800414c:	b29a      	uxth	r2, r3
 800414e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004150:	801a      	strh	r2, [r3, #0]
 8004152:	e019      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d115      	bne.n	8004188 <HAL_PCD_EP_DB_Transmit+0x77c>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416a:	4413      	add	r3, r2
 800416c:	657b      	str	r3, [r7, #84]	@ 0x54
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	00da      	lsls	r2, r3, #3
 8004174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004176:	4413      	add	r3, r2
 8004178:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800417c:	653b      	str	r3, [r7, #80]	@ 0x50
 800417e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004182:	b29a      	uxth	r2, r3
 8004184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004186:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	6959      	ldr	r1, [r3, #20]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	895a      	ldrh	r2, [r3, #10]
 8004194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004198:	b29b      	uxth	r3, r3
 800419a:	f005 fa0f 	bl	80095bc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b8:	82bb      	strh	r3, [r7, #20]
 80041ba:	8abb      	ldrh	r3, [r7, #20]
 80041bc:	f083 0310 	eor.w	r3, r3, #16
 80041c0:	82bb      	strh	r3, [r7, #20]
 80041c2:	8abb      	ldrh	r3, [r7, #20]
 80041c4:	f083 0320 	eor.w	r3, r3, #32
 80041c8:	82bb      	strh	r3, [r7, #20]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	441a      	add	r2, r3
 80041d8:	8abb      	ldrh	r3, [r7, #20]
 80041da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3790      	adds	r7, #144	@ 0x90
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	4613      	mov	r3, r2
 8004208:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800420a:	897b      	ldrh	r3, [r7, #10]
 800420c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004216:	897b      	ldrh	r3, [r7, #10]
 8004218:	f003 0207 	and.w	r2, r3, #7
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	3310      	adds	r3, #16
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e009      	b.n	8004242 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800422e:	897a      	ldrh	r2, [r7, #10]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004242:	893b      	ldrh	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d107      	bne.n	8004258 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2200      	movs	r2, #0
 800424c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	b29a      	uxth	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	80da      	strh	r2, [r3, #6]
 8004256:	e00b      	b.n	8004270 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2201      	movs	r2, #1
 800425c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	b29a      	uxth	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	b29a      	uxth	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f043 0302 	orr.w	r3, r3, #2
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d8:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a04      	ldr	r2, [pc, #16]	@ (80042f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e2:	6013      	str	r3, [r2, #0]
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40007000 	.word	0x40007000

080042f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d141      	bne.n	8004386 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004302:	4b4b      	ldr	r3, [pc, #300]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430e:	d131      	bne.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004310:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004316:	4a46      	ldr	r2, [pc, #280]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800431c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004320:	4b43      	ldr	r3, [pc, #268]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004328:	4a41      	ldr	r2, [pc, #260]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800432e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004330:	4b40      	ldr	r3, [pc, #256]	@ (8004434 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2232      	movs	r2, #50	@ 0x32
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	4a3f      	ldr	r2, [pc, #252]	@ (8004438 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	0c9b      	lsrs	r3, r3, #18
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004346:	e002      	b.n	800434e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3b01      	subs	r3, #1
 800434c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800434e:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800435a:	d102      	bne.n	8004362 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f2      	bne.n	8004348 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004362:	4b33      	ldr	r3, [pc, #204]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436e:	d158      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e057      	b.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004374:	4b2e      	ldr	r3, [pc, #184]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800437a:	4a2d      	ldr	r2, [pc, #180]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004380:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004384:	e04d      	b.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438c:	d141      	bne.n	8004412 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800438e:	4b28      	ldr	r3, [pc, #160]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439a:	d131      	bne.n	8004400 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800439c:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a2:	4a23      	ldr	r2, [pc, #140]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043ac:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004434 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2232      	movs	r2, #50	@ 0x32
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004438 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	0c9b      	lsrs	r3, r3, #18
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d2:	e002      	b.n	80043da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043da:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e6:	d102      	bne.n	80043ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f2      	bne.n	80043d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ee:	4b10      	ldr	r3, [pc, #64]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fa:	d112      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e011      	b.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004406:	4a0a      	ldr	r2, [pc, #40]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800440c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004410:	e007      	b.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004412:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800441a:	4a05      	ldr	r2, [pc, #20]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004420:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	40007000 	.word	0x40007000
 8004434:	20000000 	.word	0x20000000
 8004438:	431bde83 	.word	0x431bde83

0800443c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a04      	ldr	r2, [pc, #16]	@ (8004458 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800444a:	6093      	str	r3, [r2, #8]
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40007000 	.word	0x40007000

0800445c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e2fe      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d075      	beq.n	8004566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800447a:	4b97      	ldr	r3, [pc, #604]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004484:	4b94      	ldr	r3, [pc, #592]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d102      	bne.n	800449a <HAL_RCC_OscConfig+0x3e>
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2b03      	cmp	r3, #3
 8004498:	d002      	beq.n	80044a0 <HAL_RCC_OscConfig+0x44>
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d10b      	bne.n	80044b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	4b8d      	ldr	r3, [pc, #564]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d05b      	beq.n	8004564 <HAL_RCC_OscConfig+0x108>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d157      	bne.n	8004564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e2d9      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c0:	d106      	bne.n	80044d0 <HAL_RCC_OscConfig+0x74>
 80044c2:	4b85      	ldr	r3, [pc, #532]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a84      	ldr	r2, [pc, #528]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e01d      	b.n	800450c <HAL_RCC_OscConfig+0xb0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x98>
 80044da:	4b7f      	ldr	r3, [pc, #508]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a7e      	ldr	r2, [pc, #504]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80044e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b7c      	ldr	r3, [pc, #496]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7b      	ldr	r2, [pc, #492]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e00b      	b.n	800450c <HAL_RCC_OscConfig+0xb0>
 80044f4:	4b78      	ldr	r3, [pc, #480]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a77      	ldr	r2, [pc, #476]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80044fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	4b75      	ldr	r3, [pc, #468]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a74      	ldr	r2, [pc, #464]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800450a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fc fd56 	bl	8000fc4 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7fc fd52 	bl	8000fc4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	@ 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e29e      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452e:	4b6a      	ldr	r3, [pc, #424]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0xc0>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fc fd42 	bl	8000fc4 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004544:	f7fc fd3e 	bl	8000fc4 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	@ 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e28a      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004556:	4b60      	ldr	r3, [pc, #384]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0xe8>
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d075      	beq.n	800465e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004572:	4b59      	ldr	r3, [pc, #356]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800457c:	4b56      	ldr	r3, [pc, #344]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b0c      	cmp	r3, #12
 800458a:	d102      	bne.n	8004592 <HAL_RCC_OscConfig+0x136>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d002      	beq.n	8004598 <HAL_RCC_OscConfig+0x13c>
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d11f      	bne.n	80045d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004598:	4b4f      	ldr	r3, [pc, #316]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_OscConfig+0x154>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e25d      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b0:	4b49      	ldr	r3, [pc, #292]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	061b      	lsls	r3, r3, #24
 80045be:	4946      	ldr	r1, [pc, #280]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045c4:	4b45      	ldr	r3, [pc, #276]	@ (80046dc <HAL_RCC_OscConfig+0x280>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fc fcaf 	bl	8000f2c <HAL_InitTick>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d043      	beq.n	800465c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e249      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d023      	beq.n	8004628 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e0:	4b3d      	ldr	r3, [pc, #244]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a3c      	ldr	r2, [pc, #240]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80045e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fc fcea 	bl	8000fc4 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f4:	f7fc fce6 	bl	8000fc4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e232      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004606:	4b34      	ldr	r3, [pc, #208]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4b31      	ldr	r3, [pc, #196]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	061b      	lsls	r3, r3, #24
 8004620:	492d      	ldr	r1, [pc, #180]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	604b      	str	r3, [r1, #4]
 8004626:	e01a      	b.n	800465e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004628:	4b2b      	ldr	r3, [pc, #172]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 800462e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fc fcc6 	bl	8000fc4 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463c:	f7fc fcc2 	bl	8000fc4 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e20e      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800464e:	4b22      	ldr	r3, [pc, #136]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x1e0>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d041      	beq.n	80046ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d01c      	beq.n	80046ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004672:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 8004674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004678:	4a17      	ldr	r2, [pc, #92]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004682:	f7fc fc9f 	bl	8000fc4 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468a:	f7fc fc9b 	bl	8000fc4 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e1e7      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800469c:	4b0e      	ldr	r3, [pc, #56]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 800469e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ef      	beq.n	800468a <HAL_RCC_OscConfig+0x22e>
 80046aa:	e020      	b.n	80046ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ac:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80046ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b2:	4a09      	ldr	r2, [pc, #36]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fc fc82 	bl	8000fc4 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046c2:	e00d      	b.n	80046e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c4:	f7fc fc7e 	bl	8000fc4 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d906      	bls.n	80046e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e1ca      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80046e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1ea      	bne.n	80046c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80a6 	beq.w	8004848 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fc:	2300      	movs	r3, #0
 80046fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004700:	4b84      	ldr	r3, [pc, #528]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 8004702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_OscConfig+0x2b4>
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <HAL_RCC_OscConfig+0x2b6>
 8004710:	2300      	movs	r3, #0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	4b7f      	ldr	r3, [pc, #508]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 8004718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471a:	4a7e      	ldr	r2, [pc, #504]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004720:	6593      	str	r3, [r2, #88]	@ 0x58
 8004722:	4b7c      	ldr	r3, [pc, #496]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800472e:	2301      	movs	r3, #1
 8004730:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004732:	4b79      	ldr	r3, [pc, #484]	@ (8004918 <HAL_RCC_OscConfig+0x4bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d118      	bne.n	8004770 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800473e:	4b76      	ldr	r3, [pc, #472]	@ (8004918 <HAL_RCC_OscConfig+0x4bc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a75      	ldr	r2, [pc, #468]	@ (8004918 <HAL_RCC_OscConfig+0x4bc>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474a:	f7fc fc3b 	bl	8000fc4 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fc fc37 	bl	8000fc4 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e183      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004764:	4b6c      	ldr	r3, [pc, #432]	@ (8004918 <HAL_RCC_OscConfig+0x4bc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d108      	bne.n	800478a <HAL_RCC_OscConfig+0x32e>
 8004778:	4b66      	ldr	r3, [pc, #408]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477e:	4a65      	ldr	r2, [pc, #404]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004788:	e024      	b.n	80047d4 <HAL_RCC_OscConfig+0x378>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b05      	cmp	r3, #5
 8004790:	d110      	bne.n	80047b4 <HAL_RCC_OscConfig+0x358>
 8004792:	4b60      	ldr	r3, [pc, #384]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004798:	4a5e      	ldr	r2, [pc, #376]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 800479a:	f043 0304 	orr.w	r3, r3, #4
 800479e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047b2:	e00f      	b.n	80047d4 <HAL_RCC_OscConfig+0x378>
 80047b4:	4b57      	ldr	r3, [pc, #348]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ba:	4a56      	ldr	r2, [pc, #344]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047c4:	4b53      	ldr	r3, [pc, #332]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	4a52      	ldr	r2, [pc, #328]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80047cc:	f023 0304 	bic.w	r3, r3, #4
 80047d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d016      	beq.n	800480a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fc fbf2 	bl	8000fc4 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e4:	f7fc fbee 	bl	8000fc4 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e138      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047fa:	4b46      	ldr	r3, [pc, #280]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ed      	beq.n	80047e4 <HAL_RCC_OscConfig+0x388>
 8004808:	e015      	b.n	8004836 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480a:	f7fc fbdb 	bl	8000fc4 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fc fbd7 	bl	8000fc4 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e121      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004828:	4b3a      	ldr	r3, [pc, #232]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ed      	bne.n	8004812 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004836:	7ffb      	ldrb	r3, [r7, #31]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d105      	bne.n	8004848 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483c:	4b35      	ldr	r3, [pc, #212]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 800483e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004840:	4a34      	ldr	r2, [pc, #208]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 8004842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004846:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b00      	cmp	r3, #0
 8004852:	d03c      	beq.n	80048ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01c      	beq.n	8004896 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800485c:	4b2d      	ldr	r3, [pc, #180]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 800485e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004862:	4a2c      	ldr	r2, [pc, #176]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486c:	f7fc fbaa 	bl	8000fc4 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004874:	f7fc fba6 	bl	8000fc4 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0f2      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004886:	4b23      	ldr	r3, [pc, #140]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 8004888:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ef      	beq.n	8004874 <HAL_RCC_OscConfig+0x418>
 8004894:	e01b      	b.n	80048ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004896:	4b1f      	ldr	r3, [pc, #124]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 8004898:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800489c:	4a1d      	ldr	r2, [pc, #116]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a6:	f7fc fb8d 	bl	8000fc4 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ae:	f7fc fb89 	bl	8000fc4 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0d5      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048c0:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80048c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1ef      	bne.n	80048ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80c9 	beq.w	8004a6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	2b0c      	cmp	r3, #12
 80048e2:	f000 8083 	beq.w	80049ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d15e      	bne.n	80049ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ee:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a08      	ldr	r2, [pc, #32]	@ (8004914 <HAL_RCC_OscConfig+0x4b8>)
 80048f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7fc fb63 	bl	8000fc4 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004900:	e00c      	b.n	800491c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004902:	f7fc fb5f 	bl	8000fc4 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d905      	bls.n	800491c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0ab      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
 8004914:	40021000 	.word	0x40021000
 8004918:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491c:	4b55      	ldr	r3, [pc, #340]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1ec      	bne.n	8004902 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004928:	4b52      	ldr	r3, [pc, #328]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	4b52      	ldr	r3, [pc, #328]	@ (8004a78 <HAL_RCC_OscConfig+0x61c>)
 800492e:	4013      	ands	r3, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6a11      	ldr	r1, [r2, #32]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004938:	3a01      	subs	r2, #1
 800493a:	0112      	lsls	r2, r2, #4
 800493c:	4311      	orrs	r1, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004942:	0212      	lsls	r2, r2, #8
 8004944:	4311      	orrs	r1, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800494a:	0852      	lsrs	r2, r2, #1
 800494c:	3a01      	subs	r2, #1
 800494e:	0552      	lsls	r2, r2, #21
 8004950:	4311      	orrs	r1, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004956:	0852      	lsrs	r2, r2, #1
 8004958:	3a01      	subs	r2, #1
 800495a:	0652      	lsls	r2, r2, #25
 800495c:	4311      	orrs	r1, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004962:	06d2      	lsls	r2, r2, #27
 8004964:	430a      	orrs	r2, r1
 8004966:	4943      	ldr	r1, [pc, #268]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 8004968:	4313      	orrs	r3, r2
 800496a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496c:	4b41      	ldr	r3, [pc, #260]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a40      	ldr	r2, [pc, #256]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 8004972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004976:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004978:	4b3e      	ldr	r3, [pc, #248]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4a3d      	ldr	r2, [pc, #244]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 800497e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004982:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fc fb1e 	bl	8000fc4 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498c:	f7fc fb1a 	bl	8000fc4 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e066      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499e:	4b35      	ldr	r3, [pc, #212]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x530>
 80049aa:	e05e      	b.n	8004a6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ac:	4b31      	ldr	r3, [pc, #196]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a30      	ldr	r2, [pc, #192]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 80049b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fc fb04 	bl	8000fc4 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fc fb00 	bl	8000fc4 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e04c      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d2:	4b28      	ldr	r3, [pc, #160]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049de:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	4924      	ldr	r1, [pc, #144]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 80049e4:	4b25      	ldr	r3, [pc, #148]	@ (8004a7c <HAL_RCC_OscConfig+0x620>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	60cb      	str	r3, [r1, #12]
 80049ea:	e03e      	b.n	8004a6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e039      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a74 <HAL_RCC_OscConfig+0x618>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 0203 	and.w	r2, r3, #3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d12c      	bne.n	8004a66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	3b01      	subs	r3, #1
 8004a18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d123      	bne.n	8004a66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d11b      	bne.n	8004a66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d113      	bne.n	8004a66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d109      	bne.n	8004a66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5c:	085b      	lsrs	r3, r3, #1
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40021000 	.word	0x40021000
 8004a78:	019f800c 	.word	0x019f800c
 8004a7c:	feeefffc 	.word	0xfeeefffc

08004a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e11e      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a98:	4b91      	ldr	r3, [pc, #580]	@ (8004ce0 <HAL_RCC_ClockConfig+0x260>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d910      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b8e      	ldr	r3, [pc, #568]	@ (8004ce0 <HAL_RCC_ClockConfig+0x260>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 020f 	bic.w	r2, r3, #15
 8004aae:	498c      	ldr	r1, [pc, #560]	@ (8004ce0 <HAL_RCC_ClockConfig+0x260>)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8004ce0 <HAL_RCC_ClockConfig+0x260>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e106      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d073      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d129      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004adc:	4b81      	ldr	r3, [pc, #516]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0f4      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004aec:	f000 f966 	bl	8004dbc <RCC_GetSysClockFreqFromPLLSource>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4a7c      	ldr	r2, [pc, #496]	@ (8004ce8 <HAL_RCC_ClockConfig+0x268>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d93f      	bls.n	8004b7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004afa:	4b7a      	ldr	r3, [pc, #488]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d033      	beq.n	8004b7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d12f      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b1a:	4b72      	ldr	r3, [pc, #456]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b22:	4a70      	ldr	r2, [pc, #448]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b2a:	2380      	movs	r3, #128	@ 0x80
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e024      	b.n	8004b7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b38:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d109      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0c6      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b48:	4b66      	ldr	r3, [pc, #408]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0be      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b58:	f000 f8ce 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4a61      	ldr	r2, [pc, #388]	@ (8004ce8 <HAL_RCC_ClockConfig+0x268>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d909      	bls.n	8004b7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b66:	4b5f      	ldr	r3, [pc, #380]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b6e:	4a5d      	ldr	r2, [pc, #372]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b76:	2380      	movs	r3, #128	@ 0x80
 8004b78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 0203 	bic.w	r2, r3, #3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4957      	ldr	r1, [pc, #348]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8c:	f7fc fa1a 	bl	8000fc4 <HAL_GetTick>
 8004b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b92:	e00a      	b.n	8004baa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b94:	f7fc fa16 	bl	8000fc4 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e095      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	4b4e      	ldr	r3, [pc, #312]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 020c 	and.w	r2, r3, #12
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d1eb      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d023      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd4:	4b43      	ldr	r3, [pc, #268]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	4a42      	ldr	r2, [pc, #264]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004bda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bde:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004bec:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bf4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004bf6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bfc:	4b39      	ldr	r3, [pc, #228]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4936      	ldr	r1, [pc, #216]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b80      	cmp	r3, #128	@ 0x80
 8004c14:	d105      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c16:	4b33      	ldr	r3, [pc, #204]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	4a32      	ldr	r2, [pc, #200]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004c1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c22:	4b2f      	ldr	r3, [pc, #188]	@ (8004ce0 <HAL_RCC_ClockConfig+0x260>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d21d      	bcs.n	8004c6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce0 <HAL_RCC_ClockConfig+0x260>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f023 020f 	bic.w	r2, r3, #15
 8004c38:	4929      	ldr	r1, [pc, #164]	@ (8004ce0 <HAL_RCC_ClockConfig+0x260>)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c40:	f7fc f9c0 	bl	8000fc4 <HAL_GetTick>
 8004c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c48:	f7fc f9bc 	bl	8000fc4 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e03b      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ce0 <HAL_RCC_ClockConfig+0x260>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d1ed      	bne.n	8004c48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c78:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4917      	ldr	r1, [pc, #92]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c96:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	490f      	ldr	r1, [pc, #60]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004caa:	f000 f825 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	490c      	ldr	r1, [pc, #48]	@ (8004cec <HAL_RCC_ClockConfig+0x26c>)
 8004cbc:	5ccb      	ldrb	r3, [r1, r3]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf0 <HAL_RCC_ClockConfig+0x270>)
 8004cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cca:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <HAL_RCC_ClockConfig+0x274>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fc f92c 	bl	8000f2c <HAL_InitTick>
 8004cd4:	4603      	mov	r3, r0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40022000 	.word	0x40022000
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	04c4b400 	.word	0x04c4b400
 8004cec:	0800b980 	.word	0x0800b980
 8004cf0:	20000000 	.word	0x20000000
 8004cf4:	20000004 	.word	0x20000004

08004cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d102      	bne.n	8004d10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	e047      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d10:	4b27      	ldr	r3, [pc, #156]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d102      	bne.n	8004d22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d1c:	4b26      	ldr	r3, [pc, #152]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	e03e      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d22:	4b23      	ldr	r3, [pc, #140]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d136      	bne.n	8004d9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d2e:	4b20      	ldr	r3, [pc, #128]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d38:	4b1d      	ldr	r3, [pc, #116]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	3301      	adds	r3, #1
 8004d44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d10c      	bne.n	8004d66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	4a16      	ldr	r2, [pc, #88]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d56:	68d2      	ldr	r2, [r2, #12]
 8004d58:	0a12      	lsrs	r2, r2, #8
 8004d5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	617b      	str	r3, [r7, #20]
      break;
 8004d64:	e00c      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d66:	4a13      	ldr	r2, [pc, #76]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6e:	4a10      	ldr	r2, [pc, #64]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d70:	68d2      	ldr	r2, [r2, #12]
 8004d72:	0a12      	lsrs	r2, r2, #8
 8004d74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d78:	fb02 f303 	mul.w	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]
      break;
 8004d7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	0e5b      	lsrs	r3, r3, #25
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	e001      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004da0:	693b      	ldr	r3, [r7, #16]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000
 8004db4:	00f42400 	.word	0x00f42400
 8004db8:	007a1200 	.word	0x007a1200

08004dbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d10c      	bne.n	8004dfa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004de0:	4a17      	ldr	r2, [pc, #92]	@ (8004e40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	4a14      	ldr	r2, [pc, #80]	@ (8004e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dea:	68d2      	ldr	r2, [r2, #12]
 8004dec:	0a12      	lsrs	r2, r2, #8
 8004dee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	617b      	str	r3, [r7, #20]
    break;
 8004df8:	e00c      	b.n	8004e14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dfa:	4a12      	ldr	r2, [pc, #72]	@ (8004e44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	4a0e      	ldr	r2, [pc, #56]	@ (8004e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e04:	68d2      	ldr	r2, [r2, #12]
 8004e06:	0a12      	lsrs	r2, r2, #8
 8004e08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e0c:	fb02 f303 	mul.w	r3, r2, r3
 8004e10:	617b      	str	r3, [r7, #20]
    break;
 8004e12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e14:	4b09      	ldr	r3, [pc, #36]	@ (8004e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	0e5b      	lsrs	r3, r3, #25
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	3301      	adds	r3, #1
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e2e:	687b      	ldr	r3, [r7, #4]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	007a1200 	.word	0x007a1200
 8004e44:	00f42400 	.word	0x00f42400

08004e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e50:	2300      	movs	r3, #0
 8004e52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e54:	2300      	movs	r3, #0
 8004e56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8098 	beq.w	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e66:	2300      	movs	r3, #0
 8004e68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6a:	4b43      	ldr	r3, [pc, #268]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10d      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e76:	4b40      	ldr	r3, [pc, #256]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e82:	4b3d      	ldr	r3, [pc, #244]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e92:	4b3a      	ldr	r3, [pc, #232]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a39      	ldr	r2, [pc, #228]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e9e:	f7fc f891 	bl	8000fc4 <HAL_GetTick>
 8004ea2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ea4:	e009      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea6:	f7fc f88d 	bl	8000fc4 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d902      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	74fb      	strb	r3, [r7, #19]
        break;
 8004eb8:	e005      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eba:	4b30      	ldr	r3, [pc, #192]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0ef      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d159      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01e      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d019      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ee8:	4b23      	ldr	r3, [pc, #140]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ef4:	4b20      	ldr	r3, [pc, #128]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efa:	4a1f      	ldr	r2, [pc, #124]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f04:	4b1c      	ldr	r3, [pc, #112]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f14:	4a18      	ldr	r2, [pc, #96]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d016      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f26:	f7fc f84d 	bl	8000fc4 <HAL_GetTick>
 8004f2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f2c:	e00b      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2e:	f7fc f849 	bl	8000fc4 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d902      	bls.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	74fb      	strb	r3, [r7, #19]
            break;
 8004f44:	e006      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f46:	4b0c      	ldr	r3, [pc, #48]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0ec      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5a:	4b07      	ldr	r3, [pc, #28]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f68:	4903      	ldr	r1, [pc, #12]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f70:	e008      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f72:	7cfb      	ldrb	r3, [r7, #19]
 8004f74:	74bb      	strb	r3, [r7, #18]
 8004f76:	e005      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f84:	7c7b      	ldrb	r3, [r7, #17]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d105      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8a:	4ba7      	ldr	r3, [pc, #668]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8e:	4aa6      	ldr	r2, [pc, #664]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fa2:	4ba1      	ldr	r3, [pc, #644]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa8:	f023 0203 	bic.w	r2, r3, #3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	499d      	ldr	r1, [pc, #628]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fc4:	4b98      	ldr	r3, [pc, #608]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fca:	f023 020c 	bic.w	r2, r3, #12
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	4995      	ldr	r1, [pc, #596]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fe6:	4b90      	ldr	r3, [pc, #576]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	498c      	ldr	r1, [pc, #560]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005008:	4b87      	ldr	r3, [pc, #540]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	4984      	ldr	r1, [pc, #528]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800502a:	4b7f      	ldr	r3, [pc, #508]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	497b      	ldr	r1, [pc, #492]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800504c:	4b76      	ldr	r3, [pc, #472]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005052:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	4973      	ldr	r1, [pc, #460]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800506e:	4b6e      	ldr	r3, [pc, #440]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005074:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	496a      	ldr	r1, [pc, #424]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005090:	4b65      	ldr	r3, [pc, #404]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005096:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	4962      	ldr	r1, [pc, #392]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	4959      	ldr	r1, [pc, #356]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050d4:	4b54      	ldr	r3, [pc, #336]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050da:	f023 0203 	bic.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e2:	4951      	ldr	r1, [pc, #324]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	4948      	ldr	r1, [pc, #288]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005114:	2b00      	cmp	r3, #0
 8005116:	d015      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005118:	4b43      	ldr	r3, [pc, #268]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005126:	4940      	ldr	r1, [pc, #256]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005136:	d105      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005138:	4b3b      	ldr	r3, [pc, #236]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a3a      	ldr	r2, [pc, #232]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005142:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800514c:	2b00      	cmp	r3, #0
 800514e:	d015      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005150:	4b35      	ldr	r3, [pc, #212]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005156:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800515e:	4932      	ldr	r1, [pc, #200]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800516e:	d105      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005170:	4b2d      	ldr	r3, [pc, #180]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4a2c      	ldr	r2, [pc, #176]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800517a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d015      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005188:	4b27      	ldr	r3, [pc, #156]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005196:	4924      	ldr	r1, [pc, #144]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051a6:	d105      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d015      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051c0:	4b19      	ldr	r3, [pc, #100]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ce:	4916      	ldr	r1, [pc, #88]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051de:	d105      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e0:	4b11      	ldr	r3, [pc, #68]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a10      	ldr	r2, [pc, #64]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d019      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	4908      	ldr	r1, [pc, #32]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005216:	d109      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005218:	4b03      	ldr	r3, [pc, #12]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a02      	ldr	r2, [pc, #8]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005222:	60d3      	str	r3, [r2, #12]
 8005224:	e002      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d015      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005238:	4b29      	ldr	r3, [pc, #164]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	4926      	ldr	r1, [pc, #152]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005256:	d105      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005258:	4b21      	ldr	r3, [pc, #132]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a20      	ldr	r2, [pc, #128]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800525e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005262:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d015      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005270:	4b1b      	ldr	r3, [pc, #108]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005276:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800527e:	4918      	ldr	r1, [pc, #96]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528e:	d105      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005290:	4b13      	ldr	r3, [pc, #76]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4a12      	ldr	r2, [pc, #72]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d015      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052a8:	4b0d      	ldr	r3, [pc, #52]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b6:	490a      	ldr	r1, [pc, #40]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052c6:	d105      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c8:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a04      	ldr	r2, [pc, #16]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40021000 	.word	0x40021000

080052e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d070      	beq.n	80053d8 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fb fab8 	bl	8000880 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	2b10      	cmp	r3, #16
 8005324:	d04f      	beq.n	80053c6 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	22ca      	movs	r2, #202	@ 0xca
 800532c:	625a      	str	r2, [r3, #36]	@ 0x24
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2253      	movs	r2, #83	@ 0x53
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f878 	bl	800542c <RTC_EnterInitMode>
 800533c:	4603      	mov	r3, r0
 800533e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d126      	bne.n	8005394 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005358:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6999      	ldr	r1, [r3, #24]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68d9      	ldr	r1, [r3, #12]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	041a      	lsls	r2, r3, #16
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f884 	bl	8005498 <RTC_ExitInitMode>
 8005390:	4603      	mov	r3, r0
 8005392:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d110      	bne.n	80053bc <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1a      	ldr	r2, [r3, #32]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	22ff      	movs	r2, #255	@ 0xff
 80053c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80053c4:	e001      	b.n	80053ca <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d103      	bne.n	80053d8 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005428 <HAL_RTC_WaitForSynchro+0x44>)
 80053f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80053f4:	f7fb fde6 	bl	8000fc4 <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80053fa:	e009      	b.n	8005410 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053fc:	f7fb fde2 	bl	8000fc4 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800540a:	d901      	bls.n	8005410 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e007      	b.n	8005420 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0ee      	beq.n	80053fc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	0001005f 	.word	0x0001005f

0800542c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d123      	bne.n	800548e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005454:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005456:	f7fb fdb5 	bl	8000fc4 <HAL_GetTick>
 800545a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800545c:	e00d      	b.n	800547a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800545e:	f7fb fdb1 	bl	8000fc4 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800546c:	d905      	bls.n	800547a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2203      	movs	r2, #3
 8005476:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <RTC_EnterInitMode+0x62>
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b03      	cmp	r3, #3
 800548c:	d1e7      	bne.n	800545e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800548e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054b2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10c      	bne.n	80054dc <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ff8e 	bl	80053e4 <HAL_RTC_WaitForSynchro>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d022      	beq.n	8005514 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2203      	movs	r2, #3
 80054d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	73fb      	strb	r3, [r7, #15]
 80054da:	e01b      	b.n	8005514 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0220 	bic.w	r2, r2, #32
 80054ea:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff ff79 	bl	80053e4 <HAL_RTC_WaitForSynchro>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2203      	movs	r2, #3
 80054fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0220 	orr.w	r2, r2, #32
 8005512:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e049      	b.n	80055c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fb f9d7 	bl	80008f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f000 ffc5 	bl	80064ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d001      	beq.n	80055e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e04c      	b.n	800567e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a26      	ldr	r2, [pc, #152]	@ (800568c <HAL_TIM_Base_Start+0xc0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d022      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055fe:	d01d      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a22      	ldr	r2, [pc, #136]	@ (8005690 <HAL_TIM_Base_Start+0xc4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d018      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a21      	ldr	r2, [pc, #132]	@ (8005694 <HAL_TIM_Base_Start+0xc8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d013      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1f      	ldr	r2, [pc, #124]	@ (8005698 <HAL_TIM_Base_Start+0xcc>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00e      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1e      	ldr	r2, [pc, #120]	@ (800569c <HAL_TIM_Base_Start+0xd0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1c      	ldr	r2, [pc, #112]	@ (80056a0 <HAL_TIM_Base_Start+0xd4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1b      	ldr	r2, [pc, #108]	@ (80056a4 <HAL_TIM_Base_Start+0xd8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d115      	bne.n	8005668 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	4b19      	ldr	r3, [pc, #100]	@ (80056a8 <HAL_TIM_Base_Start+0xdc>)
 8005644:	4013      	ands	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b06      	cmp	r3, #6
 800564c:	d015      	beq.n	800567a <HAL_TIM_Base_Start+0xae>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005654:	d011      	beq.n	800567a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005666:	e008      	b.n	800567a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e000      	b.n	800567c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40013400 	.word	0x40013400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40015000 	.word	0x40015000
 80056a8:	00010007 	.word	0x00010007

080056ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e049      	b.n	8005752 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f841 	bl	800575a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fefe 	bl	80064ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	e03c      	b.n	8005816 <HAL_TIM_PWM_Start_DMA+0xa6>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d109      	bne.n	80057b6 <HAL_TIM_PWM_Start_DMA+0x46>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	bf0c      	ite	eq
 80057ae:	2301      	moveq	r3, #1
 80057b0:	2300      	movne	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	e02f      	b.n	8005816 <HAL_TIM_PWM_Start_DMA+0xa6>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d109      	bne.n	80057d0 <HAL_TIM_PWM_Start_DMA+0x60>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	e022      	b.n	8005816 <HAL_TIM_PWM_Start_DMA+0xa6>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b0c      	cmp	r3, #12
 80057d4:	d109      	bne.n	80057ea <HAL_TIM_PWM_Start_DMA+0x7a>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	bf0c      	ite	eq
 80057e2:	2301      	moveq	r3, #1
 80057e4:	2300      	movne	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e015      	b.n	8005816 <HAL_TIM_PWM_Start_DMA+0xa6>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d109      	bne.n	8005804 <HAL_TIM_PWM_Start_DMA+0x94>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	bf0c      	ite	eq
 80057fc:	2301      	moveq	r3, #1
 80057fe:	2300      	movne	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	e008      	b.n	8005816 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800581a:	2302      	movs	r3, #2
 800581c:	e1b5      	b.n	8005b8a <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	e03c      	b.n	80058b2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b04      	cmp	r3, #4
 800583c:	d109      	bne.n	8005852 <HAL_TIM_PWM_Start_DMA+0xe2>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	bf0c      	ite	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	2300      	movne	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	e02f      	b.n	80058b2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d109      	bne.n	800586c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	bf0c      	ite	eq
 8005864:	2301      	moveq	r3, #1
 8005866:	2300      	movne	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	e022      	b.n	80058b2 <HAL_TIM_PWM_Start_DMA+0x142>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b0c      	cmp	r3, #12
 8005870:	d109      	bne.n	8005886 <HAL_TIM_PWM_Start_DMA+0x116>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b01      	cmp	r3, #1
 800587c:	bf0c      	ite	eq
 800587e:	2301      	moveq	r3, #1
 8005880:	2300      	movne	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	e015      	b.n	80058b2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b10      	cmp	r3, #16
 800588a:	d109      	bne.n	80058a0 <HAL_TIM_PWM_Start_DMA+0x130>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b01      	cmp	r3, #1
 8005896:	bf0c      	ite	eq
 8005898:	2301      	moveq	r3, #1
 800589a:	2300      	movne	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e008      	b.n	80058b2 <HAL_TIM_PWM_Start_DMA+0x142>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d034      	beq.n	8005920 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_TIM_PWM_Start_DMA+0x152>
 80058bc:	887b      	ldrh	r3, [r7, #2]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e161      	b.n	8005b8a <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_PWM_Start_DMA+0x166>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d4:	e026      	b.n	8005924 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d104      	bne.n	80058e6 <HAL_TIM_PWM_Start_DMA+0x176>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058e4:	e01e      	b.n	8005924 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d104      	bne.n	80058f6 <HAL_TIM_PWM_Start_DMA+0x186>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058f4:	e016      	b.n	8005924 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b0c      	cmp	r3, #12
 80058fa:	d104      	bne.n	8005906 <HAL_TIM_PWM_Start_DMA+0x196>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005904:	e00e      	b.n	8005924 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b10      	cmp	r3, #16
 800590a:	d104      	bne.n	8005916 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005914:	e006      	b.n	8005924 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800591e:	e001      	b.n	8005924 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e132      	b.n	8005b8a <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b0c      	cmp	r3, #12
 8005928:	f200 80ae 	bhi.w	8005a88 <HAL_TIM_PWM_Start_DMA+0x318>
 800592c:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005969 	.word	0x08005969
 8005938:	08005a89 	.word	0x08005a89
 800593c:	08005a89 	.word	0x08005a89
 8005940:	08005a89 	.word	0x08005a89
 8005944:	080059b1 	.word	0x080059b1
 8005948:	08005a89 	.word	0x08005a89
 800594c:	08005a89 	.word	0x08005a89
 8005950:	08005a89 	.word	0x08005a89
 8005954:	080059f9 	.word	0x080059f9
 8005958:	08005a89 	.word	0x08005a89
 800595c:	08005a89 	.word	0x08005a89
 8005960:	08005a89 	.word	0x08005a89
 8005964:	08005a41 	.word	0x08005a41
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	4a89      	ldr	r2, [pc, #548]	@ (8005b94 <HAL_TIM_PWM_Start_DMA+0x424>)
 800596e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	4a88      	ldr	r2, [pc, #544]	@ (8005b98 <HAL_TIM_PWM_Start_DMA+0x428>)
 8005976:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597c:	4a87      	ldr	r2, [pc, #540]	@ (8005b9c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800597e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3334      	adds	r3, #52	@ 0x34
 800598c:	461a      	mov	r2, r3
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	f7fb fd4a 	bl	8001428 <HAL_DMA_Start_IT>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e0f5      	b.n	8005b8a <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ac:	60da      	str	r2, [r3, #12]
      break;
 80059ae:	e06e      	b.n	8005a8e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	4a77      	ldr	r2, [pc, #476]	@ (8005b94 <HAL_TIM_PWM_Start_DMA+0x424>)
 80059b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	4a76      	ldr	r2, [pc, #472]	@ (8005b98 <HAL_TIM_PWM_Start_DMA+0x428>)
 80059be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c4:	4a75      	ldr	r2, [pc, #468]	@ (8005b9c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80059c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3338      	adds	r3, #56	@ 0x38
 80059d4:	461a      	mov	r2, r3
 80059d6:	887b      	ldrh	r3, [r7, #2]
 80059d8:	f7fb fd26 	bl	8001428 <HAL_DMA_Start_IT>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0d1      	b.n	8005b8a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059f4:	60da      	str	r2, [r3, #12]
      break;
 80059f6:	e04a      	b.n	8005a8e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	4a65      	ldr	r2, [pc, #404]	@ (8005b94 <HAL_TIM_PWM_Start_DMA+0x424>)
 80059fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	4a64      	ldr	r2, [pc, #400]	@ (8005b98 <HAL_TIM_PWM_Start_DMA+0x428>)
 8005a06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0c:	4a63      	ldr	r2, [pc, #396]	@ (8005b9c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8005a0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	333c      	adds	r3, #60	@ 0x3c
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	f7fb fd02 	bl	8001428 <HAL_DMA_Start_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e0ad      	b.n	8005b8a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a3c:	60da      	str	r2, [r3, #12]
      break;
 8005a3e:	e026      	b.n	8005a8e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a44:	4a53      	ldr	r2, [pc, #332]	@ (8005b94 <HAL_TIM_PWM_Start_DMA+0x424>)
 8005a46:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4c:	4a52      	ldr	r2, [pc, #328]	@ (8005b98 <HAL_TIM_PWM_Start_DMA+0x428>)
 8005a4e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a54:	4a51      	ldr	r2, [pc, #324]	@ (8005b9c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8005a56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3340      	adds	r3, #64	@ 0x40
 8005a64:	461a      	mov	r2, r3
 8005a66:	887b      	ldrh	r3, [r7, #2]
 8005a68:	f7fb fcde 	bl	8001428 <HAL_DMA_Start_IT>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e089      	b.n	8005b8a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a84:	60da      	str	r2, [r3, #12]
      break;
 8005a86:	e002      	b.n	8005a8e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d179      	bne.n	8005b88 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f99f 	bl	8006de0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8005ba0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d018      	beq.n	8005ade <HAL_TIM_PWM_Start_DMA+0x36e>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ba4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <HAL_TIM_PWM_Start_DMA+0x36e>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a3b      	ldr	r2, [pc, #236]	@ (8005ba8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00e      	beq.n	8005ade <HAL_TIM_PWM_Start_DMA+0x36e>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a39      	ldr	r2, [pc, #228]	@ (8005bac <HAL_TIM_PWM_Start_DMA+0x43c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_TIM_PWM_Start_DMA+0x36e>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a38      	ldr	r2, [pc, #224]	@ (8005bb0 <HAL_TIM_PWM_Start_DMA+0x440>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d004      	beq.n	8005ade <HAL_TIM_PWM_Start_DMA+0x36e>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a36      	ldr	r2, [pc, #216]	@ (8005bb4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_PWM_Start_DMA+0x372>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <HAL_TIM_PWM_Start_DMA+0x374>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005af6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a28      	ldr	r2, [pc, #160]	@ (8005ba0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d022      	beq.n	8005b48 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b0a:	d01d      	beq.n	8005b48 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a29      	ldr	r2, [pc, #164]	@ (8005bb8 <HAL_TIM_PWM_Start_DMA+0x448>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d018      	beq.n	8005b48 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a28      	ldr	r2, [pc, #160]	@ (8005bbc <HAL_TIM_PWM_Start_DMA+0x44c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a26      	ldr	r2, [pc, #152]	@ (8005bc0 <HAL_TIM_PWM_Start_DMA+0x450>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00e      	beq.n	8005b48 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d009      	beq.n	8005b48 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d115      	bne.n	8005b74 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc4 <HAL_TIM_PWM_Start_DMA+0x454>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b06      	cmp	r3, #6
 8005b58:	d015      	beq.n	8005b86 <HAL_TIM_PWM_Start_DMA+0x416>
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b60:	d011      	beq.n	8005b86 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0201 	orr.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b72:	e008      	b.n	8005b86 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e000      	b.n	8005b88 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b86:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	080063db 	.word	0x080063db
 8005b98:	08006483 	.word	0x08006483
 8005b9c:	08006349 	.word	0x08006349
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40013400 	.word	0x40013400
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800
 8005bb4:	40015000 	.word	0x40015000
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800
 8005bc0:	40000c00 	.word	0x40000c00
 8005bc4:	00010007 	.word	0x00010007

08005bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d020      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0202 	mvn.w	r2, #2
 8005bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fb66 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fb58 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fb69 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d020      	beq.n	8005c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01b      	beq.n	8005c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0204 	mvn.w	r2, #4
 8005c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fb40 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fb32 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fb43 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d020      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01b      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0208 	mvn.w	r2, #8
 8005c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fb1a 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fb0c 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fb1d 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d020      	beq.n	8005d10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01b      	beq.n	8005d10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0210 	mvn.w	r2, #16
 8005ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 faf4 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005cfc:	e005      	b.n	8005d0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fae6 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 faf7 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00c      	beq.n	8005d34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0201 	mvn.w	r2, #1
 8005d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fac4 	bl	80062bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00c      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 f905 	bl	8006f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00c      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 f8fd 	bl	8006f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00c      	beq.n	8005daa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fabb 	bl	8006320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00c      	beq.n	8005dce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f06f 0220 	mvn.w	r2, #32
 8005dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 f8c5 	bl	8006f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00c      	beq.n	8005df2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 f8d1 	bl	8006f94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00c      	beq.n	8005e16 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 f8c9 	bl	8006fa8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00c      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 f8c1 	bl	8006fbc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 f8b9 	bl	8006fd0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e0ff      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b14      	cmp	r3, #20
 8005e92:	f200 80f0 	bhi.w	8006076 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e96:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08006077 	.word	0x08006077
 8005ea4:	08006077 	.word	0x08006077
 8005ea8:	08006077 	.word	0x08006077
 8005eac:	08005f31 	.word	0x08005f31
 8005eb0:	08006077 	.word	0x08006077
 8005eb4:	08006077 	.word	0x08006077
 8005eb8:	08006077 	.word	0x08006077
 8005ebc:	08005f73 	.word	0x08005f73
 8005ec0:	08006077 	.word	0x08006077
 8005ec4:	08006077 	.word	0x08006077
 8005ec8:	08006077 	.word	0x08006077
 8005ecc:	08005fb3 	.word	0x08005fb3
 8005ed0:	08006077 	.word	0x08006077
 8005ed4:	08006077 	.word	0x08006077
 8005ed8:	08006077 	.word	0x08006077
 8005edc:	08005ff5 	.word	0x08005ff5
 8005ee0:	08006077 	.word	0x08006077
 8005ee4:	08006077 	.word	0x08006077
 8005ee8:	08006077 	.word	0x08006077
 8005eec:	08006035 	.word	0x08006035
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fbac 	bl	8006654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0208 	orr.w	r2, r2, #8
 8005f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0204 	bic.w	r2, r2, #4
 8005f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6999      	ldr	r1, [r3, #24]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	619a      	str	r2, [r3, #24]
      break;
 8005f2e:	e0a5      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fc26 	bl	8006788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6999      	ldr	r1, [r3, #24]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	021a      	lsls	r2, r3, #8
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	619a      	str	r2, [r3, #24]
      break;
 8005f70:	e084      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fc99 	bl	80068b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0208 	orr.w	r2, r2, #8
 8005f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0204 	bic.w	r2, r2, #4
 8005f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69d9      	ldr	r1, [r3, #28]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	61da      	str	r2, [r3, #28]
      break;
 8005fb0:	e064      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fd0b 	bl	80069d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69d9      	ldr	r1, [r3, #28]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	021a      	lsls	r2, r3, #8
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	61da      	str	r2, [r3, #28]
      break;
 8005ff2:	e043      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fd7e 	bl	8006afc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0208 	orr.w	r2, r2, #8
 800600e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0204 	bic.w	r2, r2, #4
 800601e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006032:	e023      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fdc8 	bl	8006bd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800604e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800605e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	021a      	lsls	r2, r3, #8
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006074:	e002      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
      break;
 800607a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop

08006090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIM_ConfigClockSource+0x1c>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0f6      	b.n	800629a <HAL_TIM_ConfigClockSource+0x20a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80060ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a6f      	ldr	r2, [pc, #444]	@ (80062a4 <HAL_TIM_ConfigClockSource+0x214>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	f000 80c1 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x1de>
 80060ec:	4a6d      	ldr	r2, [pc, #436]	@ (80062a4 <HAL_TIM_ConfigClockSource+0x214>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	f200 80c6 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 80060f4:	4a6c      	ldr	r2, [pc, #432]	@ (80062a8 <HAL_TIM_ConfigClockSource+0x218>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	f000 80b9 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x1de>
 80060fc:	4a6a      	ldr	r2, [pc, #424]	@ (80062a8 <HAL_TIM_ConfigClockSource+0x218>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	f200 80be 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006104:	4a69      	ldr	r2, [pc, #420]	@ (80062ac <HAL_TIM_ConfigClockSource+0x21c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	f000 80b1 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x1de>
 800610c:	4a67      	ldr	r2, [pc, #412]	@ (80062ac <HAL_TIM_ConfigClockSource+0x21c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	f200 80b6 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006114:	4a66      	ldr	r2, [pc, #408]	@ (80062b0 <HAL_TIM_ConfigClockSource+0x220>)
 8006116:	4293      	cmp	r3, r2
 8006118:	f000 80a9 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x1de>
 800611c:	4a64      	ldr	r2, [pc, #400]	@ (80062b0 <HAL_TIM_ConfigClockSource+0x220>)
 800611e:	4293      	cmp	r3, r2
 8006120:	f200 80ae 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006124:	4a63      	ldr	r2, [pc, #396]	@ (80062b4 <HAL_TIM_ConfigClockSource+0x224>)
 8006126:	4293      	cmp	r3, r2
 8006128:	f000 80a1 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x1de>
 800612c:	4a61      	ldr	r2, [pc, #388]	@ (80062b4 <HAL_TIM_ConfigClockSource+0x224>)
 800612e:	4293      	cmp	r3, r2
 8006130:	f200 80a6 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006134:	4a60      	ldr	r2, [pc, #384]	@ (80062b8 <HAL_TIM_ConfigClockSource+0x228>)
 8006136:	4293      	cmp	r3, r2
 8006138:	f000 8099 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x1de>
 800613c:	4a5e      	ldr	r2, [pc, #376]	@ (80062b8 <HAL_TIM_ConfigClockSource+0x228>)
 800613e:	4293      	cmp	r3, r2
 8006140:	f200 809e 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006144:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006148:	f000 8091 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x1de>
 800614c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006150:	f200 8096 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006154:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006158:	f000 8089 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x1de>
 800615c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006160:	f200 808e 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006168:	d03e      	beq.n	80061e8 <HAL_TIM_ConfigClockSource+0x158>
 800616a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800616e:	f200 8087 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006176:	f000 8086 	beq.w	8006286 <HAL_TIM_ConfigClockSource+0x1f6>
 800617a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800617e:	d87f      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006180:	2b70      	cmp	r3, #112	@ 0x70
 8006182:	d01a      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x12a>
 8006184:	2b70      	cmp	r3, #112	@ 0x70
 8006186:	d87b      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006188:	2b60      	cmp	r3, #96	@ 0x60
 800618a:	d050      	beq.n	800622e <HAL_TIM_ConfigClockSource+0x19e>
 800618c:	2b60      	cmp	r3, #96	@ 0x60
 800618e:	d877      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006190:	2b50      	cmp	r3, #80	@ 0x50
 8006192:	d03c      	beq.n	800620e <HAL_TIM_ConfigClockSource+0x17e>
 8006194:	2b50      	cmp	r3, #80	@ 0x50
 8006196:	d873      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 8006198:	2b40      	cmp	r3, #64	@ 0x40
 800619a:	d058      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x1be>
 800619c:	2b40      	cmp	r3, #64	@ 0x40
 800619e:	d86f      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 80061a0:	2b30      	cmp	r3, #48	@ 0x30
 80061a2:	d064      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x1de>
 80061a4:	2b30      	cmp	r3, #48	@ 0x30
 80061a6:	d86b      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d060      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x1de>
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d867      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d05c      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x1de>
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d05a      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x1de>
 80061b8:	e062      	b.n	8006280 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061ca:	f000 fde9 	bl	8006da0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	609a      	str	r2, [r3, #8]
      break;
 80061e6:	e04f      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061f8:	f000 fdd2 	bl	8006da0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800620a:	609a      	str	r2, [r3, #8]
      break;
 800620c:	e03c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800621a:	461a      	mov	r2, r3
 800621c:	f000 fd44 	bl	8006ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2150      	movs	r1, #80	@ 0x50
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fd9d 	bl	8006d66 <TIM_ITRx_SetConfig>
      break;
 800622c:	e02c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800623a:	461a      	mov	r2, r3
 800623c:	f000 fd63 	bl	8006d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2160      	movs	r1, #96	@ 0x60
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fd8d 	bl	8006d66 <TIM_ITRx_SetConfig>
      break;
 800624c:	e01c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800625a:	461a      	mov	r2, r3
 800625c:	f000 fd24 	bl	8006ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2140      	movs	r1, #64	@ 0x40
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fd7d 	bl	8006d66 <TIM_ITRx_SetConfig>
      break;
 800626c:	e00c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f000 fd74 	bl	8006d66 <TIM_ITRx_SetConfig>
      break;
 800627e:	e003      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
      break;
 8006284:	e000      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	00100070 	.word	0x00100070
 80062a8:	00100060 	.word	0x00100060
 80062ac:	00100050 	.word	0x00100050
 80062b0:	00100040 	.word	0x00100040
 80062b4:	00100030 	.word	0x00100030
 80062b8:	00100020 	.word	0x00100020

080062bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006354:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d107      	bne.n	8006370 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2201      	movs	r2, #1
 8006364:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800636e:	e02a      	b.n	80063c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	429a      	cmp	r2, r3
 8006378:	d107      	bne.n	800638a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2202      	movs	r2, #2
 800637e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006388:	e01d      	b.n	80063c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d107      	bne.n	80063a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2204      	movs	r2, #4
 8006398:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063a2:	e010      	b.n	80063c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d107      	bne.n	80063be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2208      	movs	r2, #8
 80063b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063bc:	e003      	b.n	80063c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f7ff ffb4 	bl	8006334 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	771a      	strb	r2, [r3, #28]
}
 80063d2:	bf00      	nop
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d10b      	bne.n	800640a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d136      	bne.n	800646e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006408:	e031      	b.n	800646e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d10b      	bne.n	800642c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2202      	movs	r2, #2
 8006418:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d125      	bne.n	800646e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800642a:	e020      	b.n	800646e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	429a      	cmp	r2, r3
 8006434:	d10b      	bne.n	800644e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2204      	movs	r2, #4
 800643a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d114      	bne.n	800646e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800644c:	e00f      	b.n	800646e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	429a      	cmp	r2, r3
 8006456:	d10a      	bne.n	800646e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2208      	movs	r2, #8
 800645c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d103      	bne.n	800646e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff ff42 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	771a      	strb	r2, [r3, #28]
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	d103      	bne.n	80064a2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	771a      	strb	r2, [r3, #28]
 80064a0:	e019      	b.n	80064d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d103      	bne.n	80064b4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2202      	movs	r2, #2
 80064b0:	771a      	strb	r2, [r3, #28]
 80064b2:	e010      	b.n	80064d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d103      	bne.n	80064c6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2204      	movs	r2, #4
 80064c2:	771a      	strb	r2, [r3, #28]
 80064c4:	e007      	b.n	80064d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d102      	bne.n	80064d6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2208      	movs	r2, #8
 80064d4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff ff18 	bl	800630c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	771a      	strb	r2, [r3, #28]
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a4c      	ldr	r2, [pc, #304]	@ (8006630 <TIM_Base_SetConfig+0x144>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d017      	beq.n	8006534 <TIM_Base_SetConfig+0x48>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650a:	d013      	beq.n	8006534 <TIM_Base_SetConfig+0x48>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a49      	ldr	r2, [pc, #292]	@ (8006634 <TIM_Base_SetConfig+0x148>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00f      	beq.n	8006534 <TIM_Base_SetConfig+0x48>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a48      	ldr	r2, [pc, #288]	@ (8006638 <TIM_Base_SetConfig+0x14c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00b      	beq.n	8006534 <TIM_Base_SetConfig+0x48>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a47      	ldr	r2, [pc, #284]	@ (800663c <TIM_Base_SetConfig+0x150>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d007      	beq.n	8006534 <TIM_Base_SetConfig+0x48>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a46      	ldr	r2, [pc, #280]	@ (8006640 <TIM_Base_SetConfig+0x154>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_Base_SetConfig+0x48>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a45      	ldr	r2, [pc, #276]	@ (8006644 <TIM_Base_SetConfig+0x158>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d108      	bne.n	8006546 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a39      	ldr	r2, [pc, #228]	@ (8006630 <TIM_Base_SetConfig+0x144>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d023      	beq.n	8006596 <TIM_Base_SetConfig+0xaa>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006554:	d01f      	beq.n	8006596 <TIM_Base_SetConfig+0xaa>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a36      	ldr	r2, [pc, #216]	@ (8006634 <TIM_Base_SetConfig+0x148>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d01b      	beq.n	8006596 <TIM_Base_SetConfig+0xaa>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a35      	ldr	r2, [pc, #212]	@ (8006638 <TIM_Base_SetConfig+0x14c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d017      	beq.n	8006596 <TIM_Base_SetConfig+0xaa>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a34      	ldr	r2, [pc, #208]	@ (800663c <TIM_Base_SetConfig+0x150>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <TIM_Base_SetConfig+0xaa>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a33      	ldr	r2, [pc, #204]	@ (8006640 <TIM_Base_SetConfig+0x154>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00f      	beq.n	8006596 <TIM_Base_SetConfig+0xaa>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a33      	ldr	r2, [pc, #204]	@ (8006648 <TIM_Base_SetConfig+0x15c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00b      	beq.n	8006596 <TIM_Base_SetConfig+0xaa>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a32      	ldr	r2, [pc, #200]	@ (800664c <TIM_Base_SetConfig+0x160>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d007      	beq.n	8006596 <TIM_Base_SetConfig+0xaa>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a31      	ldr	r2, [pc, #196]	@ (8006650 <TIM_Base_SetConfig+0x164>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d003      	beq.n	8006596 <TIM_Base_SetConfig+0xaa>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2c      	ldr	r2, [pc, #176]	@ (8006644 <TIM_Base_SetConfig+0x158>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d108      	bne.n	80065a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800659c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a18      	ldr	r2, [pc, #96]	@ (8006630 <TIM_Base_SetConfig+0x144>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d013      	beq.n	80065fc <TIM_Base_SetConfig+0x110>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006640 <TIM_Base_SetConfig+0x154>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00f      	beq.n	80065fc <TIM_Base_SetConfig+0x110>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a1a      	ldr	r2, [pc, #104]	@ (8006648 <TIM_Base_SetConfig+0x15c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00b      	beq.n	80065fc <TIM_Base_SetConfig+0x110>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a19      	ldr	r2, [pc, #100]	@ (800664c <TIM_Base_SetConfig+0x160>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d007      	beq.n	80065fc <TIM_Base_SetConfig+0x110>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a18      	ldr	r2, [pc, #96]	@ (8006650 <TIM_Base_SetConfig+0x164>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_Base_SetConfig+0x110>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a13      	ldr	r2, [pc, #76]	@ (8006644 <TIM_Base_SetConfig+0x158>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d103      	bne.n	8006604 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b01      	cmp	r3, #1
 8006614:	d105      	bne.n	8006622 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f023 0201 	bic.w	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	611a      	str	r2, [r3, #16]
  }
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40013400 	.word	0x40013400
 8006644:	40015000 	.word	0x40015000
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400
 8006650:	40014800 	.word	0x40014800

08006654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f023 0201 	bic.w	r2, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f023 0302 	bic.w	r3, r3, #2
 80066a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a30      	ldr	r2, [pc, #192]	@ (8006770 <TIM_OC1_SetConfig+0x11c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d013      	beq.n	80066dc <TIM_OC1_SetConfig+0x88>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006774 <TIM_OC1_SetConfig+0x120>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00f      	beq.n	80066dc <TIM_OC1_SetConfig+0x88>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a2e      	ldr	r2, [pc, #184]	@ (8006778 <TIM_OC1_SetConfig+0x124>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00b      	beq.n	80066dc <TIM_OC1_SetConfig+0x88>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a2d      	ldr	r2, [pc, #180]	@ (800677c <TIM_OC1_SetConfig+0x128>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d007      	beq.n	80066dc <TIM_OC1_SetConfig+0x88>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006780 <TIM_OC1_SetConfig+0x12c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d003      	beq.n	80066dc <TIM_OC1_SetConfig+0x88>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006784 <TIM_OC1_SetConfig+0x130>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d10c      	bne.n	80066f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f023 0308 	bic.w	r3, r3, #8
 80066e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 0304 	bic.w	r3, r3, #4
 80066f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006770 <TIM_OC1_SetConfig+0x11c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d013      	beq.n	8006726 <TIM_OC1_SetConfig+0xd2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a1c      	ldr	r2, [pc, #112]	@ (8006774 <TIM_OC1_SetConfig+0x120>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00f      	beq.n	8006726 <TIM_OC1_SetConfig+0xd2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a1b      	ldr	r2, [pc, #108]	@ (8006778 <TIM_OC1_SetConfig+0x124>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00b      	beq.n	8006726 <TIM_OC1_SetConfig+0xd2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a1a      	ldr	r2, [pc, #104]	@ (800677c <TIM_OC1_SetConfig+0x128>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d007      	beq.n	8006726 <TIM_OC1_SetConfig+0xd2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a19      	ldr	r2, [pc, #100]	@ (8006780 <TIM_OC1_SetConfig+0x12c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d003      	beq.n	8006726 <TIM_OC1_SetConfig+0xd2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a18      	ldr	r2, [pc, #96]	@ (8006784 <TIM_OC1_SetConfig+0x130>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d111      	bne.n	800674a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800672c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	40012c00 	.word	0x40012c00
 8006774:	40013400 	.word	0x40013400
 8006778:	40014000 	.word	0x40014000
 800677c:	40014400 	.word	0x40014400
 8006780:	40014800 	.word	0x40014800
 8006784:	40015000 	.word	0x40015000

08006788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	f023 0210 	bic.w	r2, r3, #16
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f023 0320 	bic.w	r3, r3, #32
 80067d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006898 <TIM_OC2_SetConfig+0x110>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_OC2_SetConfig+0x74>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a2b      	ldr	r2, [pc, #172]	@ (800689c <TIM_OC2_SetConfig+0x114>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_OC2_SetConfig+0x74>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a2a      	ldr	r2, [pc, #168]	@ (80068a0 <TIM_OC2_SetConfig+0x118>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d10d      	bne.n	8006818 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006816:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a1f      	ldr	r2, [pc, #124]	@ (8006898 <TIM_OC2_SetConfig+0x110>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d013      	beq.n	8006848 <TIM_OC2_SetConfig+0xc0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a1e      	ldr	r2, [pc, #120]	@ (800689c <TIM_OC2_SetConfig+0x114>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00f      	beq.n	8006848 <TIM_OC2_SetConfig+0xc0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a1e      	ldr	r2, [pc, #120]	@ (80068a4 <TIM_OC2_SetConfig+0x11c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00b      	beq.n	8006848 <TIM_OC2_SetConfig+0xc0>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a1d      	ldr	r2, [pc, #116]	@ (80068a8 <TIM_OC2_SetConfig+0x120>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d007      	beq.n	8006848 <TIM_OC2_SetConfig+0xc0>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a1c      	ldr	r2, [pc, #112]	@ (80068ac <TIM_OC2_SetConfig+0x124>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_OC2_SetConfig+0xc0>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a17      	ldr	r2, [pc, #92]	@ (80068a0 <TIM_OC2_SetConfig+0x118>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d113      	bne.n	8006870 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800684e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40012c00 	.word	0x40012c00
 800689c:	40013400 	.word	0x40013400
 80068a0:	40015000 	.word	0x40015000
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400
 80068ac:	40014800 	.word	0x40014800

080068b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0303 	bic.w	r3, r3, #3
 80068ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	021b      	lsls	r3, r3, #8
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2b      	ldr	r2, [pc, #172]	@ (80069bc <TIM_OC3_SetConfig+0x10c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d007      	beq.n	8006922 <TIM_OC3_SetConfig+0x72>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2a      	ldr	r2, [pc, #168]	@ (80069c0 <TIM_OC3_SetConfig+0x110>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <TIM_OC3_SetConfig+0x72>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a29      	ldr	r2, [pc, #164]	@ (80069c4 <TIM_OC3_SetConfig+0x114>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d10d      	bne.n	800693e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800693c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1e      	ldr	r2, [pc, #120]	@ (80069bc <TIM_OC3_SetConfig+0x10c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <TIM_OC3_SetConfig+0xbe>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1d      	ldr	r2, [pc, #116]	@ (80069c0 <TIM_OC3_SetConfig+0x110>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00f      	beq.n	800696e <TIM_OC3_SetConfig+0xbe>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1d      	ldr	r2, [pc, #116]	@ (80069c8 <TIM_OC3_SetConfig+0x118>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00b      	beq.n	800696e <TIM_OC3_SetConfig+0xbe>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1c      	ldr	r2, [pc, #112]	@ (80069cc <TIM_OC3_SetConfig+0x11c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d007      	beq.n	800696e <TIM_OC3_SetConfig+0xbe>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a1b      	ldr	r2, [pc, #108]	@ (80069d0 <TIM_OC3_SetConfig+0x120>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_OC3_SetConfig+0xbe>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a16      	ldr	r2, [pc, #88]	@ (80069c4 <TIM_OC3_SetConfig+0x114>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d113      	bne.n	8006996 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800697c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	621a      	str	r2, [r3, #32]
}
 80069b0:	bf00      	nop
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	40013400 	.word	0x40013400
 80069c4:	40015000 	.word	0x40015000
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40014400 	.word	0x40014400
 80069d0:	40014800 	.word	0x40014800

080069d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	021b      	lsls	r3, r3, #8
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	031b      	lsls	r3, r3, #12
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a2c      	ldr	r2, [pc, #176]	@ (8006ae4 <TIM_OC4_SetConfig+0x110>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d007      	beq.n	8006a48 <TIM_OC4_SetConfig+0x74>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8006ae8 <TIM_OC4_SetConfig+0x114>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d003      	beq.n	8006a48 <TIM_OC4_SetConfig+0x74>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a2a      	ldr	r2, [pc, #168]	@ (8006aec <TIM_OC4_SetConfig+0x118>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d10d      	bne.n	8006a64 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	031b      	lsls	r3, r3, #12
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae4 <TIM_OC4_SetConfig+0x110>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d013      	beq.n	8006a94 <TIM_OC4_SetConfig+0xc0>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae8 <TIM_OC4_SetConfig+0x114>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00f      	beq.n	8006a94 <TIM_OC4_SetConfig+0xc0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a1e      	ldr	r2, [pc, #120]	@ (8006af0 <TIM_OC4_SetConfig+0x11c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00b      	beq.n	8006a94 <TIM_OC4_SetConfig+0xc0>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8006af4 <TIM_OC4_SetConfig+0x120>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d007      	beq.n	8006a94 <TIM_OC4_SetConfig+0xc0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1c      	ldr	r2, [pc, #112]	@ (8006af8 <TIM_OC4_SetConfig+0x124>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_OC4_SetConfig+0xc0>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a17      	ldr	r2, [pc, #92]	@ (8006aec <TIM_OC4_SetConfig+0x118>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d113      	bne.n	8006abc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006aa2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	019b      	lsls	r3, r3, #6
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	019b      	lsls	r3, r3, #6
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40012c00 	.word	0x40012c00
 8006ae8:	40013400 	.word	0x40013400
 8006aec:	40015000 	.word	0x40015000
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40014400 	.word	0x40014400
 8006af8:	40014800 	.word	0x40014800

08006afc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a19      	ldr	r2, [pc, #100]	@ (8006bb8 <TIM_OC5_SetConfig+0xbc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <TIM_OC5_SetConfig+0x82>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a18      	ldr	r2, [pc, #96]	@ (8006bbc <TIM_OC5_SetConfig+0xc0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00f      	beq.n	8006b7e <TIM_OC5_SetConfig+0x82>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a17      	ldr	r2, [pc, #92]	@ (8006bc0 <TIM_OC5_SetConfig+0xc4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00b      	beq.n	8006b7e <TIM_OC5_SetConfig+0x82>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a16      	ldr	r2, [pc, #88]	@ (8006bc4 <TIM_OC5_SetConfig+0xc8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d007      	beq.n	8006b7e <TIM_OC5_SetConfig+0x82>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a15      	ldr	r2, [pc, #84]	@ (8006bc8 <TIM_OC5_SetConfig+0xcc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d003      	beq.n	8006b7e <TIM_OC5_SetConfig+0x82>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a14      	ldr	r2, [pc, #80]	@ (8006bcc <TIM_OC5_SetConfig+0xd0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d109      	bne.n	8006b92 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	621a      	str	r2, [r3, #32]
}
 8006bac:	bf00      	nop
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	40012c00 	.word	0x40012c00
 8006bbc:	40013400 	.word	0x40013400
 8006bc0:	40014000 	.word	0x40014000
 8006bc4:	40014400 	.word	0x40014400
 8006bc8:	40014800 	.word	0x40014800
 8006bcc:	40015000 	.word	0x40015000

08006bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	051b      	lsls	r3, r3, #20
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a1a      	ldr	r2, [pc, #104]	@ (8006c90 <TIM_OC6_SetConfig+0xc0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d013      	beq.n	8006c54 <TIM_OC6_SetConfig+0x84>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a19      	ldr	r2, [pc, #100]	@ (8006c94 <TIM_OC6_SetConfig+0xc4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00f      	beq.n	8006c54 <TIM_OC6_SetConfig+0x84>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a18      	ldr	r2, [pc, #96]	@ (8006c98 <TIM_OC6_SetConfig+0xc8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00b      	beq.n	8006c54 <TIM_OC6_SetConfig+0x84>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a17      	ldr	r2, [pc, #92]	@ (8006c9c <TIM_OC6_SetConfig+0xcc>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d007      	beq.n	8006c54 <TIM_OC6_SetConfig+0x84>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a16      	ldr	r2, [pc, #88]	@ (8006ca0 <TIM_OC6_SetConfig+0xd0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_OC6_SetConfig+0x84>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a15      	ldr	r2, [pc, #84]	@ (8006ca4 <TIM_OC6_SetConfig+0xd4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d109      	bne.n	8006c68 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	029b      	lsls	r3, r3, #10
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	621a      	str	r2, [r3, #32]
}
 8006c82:	bf00      	nop
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40012c00 	.word	0x40012c00
 8006c94:	40013400 	.word	0x40013400
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40014400 	.word	0x40014400
 8006ca0:	40014800 	.word	0x40014800
 8006ca4:	40015000 	.word	0x40015000

08006ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	f023 0201 	bic.w	r2, r3, #1
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f023 030a 	bic.w	r3, r3, #10
 8006ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b087      	sub	sp, #28
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	f023 0210 	bic.w	r2, r3, #16
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	031b      	lsls	r3, r3, #12
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f043 0307 	orr.w	r3, r3, #7
 8006d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	609a      	str	r2, [r3, #8]
}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	021a      	lsls	r2, r3, #8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	609a      	str	r2, [r3, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2201      	movs	r2, #1
 8006df4:	fa02 f303 	lsl.w	r3, r2, r3
 8006df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1a      	ldr	r2, [r3, #32]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	43db      	mvns	r3, r3
 8006e02:	401a      	ands	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1a      	ldr	r2, [r3, #32]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	fa01 f303 	lsl.w	r3, r1, r3
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
	...

08006e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e074      	b.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a34      	ldr	r2, [pc, #208]	@ (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a33      	ldr	r2, [pc, #204]	@ (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a31      	ldr	r2, [pc, #196]	@ (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d108      	bne.n	8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a21      	ldr	r2, [pc, #132]	@ (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d022      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec4:	d01d      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a1f      	ldr	r2, [pc, #124]	@ (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d018      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d013      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1c      	ldr	r2, [pc, #112]	@ (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d00e      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a15      	ldr	r2, [pc, #84]	@ (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d009      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a18      	ldr	r2, [pc, #96]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d004      	beq.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a11      	ldr	r2, [pc, #68]	@ (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d10c      	bne.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40013400 	.word	0x40013400
 8006f44:	40015000 	.word	0x40015000
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40000c00 	.word	0x40000c00
 8006f54:	40014000 	.word	0x40014000

08006f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ff4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006ff8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800701a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800701e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	b29b      	uxth	r3, r3
 800702c:	43db      	mvns	r3, r3
 800702e:	b29b      	uxth	r3, r3
 8007030:	4013      	ands	r3, r2
 8007032:	b29a      	uxth	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	1d3b      	adds	r3, r7, #4
 8007052:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2201      	movs	r2, #1
 800705a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007084:	b480      	push	{r7}
 8007086:	b09d      	sub	sp, #116	@ 0x74
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80070a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	78db      	ldrb	r3, [r3, #3]
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d81f      	bhi.n	80070f6 <USB_ActivateEndpoint+0x72>
 80070b6:	a201      	add	r2, pc, #4	@ (adr r2, 80070bc <USB_ActivateEndpoint+0x38>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080070cd 	.word	0x080070cd
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070ff 	.word	0x080070ff
 80070c8:	080070db 	.word	0x080070db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80070cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80070d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80070d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80070d8:	e012      	b.n	8007100 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80070da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80070de:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80070e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80070e6:	e00b      	b.n	8007100 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80070e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80070ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80070f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80070f4:	e004      	b.n	8007100 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80070fc:	e000      	b.n	8007100 <USB_ActivateEndpoint+0x7c>
      break;
 80070fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	441a      	add	r2, r3
 800710a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800710e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800711a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800711e:	b29b      	uxth	r3, r3
 8007120:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	b21b      	sxth	r3, r3
 8007132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713a:	b21a      	sxth	r2, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	b21b      	sxth	r3, r3
 8007142:	4313      	orrs	r3, r2
 8007144:	b21b      	sxth	r3, r3
 8007146:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	441a      	add	r2, r3
 8007154:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800715c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007168:	b29b      	uxth	r3, r3
 800716a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	7b1b      	ldrb	r3, [r3, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f040 8178 	bne.w	8007466 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 8084 	beq.w	8007288 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800718a:	b29b      	uxth	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	4413      	add	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	00da      	lsls	r2, r3, #3
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	88db      	ldrh	r3, [r3, #6]
 80071a8:	085b      	lsrs	r3, r3, #1
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	827b      	strh	r3, [r7, #18]
 80071c2:	8a7b      	ldrh	r3, [r7, #18]
 80071c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01b      	beq.n	8007204 <USB_ActivateEndpoint+0x180>
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e2:	823b      	strh	r3, [r7, #16]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	441a      	add	r2, r3
 80071ee:	8a3b      	ldrh	r3, [r7, #16]
 80071f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007200:	b29b      	uxth	r3, r3
 8007202:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	78db      	ldrb	r3, [r3, #3]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d020      	beq.n	800724e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800721e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007222:	81bb      	strh	r3, [r7, #12]
 8007224:	89bb      	ldrh	r3, [r7, #12]
 8007226:	f083 0320 	eor.w	r3, r3, #32
 800722a:	81bb      	strh	r3, [r7, #12]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	441a      	add	r2, r3
 8007236:	89bb      	ldrh	r3, [r7, #12]
 8007238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800723c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007248:	b29b      	uxth	r3, r3
 800724a:	8013      	strh	r3, [r2, #0]
 800724c:	e2d5      	b.n	80077fa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007264:	81fb      	strh	r3, [r7, #14]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	441a      	add	r2, r3
 8007270:	89fb      	ldrh	r3, [r7, #14]
 8007272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800727a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800727e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007282:	b29b      	uxth	r3, r3
 8007284:	8013      	strh	r3, [r2, #0]
 8007286:	e2b8      	b.n	80077fa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	633b      	str	r3, [r7, #48]	@ 0x30
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007292:	b29b      	uxth	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	4413      	add	r3, r2
 800729a:	633b      	str	r3, [r7, #48]	@ 0x30
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	00da      	lsls	r2, r3, #3
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	4413      	add	r3, r2
 80072a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	88db      	ldrh	r3, [r3, #6]
 80072b0:	085b      	lsrs	r3, r3, #1
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	4413      	add	r3, r2
 80072ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	00da      	lsls	r2, r3, #3
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	4413      	add	r3, r2
 80072da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072de:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80072f6:	d91d      	bls.n	8007334 <USB_ActivateEndpoint+0x2b0>
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	095b      	lsrs	r3, r3, #5
 80072fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	f003 031f 	and.w	r3, r3, #31
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <USB_ActivateEndpoint+0x28e>
 800730c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800730e:	3b01      	subs	r3, #1
 8007310:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29a      	uxth	r2, r3
 8007318:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800731a:	b29b      	uxth	r3, r3
 800731c:	029b      	lsls	r3, r3, #10
 800731e:	b29b      	uxth	r3, r3
 8007320:	4313      	orrs	r3, r2
 8007322:	b29b      	uxth	r3, r3
 8007324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800732c:	b29a      	uxth	r2, r3
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	801a      	strh	r2, [r3, #0]
 8007332:	e026      	b.n	8007382 <USB_ActivateEndpoint+0x2fe>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <USB_ActivateEndpoint+0x2ce>
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29b      	uxth	r3, r3
 8007342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734a:	b29a      	uxth	r2, r3
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e017      	b.n	8007382 <USB_ActivateEndpoint+0x2fe>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <USB_ActivateEndpoint+0x2e8>
 8007366:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007368:	3301      	adds	r3, #1
 800736a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	b29a      	uxth	r2, r3
 8007372:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007374:	b29b      	uxth	r3, r3
 8007376:	029b      	lsls	r3, r3, #10
 8007378:	b29b      	uxth	r3, r3
 800737a:	4313      	orrs	r3, r2
 800737c:	b29a      	uxth	r2, r3
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007390:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d01b      	beq.n	80073d2 <USB_ActivateEndpoint+0x34e>
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073b0:	843b      	strh	r3, [r7, #32]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	441a      	add	r2, r3
 80073bc:	8c3b      	ldrh	r3, [r7, #32]
 80073be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d124      	bne.n	8007424 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073f0:	83bb      	strh	r3, [r7, #28]
 80073f2:	8bbb      	ldrh	r3, [r7, #28]
 80073f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80073f8:	83bb      	strh	r3, [r7, #28]
 80073fa:	8bbb      	ldrh	r3, [r7, #28]
 80073fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007400:	83bb      	strh	r3, [r7, #28]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	441a      	add	r2, r3
 800740c:	8bbb      	ldrh	r3, [r7, #28]
 800740e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800741a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800741e:	b29b      	uxth	r3, r3
 8007420:	8013      	strh	r3, [r2, #0]
 8007422:	e1ea      	b.n	80077fa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800743a:	83fb      	strh	r3, [r7, #30]
 800743c:	8bfb      	ldrh	r3, [r7, #30]
 800743e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007442:	83fb      	strh	r3, [r7, #30]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	441a      	add	r2, r3
 800744e:	8bfb      	ldrh	r3, [r7, #30]
 8007450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800745c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007460:	b29b      	uxth	r3, r3
 8007462:	8013      	strh	r3, [r2, #0]
 8007464:	e1c9      	b.n	80077fa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	78db      	ldrb	r3, [r3, #3]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d11e      	bne.n	80074ac <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007484:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	441a      	add	r2, r3
 8007492:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800749a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800749e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80074a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	8013      	strh	r3, [r2, #0]
 80074aa:	e01d      	b.n	80074e8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80074be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	441a      	add	r2, r3
 80074d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80074d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	461a      	mov	r2, r3
 80074f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074f8:	4413      	add	r3, r2
 80074fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	00da      	lsls	r2, r3, #3
 8007502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007504:	4413      	add	r3, r2
 8007506:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800750a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	891b      	ldrh	r3, [r3, #8]
 8007510:	085b      	lsrs	r3, r3, #1
 8007512:	b29b      	uxth	r3, r3
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	b29a      	uxth	r2, r3
 8007518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007526:	b29b      	uxth	r3, r3
 8007528:	461a      	mov	r2, r3
 800752a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800752c:	4413      	add	r3, r2
 800752e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	00da      	lsls	r2, r3, #3
 8007536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007538:	4413      	add	r3, r2
 800753a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800753e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	895b      	ldrh	r3, [r3, #10]
 8007544:	085b      	lsrs	r3, r3, #1
 8007546:	b29b      	uxth	r3, r3
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800754e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f040 8093 	bne.w	8007680 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800756a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800756e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01b      	beq.n	80075ae <USB_ActivateEndpoint+0x52a>
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	441a      	add	r2, r3
 8007598:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800759a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800759e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80075bc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80075be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01b      	beq.n	80075fe <USB_ActivateEndpoint+0x57a>
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	441a      	add	r2, r3
 80075e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80075ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007614:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007616:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007618:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800761c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800761e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007620:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007624:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800763a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800763e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007642:	b29b      	uxth	r3, r3
 8007644:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b29b      	uxth	r3, r3
 8007654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800765c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	441a      	add	r2, r3
 8007668:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800766a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]
 800767e:	e0bc      	b.n	80077fa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007690:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01d      	beq.n	80076d8 <USB_ActivateEndpoint+0x654>
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	441a      	add	r2, r3
 80076c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80076c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80076e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80076ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01d      	beq.n	8007730 <USB_ActivateEndpoint+0x6ac>
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800770a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	441a      	add	r2, r3
 8007718:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800771c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007728:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800772c:	b29b      	uxth	r3, r3
 800772e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	78db      	ldrb	r3, [r3, #3]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d024      	beq.n	8007782 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800774a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800774e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007752:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007756:	f083 0320 	eor.w	r3, r3, #32
 800775a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	441a      	add	r2, r3
 8007768:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800776c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800777c:	b29b      	uxth	r3, r3
 800777e:	8013      	strh	r3, [r2, #0]
 8007780:	e01d      	b.n	80077be <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007798:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	441a      	add	r2, r3
 80077a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80077aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	441a      	add	r2, r3
 80077e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80077e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80077fa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3774      	adds	r7, #116	@ 0x74
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop

0800780c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800780c:	b480      	push	{r7}
 800780e:	b08d      	sub	sp, #52	@ 0x34
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	7b1b      	ldrb	r3, [r3, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	f040 808e 	bne.w	800793c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d044      	beq.n	80078b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	81bb      	strh	r3, [r7, #12]
 8007836:	89bb      	ldrh	r3, [r7, #12]
 8007838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01b      	beq.n	8007878 <USB_DeactivateEndpoint+0x6c>
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29b      	uxth	r3, r3
 800784e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007856:	817b      	strh	r3, [r7, #10]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	441a      	add	r2, r3
 8007862:	897b      	ldrh	r3, [r7, #10]
 8007864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800786c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007870:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007874:	b29b      	uxth	r3, r3
 8007876:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800788a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800788e:	813b      	strh	r3, [r7, #8]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	441a      	add	r2, r3
 800789a:	893b      	ldrh	r3, [r7, #8]
 800789c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	8013      	strh	r3, [r2, #0]
 80078b0:	e192      	b.n	8007bd8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	827b      	strh	r3, [r7, #18]
 80078c0:	8a7b      	ldrh	r3, [r7, #18]
 80078c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01b      	beq.n	8007902 <USB_DeactivateEndpoint+0xf6>
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078e0:	823b      	strh	r3, [r7, #16]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	441a      	add	r2, r3
 80078ec:	8a3b      	ldrh	r3, [r7, #16]
 80078ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078fe:	b29b      	uxth	r3, r3
 8007900:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007918:	81fb      	strh	r3, [r7, #14]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	441a      	add	r2, r3
 8007924:	89fb      	ldrh	r3, [r7, #14]
 8007926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800792a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800792e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007936:	b29b      	uxth	r3, r3
 8007938:	8013      	strh	r3, [r2, #0]
 800793a:	e14d      	b.n	8007bd8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	2b00      	cmp	r3, #0
 8007942:	f040 80a5 	bne.w	8007a90 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	843b      	strh	r3, [r7, #32]
 8007954:	8c3b      	ldrh	r3, [r7, #32]
 8007956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d01b      	beq.n	8007996 <USB_DeactivateEndpoint+0x18a>
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29b      	uxth	r3, r3
 800796c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007974:	83fb      	strh	r3, [r7, #30]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	441a      	add	r2, r3
 8007980:	8bfb      	ldrh	r3, [r7, #30]
 8007982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800798a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800798e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007992:	b29b      	uxth	r3, r3
 8007994:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	83bb      	strh	r3, [r7, #28]
 80079a4:	8bbb      	ldrh	r3, [r7, #28]
 80079a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d01b      	beq.n	80079e6 <USB_DeactivateEndpoint+0x1da>
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c4:	837b      	strh	r3, [r7, #26]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	441a      	add	r2, r3
 80079d0:	8b7b      	ldrh	r3, [r7, #26]
 80079d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079fc:	833b      	strh	r3, [r7, #24]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	441a      	add	r2, r3
 8007a08:	8b3b      	ldrh	r3, [r7, #24]
 8007a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a34:	82fb      	strh	r3, [r7, #22]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	441a      	add	r2, r3
 8007a40:	8afb      	ldrh	r3, [r7, #22]
 8007a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a6c:	82bb      	strh	r3, [r7, #20]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	441a      	add	r2, r3
 8007a78:	8abb      	ldrh	r3, [r7, #20]
 8007a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	8013      	strh	r3, [r2, #0]
 8007a8e:	e0a3      	b.n	8007bd8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007a9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01b      	beq.n	8007ae0 <USB_DeactivateEndpoint+0x2d4>
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007abe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	441a      	add	r2, r3
 8007aca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007acc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ad4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007aee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01b      	beq.n	8007b30 <USB_DeactivateEndpoint+0x324>
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	441a      	add	r2, r3
 8007b1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	441a      	add	r2, r3
 8007b52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	441a      	add	r2, r3
 8007bc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3734      	adds	r7, #52	@ 0x34
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b0c2      	sub	sp, #264	@ 0x108
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bf4:	6018      	str	r0, [r3, #0]
 8007bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bfe:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	785b      	ldrb	r3, [r3, #1]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	f040 86b7 	bne.w	8008980 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699a      	ldr	r2, [r3, #24]
 8007c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d908      	bls.n	8007c40 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007c3e:	e007      	b.n	8007c50 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	7b1b      	ldrb	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d13a      	bne.n	8007cd6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6959      	ldr	r1, [r3, #20]
 8007c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	88da      	ldrh	r2, [r3, #6]
 8007c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c82:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c86:	6800      	ldr	r0, [r0, #0]
 8007c88:	f001 fc98 	bl	80095bc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	613b      	str	r3, [r7, #16]
 8007c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	461a      	mov	r2, r3
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	4413      	add	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	00da      	lsls	r2, r3, #3
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	f000 be1f 	b.w	8008914 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	78db      	ldrb	r3, [r3, #3]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	f040 8462 	bne.w	80085ac <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6a1a      	ldr	r2, [r3, #32]
 8007cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	f240 83df 	bls.w	80084c4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d2c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007d4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d56:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6a1a      	ldr	r2, [r3, #32]
 8007d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d72:	1ad2      	subs	r2, r2, r3
 8007d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 81c7 	beq.w	8008136 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d177      	bne.n	8007eb4 <USB_EPStartXfer+0x2ce>
 8007dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de4:	4413      	add	r3, r2
 8007de6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	00da      	lsls	r2, r3, #3
 8007df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df8:	4413      	add	r3, r2
 8007dfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0e:	801a      	strh	r2, [r3, #0]
 8007e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e14:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e16:	d921      	bls.n	8007e5c <USB_EPStartXfer+0x276>
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e26:	f003 031f 	and.w	r3, r3, #31
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <USB_EPStartXfer+0x252>
 8007e2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007e32:	3b01      	subs	r3, #1
 8007e34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	029b      	lsls	r3, r3, #10
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	e050      	b.n	8007efe <USB_EPStartXfer+0x318>
 8007e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <USB_EPStartXfer+0x294>
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	801a      	strh	r2, [r3, #0]
 8007e78:	e041      	b.n	8007efe <USB_EPStartXfer+0x318>
 8007e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7e:	085b      	lsrs	r3, r3, #1
 8007e80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <USB_EPStartXfer+0x2b4>
 8007e90:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007e94:	3301      	adds	r3, #1
 8007e96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	029b      	lsls	r3, r3, #10
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	801a      	strh	r2, [r3, #0]
 8007eb2:	e024      	b.n	8007efe <USB_EPStartXfer+0x318>
 8007eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	785b      	ldrb	r3, [r3, #1]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d11c      	bne.n	8007efe <USB_EPStartXfer+0x318>
 8007ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	4413      	add	r3, r2
 8007eda:	633b      	str	r3, [r7, #48]	@ 0x30
 8007edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	00da      	lsls	r2, r3, #3
 8007eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eec:	4413      	add	r3, r2
 8007eee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	895b      	ldrh	r3, [r3, #10]
 8007f0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6959      	ldr	r1, [r3, #20]
 8007f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f28:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	f001 fb45 	bl	80095bc <USB_WritePMA>
            ep->xfer_buff += len;
 8007f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695a      	ldr	r2, [r3, #20]
 8007f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f42:	441a      	add	r2, r3
 8007f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6a1a      	ldr	r2, [r3, #32]
 8007f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d90f      	bls.n	8007f8c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6a1a      	ldr	r2, [r3, #32]
 8007f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7c:	1ad2      	subs	r2, r2, r3
 8007f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	621a      	str	r2, [r3, #32]
 8007f8a:	e00e      	b.n	8007faa <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	785b      	ldrb	r3, [r3, #1]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d177      	bne.n	80080aa <USB_EPStartXfer+0x4c4>
 8007fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	4413      	add	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
 8007fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	00da      	lsls	r2, r3, #3
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ff4:	617b      	str	r3, [r7, #20]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008000:	b29a      	uxth	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800a:	2b3e      	cmp	r3, #62	@ 0x3e
 800800c:	d921      	bls.n	8008052 <USB_EPStartXfer+0x46c>
 800800e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008012:	095b      	lsrs	r3, r3, #5
 8008014:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801c:	f003 031f 	and.w	r3, r3, #31
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <USB_EPStartXfer+0x448>
 8008024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008028:	3b01      	subs	r3, #1
 800802a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29a      	uxth	r2, r3
 8008034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008038:	b29b      	uxth	r3, r3
 800803a:	029b      	lsls	r3, r3, #10
 800803c:	b29b      	uxth	r3, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	b29b      	uxth	r3, r3
 8008042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804a:	b29a      	uxth	r2, r3
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	e056      	b.n	8008100 <USB_EPStartXfer+0x51a>
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <USB_EPStartXfer+0x48a>
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008068:	b29a      	uxth	r2, r3
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	801a      	strh	r2, [r3, #0]
 800806e:	e047      	b.n	8008100 <USB_EPStartXfer+0x51a>
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008074:	085b      	lsrs	r3, r3, #1
 8008076:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800807a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <USB_EPStartXfer+0x4aa>
 8008086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800808a:	3301      	adds	r3, #1
 800808c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800809a:	b29b      	uxth	r3, r3
 800809c:	029b      	lsls	r3, r3, #10
 800809e:	b29b      	uxth	r3, r3
 80080a0:	4313      	orrs	r3, r2
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	801a      	strh	r2, [r3, #0]
 80080a8:	e02a      	b.n	8008100 <USB_EPStartXfer+0x51a>
 80080aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d122      	bne.n	8008100 <USB_EPStartXfer+0x51a>
 80080ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	623b      	str	r3, [r7, #32]
 80080c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	4413      	add	r3, r2
 80080dc:	623b      	str	r3, [r7, #32]
 80080de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	00da      	lsls	r2, r3, #3
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	4413      	add	r3, r2
 80080f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080f4:	61fb      	str	r3, [r7, #28]
 80080f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	891b      	ldrh	r3, [r3, #8]
 800810c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6959      	ldr	r1, [r3, #20]
 800811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008120:	b29b      	uxth	r3, r3
 8008122:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008126:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800812a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800812e:	6800      	ldr	r0, [r0, #0]
 8008130:	f001 fa44 	bl	80095bc <USB_WritePMA>
 8008134:	e3ee      	b.n	8008914 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	785b      	ldrb	r3, [r3, #1]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d177      	bne.n	8008236 <USB_EPStartXfer+0x650>
 8008146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008156:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008160:	b29b      	uxth	r3, r3
 8008162:	461a      	mov	r2, r3
 8008164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008166:	4413      	add	r3, r2
 8008168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800816a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	00da      	lsls	r2, r3, #3
 8008178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800817a:	4413      	add	r3, r2
 800817c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008180:	647b      	str	r3, [r7, #68]	@ 0x44
 8008182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800818c:	b29a      	uxth	r2, r3
 800818e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008190:	801a      	strh	r2, [r3, #0]
 8008192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008196:	2b3e      	cmp	r3, #62	@ 0x3e
 8008198:	d921      	bls.n	80081de <USB_EPStartXfer+0x5f8>
 800819a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a8:	f003 031f 	and.w	r3, r3, #31
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d104      	bne.n	80081ba <USB_EPStartXfer+0x5d4>
 80081b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80081b4:	3b01      	subs	r3, #1
 80081b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80081ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29a      	uxth	r2, r3
 80081c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	029b      	lsls	r3, r3, #10
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4313      	orrs	r3, r2
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081da:	801a      	strh	r2, [r3, #0]
 80081dc:	e056      	b.n	800828c <USB_EPStartXfer+0x6a6>
 80081de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <USB_EPStartXfer+0x616>
 80081e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	e047      	b.n	800828c <USB_EPStartXfer+0x6a6>
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <USB_EPStartXfer+0x636>
 8008212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008216:	3301      	adds	r3, #1
 8008218:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800821c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	b29a      	uxth	r2, r3
 8008222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008226:	b29b      	uxth	r3, r3
 8008228:	029b      	lsls	r3, r3, #10
 800822a:	b29b      	uxth	r3, r3
 800822c:	4313      	orrs	r3, r2
 800822e:	b29a      	uxth	r2, r3
 8008230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008232:	801a      	strh	r2, [r3, #0]
 8008234:	e02a      	b.n	800828c <USB_EPStartXfer+0x6a6>
 8008236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d122      	bne.n	800828c <USB_EPStartXfer+0x6a6>
 8008246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	653b      	str	r3, [r7, #80]	@ 0x50
 8008252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008260:	b29b      	uxth	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008266:	4413      	add	r3, r2
 8008268:	653b      	str	r3, [r7, #80]	@ 0x50
 800826a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800826e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	00da      	lsls	r2, r3, #3
 8008278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800827a:	4413      	add	r3, r2
 800827c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008286:	b29a      	uxth	r2, r3
 8008288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800828a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800828c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	891b      	ldrh	r3, [r3, #8]
 8008298:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800829c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6959      	ldr	r1, [r3, #20]
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80082b2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80082b6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80082ba:	6800      	ldr	r0, [r0, #0]
 80082bc:	f001 f97e 	bl	80095bc <USB_WritePMA>
            ep->xfer_buff += len;
 80082c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695a      	ldr	r2, [r3, #20]
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d0:	441a      	add	r2, r3
 80082d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80082de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6a1a      	ldr	r2, [r3, #32]
 80082ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d90f      	bls.n	800831a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80082fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6a1a      	ldr	r2, [r3, #32]
 8008306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830a:	1ad2      	subs	r2, r2, r3
 800830c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	621a      	str	r2, [r3, #32]
 8008318:	e00e      	b.n	8008338 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800831a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800832a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2200      	movs	r2, #0
 8008336:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	643b      	str	r3, [r7, #64]	@ 0x40
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	785b      	ldrb	r3, [r3, #1]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d177      	bne.n	8008444 <USB_EPStartXfer+0x85e>
 8008354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008364:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800836e:	b29b      	uxth	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008374:	4413      	add	r3, r2
 8008376:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	00da      	lsls	r2, r3, #3
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	4413      	add	r3, r2
 800838a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800838e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	b29b      	uxth	r3, r3
 8008396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800839a:	b29a      	uxth	r2, r3
 800839c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800839e:	801a      	strh	r2, [r3, #0]
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80083a6:	d921      	bls.n	80083ec <USB_EPStartXfer+0x806>
 80083a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ac:	095b      	lsrs	r3, r3, #5
 80083ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80083b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d104      	bne.n	80083c8 <USB_EPStartXfer+0x7e2>
 80083be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c2:	3b01      	subs	r3, #1
 80083c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80083c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	029b      	lsls	r3, r3, #10
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	4313      	orrs	r3, r2
 80083da:	b29b      	uxth	r3, r3
 80083dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e8:	801a      	strh	r2, [r3, #0]
 80083ea:	e050      	b.n	800848e <USB_EPStartXfer+0x8a8>
 80083ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10a      	bne.n	800840a <USB_EPStartXfer+0x824>
 80083f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008402:	b29a      	uxth	r2, r3
 8008404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	e041      	b.n	800848e <USB_EPStartXfer+0x8a8>
 800840a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840e:	085b      	lsrs	r3, r3, #1
 8008410:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <USB_EPStartXfer+0x844>
 8008420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008424:	3301      	adds	r3, #1
 8008426:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800842a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29a      	uxth	r2, r3
 8008430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008434:	b29b      	uxth	r3, r3
 8008436:	029b      	lsls	r3, r3, #10
 8008438:	b29b      	uxth	r3, r3
 800843a:	4313      	orrs	r3, r2
 800843c:	b29a      	uxth	r2, r3
 800843e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008440:	801a      	strh	r2, [r3, #0]
 8008442:	e024      	b.n	800848e <USB_EPStartXfer+0x8a8>
 8008444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	785b      	ldrb	r3, [r3, #1]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d11c      	bne.n	800848e <USB_EPStartXfer+0x8a8>
 8008454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008458:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008462:	b29b      	uxth	r3, r3
 8008464:	461a      	mov	r2, r3
 8008466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008468:	4413      	add	r3, r2
 800846a:	643b      	str	r3, [r7, #64]	@ 0x40
 800846c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	00da      	lsls	r2, r3, #3
 800847a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800847c:	4413      	add	r3, r2
 800847e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008488:	b29a      	uxth	r2, r3
 800848a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800848c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800848e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	895b      	ldrh	r3, [r3, #10]
 800849a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800849e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6959      	ldr	r1, [r3, #20]
 80084aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80084b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80084b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80084bc:	6800      	ldr	r0, [r0, #0]
 80084be:	f001 f87d 	bl	80095bc <USB_WritePMA>
 80084c2:	e227      	b.n	8008914 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80084c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80084d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80084f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084fa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80084fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008502:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	441a      	add	r2, r3
 8008518:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800851c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800852c:	b29b      	uxth	r3, r3
 800852e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800853c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800854a:	b29b      	uxth	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008550:	4413      	add	r3, r2
 8008552:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	00da      	lsls	r2, r3, #3
 8008562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008564:	4413      	add	r3, r2
 8008566:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800856a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800856c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008570:	b29a      	uxth	r2, r3
 8008572:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008574:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	891b      	ldrh	r3, [r3, #8]
 8008582:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6959      	ldr	r1, [r3, #20]
 8008592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008596:	b29b      	uxth	r3, r3
 8008598:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800859c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80085a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80085a4:	6800      	ldr	r0, [r0, #0]
 80085a6:	f001 f809 	bl	80095bc <USB_WritePMA>
 80085aa:	e1b3      	b.n	8008914 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80085ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6a1a      	ldr	r2, [r3, #32]
 80085b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085bc:	1ad2      	subs	r2, r2, r3
 80085be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80085ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 80c6 	beq.w	800877e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80085fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	785b      	ldrb	r3, [r3, #1]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d177      	bne.n	80086fe <USB_EPStartXfer+0xb18>
 800860e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800861a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008628:	b29b      	uxth	r3, r3
 800862a:	461a      	mov	r2, r3
 800862c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800862e:	4413      	add	r3, r2
 8008630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	00da      	lsls	r2, r3, #3
 8008640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008642:	4413      	add	r3, r2
 8008644:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008648:	667b      	str	r3, [r7, #100]	@ 0x64
 800864a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008654:	b29a      	uxth	r2, r3
 8008656:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008658:	801a      	strh	r2, [r3, #0]
 800865a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008660:	d921      	bls.n	80086a6 <USB_EPStartXfer+0xac0>
 8008662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008666:	095b      	lsrs	r3, r3, #5
 8008668:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800866c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008670:	f003 031f 	and.w	r3, r3, #31
 8008674:	2b00      	cmp	r3, #0
 8008676:	d104      	bne.n	8008682 <USB_EPStartXfer+0xa9c>
 8008678:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800867c:	3b01      	subs	r3, #1
 800867e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29a      	uxth	r2, r3
 8008688:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800868c:	b29b      	uxth	r3, r3
 800868e:	029b      	lsls	r3, r3, #10
 8008690:	b29b      	uxth	r3, r3
 8008692:	4313      	orrs	r3, r2
 8008694:	b29b      	uxth	r3, r3
 8008696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800869a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800869e:	b29a      	uxth	r2, r3
 80086a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086a2:	801a      	strh	r2, [r3, #0]
 80086a4:	e050      	b.n	8008748 <USB_EPStartXfer+0xb62>
 80086a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <USB_EPStartXfer+0xade>
 80086ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086bc:	b29a      	uxth	r2, r3
 80086be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086c0:	801a      	strh	r2, [r3, #0]
 80086c2:	e041      	b.n	8008748 <USB_EPStartXfer+0xb62>
 80086c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c8:	085b      	lsrs	r3, r3, #1
 80086ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80086ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d004      	beq.n	80086e4 <USB_EPStartXfer+0xafe>
 80086da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80086de:	3301      	adds	r3, #1
 80086e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80086e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	029b      	lsls	r3, r3, #10
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	4313      	orrs	r3, r2
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086fa:	801a      	strh	r2, [r3, #0]
 80086fc:	e024      	b.n	8008748 <USB_EPStartXfer+0xb62>
 80086fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	785b      	ldrb	r3, [r3, #1]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d11c      	bne.n	8008748 <USB_EPStartXfer+0xb62>
 800870e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800871c:	b29b      	uxth	r3, r3
 800871e:	461a      	mov	r2, r3
 8008720:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008722:	4413      	add	r3, r2
 8008724:	673b      	str	r3, [r7, #112]	@ 0x70
 8008726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	00da      	lsls	r2, r3, #3
 8008734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008736:	4413      	add	r3, r2
 8008738:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800873c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800873e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008742:	b29a      	uxth	r2, r3
 8008744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008746:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	895b      	ldrh	r3, [r3, #10]
 8008754:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6959      	ldr	r1, [r3, #20]
 8008764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008768:	b29b      	uxth	r3, r3
 800876a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800876e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008772:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008776:	6800      	ldr	r0, [r0, #0]
 8008778:	f000 ff20 	bl	80095bc <USB_WritePMA>
 800877c:	e0ca      	b.n	8008914 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800877e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	785b      	ldrb	r3, [r3, #1]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d177      	bne.n	800887e <USB_EPStartXfer+0xc98>
 800878e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800879a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	461a      	mov	r2, r3
 80087ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087ae:	4413      	add	r3, r2
 80087b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80087b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	00da      	lsls	r2, r3, #3
 80087c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087c2:	4413      	add	r3, r2
 80087c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087d8:	801a      	strh	r2, [r3, #0]
 80087da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087de:	2b3e      	cmp	r3, #62	@ 0x3e
 80087e0:	d921      	bls.n	8008826 <USB_EPStartXfer+0xc40>
 80087e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80087ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f0:	f003 031f 	and.w	r3, r3, #31
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d104      	bne.n	8008802 <USB_EPStartXfer+0xc1c>
 80087f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80087fc:	3b01      	subs	r3, #1
 80087fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	b29a      	uxth	r2, r3
 8008808:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800880c:	b29b      	uxth	r3, r3
 800880e:	029b      	lsls	r3, r3, #10
 8008810:	b29b      	uxth	r3, r3
 8008812:	4313      	orrs	r3, r2
 8008814:	b29b      	uxth	r3, r3
 8008816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800881a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800881e:	b29a      	uxth	r2, r3
 8008820:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008822:	801a      	strh	r2, [r3, #0]
 8008824:	e05c      	b.n	80088e0 <USB_EPStartXfer+0xcfa>
 8008826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <USB_EPStartXfer+0xc5e>
 800882e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	b29b      	uxth	r3, r3
 8008834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800883c:	b29a      	uxth	r2, r3
 800883e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	e04d      	b.n	80088e0 <USB_EPStartXfer+0xcfa>
 8008844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008848:	085b      	lsrs	r3, r3, #1
 800884a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800884e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d004      	beq.n	8008864 <USB_EPStartXfer+0xc7e>
 800885a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800885e:	3301      	adds	r3, #1
 8008860:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29a      	uxth	r2, r3
 800886a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800886e:	b29b      	uxth	r3, r3
 8008870:	029b      	lsls	r3, r3, #10
 8008872:	b29b      	uxth	r3, r3
 8008874:	4313      	orrs	r3, r2
 8008876:	b29a      	uxth	r2, r3
 8008878:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800887a:	801a      	strh	r2, [r3, #0]
 800887c:	e030      	b.n	80088e0 <USB_EPStartXfer+0xcfa>
 800887e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	785b      	ldrb	r3, [r3, #1]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d128      	bne.n	80088e0 <USB_EPStartXfer+0xcfa>
 800888e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800889c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	461a      	mov	r2, r3
 80088ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088b2:	4413      	add	r3, r2
 80088b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	00da      	lsls	r2, r3, #3
 80088c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088ca:	4413      	add	r3, r2
 80088cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d8:	b29a      	uxth	r2, r3
 80088da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80088de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80088e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	891b      	ldrh	r3, [r3, #8]
 80088ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6959      	ldr	r1, [r3, #20]
 80088fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008900:	b29b      	uxth	r3, r3
 8008902:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008906:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800890a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800890e:	6800      	ldr	r0, [r0, #0]
 8008910:	f000 fe54 	bl	80095bc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	b29b      	uxth	r3, r3
 8008932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800893a:	817b      	strh	r3, [r7, #10]
 800893c:	897b      	ldrh	r3, [r7, #10]
 800893e:	f083 0310 	eor.w	r3, r3, #16
 8008942:	817b      	strh	r3, [r7, #10]
 8008944:	897b      	ldrh	r3, [r7, #10]
 8008946:	f083 0320 	eor.w	r3, r3, #32
 800894a:	817b      	strh	r3, [r7, #10]
 800894c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	441a      	add	r2, r3
 8008966:	897b      	ldrh	r3, [r7, #10]
 8008968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800896c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008978:	b29b      	uxth	r3, r3
 800897a:	8013      	strh	r3, [r2, #0]
 800897c:	f000 bcde 	b.w	800933c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	7b1b      	ldrb	r3, [r3, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f040 80bb 	bne.w	8008b08 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d917      	bls.n	80089de <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80089ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80089be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	699a      	ldr	r2, [r3, #24]
 80089ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	619a      	str	r2, [r3, #24]
 80089dc:	e00e      	b.n	80089fc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80089de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80089ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2200      	movs	r2, #0
 80089fa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80089fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a20:	4413      	add	r3, r2
 8008a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	00da      	lsls	r2, r3, #3
 8008a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a38:	4413      	add	r3, r2
 8008a3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a54:	801a      	strh	r2, [r3, #0]
 8008a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a5c:	d924      	bls.n	8008aa8 <USB_EPStartXfer+0xec2>
 8008a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a62:	095b      	lsrs	r3, r3, #5
 8008a64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <USB_EPStartXfer+0xe98>
 8008a74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	029b      	lsls	r3, r3, #10
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	4313      	orrs	r3, r2
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aa2:	801a      	strh	r2, [r3, #0]
 8008aa4:	f000 bc10 	b.w	80092c8 <USB_EPStartXfer+0x16e2>
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10c      	bne.n	8008aca <USB_EPStartXfer+0xee4>
 8008ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	e3fe      	b.n	80092c8 <USB_EPStartXfer+0x16e2>
 8008aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ace:	085b      	lsrs	r3, r3, #1
 8008ad0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d004      	beq.n	8008aea <USB_EPStartXfer+0xf04>
 8008ae0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	029b      	lsls	r3, r3, #10
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	4313      	orrs	r3, r2
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b04:	801a      	strh	r2, [r3, #0]
 8008b06:	e3df      	b.n	80092c8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	78db      	ldrb	r3, [r3, #3]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	f040 8218 	bne.w	8008f4a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	785b      	ldrb	r3, [r3, #1]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f040 809d 	bne.w	8008c66 <USB_EPStartXfer+0x1080>
 8008b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b50:	4413      	add	r3, r2
 8008b52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	00da      	lsls	r2, r3, #3
 8008b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b68:	4413      	add	r3, r2
 8008b6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b84:	801a      	strh	r2, [r3, #0]
 8008b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b94:	d92b      	bls.n	8008bee <USB_EPStartXfer+0x1008>
 8008b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	095b      	lsrs	r3, r3, #5
 8008ba4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	f003 031f 	and.w	r3, r3, #31
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d104      	bne.n	8008bc6 <USB_EPStartXfer+0xfe0>
 8008bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	029b      	lsls	r3, r3, #10
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008bea:	801a      	strh	r2, [r3, #0]
 8008bec:	e070      	b.n	8008cd0 <USB_EPStartXfer+0x10ea>
 8008bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10c      	bne.n	8008c18 <USB_EPStartXfer+0x1032>
 8008bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c14:	801a      	strh	r2, [r3, #0]
 8008c16:	e05b      	b.n	8008cd0 <USB_EPStartXfer+0x10ea>
 8008c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	085b      	lsrs	r3, r3, #1
 8008c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d004      	beq.n	8008c48 <USB_EPStartXfer+0x1062>
 8008c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c42:	3301      	adds	r3, #1
 8008c44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	029b      	lsls	r3, r3, #10
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c62:	801a      	strh	r2, [r3, #0]
 8008c64:	e034      	b.n	8008cd0 <USB_EPStartXfer+0x10ea>
 8008c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	785b      	ldrb	r3, [r3, #1]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d12c      	bne.n	8008cd0 <USB_EPStartXfer+0x10ea>
 8008c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	461a      	mov	r2, r3
 8008c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	00da      	lsls	r2, r3, #3
 8008cae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008cce:	801a      	strh	r2, [r3, #0]
 8008cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	785b      	ldrb	r3, [r3, #1]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f040 809d 	bne.w	8008e2a <USB_EPStartXfer+0x1244>
 8008cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d14:	4413      	add	r3, r2
 8008d16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	00da      	lsls	r2, r3, #3
 8008d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d48:	801a      	strh	r2, [r3, #0]
 8008d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d58:	d92b      	bls.n	8008db2 <USB_EPStartXfer+0x11cc>
 8008d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	095b      	lsrs	r3, r3, #5
 8008d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f003 031f 	and.w	r3, r3, #31
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d104      	bne.n	8008d8a <USB_EPStartXfer+0x11a4>
 8008d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d84:	3b01      	subs	r3, #1
 8008d86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	029b      	lsls	r3, r3, #10
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008dae:	801a      	strh	r2, [r3, #0]
 8008db0:	e069      	b.n	8008e86 <USB_EPStartXfer+0x12a0>
 8008db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10c      	bne.n	8008ddc <USB_EPStartXfer+0x11f6>
 8008dc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008dd8:	801a      	strh	r2, [r3, #0]
 8008dda:	e054      	b.n	8008e86 <USB_EPStartXfer+0x12a0>
 8008ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	085b      	lsrs	r3, r3, #1
 8008dea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d004      	beq.n	8008e0c <USB_EPStartXfer+0x1226>
 8008e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e06:	3301      	adds	r3, #1
 8008e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	029b      	lsls	r3, r3, #10
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e02d      	b.n	8008e86 <USB_EPStartXfer+0x12a0>
 8008e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	785b      	ldrb	r3, [r3, #1]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d125      	bne.n	8008e86 <USB_EPStartXfer+0x12a0>
 8008e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e50:	4413      	add	r3, r2
 8008e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	00da      	lsls	r2, r3, #3
 8008e64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e68:	4413      	add	r3, r2
 8008e6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e84:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 8218 	beq.w	80092c8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008eb8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d005      	beq.n	8008ed0 <USB_EPStartXfer+0x12ea>
 8008ec4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10d      	bne.n	8008eec <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ed0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f040 81f5 	bne.w	80092c8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ede:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f040 81ee 	bne.w	80092c8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f12:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	441a      	add	r2, r3
 8008f30:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008f34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f40:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	8013      	strh	r3, [r2, #0]
 8008f48:	e1be      	b.n	80092c8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	78db      	ldrb	r3, [r3, #3]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	f040 81b4 	bne.w	80092c4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	699a      	ldr	r2, [r3, #24]
 8008f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d917      	bls.n	8008fa8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699a      	ldr	r2, [r3, #24]
 8008f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f98:	1ad2      	subs	r2, r2, r3
 8008f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	619a      	str	r2, [r3, #24]
 8008fa6:	e00e      	b.n	8008fc6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	785b      	ldrb	r3, [r3, #1]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f040 8085 	bne.w	80090e2 <USB_EPStartXfer+0x14fc>
 8008fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	00da      	lsls	r2, r3, #3
 8009010:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009014:	4413      	add	r3, r2
 8009016:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800901a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800901e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	b29b      	uxth	r3, r3
 8009026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800902a:	b29a      	uxth	r2, r3
 800902c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009030:	801a      	strh	r2, [r3, #0]
 8009032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009036:	2b3e      	cmp	r3, #62	@ 0x3e
 8009038:	d923      	bls.n	8009082 <USB_EPStartXfer+0x149c>
 800903a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800903e:	095b      	lsrs	r3, r3, #5
 8009040:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009048:	f003 031f 	and.w	r3, r3, #31
 800904c:	2b00      	cmp	r3, #0
 800904e:	d104      	bne.n	800905a <USB_EPStartXfer+0x1474>
 8009050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009054:	3b01      	subs	r3, #1
 8009056:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800905a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	b29a      	uxth	r2, r3
 8009062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009066:	b29b      	uxth	r3, r3
 8009068:	029b      	lsls	r3, r3, #10
 800906a:	b29b      	uxth	r3, r3
 800906c:	4313      	orrs	r3, r2
 800906e:	b29b      	uxth	r3, r3
 8009070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009078:	b29a      	uxth	r2, r3
 800907a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800907e:	801a      	strh	r2, [r3, #0]
 8009080:	e060      	b.n	8009144 <USB_EPStartXfer+0x155e>
 8009082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10c      	bne.n	80090a4 <USB_EPStartXfer+0x14be>
 800908a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	b29b      	uxth	r3, r3
 8009092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909a:	b29a      	uxth	r2, r3
 800909c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	e04f      	b.n	8009144 <USB_EPStartXfer+0x155e>
 80090a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a8:	085b      	lsrs	r3, r3, #1
 80090aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80090ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <USB_EPStartXfer+0x14de>
 80090ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090be:	3301      	adds	r3, #1
 80090c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80090c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	029b      	lsls	r3, r3, #10
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	4313      	orrs	r3, r2
 80090d8:	b29a      	uxth	r2, r3
 80090da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80090de:	801a      	strh	r2, [r3, #0]
 80090e0:	e030      	b.n	8009144 <USB_EPStartXfer+0x155e>
 80090e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d128      	bne.n	8009144 <USB_EPStartXfer+0x155e>
 80090f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800910e:	b29b      	uxth	r3, r3
 8009110:	461a      	mov	r2, r3
 8009112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009116:	4413      	add	r3, r2
 8009118:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800911c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	00da      	lsls	r2, r3, #3
 800912a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800912e:	4413      	add	r3, r2
 8009130:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913c:	b29a      	uxth	r2, r3
 800913e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009148:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	785b      	ldrb	r3, [r3, #1]
 800915e:	2b00      	cmp	r3, #0
 8009160:	f040 8085 	bne.w	800926e <USB_EPStartXfer+0x1688>
 8009164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009168:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009180:	b29b      	uxth	r3, r3
 8009182:	461a      	mov	r2, r3
 8009184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009188:	4413      	add	r3, r2
 800918a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800918e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	00da      	lsls	r2, r3, #3
 800919c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80091a0:	4413      	add	r3, r2
 80091a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80091a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80091bc:	801a      	strh	r2, [r3, #0]
 80091be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80091c4:	d923      	bls.n	800920e <USB_EPStartXfer+0x1628>
 80091c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <USB_EPStartXfer+0x1600>
 80091dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091e0:	3b01      	subs	r3, #1
 80091e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	029b      	lsls	r3, r3, #10
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4313      	orrs	r3, r2
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009204:	b29a      	uxth	r2, r3
 8009206:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800920a:	801a      	strh	r2, [r3, #0]
 800920c:	e05c      	b.n	80092c8 <USB_EPStartXfer+0x16e2>
 800920e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10c      	bne.n	8009230 <USB_EPStartXfer+0x164a>
 8009216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009226:	b29a      	uxth	r2, r3
 8009228:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800922c:	801a      	strh	r2, [r3, #0]
 800922e:	e04b      	b.n	80092c8 <USB_EPStartXfer+0x16e2>
 8009230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009234:	085b      	lsrs	r3, r3, #1
 8009236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800923a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d004      	beq.n	8009250 <USB_EPStartXfer+0x166a>
 8009246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800924a:	3301      	adds	r3, #1
 800924c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	b29a      	uxth	r2, r3
 8009258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800925c:	b29b      	uxth	r3, r3
 800925e:	029b      	lsls	r3, r3, #10
 8009260:	b29b      	uxth	r3, r3
 8009262:	4313      	orrs	r3, r2
 8009264:	b29a      	uxth	r2, r3
 8009266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800926a:	801a      	strh	r2, [r3, #0]
 800926c:	e02c      	b.n	80092c8 <USB_EPStartXfer+0x16e2>
 800926e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	785b      	ldrb	r3, [r3, #1]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d124      	bne.n	80092c8 <USB_EPStartXfer+0x16e2>
 800927e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800928c:	b29b      	uxth	r3, r3
 800928e:	461a      	mov	r2, r3
 8009290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009294:	4413      	add	r3, r2
 8009296:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800929a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800929e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	00da      	lsls	r2, r3, #3
 80092a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80092ac:	4413      	add	r3, r2
 80092ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80092b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092c0:	801a      	strh	r2, [r3, #0]
 80092c2:	e001      	b.n	80092c8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e03a      	b.n	800933e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	881b      	ldrh	r3, [r3, #0]
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80092f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80092f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80092fa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80092fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009302:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009306:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800930a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800930e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	441a      	add	r2, r3
 8009324:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800932c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009338:	b29b      	uxth	r3, r3
 800933a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	785b      	ldrb	r3, [r3, #1]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d020      	beq.n	800939c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800936c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009370:	81bb      	strh	r3, [r7, #12]
 8009372:	89bb      	ldrh	r3, [r7, #12]
 8009374:	f083 0310 	eor.w	r3, r3, #16
 8009378:	81bb      	strh	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	441a      	add	r2, r3
 8009384:	89bb      	ldrh	r3, [r7, #12]
 8009386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800938a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800938e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009396:	b29b      	uxth	r3, r3
 8009398:	8013      	strh	r3, [r2, #0]
 800939a:	e01f      	b.n	80093dc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093b2:	81fb      	strh	r3, [r7, #14]
 80093b4:	89fb      	ldrh	r3, [r7, #14]
 80093b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80093ba:	81fb      	strh	r3, [r7, #14]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	441a      	add	r2, r3
 80093c6:	89fb      	ldrh	r3, [r7, #14]
 80093c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d8:	b29b      	uxth	r3, r3
 80093da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b087      	sub	sp, #28
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	7b1b      	ldrb	r3, [r3, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f040 809d 	bne.w	8009538 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	785b      	ldrb	r3, [r3, #1]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d04c      	beq.n	80094a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	823b      	strh	r3, [r7, #16]
 8009414:	8a3b      	ldrh	r3, [r7, #16]
 8009416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800941a:	2b00      	cmp	r3, #0
 800941c:	d01b      	beq.n	8009456 <USB_EPClearStall+0x6c>
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29b      	uxth	r3, r3
 800942c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009434:	81fb      	strh	r3, [r7, #14]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	441a      	add	r2, r3
 8009440:	89fb      	ldrh	r3, [r7, #14]
 8009442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800944a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800944e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009452:	b29b      	uxth	r3, r3
 8009454:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	78db      	ldrb	r3, [r3, #3]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d06c      	beq.n	8009538 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	b29b      	uxth	r3, r3
 800946c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009474:	81bb      	strh	r3, [r7, #12]
 8009476:	89bb      	ldrh	r3, [r7, #12]
 8009478:	f083 0320 	eor.w	r3, r3, #32
 800947c:	81bb      	strh	r3, [r7, #12]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	441a      	add	r2, r3
 8009488:	89bb      	ldrh	r3, [r7, #12]
 800948a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800948e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800949a:	b29b      	uxth	r3, r3
 800949c:	8013      	strh	r3, [r2, #0]
 800949e:	e04b      	b.n	8009538 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	82fb      	strh	r3, [r7, #22]
 80094ae:	8afb      	ldrh	r3, [r7, #22]
 80094b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d01b      	beq.n	80094f0 <USB_EPClearStall+0x106>
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ce:	82bb      	strh	r3, [r7, #20]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	441a      	add	r2, r3
 80094da:	8abb      	ldrh	r3, [r7, #20]
 80094dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009506:	827b      	strh	r3, [r7, #18]
 8009508:	8a7b      	ldrh	r3, [r7, #18]
 800950a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800950e:	827b      	strh	r3, [r7, #18]
 8009510:	8a7b      	ldrh	r3, [r7, #18]
 8009512:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009516:	827b      	strh	r3, [r7, #18]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	441a      	add	r2, r3
 8009522:	8a7b      	ldrh	r3, [r7, #18]
 8009524:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009528:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800952c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009534:	b29b      	uxth	r3, r3
 8009536:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d103      	bne.n	8009560 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2280      	movs	r2, #128	@ 0x80
 800955c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800957c:	b29b      	uxth	r3, r3
 800957e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009586:	b29a      	uxth	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80095ae:	68fb      	ldr	r3, [r7, #12]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80095bc:	b480      	push	{r7}
 80095be:	b08b      	sub	sp, #44	@ 0x2c
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	4611      	mov	r1, r2
 80095c8:	461a      	mov	r2, r3
 80095ca:	460b      	mov	r3, r1
 80095cc:	80fb      	strh	r3, [r7, #6]
 80095ce:	4613      	mov	r3, r2
 80095d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80095d2:	88bb      	ldrh	r3, [r7, #4]
 80095d4:	3301      	adds	r3, #1
 80095d6:	085b      	lsrs	r3, r3, #1
 80095d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80095e2:	88fa      	ldrh	r2, [r7, #6]
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80095f2:	e01b      	b.n	800962c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	3301      	adds	r3, #1
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	021b      	lsls	r3, r3, #8
 8009602:	b21a      	sxth	r2, r3
 8009604:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009608:	4313      	orrs	r3, r2
 800960a:	b21b      	sxth	r3, r3
 800960c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	8a7a      	ldrh	r2, [r7, #18]
 8009612:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	3302      	adds	r3, #2
 8009618:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	3301      	adds	r3, #1
 800961e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	3301      	adds	r3, #1
 8009624:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	3b01      	subs	r3, #1
 800962a:	627b      	str	r3, [r7, #36]	@ 0x24
 800962c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e0      	bne.n	80095f4 <USB_WritePMA+0x38>
  }
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	372c      	adds	r7, #44	@ 0x2c
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009640:	b480      	push	{r7}
 8009642:	b08b      	sub	sp, #44	@ 0x2c
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	4611      	mov	r1, r2
 800964c:	461a      	mov	r2, r3
 800964e:	460b      	mov	r3, r1
 8009650:	80fb      	strh	r3, [r7, #6]
 8009652:	4613      	mov	r3, r2
 8009654:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009656:	88bb      	ldrh	r3, [r7, #4]
 8009658:	085b      	lsrs	r3, r3, #1
 800965a:	b29b      	uxth	r3, r3
 800965c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009666:	88fa      	ldrh	r2, [r7, #6]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009670:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	627b      	str	r3, [r7, #36]	@ 0x24
 8009676:	e018      	b.n	80096aa <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	b29b      	uxth	r3, r3
 800967e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	3302      	adds	r3, #2
 8009684:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	b2da      	uxtb	r2, r3
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	3301      	adds	r3, #1
 8009692:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	0a1b      	lsrs	r3, r3, #8
 8009698:	b2da      	uxtb	r2, r3
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	3301      	adds	r3, #1
 80096a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80096a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a6:	3b01      	subs	r3, #1
 80096a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80096aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e3      	bne.n	8009678 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80096b0:	88bb      	ldrh	r3, [r7, #4]
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d007      	beq.n	80096cc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	701a      	strb	r2, [r3, #0]
  }
}
 80096cc:	bf00      	nop
 80096ce:	372c      	adds	r7, #44	@ 0x2c
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80096e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80096e8:	f002 f8a4 	bl	800b834 <USBD_static_malloc>
 80096ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d105      	bne.n	8009700 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80096fc:	2302      	movs	r3, #2
 80096fe:	e066      	b.n	80097ce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	7c1b      	ldrb	r3, [r3, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d119      	bne.n	8009744 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009714:	2202      	movs	r2, #2
 8009716:	2181      	movs	r1, #129	@ 0x81
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 ff32 	bl	800b582 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009724:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009728:	2202      	movs	r2, #2
 800972a:	2101      	movs	r1, #1
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f001 ff28 	bl	800b582 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2210      	movs	r2, #16
 800973e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009742:	e016      	b.n	8009772 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009744:	2340      	movs	r3, #64	@ 0x40
 8009746:	2202      	movs	r2, #2
 8009748:	2181      	movs	r1, #129	@ 0x81
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 ff19 	bl	800b582 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009756:	2340      	movs	r3, #64	@ 0x40
 8009758:	2202      	movs	r2, #2
 800975a:	2101      	movs	r1, #1
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f001 ff10 	bl	800b582 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2210      	movs	r2, #16
 800976e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009772:	2308      	movs	r3, #8
 8009774:	2203      	movs	r2, #3
 8009776:	2182      	movs	r1, #130	@ 0x82
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 ff02 	bl	800b582 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	7c1b      	ldrb	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d109      	bne.n	80097bc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097b2:	2101      	movs	r1, #1
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 ffd3 	bl	800b760 <USBD_LL_PrepareReceive>
 80097ba:	e007      	b.n	80097cc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097c2:	2340      	movs	r3, #64	@ 0x40
 80097c4:	2101      	movs	r1, #1
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f001 ffca 	bl	800b760 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	460b      	mov	r3, r1
 80097e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80097e2:	2181      	movs	r1, #129	@ 0x81
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 fef2 	bl	800b5ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80097f0:	2101      	movs	r1, #1
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 feeb 	bl	800b5ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009800:	2182      	movs	r1, #130	@ 0x82
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 fee3 	bl	800b5ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00e      	beq.n	8009840 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009832:	4618      	mov	r0, r3
 8009834:	f002 f80c 	bl	800b850 <USBD_static_free>
    pdev->pClassData = NULL;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800985c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009870:	2303      	movs	r3, #3
 8009872:	e0af      	b.n	80099d4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800987c:	2b00      	cmp	r3, #0
 800987e:	d03f      	beq.n	8009900 <USBD_CDC_Setup+0xb4>
 8009880:	2b20      	cmp	r3, #32
 8009882:	f040 809f 	bne.w	80099c4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	88db      	ldrh	r3, [r3, #6]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d02e      	beq.n	80098ec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	b25b      	sxtb	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	da16      	bge.n	80098c6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80098a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	88d2      	ldrh	r2, [r2, #6]
 80098aa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	88db      	ldrh	r3, [r3, #6]
 80098b0:	2b07      	cmp	r3, #7
 80098b2:	bf28      	it	cs
 80098b4:	2307      	movcs	r3, #7
 80098b6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	89fa      	ldrh	r2, [r7, #14]
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 fa9d 	bl	800adfe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80098c4:	e085      	b.n	80099d2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	785a      	ldrb	r2, [r3, #1]
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	88db      	ldrh	r3, [r3, #6]
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80098dc:	6939      	ldr	r1, [r7, #16]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	88db      	ldrh	r3, [r3, #6]
 80098e2:	461a      	mov	r2, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f001 fab6 	bl	800ae56 <USBD_CtlPrepareRx>
      break;
 80098ea:	e072      	b.n	80099d2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	7850      	ldrb	r0, [r2, #1]
 80098f8:	2200      	movs	r2, #0
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	4798      	blx	r3
      break;
 80098fe:	e068      	b.n	80099d2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	785b      	ldrb	r3, [r3, #1]
 8009904:	2b0b      	cmp	r3, #11
 8009906:	d852      	bhi.n	80099ae <USBD_CDC_Setup+0x162>
 8009908:	a201      	add	r2, pc, #4	@ (adr r2, 8009910 <USBD_CDC_Setup+0xc4>)
 800990a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990e:	bf00      	nop
 8009910:	08009941 	.word	0x08009941
 8009914:	080099bd 	.word	0x080099bd
 8009918:	080099af 	.word	0x080099af
 800991c:	080099af 	.word	0x080099af
 8009920:	080099af 	.word	0x080099af
 8009924:	080099af 	.word	0x080099af
 8009928:	080099af 	.word	0x080099af
 800992c:	080099af 	.word	0x080099af
 8009930:	080099af 	.word	0x080099af
 8009934:	080099af 	.word	0x080099af
 8009938:	0800996b 	.word	0x0800996b
 800993c:	08009995 	.word	0x08009995
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b03      	cmp	r3, #3
 800994a:	d107      	bne.n	800995c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800994c:	f107 030a 	add.w	r3, r7, #10
 8009950:	2202      	movs	r2, #2
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 fa52 	bl	800adfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800995a:	e032      	b.n	80099c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 f9dc 	bl	800ad1c <USBD_CtlError>
            ret = USBD_FAIL;
 8009964:	2303      	movs	r3, #3
 8009966:	75fb      	strb	r3, [r7, #23]
          break;
 8009968:	e02b      	b.n	80099c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b03      	cmp	r3, #3
 8009974:	d107      	bne.n	8009986 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009976:	f107 030d 	add.w	r3, r7, #13
 800997a:	2201      	movs	r2, #1
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f001 fa3d 	bl	800adfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009984:	e01d      	b.n	80099c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 f9c7 	bl	800ad1c <USBD_CtlError>
            ret = USBD_FAIL;
 800998e:	2303      	movs	r3, #3
 8009990:	75fb      	strb	r3, [r7, #23]
          break;
 8009992:	e016      	b.n	80099c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b03      	cmp	r3, #3
 800999e:	d00f      	beq.n	80099c0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 f9ba 	bl	800ad1c <USBD_CtlError>
            ret = USBD_FAIL;
 80099a8:	2303      	movs	r3, #3
 80099aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80099ac:	e008      	b.n	80099c0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f001 f9b3 	bl	800ad1c <USBD_CtlError>
          ret = USBD_FAIL;
 80099b6:	2303      	movs	r3, #3
 80099b8:	75fb      	strb	r3, [r7, #23]
          break;
 80099ba:	e002      	b.n	80099c2 <USBD_CDC_Setup+0x176>
          break;
 80099bc:	bf00      	nop
 80099be:	e008      	b.n	80099d2 <USBD_CDC_Setup+0x186>
          break;
 80099c0:	bf00      	nop
      }
      break;
 80099c2:	e006      	b.n	80099d2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f001 f9a8 	bl	800ad1c <USBD_CtlError>
      ret = USBD_FAIL;
 80099cc:	2303      	movs	r3, #3
 80099ce:	75fb      	strb	r3, [r7, #23]
      break;
 80099d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80099ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e04f      	b.n	8009a9e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009a06:	78fa      	ldrb	r2, [r7, #3]
 8009a08:	6879      	ldr	r1, [r7, #4]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	440b      	add	r3, r1
 8009a14:	3318      	adds	r3, #24
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d029      	beq.n	8009a70 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	3318      	adds	r3, #24
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	78f9      	ldrb	r1, [r7, #3]
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	460b      	mov	r3, r1
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	440b      	add	r3, r1
 8009a38:	00db      	lsls	r3, r3, #3
 8009a3a:	4403      	add	r3, r0
 8009a3c:	3320      	adds	r3, #32
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a44:	fb01 f303 	mul.w	r3, r1, r3
 8009a48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d110      	bne.n	8009a70 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009a4e:	78fa      	ldrb	r2, [r7, #3]
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	440b      	add	r3, r1
 8009a5c:	3318      	adds	r3, #24
 8009a5e:	2200      	movs	r2, #0
 8009a60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a62:	78f9      	ldrb	r1, [r7, #3]
 8009a64:	2300      	movs	r3, #0
 8009a66:	2200      	movs	r2, #0
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f001 fe58 	bl	800b71e <USBD_LL_Transmit>
 8009a6e:	e015      	b.n	8009a9c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00b      	beq.n	8009a9c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009a98:	78fa      	ldrb	r2, [r7, #3]
 8009a9a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ab8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e015      	b.n	8009af4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 fe68 	bl	800b7a2 <USBD_LL_GetRxDataSize>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009aee:	4611      	mov	r1, r2
 8009af0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d101      	bne.n	8009b16 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e01a      	b.n	8009b4c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d014      	beq.n	8009b4a <USBD_CDC_EP0_RxReady+0x4e>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009b26:	2bff      	cmp	r3, #255	@ 0xff
 8009b28:	d00f      	beq.n	8009b4a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009b38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b40:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	22ff      	movs	r2, #255	@ 0xff
 8009b46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2243      	movs	r2, #67	@ 0x43
 8009b60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009b62:	4b03      	ldr	r3, [pc, #12]	@ (8009b70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	20000094 	.word	0x20000094

08009b74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2243      	movs	r2, #67	@ 0x43
 8009b80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009b82:	4b03      	ldr	r3, [pc, #12]	@ (8009b90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	20000050 	.word	0x20000050

08009b94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2243      	movs	r2, #67	@ 0x43
 8009ba0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009ba2:	4b03      	ldr	r3, [pc, #12]	@ (8009bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	200000d8 	.word	0x200000d8

08009bb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	220a      	movs	r2, #10
 8009bc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009bc2:	4b03      	ldr	r3, [pc, #12]	@ (8009bd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	2000000c 	.word	0x2000000c

08009bd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e004      	b.n	8009bf2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b087      	sub	sp, #28
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c10:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e008      	b.n	8009c2e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	371c      	adds	r7, #28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e004      	b.n	8009c60 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009c86:	2303      	movs	r3, #3
 8009c88:	e016      	b.n	8009cb8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	7c1b      	ldrb	r3, [r3, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d109      	bne.n	8009ca6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f001 fd5e 	bl	800b760 <USBD_LL_PrepareReceive>
 8009ca4:	e007      	b.n	8009cb6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cac:	2340      	movs	r3, #64	@ 0x40
 8009cae:	2101      	movs	r1, #1
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f001 fd55 	bl	800b760 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e01f      	b.n	8009d18 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	79fa      	ldrb	r2, [r7, #7]
 8009d0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f001 fbbd 	bl	800b48c <USBD_LL_Init>
 8009d12:	4603      	mov	r3, r0
 8009d14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e016      	b.n	8009d66 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d54:	f107 020e 	add.w	r2, r7, #14
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 fbe8 	bl	800b54c <USBD_LL_Start>
 8009d7c:	4603      	mov	r3, r0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009da8:	2303      	movs	r3, #3
 8009daa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d009      	beq.n	8009dca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	78fa      	ldrb	r2, [r7, #3]
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	4798      	blx	r3
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d007      	beq.n	8009dfa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	78fa      	ldrb	r2, [r7, #3]
 8009df4:	4611      	mov	r1, r2
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	4798      	blx	r3
  }

  return USBD_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 ff46 	bl	800aca8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e38:	f003 031f 	and.w	r3, r3, #31
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d01a      	beq.n	8009e76 <USBD_LL_SetupStage+0x72>
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d822      	bhi.n	8009e8a <USBD_LL_SetupStage+0x86>
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <USBD_LL_SetupStage+0x4a>
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d00a      	beq.n	8009e62 <USBD_LL_SetupStage+0x5e>
 8009e4c:	e01d      	b.n	8009e8a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f9ee 	bl	800a238 <USBD_StdDevReq>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e60:	e020      	b.n	8009ea4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa52 	bl	800a314 <USBD_StdItfReq>
 8009e70:	4603      	mov	r3, r0
 8009e72:	73fb      	strb	r3, [r7, #15]
      break;
 8009e74:	e016      	b.n	8009ea4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fa91 	bl	800a3a6 <USBD_StdEPReq>
 8009e84:	4603      	mov	r3, r0
 8009e86:	73fb      	strb	r3, [r7, #15]
      break;
 8009e88:	e00c      	b.n	8009ea4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e90:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 fbb7 	bl	800b60c <USBD_LL_StallEP>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea2:	bf00      	nop
  }

  return ret;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b086      	sub	sp, #24
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	60f8      	str	r0, [r7, #12]
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	607a      	str	r2, [r7, #4]
 8009eba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009ebc:	7afb      	ldrb	r3, [r7, #11]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d138      	bne.n	8009f34 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009ec8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d14a      	bne.n	8009f6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d913      	bls.n	8009f08 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	689a      	ldr	r2, [r3, #8]
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	1ad2      	subs	r2, r2, r3
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	bf28      	it	cs
 8009efa:	4613      	movcs	r3, r2
 8009efc:	461a      	mov	r2, r3
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 ffc5 	bl	800ae90 <USBD_CtlContinueRx>
 8009f06:	e030      	b.n	8009f6a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d10b      	bne.n	8009f2c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d005      	beq.n	8009f2c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 ffc0 	bl	800aeb2 <USBD_CtlSendStatus>
 8009f32:	e01a      	b.n	8009f6a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d114      	bne.n	8009f6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00e      	beq.n	8009f6a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	7afa      	ldrb	r2, [r7, #11]
 8009f56:	4611      	mov	r1, r2
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	4798      	blx	r3
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	e000      	b.n	8009f6c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009f82:	7afb      	ldrb	r3, [r7, #11]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d16b      	bne.n	800a060 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3314      	adds	r3, #20
 8009f8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d156      	bne.n	800a046 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	689a      	ldr	r2, [r3, #8]
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d914      	bls.n	8009fce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	1ad2      	subs	r2, r2, r3
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 ff3a 	bl	800ae34 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f001 fbca 	bl	800b760 <USBD_LL_PrepareReceive>
 8009fcc:	e03b      	b.n	800a046 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	68da      	ldr	r2, [r3, #12]
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d11c      	bne.n	800a014 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d316      	bcc.n	800a014 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d20f      	bcs.n	800a014 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f000 ff1b 	bl	800ae34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a006:	2300      	movs	r3, #0
 800a008:	2200      	movs	r2, #0
 800a00a:	2100      	movs	r1, #0
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f001 fba7 	bl	800b760 <USBD_LL_PrepareReceive>
 800a012:	e018      	b.n	800a046 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d10b      	bne.n	800a038 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a038:	2180      	movs	r1, #128	@ 0x80
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f001 fae6 	bl	800b60c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 ff49 	bl	800aed8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d122      	bne.n	800a096 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7ff fe98 	bl	8009d86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a05e:	e01a      	b.n	800a096 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a066:	b2db      	uxtb	r3, r3
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d114      	bne.n	800a096 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00e      	beq.n	800a096 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	7afa      	ldrb	r2, [r7, #11]
 800a082:	4611      	mov	r1, r2
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	4798      	blx	r3
 800a088:	4603      	mov	r3, r0
 800a08a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	e000      	b.n	800a098 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3718      	adds	r7, #24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e02f      	b.n	800a134 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00f      	beq.n	800a0fe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d009      	beq.n	800a0fe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	6852      	ldr	r2, [r2, #4]
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0fe:	2340      	movs	r3, #64	@ 0x40
 800a100:	2200      	movs	r2, #0
 800a102:	2100      	movs	r1, #0
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 fa3c 	bl	800b582 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2240      	movs	r2, #64	@ 0x40
 800a116:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a11a:	2340      	movs	r3, #64	@ 0x40
 800a11c:	2200      	movs	r2, #0
 800a11e:	2180      	movs	r1, #128	@ 0x80
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f001 fa2e 	bl	800b582 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2240      	movs	r2, #64	@ 0x40
 800a130:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	78fa      	ldrb	r2, [r7, #3]
 800a14c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2204      	movs	r2, #4
 800a176:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b04      	cmp	r3, #4
 800a19a:	d106      	bne.n	800a1aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a1a2:	b2da      	uxtb	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e012      	b.n	800a1f4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d10b      	bne.n	800a1f2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d005      	beq.n	800a1f2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	3301      	adds	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a21a:	8a3b      	ldrh	r3, [r7, #16]
 800a21c:	021b      	lsls	r3, r3, #8
 800a21e:	b21a      	sxth	r2, r3
 800a220:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a224:	4313      	orrs	r3, r2
 800a226:	b21b      	sxth	r3, r3
 800a228:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a22a:	89fb      	ldrh	r3, [r7, #14]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	371c      	adds	r7, #28
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a24e:	2b40      	cmp	r3, #64	@ 0x40
 800a250:	d005      	beq.n	800a25e <USBD_StdDevReq+0x26>
 800a252:	2b40      	cmp	r3, #64	@ 0x40
 800a254:	d853      	bhi.n	800a2fe <USBD_StdDevReq+0xc6>
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00b      	beq.n	800a272 <USBD_StdDevReq+0x3a>
 800a25a:	2b20      	cmp	r3, #32
 800a25c:	d14f      	bne.n	800a2fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	4798      	blx	r3
 800a26c:	4603      	mov	r3, r0
 800a26e:	73fb      	strb	r3, [r7, #15]
      break;
 800a270:	e04a      	b.n	800a308 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	785b      	ldrb	r3, [r3, #1]
 800a276:	2b09      	cmp	r3, #9
 800a278:	d83b      	bhi.n	800a2f2 <USBD_StdDevReq+0xba>
 800a27a:	a201      	add	r2, pc, #4	@ (adr r2, 800a280 <USBD_StdDevReq+0x48>)
 800a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a280:	0800a2d5 	.word	0x0800a2d5
 800a284:	0800a2e9 	.word	0x0800a2e9
 800a288:	0800a2f3 	.word	0x0800a2f3
 800a28c:	0800a2df 	.word	0x0800a2df
 800a290:	0800a2f3 	.word	0x0800a2f3
 800a294:	0800a2b3 	.word	0x0800a2b3
 800a298:	0800a2a9 	.word	0x0800a2a9
 800a29c:	0800a2f3 	.word	0x0800a2f3
 800a2a0:	0800a2cb 	.word	0x0800a2cb
 800a2a4:	0800a2bd 	.word	0x0800a2bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f9de 	bl	800a66c <USBD_GetDescriptor>
          break;
 800a2b0:	e024      	b.n	800a2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 fb6d 	bl	800a994 <USBD_SetAddress>
          break;
 800a2ba:	e01f      	b.n	800a2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fbac 	bl	800aa1c <USBD_SetConfig>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73fb      	strb	r3, [r7, #15]
          break;
 800a2c8:	e018      	b.n	800a2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fc4b 	bl	800ab68 <USBD_GetConfig>
          break;
 800a2d2:	e013      	b.n	800a2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fc7c 	bl	800abd4 <USBD_GetStatus>
          break;
 800a2dc:	e00e      	b.n	800a2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fcab 	bl	800ac3c <USBD_SetFeature>
          break;
 800a2e6:	e009      	b.n	800a2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fcba 	bl	800ac64 <USBD_ClrFeature>
          break;
 800a2f0:	e004      	b.n	800a2fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fd11 	bl	800ad1c <USBD_CtlError>
          break;
 800a2fa:	bf00      	nop
      }
      break;
 800a2fc:	e004      	b.n	800a308 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fd0b 	bl	800ad1c <USBD_CtlError>
      break;
 800a306:	bf00      	nop
  }

  return ret;
 800a308:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop

0800a314 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a32a:	2b40      	cmp	r3, #64	@ 0x40
 800a32c:	d005      	beq.n	800a33a <USBD_StdItfReq+0x26>
 800a32e:	2b40      	cmp	r3, #64	@ 0x40
 800a330:	d82f      	bhi.n	800a392 <USBD_StdItfReq+0x7e>
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <USBD_StdItfReq+0x26>
 800a336:	2b20      	cmp	r3, #32
 800a338:	d12b      	bne.n	800a392 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a340:	b2db      	uxtb	r3, r3
 800a342:	3b01      	subs	r3, #1
 800a344:	2b02      	cmp	r3, #2
 800a346:	d81d      	bhi.n	800a384 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	889b      	ldrh	r3, [r3, #4]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d813      	bhi.n	800a37a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	4798      	blx	r3
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	88db      	ldrh	r3, [r3, #6]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d110      	bne.n	800a38e <USBD_StdItfReq+0x7a>
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10d      	bne.n	800a38e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fd9d 	bl	800aeb2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a378:	e009      	b.n	800a38e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fccd 	bl	800ad1c <USBD_CtlError>
          break;
 800a382:	e004      	b.n	800a38e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fcc8 	bl	800ad1c <USBD_CtlError>
          break;
 800a38c:	e000      	b.n	800a390 <USBD_StdItfReq+0x7c>
          break;
 800a38e:	bf00      	nop
      }
      break;
 800a390:	e004      	b.n	800a39c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fcc1 	bl	800ad1c <USBD_CtlError>
      break;
 800a39a:	bf00      	nop
  }

  return ret;
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	889b      	ldrh	r3, [r3, #4]
 800a3b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3c2:	2b40      	cmp	r3, #64	@ 0x40
 800a3c4:	d007      	beq.n	800a3d6 <USBD_StdEPReq+0x30>
 800a3c6:	2b40      	cmp	r3, #64	@ 0x40
 800a3c8:	f200 8145 	bhi.w	800a656 <USBD_StdEPReq+0x2b0>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00c      	beq.n	800a3ea <USBD_StdEPReq+0x44>
 800a3d0:	2b20      	cmp	r3, #32
 800a3d2:	f040 8140 	bne.w	800a656 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	4798      	blx	r3
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e8:	e13a      	b.n	800a660 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	785b      	ldrb	r3, [r3, #1]
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	d007      	beq.n	800a402 <USBD_StdEPReq+0x5c>
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	f300 8129 	bgt.w	800a64a <USBD_StdEPReq+0x2a4>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d07f      	beq.n	800a4fc <USBD_StdEPReq+0x156>
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d03c      	beq.n	800a47a <USBD_StdEPReq+0xd4>
 800a400:	e123      	b.n	800a64a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d002      	beq.n	800a414 <USBD_StdEPReq+0x6e>
 800a40e:	2b03      	cmp	r3, #3
 800a410:	d016      	beq.n	800a440 <USBD_StdEPReq+0x9a>
 800a412:	e02c      	b.n	800a46e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a414:	7bbb      	ldrb	r3, [r7, #14]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00d      	beq.n	800a436 <USBD_StdEPReq+0x90>
 800a41a:	7bbb      	ldrb	r3, [r7, #14]
 800a41c:	2b80      	cmp	r3, #128	@ 0x80
 800a41e:	d00a      	beq.n	800a436 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a420:	7bbb      	ldrb	r3, [r7, #14]
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f001 f8f1 	bl	800b60c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a42a:	2180      	movs	r1, #128	@ 0x80
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f001 f8ed 	bl	800b60c <USBD_LL_StallEP>
 800a432:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a434:	e020      	b.n	800a478 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fc6f 	bl	800ad1c <USBD_CtlError>
              break;
 800a43e:	e01b      	b.n	800a478 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	885b      	ldrh	r3, [r3, #2]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10e      	bne.n	800a466 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a448:	7bbb      	ldrb	r3, [r7, #14]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00b      	beq.n	800a466 <USBD_StdEPReq+0xc0>
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	2b80      	cmp	r3, #128	@ 0x80
 800a452:	d008      	beq.n	800a466 <USBD_StdEPReq+0xc0>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	88db      	ldrh	r3, [r3, #6]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f001 f8d3 	bl	800b60c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fd23 	bl	800aeb2 <USBD_CtlSendStatus>

              break;
 800a46c:	e004      	b.n	800a478 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fc53 	bl	800ad1c <USBD_CtlError>
              break;
 800a476:	bf00      	nop
          }
          break;
 800a478:	e0ec      	b.n	800a654 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b02      	cmp	r3, #2
 800a484:	d002      	beq.n	800a48c <USBD_StdEPReq+0xe6>
 800a486:	2b03      	cmp	r3, #3
 800a488:	d016      	beq.n	800a4b8 <USBD_StdEPReq+0x112>
 800a48a:	e030      	b.n	800a4ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00d      	beq.n	800a4ae <USBD_StdEPReq+0x108>
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	2b80      	cmp	r3, #128	@ 0x80
 800a496:	d00a      	beq.n	800a4ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a498:	7bbb      	ldrb	r3, [r7, #14]
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 f8b5 	bl	800b60c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4a2:	2180      	movs	r1, #128	@ 0x80
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f001 f8b1 	bl	800b60c <USBD_LL_StallEP>
 800a4aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4ac:	e025      	b.n	800a4fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fc33 	bl	800ad1c <USBD_CtlError>
              break;
 800a4b6:	e020      	b.n	800a4fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	885b      	ldrh	r3, [r3, #2]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d11b      	bne.n	800a4f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
 800a4c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d004      	beq.n	800a4d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a4ca:	7bbb      	ldrb	r3, [r7, #14]
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f001 f8bb 	bl	800b64a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fcec 	bl	800aeb2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	4798      	blx	r3
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a4ec:	e004      	b.n	800a4f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fc13 	bl	800ad1c <USBD_CtlError>
              break;
 800a4f6:	e000      	b.n	800a4fa <USBD_StdEPReq+0x154>
              break;
 800a4f8:	bf00      	nop
          }
          break;
 800a4fa:	e0ab      	b.n	800a654 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b02      	cmp	r3, #2
 800a506:	d002      	beq.n	800a50e <USBD_StdEPReq+0x168>
 800a508:	2b03      	cmp	r3, #3
 800a50a:	d032      	beq.n	800a572 <USBD_StdEPReq+0x1cc>
 800a50c:	e097      	b.n	800a63e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d007      	beq.n	800a524 <USBD_StdEPReq+0x17e>
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	2b80      	cmp	r3, #128	@ 0x80
 800a518:	d004      	beq.n	800a524 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a51a:	6839      	ldr	r1, [r7, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fbfd 	bl	800ad1c <USBD_CtlError>
                break;
 800a522:	e091      	b.n	800a648 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	da0b      	bge.n	800a544 <USBD_StdEPReq+0x19e>
 800a52c:	7bbb      	ldrb	r3, [r7, #14]
 800a52e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a532:	4613      	mov	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	3310      	adds	r3, #16
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	4413      	add	r3, r2
 800a540:	3304      	adds	r3, #4
 800a542:	e00b      	b.n	800a55c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a544:	7bbb      	ldrb	r3, [r7, #14]
 800a546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a54a:	4613      	mov	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	4413      	add	r3, r2
 800a55a:	3304      	adds	r3, #4
 800a55c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2200      	movs	r2, #0
 800a562:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2202      	movs	r2, #2
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fc47 	bl	800adfe <USBD_CtlSendData>
              break;
 800a570:	e06a      	b.n	800a648 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a576:	2b00      	cmp	r3, #0
 800a578:	da11      	bge.n	800a59e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a57a:	7bbb      	ldrb	r3, [r7, #14]
 800a57c:	f003 020f 	and.w	r2, r3, #15
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	4613      	mov	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	440b      	add	r3, r1
 800a58c:	3324      	adds	r3, #36	@ 0x24
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d117      	bne.n	800a5c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fbc0 	bl	800ad1c <USBD_CtlError>
                  break;
 800a59c:	e054      	b.n	800a648 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a59e:	7bbb      	ldrb	r3, [r7, #14]
 800a5a0:	f003 020f 	and.w	r2, r3, #15
 800a5a4:	6879      	ldr	r1, [r7, #4]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	440b      	add	r3, r1
 800a5b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a5b4:	881b      	ldrh	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d104      	bne.n	800a5c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a5ba:	6839      	ldr	r1, [r7, #0]
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fbad 	bl	800ad1c <USBD_CtlError>
                  break;
 800a5c2:	e041      	b.n	800a648 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	da0b      	bge.n	800a5e4 <USBD_StdEPReq+0x23e>
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5d2:	4613      	mov	r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	3310      	adds	r3, #16
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	4413      	add	r3, r2
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	e00b      	b.n	800a5fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <USBD_StdEPReq+0x264>
 800a604:	7bbb      	ldrb	r3, [r7, #14]
 800a606:	2b80      	cmp	r3, #128	@ 0x80
 800a608:	d103      	bne.n	800a612 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	2200      	movs	r2, #0
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	e00e      	b.n	800a630 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a612:	7bbb      	ldrb	r3, [r7, #14]
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 f836 	bl	800b688 <USBD_LL_IsStallEP>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d003      	beq.n	800a62a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	2201      	movs	r2, #1
 800a626:	601a      	str	r2, [r3, #0]
 800a628:	e002      	b.n	800a630 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	2200      	movs	r2, #0
 800a62e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2202      	movs	r2, #2
 800a634:	4619      	mov	r1, r3
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 fbe1 	bl	800adfe <USBD_CtlSendData>
              break;
 800a63c:	e004      	b.n	800a648 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fb6b 	bl	800ad1c <USBD_CtlError>
              break;
 800a646:	bf00      	nop
          }
          break;
 800a648:	e004      	b.n	800a654 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fb65 	bl	800ad1c <USBD_CtlError>
          break;
 800a652:	bf00      	nop
      }
      break;
 800a654:	e004      	b.n	800a660 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fb5f 	bl	800ad1c <USBD_CtlError>
      break;
 800a65e:	bf00      	nop
  }

  return ret;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	885b      	ldrh	r3, [r3, #2]
 800a686:	0a1b      	lsrs	r3, r3, #8
 800a688:	b29b      	uxth	r3, r3
 800a68a:	3b01      	subs	r3, #1
 800a68c:	2b0e      	cmp	r3, #14
 800a68e:	f200 8152 	bhi.w	800a936 <USBD_GetDescriptor+0x2ca>
 800a692:	a201      	add	r2, pc, #4	@ (adr r2, 800a698 <USBD_GetDescriptor+0x2c>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a709 	.word	0x0800a709
 800a69c:	0800a721 	.word	0x0800a721
 800a6a0:	0800a761 	.word	0x0800a761
 800a6a4:	0800a937 	.word	0x0800a937
 800a6a8:	0800a937 	.word	0x0800a937
 800a6ac:	0800a8d7 	.word	0x0800a8d7
 800a6b0:	0800a903 	.word	0x0800a903
 800a6b4:	0800a937 	.word	0x0800a937
 800a6b8:	0800a937 	.word	0x0800a937
 800a6bc:	0800a937 	.word	0x0800a937
 800a6c0:	0800a937 	.word	0x0800a937
 800a6c4:	0800a937 	.word	0x0800a937
 800a6c8:	0800a937 	.word	0x0800a937
 800a6cc:	0800a937 	.word	0x0800a937
 800a6d0:	0800a6d5 	.word	0x0800a6d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00b      	beq.n	800a6f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6e6:	69db      	ldr	r3, [r3, #28]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	7c12      	ldrb	r2, [r2, #16]
 800a6ec:	f107 0108 	add.w	r1, r7, #8
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	4798      	blx	r3
 800a6f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6f6:	e126      	b.n	800a946 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fb0e 	bl	800ad1c <USBD_CtlError>
        err++;
 800a700:	7afb      	ldrb	r3, [r7, #11]
 800a702:	3301      	adds	r3, #1
 800a704:	72fb      	strb	r3, [r7, #11]
      break;
 800a706:	e11e      	b.n	800a946 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	7c12      	ldrb	r2, [r2, #16]
 800a714:	f107 0108 	add.w	r1, r7, #8
 800a718:	4610      	mov	r0, r2
 800a71a:	4798      	blx	r3
 800a71c:	60f8      	str	r0, [r7, #12]
      break;
 800a71e:	e112      	b.n	800a946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	7c1b      	ldrb	r3, [r3, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10d      	bne.n	800a744 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a730:	f107 0208 	add.w	r2, r7, #8
 800a734:	4610      	mov	r0, r2
 800a736:	4798      	blx	r3
 800a738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3301      	adds	r3, #1
 800a73e:	2202      	movs	r2, #2
 800a740:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a742:	e100      	b.n	800a946 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a74c:	f107 0208 	add.w	r2, r7, #8
 800a750:	4610      	mov	r0, r2
 800a752:	4798      	blx	r3
 800a754:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3301      	adds	r3, #1
 800a75a:	2202      	movs	r2, #2
 800a75c:	701a      	strb	r2, [r3, #0]
      break;
 800a75e:	e0f2      	b.n	800a946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	885b      	ldrh	r3, [r3, #2]
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b05      	cmp	r3, #5
 800a768:	f200 80ac 	bhi.w	800a8c4 <USBD_GetDescriptor+0x258>
 800a76c:	a201      	add	r2, pc, #4	@ (adr r2, 800a774 <USBD_GetDescriptor+0x108>)
 800a76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a772:	bf00      	nop
 800a774:	0800a78d 	.word	0x0800a78d
 800a778:	0800a7c1 	.word	0x0800a7c1
 800a77c:	0800a7f5 	.word	0x0800a7f5
 800a780:	0800a829 	.word	0x0800a829
 800a784:	0800a85d 	.word	0x0800a85d
 800a788:	0800a891 	.word	0x0800a891
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00b      	beq.n	800a7b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	7c12      	ldrb	r2, [r2, #16]
 800a7a4:	f107 0108 	add.w	r1, r7, #8
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	4798      	blx	r3
 800a7ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7ae:	e091      	b.n	800a8d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fab2 	bl	800ad1c <USBD_CtlError>
            err++;
 800a7b8:	7afb      	ldrb	r3, [r7, #11]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a7be:	e089      	b.n	800a8d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00b      	beq.n	800a7e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	7c12      	ldrb	r2, [r2, #16]
 800a7d8:	f107 0108 	add.w	r1, r7, #8
 800a7dc:	4610      	mov	r0, r2
 800a7de:	4798      	blx	r3
 800a7e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7e2:	e077      	b.n	800a8d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fa98 	bl	800ad1c <USBD_CtlError>
            err++;
 800a7ec:	7afb      	ldrb	r3, [r7, #11]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7f2:	e06f      	b.n	800a8d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00b      	beq.n	800a818 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	7c12      	ldrb	r2, [r2, #16]
 800a80c:	f107 0108 	add.w	r1, r7, #8
 800a810:	4610      	mov	r0, r2
 800a812:	4798      	blx	r3
 800a814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a816:	e05d      	b.n	800a8d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fa7e 	bl	800ad1c <USBD_CtlError>
            err++;
 800a820:	7afb      	ldrb	r3, [r7, #11]
 800a822:	3301      	adds	r3, #1
 800a824:	72fb      	strb	r3, [r7, #11]
          break;
 800a826:	e055      	b.n	800a8d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00b      	beq.n	800a84c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	7c12      	ldrb	r2, [r2, #16]
 800a840:	f107 0108 	add.w	r1, r7, #8
 800a844:	4610      	mov	r0, r2
 800a846:	4798      	blx	r3
 800a848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a84a:	e043      	b.n	800a8d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa64 	bl	800ad1c <USBD_CtlError>
            err++;
 800a854:	7afb      	ldrb	r3, [r7, #11]
 800a856:	3301      	adds	r3, #1
 800a858:	72fb      	strb	r3, [r7, #11]
          break;
 800a85a:	e03b      	b.n	800a8d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00b      	beq.n	800a880 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	7c12      	ldrb	r2, [r2, #16]
 800a874:	f107 0108 	add.w	r1, r7, #8
 800a878:	4610      	mov	r0, r2
 800a87a:	4798      	blx	r3
 800a87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a87e:	e029      	b.n	800a8d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fa4a 	bl	800ad1c <USBD_CtlError>
            err++;
 800a888:	7afb      	ldrb	r3, [r7, #11]
 800a88a:	3301      	adds	r3, #1
 800a88c:	72fb      	strb	r3, [r7, #11]
          break;
 800a88e:	e021      	b.n	800a8d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00b      	beq.n	800a8b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	7c12      	ldrb	r2, [r2, #16]
 800a8a8:	f107 0108 	add.w	r1, r7, #8
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4798      	blx	r3
 800a8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8b2:	e00f      	b.n	800a8d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fa30 	bl	800ad1c <USBD_CtlError>
            err++;
 800a8bc:	7afb      	ldrb	r3, [r7, #11]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8c2:	e007      	b.n	800a8d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fa28 	bl	800ad1c <USBD_CtlError>
          err++;
 800a8cc:	7afb      	ldrb	r3, [r7, #11]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a8d2:	bf00      	nop
      }
      break;
 800a8d4:	e037      	b.n	800a946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	7c1b      	ldrb	r3, [r3, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d109      	bne.n	800a8f2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8e6:	f107 0208 	add.w	r2, r7, #8
 800a8ea:	4610      	mov	r0, r2
 800a8ec:	4798      	blx	r3
 800a8ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8f0:	e029      	b.n	800a946 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8f2:	6839      	ldr	r1, [r7, #0]
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fa11 	bl	800ad1c <USBD_CtlError>
        err++;
 800a8fa:	7afb      	ldrb	r3, [r7, #11]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	72fb      	strb	r3, [r7, #11]
      break;
 800a900:	e021      	b.n	800a946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	7c1b      	ldrb	r3, [r3, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10d      	bne.n	800a926 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a912:	f107 0208 	add.w	r2, r7, #8
 800a916:	4610      	mov	r0, r2
 800a918:	4798      	blx	r3
 800a91a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3301      	adds	r3, #1
 800a920:	2207      	movs	r2, #7
 800a922:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a924:	e00f      	b.n	800a946 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f9f7 	bl	800ad1c <USBD_CtlError>
        err++;
 800a92e:	7afb      	ldrb	r3, [r7, #11]
 800a930:	3301      	adds	r3, #1
 800a932:	72fb      	strb	r3, [r7, #11]
      break;
 800a934:	e007      	b.n	800a946 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f9ef 	bl	800ad1c <USBD_CtlError>
      err++;
 800a93e:	7afb      	ldrb	r3, [r7, #11]
 800a940:	3301      	adds	r3, #1
 800a942:	72fb      	strb	r3, [r7, #11]
      break;
 800a944:	bf00      	nop
  }

  if (err != 0U)
 800a946:	7afb      	ldrb	r3, [r7, #11]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d11e      	bne.n	800a98a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	88db      	ldrh	r3, [r3, #6]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d016      	beq.n	800a982 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a954:	893b      	ldrh	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00e      	beq.n	800a978 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	88da      	ldrh	r2, [r3, #6]
 800a95e:	893b      	ldrh	r3, [r7, #8]
 800a960:	4293      	cmp	r3, r2
 800a962:	bf28      	it	cs
 800a964:	4613      	movcs	r3, r2
 800a966:	b29b      	uxth	r3, r3
 800a968:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a96a:	893b      	ldrh	r3, [r7, #8]
 800a96c:	461a      	mov	r2, r3
 800a96e:	68f9      	ldr	r1, [r7, #12]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fa44 	bl	800adfe <USBD_CtlSendData>
 800a976:	e009      	b.n	800a98c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f9ce 	bl	800ad1c <USBD_CtlError>
 800a980:	e004      	b.n	800a98c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fa95 	bl	800aeb2 <USBD_CtlSendStatus>
 800a988:	e000      	b.n	800a98c <USBD_GetDescriptor+0x320>
    return;
 800a98a:	bf00      	nop
  }
}
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop

0800a994 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	889b      	ldrh	r3, [r3, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d131      	bne.n	800aa0a <USBD_SetAddress+0x76>
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	88db      	ldrh	r3, [r3, #6]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d12d      	bne.n	800aa0a <USBD_SetAddress+0x76>
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	885b      	ldrh	r3, [r3, #2]
 800a9b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a9b4:	d829      	bhi.n	800aa0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	885b      	ldrh	r3, [r3, #2]
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d104      	bne.n	800a9d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f9a3 	bl	800ad1c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9d6:	e01d      	b.n	800aa14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	7bfa      	ldrb	r2, [r7, #15]
 800a9dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fe7b 	bl	800b6e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 fa61 	bl	800aeb2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d004      	beq.n	800aa00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9fe:	e009      	b.n	800aa14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa08:	e004      	b.n	800aa14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f985 	bl	800ad1c <USBD_CtlError>
  }
}
 800aa12:	bf00      	nop
 800aa14:	bf00      	nop
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	885b      	ldrh	r3, [r3, #2]
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	4b4c      	ldr	r3, [pc, #304]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aa32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa34:	4b4b      	ldr	r3, [pc, #300]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d905      	bls.n	800aa48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f96c 	bl	800ad1c <USBD_CtlError>
    return USBD_FAIL;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e088      	b.n	800ab5a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d002      	beq.n	800aa5a <USBD_SetConfig+0x3e>
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	d025      	beq.n	800aaa4 <USBD_SetConfig+0x88>
 800aa58:	e071      	b.n	800ab3e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aa5a:	4b42      	ldr	r3, [pc, #264]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d01c      	beq.n	800aa9c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800aa62:	4b40      	ldr	r3, [pc, #256]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa6c:	4b3d      	ldr	r3, [pc, #244]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7ff f992 	bl	8009d9c <USBD_SetClassConfig>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d004      	beq.n	800aa8c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f949 	bl	800ad1c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa8a:	e065      	b.n	800ab58 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fa10 	bl	800aeb2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2203      	movs	r2, #3
 800aa96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aa9a:	e05d      	b.n	800ab58 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fa08 	bl	800aeb2 <USBD_CtlSendStatus>
      break;
 800aaa2:	e059      	b.n	800ab58 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aaa4:	4b2f      	ldr	r3, [pc, #188]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d112      	bne.n	800aad2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2202      	movs	r2, #2
 800aab0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800aab4:	4b2b      	ldr	r3, [pc, #172]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	461a      	mov	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aabe:	4b29      	ldr	r3, [pc, #164]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7ff f985 	bl	8009dd4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f9f1 	bl	800aeb2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aad0:	e042      	b.n	800ab58 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800aad2:	4b24      	ldr	r3, [pc, #144]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	461a      	mov	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d02a      	beq.n	800ab36 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7ff f973 	bl	8009dd4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aaee:	4b1d      	ldr	r3, [pc, #116]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aaf8:	4b1a      	ldr	r3, [pc, #104]	@ (800ab64 <USBD_SetConfig+0x148>)
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff f94c 	bl	8009d9c <USBD_SetClassConfig>
 800ab04:	4603      	mov	r3, r0
 800ab06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00f      	beq.n	800ab2e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f903 	bl	800ad1c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7ff f958 	bl	8009dd4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2202      	movs	r2, #2
 800ab28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ab2c:	e014      	b.n	800ab58 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f9bf 	bl	800aeb2 <USBD_CtlSendStatus>
      break;
 800ab34:	e010      	b.n	800ab58 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9bb 	bl	800aeb2 <USBD_CtlSendStatus>
      break;
 800ab3c:	e00c      	b.n	800ab58 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f8eb 	bl	800ad1c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab46:	4b07      	ldr	r3, [pc, #28]	@ (800ab64 <USBD_SetConfig+0x148>)
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7ff f941 	bl	8009dd4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ab52:	2303      	movs	r3, #3
 800ab54:	73fb      	strb	r3, [r7, #15]
      break;
 800ab56:	bf00      	nop
  }

  return ret;
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	20002704 	.word	0x20002704

0800ab68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	88db      	ldrh	r3, [r3, #6]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d004      	beq.n	800ab84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 f8cd 	bl	800ad1c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab82:	e023      	b.n	800abcc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	dc02      	bgt.n	800ab96 <USBD_GetConfig+0x2e>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	dc03      	bgt.n	800ab9c <USBD_GetConfig+0x34>
 800ab94:	e015      	b.n	800abc2 <USBD_GetConfig+0x5a>
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	d00b      	beq.n	800abb2 <USBD_GetConfig+0x4a>
 800ab9a:	e012      	b.n	800abc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	3308      	adds	r3, #8
 800aba6:	2201      	movs	r2, #1
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f927 	bl	800adfe <USBD_CtlSendData>
        break;
 800abb0:	e00c      	b.n	800abcc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3304      	adds	r3, #4
 800abb6:	2201      	movs	r2, #1
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f91f 	bl	800adfe <USBD_CtlSendData>
        break;
 800abc0:	e004      	b.n	800abcc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f8a9 	bl	800ad1c <USBD_CtlError>
        break;
 800abca:	bf00      	nop
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	3b01      	subs	r3, #1
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d81e      	bhi.n	800ac2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	88db      	ldrh	r3, [r3, #6]
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d004      	beq.n	800abfe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f890 	bl	800ad1c <USBD_CtlError>
        break;
 800abfc:	e01a      	b.n	800ac34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d005      	beq.n	800ac1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	f043 0202 	orr.w	r2, r3, #2
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	330c      	adds	r3, #12
 800ac1e:	2202      	movs	r2, #2
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f8eb 	bl	800adfe <USBD_CtlSendData>
      break;
 800ac28:	e004      	b.n	800ac34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f875 	bl	800ad1c <USBD_CtlError>
      break;
 800ac32:	bf00      	nop
  }
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	885b      	ldrh	r3, [r3, #2]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d106      	bne.n	800ac5c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f92b 	bl	800aeb2 <USBD_CtlSendStatus>
  }
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	3b01      	subs	r3, #1
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d80b      	bhi.n	800ac94 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	885b      	ldrh	r3, [r3, #2]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d10c      	bne.n	800ac9e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f910 	bl	800aeb2 <USBD_CtlSendStatus>
      }
      break;
 800ac92:	e004      	b.n	800ac9e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f840 	bl	800ad1c <USBD_CtlError>
      break;
 800ac9c:	e000      	b.n	800aca0 <USBD_ClrFeature+0x3c>
      break;
 800ac9e:	bf00      	nop
  }
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	781a      	ldrb	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3301      	adds	r3, #1
 800acc2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	781a      	ldrb	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	3301      	adds	r3, #1
 800acd0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7ff fa92 	bl	800a1fc <SWAPBYTE>
 800acd8:	4603      	mov	r3, r0
 800acda:	461a      	mov	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3301      	adds	r3, #1
 800ace4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3301      	adds	r3, #1
 800acea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f7ff fa85 	bl	800a1fc <SWAPBYTE>
 800acf2:	4603      	mov	r3, r0
 800acf4:	461a      	mov	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3301      	adds	r3, #1
 800acfe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3301      	adds	r3, #1
 800ad04:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff fa78 	bl	800a1fc <SWAPBYTE>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	461a      	mov	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	80da      	strh	r2, [r3, #6]
}
 800ad14:	bf00      	nop
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad26:	2180      	movs	r1, #128	@ 0x80
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fc6f 	bl	800b60c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad2e:	2100      	movs	r1, #0
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fc6b 	bl	800b60c <USBD_LL_StallEP>
}
 800ad36:	bf00      	nop
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b086      	sub	sp, #24
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d036      	beq.n	800adc2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ad58:	6938      	ldr	r0, [r7, #16]
 800ad5a:	f000 f836 	bl	800adca <USBD_GetLen>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	3301      	adds	r3, #1
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	4413      	add	r3, r2
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	7812      	ldrb	r2, [r2, #0]
 800ad76:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad7e:	7dfb      	ldrb	r3, [r7, #23]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	4413      	add	r3, r2
 800ad84:	2203      	movs	r2, #3
 800ad86:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad8e:	e013      	b.n	800adb8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad90:	7dfb      	ldrb	r3, [r7, #23]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	4413      	add	r3, r2
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	7812      	ldrb	r2, [r2, #0]
 800ad9a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	613b      	str	r3, [r7, #16]
    idx++;
 800ada2:	7dfb      	ldrb	r3, [r7, #23]
 800ada4:	3301      	adds	r3, #1
 800ada6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ada8:	7dfb      	ldrb	r3, [r7, #23]
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	4413      	add	r3, r2
 800adae:	2200      	movs	r2, #0
 800adb0:	701a      	strb	r2, [r3, #0]
    idx++;
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
 800adb4:	3301      	adds	r3, #1
 800adb6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1e7      	bne.n	800ad90 <USBD_GetString+0x52>
 800adc0:	e000      	b.n	800adc4 <USBD_GetString+0x86>
    return;
 800adc2:	bf00      	nop
  }
}
 800adc4:	3718      	adds	r7, #24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800adca:	b480      	push	{r7}
 800adcc:	b085      	sub	sp, #20
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800add2:	2300      	movs	r3, #0
 800add4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800adda:	e005      	b.n	800ade8 <USBD_GetLen+0x1e>
  {
    len++;
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	3301      	adds	r3, #1
 800ade0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	3301      	adds	r3, #1
 800ade6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1f5      	bne.n	800addc <USBD_GetLen+0x12>
  }

  return len;
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	60b9      	str	r1, [r7, #8]
 800ae08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	2100      	movs	r1, #0
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f000 fc7a 	bl	800b71e <USBD_LL_Transmit>

  return USBD_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	2100      	movs	r1, #0
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f000 fc69 	bl	800b71e <USBD_LL_Transmit>

  return USBD_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b084      	sub	sp, #16
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	60f8      	str	r0, [r7, #12]
 800ae5e:	60b9      	str	r1, [r7, #8]
 800ae60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2203      	movs	r2, #3
 800ae66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	2100      	movs	r1, #0
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 fc6d 	bl	800b760 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	2100      	movs	r1, #0
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 fc5c 	bl	800b760 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2204      	movs	r2, #4
 800aebe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aec2:	2300      	movs	r3, #0
 800aec4:	2200      	movs	r2, #0
 800aec6:	2100      	movs	r1, #0
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fc28 	bl	800b71e <USBD_LL_Transmit>

  return USBD_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2205      	movs	r2, #5
 800aee4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aee8:	2300      	movs	r3, #0
 800aeea:	2200      	movs	r2, #0
 800aeec:	2100      	movs	r1, #0
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fc36 	bl	800b760 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
	...

0800af00 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800af04:	2200      	movs	r2, #0
 800af06:	4912      	ldr	r1, [pc, #72]	@ (800af50 <MX_USB_Device_Init+0x50>)
 800af08:	4812      	ldr	r0, [pc, #72]	@ (800af54 <MX_USB_Device_Init+0x54>)
 800af0a:	f7fe fed9 	bl	8009cc0 <USBD_Init>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800af14:	f7f5 fc2a 	bl	800076c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800af18:	490f      	ldr	r1, [pc, #60]	@ (800af58 <MX_USB_Device_Init+0x58>)
 800af1a:	480e      	ldr	r0, [pc, #56]	@ (800af54 <MX_USB_Device_Init+0x54>)
 800af1c:	f7fe ff00 	bl	8009d20 <USBD_RegisterClass>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800af26:	f7f5 fc21 	bl	800076c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800af2a:	490c      	ldr	r1, [pc, #48]	@ (800af5c <MX_USB_Device_Init+0x5c>)
 800af2c:	4809      	ldr	r0, [pc, #36]	@ (800af54 <MX_USB_Device_Init+0x54>)
 800af2e:	f7fe fe51 	bl	8009bd4 <USBD_CDC_RegisterInterface>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800af38:	f7f5 fc18 	bl	800076c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800af3c:	4805      	ldr	r0, [pc, #20]	@ (800af54 <MX_USB_Device_Init+0x54>)
 800af3e:	f7fe ff16 	bl	8009d6e <USBD_Start>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800af48:	f7f5 fc10 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800af4c:	bf00      	nop
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	20000130 	.word	0x20000130
 800af54:	20002708 	.word	0x20002708
 800af58:	20000018 	.word	0x20000018
 800af5c:	2000011c 	.word	0x2000011c

0800af60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af64:	2200      	movs	r2, #0
 800af66:	4905      	ldr	r1, [pc, #20]	@ (800af7c <CDC_Init_FS+0x1c>)
 800af68:	4805      	ldr	r0, [pc, #20]	@ (800af80 <CDC_Init_FS+0x20>)
 800af6a:	f7fe fe48 	bl	8009bfe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af6e:	4905      	ldr	r1, [pc, #20]	@ (800af84 <CDC_Init_FS+0x24>)
 800af70:	4803      	ldr	r0, [pc, #12]	@ (800af80 <CDC_Init_FS+0x20>)
 800af72:	f7fe fe62 	bl	8009c3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af78:	4618      	mov	r0, r3
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	200031d8 	.word	0x200031d8
 800af80:	20002708 	.word	0x20002708
 800af84:	200029d8 	.word	0x200029d8

0800af88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af88:	b480      	push	{r7}
 800af8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af8e:	4618      	mov	r0, r3
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	4603      	mov	r3, r0
 800afa0:	6039      	str	r1, [r7, #0]
 800afa2:	71fb      	strb	r3, [r7, #7]
 800afa4:	4613      	mov	r3, r2
 800afa6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800afa8:	79fb      	ldrb	r3, [r7, #7]
 800afaa:	2b23      	cmp	r3, #35	@ 0x23
 800afac:	d84a      	bhi.n	800b044 <CDC_Control_FS+0xac>
 800afae:	a201      	add	r2, pc, #4	@ (adr r2, 800afb4 <CDC_Control_FS+0x1c>)
 800afb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb4:	0800b045 	.word	0x0800b045
 800afb8:	0800b045 	.word	0x0800b045
 800afbc:	0800b045 	.word	0x0800b045
 800afc0:	0800b045 	.word	0x0800b045
 800afc4:	0800b045 	.word	0x0800b045
 800afc8:	0800b045 	.word	0x0800b045
 800afcc:	0800b045 	.word	0x0800b045
 800afd0:	0800b045 	.word	0x0800b045
 800afd4:	0800b045 	.word	0x0800b045
 800afd8:	0800b045 	.word	0x0800b045
 800afdc:	0800b045 	.word	0x0800b045
 800afe0:	0800b045 	.word	0x0800b045
 800afe4:	0800b045 	.word	0x0800b045
 800afe8:	0800b045 	.word	0x0800b045
 800afec:	0800b045 	.word	0x0800b045
 800aff0:	0800b045 	.word	0x0800b045
 800aff4:	0800b045 	.word	0x0800b045
 800aff8:	0800b045 	.word	0x0800b045
 800affc:	0800b045 	.word	0x0800b045
 800b000:	0800b045 	.word	0x0800b045
 800b004:	0800b045 	.word	0x0800b045
 800b008:	0800b045 	.word	0x0800b045
 800b00c:	0800b045 	.word	0x0800b045
 800b010:	0800b045 	.word	0x0800b045
 800b014:	0800b045 	.word	0x0800b045
 800b018:	0800b045 	.word	0x0800b045
 800b01c:	0800b045 	.word	0x0800b045
 800b020:	0800b045 	.word	0x0800b045
 800b024:	0800b045 	.word	0x0800b045
 800b028:	0800b045 	.word	0x0800b045
 800b02c:	0800b045 	.word	0x0800b045
 800b030:	0800b045 	.word	0x0800b045
 800b034:	0800b045 	.word	0x0800b045
 800b038:	0800b045 	.word	0x0800b045
 800b03c:	0800b045 	.word	0x0800b045
 800b040:	0800b045 	.word	0x0800b045
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b044:	bf00      	nop
  }

  return (USBD_OK);
 800b046:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	4805      	ldr	r0, [pc, #20]	@ (800b078 <CDC_Receive_FS+0x24>)
 800b062:	f7fe fdea 	bl	8009c3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b066:	4804      	ldr	r0, [pc, #16]	@ (800b078 <CDC_Receive_FS+0x24>)
 800b068:	f7fe fe00 	bl	8009c6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b06c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20002708 	.word	0x20002708

0800b07c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b087      	sub	sp, #28
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	4613      	mov	r3, r2
 800b088:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b08e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b092:	4618      	mov	r0, r3
 800b094:	371c      	adds	r7, #28
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
	...

0800b0a0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	6039      	str	r1, [r7, #0]
 800b0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	2212      	movs	r2, #18
 800b0b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b0b2:	4b03      	ldr	r3, [pc, #12]	@ (800b0c0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	20000150 	.word	0x20000150

0800b0c4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	6039      	str	r1, [r7, #0]
 800b0ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	2204      	movs	r2, #4
 800b0d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b0d6:	4b03      	ldr	r3, [pc, #12]	@ (800b0e4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	20000164 	.word	0x20000164

0800b0e8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	6039      	str	r1, [r7, #0]
 800b0f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0f4:	79fb      	ldrb	r3, [r7, #7]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d105      	bne.n	800b106 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	4907      	ldr	r1, [pc, #28]	@ (800b11c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b0fe:	4808      	ldr	r0, [pc, #32]	@ (800b120 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b100:	f7ff fe1d 	bl	800ad3e <USBD_GetString>
 800b104:	e004      	b.n	800b110 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	4904      	ldr	r1, [pc, #16]	@ (800b11c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b10a:	4805      	ldr	r0, [pc, #20]	@ (800b120 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b10c:	f7ff fe17 	bl	800ad3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b110:	4b02      	ldr	r3, [pc, #8]	@ (800b11c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b112:	4618      	mov	r0, r3
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	200039d8 	.word	0x200039d8
 800b120:	0800b938 	.word	0x0800b938

0800b124 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	4904      	ldr	r1, [pc, #16]	@ (800b144 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b134:	4804      	ldr	r0, [pc, #16]	@ (800b148 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b136:	f7ff fe02 	bl	800ad3e <USBD_GetString>
  return USBD_StrDesc;
 800b13a:	4b02      	ldr	r3, [pc, #8]	@ (800b144 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	200039d8 	.word	0x200039d8
 800b148:	0800b950 	.word	0x0800b950

0800b14c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	6039      	str	r1, [r7, #0]
 800b156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	221a      	movs	r2, #26
 800b15c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b15e:	f000 f843 	bl	800b1e8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b162:	4b02      	ldr	r3, [pc, #8]	@ (800b16c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	20000168 	.word	0x20000168

0800b170 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	6039      	str	r1, [r7, #0]
 800b17a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b17c:	79fb      	ldrb	r3, [r7, #7]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d105      	bne.n	800b18e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	4907      	ldr	r1, [pc, #28]	@ (800b1a4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b186:	4808      	ldr	r0, [pc, #32]	@ (800b1a8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b188:	f7ff fdd9 	bl	800ad3e <USBD_GetString>
 800b18c:	e004      	b.n	800b198 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	4904      	ldr	r1, [pc, #16]	@ (800b1a4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b192:	4805      	ldr	r0, [pc, #20]	@ (800b1a8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b194:	f7ff fdd3 	bl	800ad3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b198:	4b02      	ldr	r3, [pc, #8]	@ (800b1a4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	200039d8 	.word	0x200039d8
 800b1a8:	0800b964 	.word	0x0800b964

0800b1ac <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1b8:	79fb      	ldrb	r3, [r7, #7]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d105      	bne.n	800b1ca <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b1be:	683a      	ldr	r2, [r7, #0]
 800b1c0:	4907      	ldr	r1, [pc, #28]	@ (800b1e0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b1c2:	4808      	ldr	r0, [pc, #32]	@ (800b1e4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b1c4:	f7ff fdbb 	bl	800ad3e <USBD_GetString>
 800b1c8:	e004      	b.n	800b1d4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	4904      	ldr	r1, [pc, #16]	@ (800b1e0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b1ce:	4805      	ldr	r0, [pc, #20]	@ (800b1e4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b1d0:	f7ff fdb5 	bl	800ad3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1d4:	4b02      	ldr	r3, [pc, #8]	@ (800b1e0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	200039d8 	.word	0x200039d8
 800b1e4:	0800b970 	.word	0x0800b970

0800b1e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b22c <Get_SerialNum+0x44>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b230 <Get_SerialNum+0x48>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b234 <Get_SerialNum+0x4c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4413      	add	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d009      	beq.n	800b222 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b20e:	2208      	movs	r2, #8
 800b210:	4909      	ldr	r1, [pc, #36]	@ (800b238 <Get_SerialNum+0x50>)
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f000 f814 	bl	800b240 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b218:	2204      	movs	r2, #4
 800b21a:	4908      	ldr	r1, [pc, #32]	@ (800b23c <Get_SerialNum+0x54>)
 800b21c:	68b8      	ldr	r0, [r7, #8]
 800b21e:	f000 f80f 	bl	800b240 <IntToUnicode>
  }
}
 800b222:	bf00      	nop
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	1fff7590 	.word	0x1fff7590
 800b230:	1fff7594 	.word	0x1fff7594
 800b234:	1fff7598 	.word	0x1fff7598
 800b238:	2000016a 	.word	0x2000016a
 800b23c:	2000017a 	.word	0x2000017a

0800b240 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b240:	b480      	push	{r7}
 800b242:	b087      	sub	sp, #28
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	4613      	mov	r3, r2
 800b24c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b252:	2300      	movs	r3, #0
 800b254:	75fb      	strb	r3, [r7, #23]
 800b256:	e027      	b.n	800b2a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	0f1b      	lsrs	r3, r3, #28
 800b25c:	2b09      	cmp	r3, #9
 800b25e:	d80b      	bhi.n	800b278 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	0f1b      	lsrs	r3, r3, #28
 800b264:	b2da      	uxtb	r2, r3
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	4619      	mov	r1, r3
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	440b      	add	r3, r1
 800b270:	3230      	adds	r2, #48	@ 0x30
 800b272:	b2d2      	uxtb	r2, r2
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	e00a      	b.n	800b28e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	0f1b      	lsrs	r3, r3, #28
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	4619      	mov	r1, r3
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	440b      	add	r3, r1
 800b288:	3237      	adds	r2, #55	@ 0x37
 800b28a:	b2d2      	uxtb	r2, r2
 800b28c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	011b      	lsls	r3, r3, #4
 800b292:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	3301      	adds	r3, #1
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	4413      	add	r3, r2
 800b29e:	2200      	movs	r2, #0
 800b2a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	75fb      	strb	r3, [r7, #23]
 800b2a8:	7dfa      	ldrb	r2, [r7, #23]
 800b2aa:	79fb      	ldrb	r3, [r7, #7]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d3d3      	bcc.n	800b258 <IntToUnicode+0x18>
  }
}
 800b2b0:	bf00      	nop
 800b2b2:	bf00      	nop
 800b2b4:	371c      	adds	r7, #28
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
	...

0800b2c0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b098      	sub	sp, #96	@ 0x60
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b2c8:	f107 030c 	add.w	r3, r7, #12
 800b2cc:	2254      	movs	r2, #84	@ 0x54
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 faf9 	bl	800b8c8 <memset>
  if(pcdHandle->Instance==USB)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a15      	ldr	r2, [pc, #84]	@ (800b330 <HAL_PCD_MspInit+0x70>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d122      	bne.n	800b326 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b2e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b2e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b2ea:	f107 030c 	add.w	r3, r7, #12
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7f9 fdaa 	bl	8004e48 <HAL_RCCEx_PeriphCLKConfig>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b2fa:	f7f5 fa37 	bl	800076c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b334 <HAL_PCD_MspInit+0x74>)
 800b300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b302:	4a0c      	ldr	r2, [pc, #48]	@ (800b334 <HAL_PCD_MspInit+0x74>)
 800b304:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b308:	6593      	str	r3, [r2, #88]	@ 0x58
 800b30a:	4b0a      	ldr	r3, [pc, #40]	@ (800b334 <HAL_PCD_MspInit+0x74>)
 800b30c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b30e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b312:	60bb      	str	r3, [r7, #8]
 800b314:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b316:	2200      	movs	r2, #0
 800b318:	2100      	movs	r1, #0
 800b31a:	2014      	movs	r0, #20
 800b31c:	f7f5 ffa7 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b320:	2014      	movs	r0, #20
 800b322:	f7f5 ffbe 	bl	80012a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b326:	bf00      	nop
 800b328:	3760      	adds	r7, #96	@ 0x60
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	40005c00 	.word	0x40005c00
 800b334:	40021000 	.word	0x40021000

0800b338 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b34c:	4619      	mov	r1, r3
 800b34e:	4610      	mov	r0, r2
 800b350:	f7fe fd58 	bl	8009e04 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	460b      	mov	r3, r1
 800b366:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b36e:	78fa      	ldrb	r2, [r7, #3]
 800b370:	6879      	ldr	r1, [r7, #4]
 800b372:	4613      	mov	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	440b      	add	r3, r1
 800b37c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	78fb      	ldrb	r3, [r7, #3]
 800b384:	4619      	mov	r1, r3
 800b386:	f7fe fd92 	bl	8009eae <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b38a:	bf00      	nop
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b082      	sub	sp, #8
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	460b      	mov	r3, r1
 800b39c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b3a4:	78fa      	ldrb	r2, [r7, #3]
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4413      	add	r3, r2
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	440b      	add	r3, r1
 800b3b2:	3324      	adds	r3, #36	@ 0x24
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	78fb      	ldrb	r3, [r7, #3]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	f7fe fddb 	bl	8009f74 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b3be:	bf00      	nop
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe feef 	bl	800a1b8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b3da:	bf00      	nop
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	795b      	ldrb	r3, [r3, #5]
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d001      	beq.n	800b3fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b3f6:	f7f5 f9b9 	bl	800076c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b400:	7bfa      	ldrb	r2, [r7, #15]
 800b402:	4611      	mov	r1, r2
 800b404:	4618      	mov	r0, r3
 800b406:	f7fe fe99 	bl	800a13c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b410:	4618      	mov	r0, r3
 800b412:	f7fe fe45 	bl	800a0a0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b416:	bf00      	nop
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
	...

0800b420 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe fe94 	bl	800a15c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	7a5b      	ldrb	r3, [r3, #9]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d005      	beq.n	800b448 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b43c:	4b04      	ldr	r3, [pc, #16]	@ (800b450 <HAL_PCD_SuspendCallback+0x30>)
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	4a03      	ldr	r2, [pc, #12]	@ (800b450 <HAL_PCD_SuspendCallback+0x30>)
 800b442:	f043 0306 	orr.w	r3, r3, #6
 800b446:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b448:	bf00      	nop
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	e000ed00 	.word	0xe000ed00

0800b454 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	7a5b      	ldrb	r3, [r3, #9]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b464:	4b08      	ldr	r3, [pc, #32]	@ (800b488 <HAL_PCD_ResumeCallback+0x34>)
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	4a07      	ldr	r2, [pc, #28]	@ (800b488 <HAL_PCD_ResumeCallback+0x34>)
 800b46a:	f023 0306 	bic.w	r3, r3, #6
 800b46e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b470:	f000 f9f8 	bl	800b864 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe fe84 	bl	800a188 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	e000ed00 	.word	0xe000ed00

0800b48c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b494:	4a2b      	ldr	r2, [pc, #172]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a29      	ldr	r2, [pc, #164]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b4a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b4a4:	4b27      	ldr	r3, [pc, #156]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b4a6:	4a28      	ldr	r2, [pc, #160]	@ (800b548 <USBD_LL_Init+0xbc>)
 800b4a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b4aa:	4b26      	ldr	r3, [pc, #152]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b4ac:	2208      	movs	r2, #8
 800b4ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b4b0:	4b24      	ldr	r3, [pc, #144]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b4b6:	4b23      	ldr	r3, [pc, #140]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b4bc:	4b21      	ldr	r3, [pc, #132]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b4c2:	4b20      	ldr	r3, [pc, #128]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b4c8:	4b1e      	ldr	r3, [pc, #120]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b4ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b4d4:	481b      	ldr	r0, [pc, #108]	@ (800b544 <USBD_LL_Init+0xb8>)
 800b4d6:	f7f7 f9c9 	bl	800286c <HAL_PCD_Init>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d001      	beq.n	800b4e4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b4e0:	f7f5 f944 	bl	800076c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b4ea:	2318      	movs	r3, #24
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	f7f8 fe82 	bl	80041f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b4fa:	2358      	movs	r3, #88	@ 0x58
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	2180      	movs	r1, #128	@ 0x80
 800b500:	f7f8 fe7a 	bl	80041f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b50a:	23c0      	movs	r3, #192	@ 0xc0
 800b50c:	2200      	movs	r2, #0
 800b50e:	2181      	movs	r1, #129	@ 0x81
 800b510:	f7f8 fe72 	bl	80041f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b51a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b51e:	2200      	movs	r2, #0
 800b520:	2101      	movs	r1, #1
 800b522:	f7f8 fe69 	bl	80041f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b52c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b530:	2200      	movs	r2, #0
 800b532:	2182      	movs	r1, #130	@ 0x82
 800b534:	f7f8 fe60 	bl	80041f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20003bd8 	.word	0x20003bd8
 800b548:	40005c00 	.word	0x40005c00

0800b54c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b558:	2300      	movs	r3, #0
 800b55a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b562:	4618      	mov	r0, r3
 800b564:	f7f7 fa50 	bl	8002a08 <HAL_PCD_Start>
 800b568:	4603      	mov	r3, r0
 800b56a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 f97e 	bl	800b870 <USBD_Get_USB_Status>
 800b574:	4603      	mov	r3, r0
 800b576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b578:	7bbb      	ldrb	r3, [r7, #14]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b084      	sub	sp, #16
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
 800b58a:	4608      	mov	r0, r1
 800b58c:	4611      	mov	r1, r2
 800b58e:	461a      	mov	r2, r3
 800b590:	4603      	mov	r3, r0
 800b592:	70fb      	strb	r3, [r7, #3]
 800b594:	460b      	mov	r3, r1
 800b596:	70bb      	strb	r3, [r7, #2]
 800b598:	4613      	mov	r3, r2
 800b59a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b5aa:	78bb      	ldrb	r3, [r7, #2]
 800b5ac:	883a      	ldrh	r2, [r7, #0]
 800b5ae:	78f9      	ldrb	r1, [r7, #3]
 800b5b0:	f7f7 fb97 	bl	8002ce2 <HAL_PCD_EP_Open>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 f958 	bl	800b870 <USBD_Get_USB_Status>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b084      	sub	sp, #16
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b5e8:	78fa      	ldrb	r2, [r7, #3]
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7f7 fbd5 	bl	8002d9c <HAL_PCD_EP_Close>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 f939 	bl	800b870 <USBD_Get_USB_Status>
 800b5fe:	4603      	mov	r3, r0
 800b600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b602:	7bbb      	ldrb	r3, [r7, #14]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	460b      	mov	r3, r1
 800b616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b626:	78fa      	ldrb	r2, [r7, #3]
 800b628:	4611      	mov	r1, r2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7f7 fc7e 	bl	8002f2c <HAL_PCD_EP_SetStall>
 800b630:	4603      	mov	r3, r0
 800b632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b634:	7bfb      	ldrb	r3, [r7, #15]
 800b636:	4618      	mov	r0, r3
 800b638:	f000 f91a 	bl	800b870 <USBD_Get_USB_Status>
 800b63c:	4603      	mov	r3, r0
 800b63e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b640:	7bbb      	ldrb	r3, [r7, #14]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	460b      	mov	r3, r1
 800b654:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b65a:	2300      	movs	r3, #0
 800b65c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b664:	78fa      	ldrb	r2, [r7, #3]
 800b666:	4611      	mov	r1, r2
 800b668:	4618      	mov	r0, r3
 800b66a:	f7f7 fcb1 	bl	8002fd0 <HAL_PCD_EP_ClrStall>
 800b66e:	4603      	mov	r3, r0
 800b670:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b672:	7bfb      	ldrb	r3, [r7, #15]
 800b674:	4618      	mov	r0, r3
 800b676:	f000 f8fb 	bl	800b870 <USBD_Get_USB_Status>
 800b67a:	4603      	mov	r3, r0
 800b67c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b69a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b69c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	da0b      	bge.n	800b6bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b6a4:	78fb      	ldrb	r3, [r7, #3]
 800b6a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6aa:	68f9      	ldr	r1, [r7, #12]
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	4413      	add	r3, r2
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	440b      	add	r3, r1
 800b6b6:	3312      	adds	r3, #18
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	e00b      	b.n	800b6d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b6bc:	78fb      	ldrb	r3, [r7, #3]
 800b6be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6c2:	68f9      	ldr	r1, [r7, #12]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	00db      	lsls	r3, r3, #3
 800b6cc:	440b      	add	r3, r1
 800b6ce:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b6d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b6fa:	78fa      	ldrb	r2, [r7, #3]
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7f7 facb 	bl	8002c9a <HAL_PCD_SetAddress>
 800b704:	4603      	mov	r3, r0
 800b706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b708:	7bfb      	ldrb	r3, [r7, #15]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 f8b0 	bl	800b870 <USBD_Get_USB_Status>
 800b710:	4603      	mov	r3, r0
 800b712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b714:	7bbb      	ldrb	r3, [r7, #14]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b086      	sub	sp, #24
 800b722:	af00      	add	r7, sp, #0
 800b724:	60f8      	str	r0, [r7, #12]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
 800b72a:	460b      	mov	r3, r1
 800b72c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b73c:	7af9      	ldrb	r1, [r7, #11]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	f7f7 fbbc 	bl	8002ebe <HAL_PCD_EP_Transmit>
 800b746:	4603      	mov	r3, r0
 800b748:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f000 f88f 	bl	800b870 <USBD_Get_USB_Status>
 800b752:	4603      	mov	r3, r0
 800b754:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b756:	7dbb      	ldrb	r3, [r7, #22]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	607a      	str	r2, [r7, #4]
 800b76a:	603b      	str	r3, [r7, #0]
 800b76c:	460b      	mov	r3, r1
 800b76e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b770:	2300      	movs	r3, #0
 800b772:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b77e:	7af9      	ldrb	r1, [r7, #11]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	f7f7 fb52 	bl	8002e2c <HAL_PCD_EP_Receive>
 800b788:	4603      	mov	r3, r0
 800b78a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b78c:	7dfb      	ldrb	r3, [r7, #23]
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 f86e 	bl	800b870 <USBD_Get_USB_Status>
 800b794:	4603      	mov	r3, r0
 800b796:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b798:	7dbb      	ldrb	r3, [r7, #22]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3718      	adds	r7, #24
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b082      	sub	sp, #8
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b7b4:	78fa      	ldrb	r2, [r7, #3]
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7f7 fb68 	bl	8002e8e <HAL_PCD_EP_GetRxCount>
 800b7be:	4603      	mov	r3, r0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b7d4:	78fb      	ldrb	r3, [r7, #3]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <HAL_PCDEx_LPM_Callback+0x18>
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d013      	beq.n	800b806 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b7de:	e023      	b.n	800b828 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	7a5b      	ldrb	r3, [r3, #9]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d007      	beq.n	800b7f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b7e8:	f000 f83c 	bl	800b864 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7ec:	4b10      	ldr	r3, [pc, #64]	@ (800b830 <HAL_PCDEx_LPM_Callback+0x68>)
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	4a0f      	ldr	r2, [pc, #60]	@ (800b830 <HAL_PCDEx_LPM_Callback+0x68>)
 800b7f2:	f023 0306 	bic.w	r3, r3, #6
 800b7f6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fe fcc2 	bl	800a188 <USBD_LL_Resume>
    break;
 800b804:	e010      	b.n	800b828 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fe fca5 	bl	800a15c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	7a5b      	ldrb	r3, [r3, #9]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d005      	beq.n	800b826 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b81a:	4b05      	ldr	r3, [pc, #20]	@ (800b830 <HAL_PCDEx_LPM_Callback+0x68>)
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	4a04      	ldr	r2, [pc, #16]	@ (800b830 <HAL_PCDEx_LPM_Callback+0x68>)
 800b820:	f043 0306 	orr.w	r3, r3, #6
 800b824:	6113      	str	r3, [r2, #16]
    break;
 800b826:	bf00      	nop
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	e000ed00 	.word	0xe000ed00

0800b834 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b83c:	4b03      	ldr	r3, [pc, #12]	@ (800b84c <USBD_static_malloc+0x18>)
}
 800b83e:	4618      	mov	r0, r3
 800b840:	370c      	adds	r7, #12
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	20003eb4 	.word	0x20003eb4

0800b850 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]

}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b868:	f7f4 fd34 	bl	80002d4 <SystemClock_Config>
}
 800b86c:	bf00      	nop
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b87e:	79fb      	ldrb	r3, [r7, #7]
 800b880:	2b03      	cmp	r3, #3
 800b882:	d817      	bhi.n	800b8b4 <USBD_Get_USB_Status+0x44>
 800b884:	a201      	add	r2, pc, #4	@ (adr r2, 800b88c <USBD_Get_USB_Status+0x1c>)
 800b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88a:	bf00      	nop
 800b88c:	0800b89d 	.word	0x0800b89d
 800b890:	0800b8a3 	.word	0x0800b8a3
 800b894:	0800b8a9 	.word	0x0800b8a9
 800b898:	0800b8af 	.word	0x0800b8af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a0:	e00b      	b.n	800b8ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a6:	e008      	b.n	800b8ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ac:	e005      	b.n	800b8ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b2:	e002      	b.n	800b8ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b8:	bf00      	nop
  }
  return usb_status;
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3714      	adds	r7, #20
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <memset>:
 800b8c8:	4402      	add	r2, r0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d100      	bne.n	800b8d2 <memset+0xa>
 800b8d0:	4770      	bx	lr
 800b8d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b8d6:	e7f9      	b.n	800b8cc <memset+0x4>

0800b8d8 <__libc_init_array>:
 800b8d8:	b570      	push	{r4, r5, r6, lr}
 800b8da:	4d0d      	ldr	r5, [pc, #52]	@ (800b910 <__libc_init_array+0x38>)
 800b8dc:	4c0d      	ldr	r4, [pc, #52]	@ (800b914 <__libc_init_array+0x3c>)
 800b8de:	1b64      	subs	r4, r4, r5
 800b8e0:	10a4      	asrs	r4, r4, #2
 800b8e2:	2600      	movs	r6, #0
 800b8e4:	42a6      	cmp	r6, r4
 800b8e6:	d109      	bne.n	800b8fc <__libc_init_array+0x24>
 800b8e8:	4d0b      	ldr	r5, [pc, #44]	@ (800b918 <__libc_init_array+0x40>)
 800b8ea:	4c0c      	ldr	r4, [pc, #48]	@ (800b91c <__libc_init_array+0x44>)
 800b8ec:	f000 f818 	bl	800b920 <_init>
 800b8f0:	1b64      	subs	r4, r4, r5
 800b8f2:	10a4      	asrs	r4, r4, #2
 800b8f4:	2600      	movs	r6, #0
 800b8f6:	42a6      	cmp	r6, r4
 800b8f8:	d105      	bne.n	800b906 <__libc_init_array+0x2e>
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}
 800b8fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b900:	4798      	blx	r3
 800b902:	3601      	adds	r6, #1
 800b904:	e7ee      	b.n	800b8e4 <__libc_init_array+0xc>
 800b906:	f855 3b04 	ldr.w	r3, [r5], #4
 800b90a:	4798      	blx	r3
 800b90c:	3601      	adds	r6, #1
 800b90e:	e7f2      	b.n	800b8f6 <__libc_init_array+0x1e>
 800b910:	0800b990 	.word	0x0800b990
 800b914:	0800b990 	.word	0x0800b990
 800b918:	0800b990 	.word	0x0800b990
 800b91c:	0800b994 	.word	0x0800b994

0800b920 <_init>:
 800b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b922:	bf00      	nop
 800b924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b926:	bc08      	pop	{r3}
 800b928:	469e      	mov	lr, r3
 800b92a:	4770      	bx	lr

0800b92c <_fini>:
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92e:	bf00      	nop
 800b930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b932:	bc08      	pop	{r3}
 800b934:	469e      	mov	lr, r3
 800b936:	4770      	bx	lr
