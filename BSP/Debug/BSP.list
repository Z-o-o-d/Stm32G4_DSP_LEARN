
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007dac  08007dac  00008dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e04  08007e04  00009184  2**0
                  CONTENTS
  4 .ARM          00000000  08007e04  08007e04  00009184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e04  08007e04  00009184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e04  08007e04  00008e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e08  08007e08  00008e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08007e0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  20000184  08007f90  00009184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001374  08007f90  00009374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e875  00000000  00000000  000091b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3b  00000000  00000000  00017a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0001a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095a  00000000  00000000  0001b520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb33  00000000  00000000  0001be7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010406  00000000  00000000  0003a9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4af8  00000000  00000000  0004adb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff8ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003134  00000000  00000000  000ff8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00102a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007d94 	.word	0x08007d94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08007d94 	.word	0x08007d94

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f933 	bl	8000486 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f806 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f846 	bl	80002b4 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000228:	f007 f8a4 	bl	8007374 <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <main+0x14>

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b094      	sub	sp, #80	@ 0x50
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2238      	movs	r2, #56	@ 0x38
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f007 fd7c 	bl	8007d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000252:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000256:	f002 f965 	bl	8002524 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800025a:	2322      	movs	r3, #34	@ 0x22
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000262:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000264:	2340      	movs	r3, #64	@ 0x40
 8000266:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026c:	2300      	movs	r3, #0
 800026e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	4618      	mov	r0, r3
 8000276:	f002 fa09 	bl	800268c <HAL_RCC_OscConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000280:	f000 f862 	bl	8000348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	230f      	movs	r3, #15
 8000286:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000288:	2301      	movs	r3, #1
 800028a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f002 fd07 	bl	8002cb0 <HAL_RCC_ClockConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80002a8:	f000 f84e 	bl	8000348 <Error_Handler>
  }
}
 80002ac:	bf00      	nop
 80002ae:	3750      	adds	r7, #80	@ 0x50
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	f107 030c 	add.w	r3, r7, #12
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000340 <MX_GPIO_Init+0x8c>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000340 <MX_GPIO_Init+0x8c>)
 80002d0:	f043 0320 	orr.w	r3, r3, #32
 80002d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000340 <MX_GPIO_Init+0x8c>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <MX_GPIO_Init+0x8c>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002e6:	4a16      	ldr	r2, [pc, #88]	@ (8000340 <MX_GPIO_Init+0x8c>)
 80002e8:	f043 0302 	orr.w	r3, r3, #2
 80002ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002ee:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <MX_GPIO_Init+0x8c>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f2:	f003 0302 	and.w	r3, r3, #2
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <MX_GPIO_Init+0x8c>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002fe:	4a10      	ldr	r2, [pc, #64]	@ (8000340 <MX_GPIO_Init+0x8c>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <MX_GPIO_Init+0x8c>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	603b      	str	r3, [r7, #0]
 8000310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2101      	movs	r1, #1
 8000316:	480b      	ldr	r0, [pc, #44]	@ (8000344 <MX_GPIO_Init+0x90>)
 8000318:	f000 fbb8 	bl	8000a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800031c:	2301      	movs	r3, #1
 800031e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000320:	2301      	movs	r3, #1
 8000322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000328:	2300      	movs	r3, #0
 800032a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032c:	f107 030c 	add.w	r3, r7, #12
 8000330:	4619      	mov	r1, r3
 8000332:	4804      	ldr	r0, [pc, #16]	@ (8000344 <MX_GPIO_Init+0x90>)
 8000334:	f000 fa28 	bl	8000788 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000338:	bf00      	nop
 800033a:	3720      	adds	r7, #32
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40021000 	.word	0x40021000
 8000344:	48000400 	.word	0x48000400

08000348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034c:	b672      	cpsid	i
}
 800034e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <Error_Handler+0x8>

08000354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <HAL_MspInit+0x44>)
 800035c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800035e:	4a0e      	ldr	r2, [pc, #56]	@ (8000398 <HAL_MspInit+0x44>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6613      	str	r3, [r2, #96]	@ 0x60
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <HAL_MspInit+0x44>)
 8000368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000372:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <HAL_MspInit+0x44>)
 8000374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000376:	4a08      	ldr	r2, [pc, #32]	@ (8000398 <HAL_MspInit+0x44>)
 8000378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800037c:	6593      	str	r3, [r2, #88]	@ 0x58
 800037e:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <HAL_MspInit+0x44>)
 8000380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800038a:	f002 f96f 	bl	800266c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <NMI_Handler+0x4>

080003a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <HardFault_Handler+0x4>

080003ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <MemManage_Handler+0x4>

080003b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <BusFault_Handler+0x4>

080003bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <UsageFault_Handler+0x4>

080003c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f2:	f000 f89b 	bl	800052c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000400:	4802      	ldr	r0, [pc, #8]	@ (800040c <USB_LP_IRQHandler+0x10>)
 8000402:	f000 fc4b 	bl	8000c9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000e78 	.word	0x20000e78

08000410 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <SystemInit+0x20>)
 8000416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800041a:	4a05      	ldr	r2, [pc, #20]	@ (8000430 <SystemInit+0x20>)
 800041c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	@ (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000438:	f7ff ffea 	bl	8000410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	@ (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	@ (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	@ (8000478 <LoopForever+0xe>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	@ (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000462:	f007 fc73 	bl	8007d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000466:	f7ff fed7 	bl	8000218 <main>

0800046a <LoopForever>:

LoopForever:
    b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000478:	08007e0c 	.word	0x08007e0c
  ldr r2, =_sbss
 800047c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000480:	20001374 	.word	0x20001374

08000484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC1_2_IRQHandler>

08000486 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800048c:	2300      	movs	r3, #0
 800048e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000490:	2003      	movs	r0, #3
 8000492:	f000 f939 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000496:	200f      	movs	r0, #15
 8000498:	f000 f80e 	bl	80004b8 <HAL_InitTick>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d002      	beq.n	80004a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004a2:	2301      	movs	r3, #1
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	e001      	b.n	80004ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004a8:	f7ff ff54 	bl	8000354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ac:	79fb      	ldrb	r3, [r7, #7]

}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80004c4:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <HAL_InitTick+0x68>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d022      	beq.n	8000512 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80004cc:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <HAL_InitTick+0x6c>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b13      	ldr	r3, [pc, #76]	@ (8000520 <HAL_InitTick+0x68>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80004dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f944 	bl	800076e <HAL_SYSTICK_Config>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10f      	bne.n	800050c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b0f      	cmp	r3, #15
 80004f0:	d809      	bhi.n	8000506 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f2:	2200      	movs	r2, #0
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	f04f 30ff 	mov.w	r0, #4294967295
 80004fa:	f000 f910 	bl	800071e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <HAL_InitTick+0x70>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6013      	str	r3, [r2, #0]
 8000504:	e007      	b.n	8000516 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000506:	2301      	movs	r3, #1
 8000508:	73fb      	strb	r3, [r7, #15]
 800050a:	e004      	b.n	8000516 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800050c:	2301      	movs	r3, #1
 800050e:	73fb      	strb	r3, [r7, #15]
 8000510:	e001      	b.n	8000516 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000516:	7bfb      	ldrb	r3, [r7, #15]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000008 	.word	0x20000008
 8000524:	20000000 	.word	0x20000000
 8000528:	20000004 	.word	0x20000004

0800052c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <HAL_IncTick+0x1c>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <HAL_IncTick+0x20>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4413      	add	r3, r2
 800053a:	4a03      	ldr	r2, [pc, #12]	@ (8000548 <HAL_IncTick+0x1c>)
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	200001a0 	.word	0x200001a0
 800054c:	20000008 	.word	0x20000008

08000550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return uwTick;
 8000554:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <HAL_GetTick+0x14>)
 8000556:	681b      	ldr	r3, [r3, #0]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	200001a0 	.word	0x200001a0

08000568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000584:	4013      	ands	r3, r2
 8000586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000590:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059a:	4a04      	ldr	r2, [pc, #16]	@ (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	60d3      	str	r3, [r2, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <__NVIC_GetPriorityGrouping+0x18>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	f003 0307 	and.w	r3, r3, #7
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db0b      	blt.n	80005f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	f003 021f 	and.w	r2, r3, #31
 80005e4:	4907      	ldr	r1, [pc, #28]	@ (8000604 <__NVIC_EnableIRQ+0x38>)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	095b      	lsrs	r3, r3, #5
 80005ec:	2001      	movs	r0, #1
 80005ee:	fa00 f202 	lsl.w	r2, r0, r2
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e100 	.word	0xe000e100

08000608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db0a      	blt.n	8000632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	b2da      	uxtb	r2, r3
 8000620:	490c      	ldr	r1, [pc, #48]	@ (8000654 <__NVIC_SetPriority+0x4c>)
 8000622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	440b      	add	r3, r1
 800062c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000630:	e00a      	b.n	8000648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4908      	ldr	r1, [pc, #32]	@ (8000658 <__NVIC_SetPriority+0x50>)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	3b04      	subs	r3, #4
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	440b      	add	r3, r1
 8000646:	761a      	strb	r2, [r3, #24]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	@ 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	f1c3 0307 	rsb	r3, r3, #7
 8000676:	2b04      	cmp	r3, #4
 8000678:	bf28      	it	cs
 800067a:	2304      	movcs	r3, #4
 800067c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3304      	adds	r3, #4
 8000682:	2b06      	cmp	r3, #6
 8000684:	d902      	bls.n	800068c <NVIC_EncodePriority+0x30>
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3b03      	subs	r3, #3
 800068a:	e000      	b.n	800068e <NVIC_EncodePriority+0x32>
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	f04f 32ff 	mov.w	r2, #4294967295
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43da      	mvns	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	401a      	ands	r2, r3
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a4:	f04f 31ff 	mov.w	r1, #4294967295
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	43d9      	mvns	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	4313      	orrs	r3, r2
         );
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3724      	adds	r7, #36	@ 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006d4:	d301      	bcc.n	80006da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00f      	b.n	80006fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006da:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <SysTick_Config+0x40>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3b01      	subs	r3, #1
 80006e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006e2:	210f      	movs	r1, #15
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295
 80006e8:	f7ff ff8e 	bl	8000608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ec:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <SysTick_Config+0x40>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f2:	4b04      	ldr	r3, [pc, #16]	@ (8000704 <SysTick_Config+0x40>)
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	e000e010 	.word	0xe000e010

08000708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff29 	bl	8000568 <__NVIC_SetPriorityGrouping>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b086      	sub	sp, #24
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800072c:	f7ff ff40 	bl	80005b0 <__NVIC_GetPriorityGrouping>
 8000730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f7ff ff90 	bl	800065c <NVIC_EncodePriority>
 800073c:	4602      	mov	r2, r0
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5f 	bl	8000608 <__NVIC_SetPriority>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff33 	bl	80005cc <__NVIC_EnableIRQ>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ffa4 	bl	80006c4 <SysTick_Config>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000796:	e15a      	b.n	8000a4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	2101      	movs	r1, #1
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	f000 814c 	beq.w	8000a48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f003 0303 	and.w	r3, r3, #3
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d005      	beq.n	80007c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d130      	bne.n	800082a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	2203      	movs	r2, #3
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	43db      	mvns	r3, r3
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4013      	ands	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	68da      	ldr	r2, [r3, #12]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007fe:	2201      	movs	r2, #1
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	4013      	ands	r3, r2
 800080c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	091b      	lsrs	r3, r3, #4
 8000814:	f003 0201 	and.w	r2, r3, #1
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	4313      	orrs	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 0303 	and.w	r3, r3, #3
 8000832:	2b03      	cmp	r3, #3
 8000834:	d017      	beq.n	8000866 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	2203      	movs	r2, #3
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4013      	ands	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4313      	orrs	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 0303 	and.w	r3, r3, #3
 800086e:	2b02      	cmp	r3, #2
 8000870:	d123      	bne.n	80008ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	08da      	lsrs	r2, r3, #3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3208      	adds	r2, #8
 800087a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	220f      	movs	r2, #15
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	691a      	ldr	r2, [r3, #16]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	08da      	lsrs	r2, r3, #3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3208      	adds	r2, #8
 80008b4:	6939      	ldr	r1, [r7, #16]
 80008b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	2203      	movs	r2, #3
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 0203 	and.w	r2, r3, #3
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f000 80a6 	beq.w	8000a48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fc:	4b5b      	ldr	r3, [pc, #364]	@ (8000a6c <HAL_GPIO_Init+0x2e4>)
 80008fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000900:	4a5a      	ldr	r2, [pc, #360]	@ (8000a6c <HAL_GPIO_Init+0x2e4>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6613      	str	r3, [r2, #96]	@ 0x60
 8000908:	4b58      	ldr	r3, [pc, #352]	@ (8000a6c <HAL_GPIO_Init+0x2e4>)
 800090a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000914:	4a56      	ldr	r2, [pc, #344]	@ (8000a70 <HAL_GPIO_Init+0x2e8>)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	089b      	lsrs	r3, r3, #2
 800091a:	3302      	adds	r3, #2
 800091c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	220f      	movs	r2, #15
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800093e:	d01f      	beq.n	8000980 <HAL_GPIO_Init+0x1f8>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a4c      	ldr	r2, [pc, #304]	@ (8000a74 <HAL_GPIO_Init+0x2ec>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d019      	beq.n	800097c <HAL_GPIO_Init+0x1f4>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a78 <HAL_GPIO_Init+0x2f0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d013      	beq.n	8000978 <HAL_GPIO_Init+0x1f0>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a4a      	ldr	r2, [pc, #296]	@ (8000a7c <HAL_GPIO_Init+0x2f4>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d00d      	beq.n	8000974 <HAL_GPIO_Init+0x1ec>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a49      	ldr	r2, [pc, #292]	@ (8000a80 <HAL_GPIO_Init+0x2f8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d007      	beq.n	8000970 <HAL_GPIO_Init+0x1e8>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a48      	ldr	r2, [pc, #288]	@ (8000a84 <HAL_GPIO_Init+0x2fc>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d101      	bne.n	800096c <HAL_GPIO_Init+0x1e4>
 8000968:	2305      	movs	r3, #5
 800096a:	e00a      	b.n	8000982 <HAL_GPIO_Init+0x1fa>
 800096c:	2306      	movs	r3, #6
 800096e:	e008      	b.n	8000982 <HAL_GPIO_Init+0x1fa>
 8000970:	2304      	movs	r3, #4
 8000972:	e006      	b.n	8000982 <HAL_GPIO_Init+0x1fa>
 8000974:	2303      	movs	r3, #3
 8000976:	e004      	b.n	8000982 <HAL_GPIO_Init+0x1fa>
 8000978:	2302      	movs	r3, #2
 800097a:	e002      	b.n	8000982 <HAL_GPIO_Init+0x1fa>
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <HAL_GPIO_Init+0x1fa>
 8000980:	2300      	movs	r3, #0
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	f002 0203 	and.w	r2, r2, #3
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	4093      	lsls	r3, r2
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000992:	4937      	ldr	r1, [pc, #220]	@ (8000a70 <HAL_GPIO_Init+0x2e8>)
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	3302      	adds	r3, #2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009a0:	4b39      	ldr	r3, [pc, #228]	@ (8000a88 <HAL_GPIO_Init+0x300>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d003      	beq.n	80009c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009c4:	4a30      	ldr	r2, [pc, #192]	@ (8000a88 <HAL_GPIO_Init+0x300>)
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000a88 <HAL_GPIO_Init+0x300>)
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	43db      	mvns	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009ee:	4a26      	ldr	r2, [pc, #152]	@ (8000a88 <HAL_GPIO_Init+0x300>)
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80009f4:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <HAL_GPIO_Init+0x300>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a18:	4a1b      	ldr	r2, [pc, #108]	@ (8000a88 <HAL_GPIO_Init+0x300>)
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <HAL_GPIO_Init+0x300>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a42:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <HAL_GPIO_Init+0x300>)
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	fa22 f303 	lsr.w	r3, r2, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	f47f ae9d 	bne.w	8000798 <HAL_GPIO_Init+0x10>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	371c      	adds	r7, #28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010000 	.word	0x40010000
 8000a74:	48000400 	.word	0x48000400
 8000a78:	48000800 	.word	0x48000800
 8000a7c:	48000c00 	.word	0x48000c00
 8000a80:	48001000 	.word	0x48001000
 8000a84:	48001400 	.word	0x48001400
 8000a88:	40010400 	.word	0x40010400

08000a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	807b      	strh	r3, [r7, #2]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a9c:	787b      	ldrb	r3, [r7, #1]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aa2:	887a      	ldrh	r2, [r7, #2]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000aa8:	e002      	b.n	8000ab0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000aaa:	887a      	ldrh	r2, [r7, #2]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e0c0      	b.n	8000c50 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d106      	bne.n	8000ae8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f006 fe26 	bl	8007734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2203      	movs	r2, #3
 8000aec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 fcc6 	bl	8003486 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
 8000afe:	e03e      	b.n	8000b7e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b00:	7bfa      	ldrb	r2, [r7, #15]
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	4613      	mov	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3311      	adds	r3, #17
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b14:	7bfa      	ldrb	r2, [r7, #15]
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	3310      	adds	r3, #16
 8000b24:	7bfa      	ldrb	r2, [r7, #15]
 8000b26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b28:	7bfa      	ldrb	r2, [r7, #15]
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	440b      	add	r3, r1
 8000b36:	3313      	adds	r3, #19
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	4613      	mov	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3320      	adds	r3, #32
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	4613      	mov	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3324      	adds	r3, #36	@ 0x24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	440b      	add	r3, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	73fb      	strb	r3, [r7, #15]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	791b      	ldrb	r3, [r3, #4]
 8000b82:	7bfa      	ldrb	r2, [r7, #15]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d3bb      	bcc.n	8000b00 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	e044      	b.n	8000c18 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b8e:	7bfa      	ldrb	r2, [r7, #15]
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ba4:	7bfa      	ldrb	r2, [r7, #15]
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000bd0:	7bfa      	ldrb	r2, [r7, #15]
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	440b      	add	r3, r1
 8000bde:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000be6:	7bfa      	ldrb	r2, [r7, #15]
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bfc:	7bfa      	ldrb	r2, [r7, #15]
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	440b      	add	r3, r1
 8000c0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	3301      	adds	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	791b      	ldrb	r3, [r3, #4]
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d3b5      	bcc.n	8000b8e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000c2e:	f002 fc45 	bl	80034bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7a9b      	ldrb	r3, [r3, #10]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d102      	bne.n	8000c4e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f001 fc40 	bl	80024ce <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d101      	bne.n	8000c6e <HAL_PCD_Start+0x16>
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	e012      	b.n	8000c94 <HAL_PCD_Start+0x3c>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 fbec 	bl	8003458 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f004 feac 	bl	80059e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 feb1 	bl	8005a10 <USB_ReadInterrupts>
 8000cae:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f000 fb04 	bl	80012c8 <PCD_EP_ISR_Handler>

    return;
 8000cc0:	e110      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d013      	beq.n	8000cf4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f006 fdb6 	bl	8007856 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000cea:	2100      	movs	r1, #0
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f8fc 	bl	8000eea <HAL_PCD_SetAddress>

    return;
 8000cf2:	e0f7      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00c      	beq.n	8000d18 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000d10:	b292      	uxth	r2, r2
 8000d12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000d16:	e0e5      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00c      	beq.n	8000d3c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000d34:	b292      	uxth	r2, r2
 8000d36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000d3a:	e0d3      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d034      	beq.n	8000db0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0204 	bic.w	r2, r2, #4
 8000d58:	b292      	uxth	r2, r2
 8000d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0208 	bic.w	r2, r2, #8
 8000d70:	b292      	uxth	r2, r2
 8000d72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d107      	bne.n	8000d90 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f006 ff56 	bl	8007c3c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f006 fd99 	bl	80078c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000da8:	b292      	uxth	r2, r2
 8000daa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000dae:	e099      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d027      	beq.n	8000e0a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f042 0208 	orr.w	r2, r2, #8
 8000dcc:	b292      	uxth	r2, r2
 8000dce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000de4:	b292      	uxth	r2, r2
 8000de6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0204 	orr.w	r2, r2, #4
 8000dfc:	b292      	uxth	r2, r2
 8000dfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f006 fd46 	bl	8007894 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000e08:	e06c      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d040      	beq.n	8000e96 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e26:	b292      	uxth	r2, r2
 8000e28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d12b      	bne.n	8000e8e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 0204 	orr.w	r2, r2, #4
 8000e48:	b292      	uxth	r2, r2
 8000e4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 0208 	orr.w	r2, r2, #8
 8000e60:	b292      	uxth	r2, r2
 8000e62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000e84:	2101      	movs	r1, #1
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f006 fed8 	bl	8007c3c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000e8c:	e02a      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f006 fd00 	bl	8007894 <HAL_PCD_SuspendCallback>
    return;
 8000e94:	e026      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00f      	beq.n	8000ec0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f006 fcbe 	bl	800783a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ebe:	e011      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00c      	beq.n	8000ee4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000edc:	b292      	uxth	r2, r2
 8000ede:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000ee2:	bf00      	nop
  }
}
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <HAL_PCD_SetAddress+0x1a>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e012      	b.n	8000f2a <HAL_PCD_SetAddress+0x40>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	78fa      	ldrb	r2, [r7, #3]
 8000f10:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 fd4d 	bl	80059ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4603      	mov	r3, r0
 8000f42:	70fb      	strb	r3, [r7, #3]
 8000f44:	460b      	mov	r3, r1
 8000f46:	803b      	strh	r3, [r7, #0]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da0e      	bge.n	8000f76 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	f003 0207 	and.w	r2, r3, #7
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	3310      	adds	r3, #16
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2201      	movs	r2, #1
 8000f72:	705a      	strb	r2, [r3, #1]
 8000f74:	e00e      	b.n	8000f94 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	f003 0207 	and.w	r2, r3, #7
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2200      	movs	r2, #0
 8000f92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000fa0:	883a      	ldrh	r2, [r7, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	78ba      	ldrb	r2, [r7, #2]
 8000faa:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000fac:	78bb      	ldrb	r3, [r7, #2]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d102      	bne.n	8000fb8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <HAL_PCD_EP_Open+0x94>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e00e      	b.n	8000fe4 <HAL_PCD_EP_Open+0xb2>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fa8f 	bl	80034f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8000fe2:	7afb      	ldrb	r3, [r7, #11]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	da0e      	bge.n	800101e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	f003 0207 	and.w	r2, r3, #7
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	3310      	adds	r3, #16
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2201      	movs	r2, #1
 800101a:	705a      	strb	r2, [r3, #1]
 800101c:	e00e      	b.n	800103c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	f003 0207 	and.w	r2, r3, #7
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	b2da      	uxtb	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_PCD_EP_Close+0x6a>
 8001052:	2302      	movs	r3, #2
 8001054:	e00e      	b.n	8001074 <HAL_PCD_EP_Close+0x88>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68f9      	ldr	r1, [r7, #12]
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fe0b 	bl	8003c80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	460b      	mov	r3, r1
 800108a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800108c:	7afb      	ldrb	r3, [r7, #11]
 800108e:	f003 0207 	and.w	r2, r3, #7
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2200      	movs	r2, #0
 80010ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6979      	ldr	r1, [r7, #20]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 ffc3 	bl	800405a <USB_EPStartXfer>

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	f003 0207 	and.w	r2, r3, #7
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	440b      	add	r3, r1
 80010fc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001100:	681b      	ldr	r3, [r3, #0]
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	460b      	mov	r3, r1
 800111c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800111e:	7afb      	ldrb	r3, [r7, #11]
 8001120:	f003 0207 	and.w	r2, r3, #7
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	3310      	adds	r3, #16
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2201      	movs	r2, #1
 8001158:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	b2da      	uxtb	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6979      	ldr	r1, [r7, #20]
 800116c:	4618      	mov	r0, r3
 800116e:	f002 ff74 	bl	800405a <USB_EPStartXfer>

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	7912      	ldrb	r2, [r2, #4]
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e03e      	b.n	8001218 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800119a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da0e      	bge.n	80011c0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	f003 0207 	and.w	r2, r3, #7
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	3310      	adds	r3, #16
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2201      	movs	r2, #1
 80011bc:	705a      	strb	r2, [r3, #1]
 80011be:	e00c      	b.n	80011da <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80011c0:	78fa      	ldrb	r2, [r7, #3]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2201      	movs	r2, #1
 80011de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_PCD_EP_SetStall+0x7e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e00e      	b.n	8001218 <HAL_PCD_EP_SetStall+0x9c>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68f9      	ldr	r1, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	f004 fad7 	bl	80057bc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	7912      	ldrb	r2, [r2, #4]
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e040      	b.n	80012c0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800123e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da0e      	bge.n	8001264 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	f003 0207 	and.w	r2, r3, #7
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	3310      	adds	r3, #16
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	705a      	strb	r2, [r3, #1]
 8001262:	e00e      	b.n	8001282 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	f003 0207 	and.w	r2, r3, #7
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	b2da      	uxtb	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800129a:	2b01      	cmp	r3, #1
 800129c:	d101      	bne.n	80012a2 <HAL_PCD_EP_ClrStall+0x82>
 800129e:	2302      	movs	r3, #2
 80012a0:	e00e      	b.n	80012c0 <HAL_PCD_EP_ClrStall+0xa0>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68f9      	ldr	r1, [r7, #12]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 fad4 	bl	800585e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b096      	sub	sp, #88	@ 0x58
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80012d0:	e3ad      	b.n	8001a2e <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80012de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80012ec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f040 816f 	bne.w	80015d4 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80012f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d14c      	bne.n	800139c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800130e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001312:	81fb      	strh	r3, [r7, #14]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	89fb      	ldrh	r3, [r7, #14]
 800131a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800131e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001322:	b29b      	uxth	r3, r3
 8001324:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3310      	adds	r3, #16
 800132a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001334:	b29b      	uxth	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	4413      	add	r3, r2
 8001346:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001352:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	441a      	add	r2, r3
 800135e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001360:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001362:	2100      	movs	r1, #0
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f006 fa4e 	bl	8007806 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7b1b      	ldrb	r3, [r3, #12]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 835c 	beq.w	8001a2e <PCD_EP_ISR_Handler+0x766>
 8001376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 8357 	bne.w	8001a2e <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7b1b      	ldrb	r3, [r3, #12]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800138a:	b2da      	uxtb	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	731a      	strb	r2, [r3, #12]
 800139a:	e348      	b.n	8001a2e <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013a2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80013b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d032      	beq.n	8001420 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4413      	add	r3, r2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013e0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80013ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013ee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80013f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013f2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	f004 fb5d 	bl	8005ab4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b29a      	uxth	r2, r3
 8001402:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001406:	4013      	ands	r3, r2
 8001408:	823b      	strh	r3, [r7, #16]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	8a3a      	ldrh	r2, [r7, #16]
 8001410:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001414:	b292      	uxth	r2, r2
 8001416:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f006 f9c7 	bl	80077ac <HAL_PCD_SetupStageCallback>
 800141e:	e306      	b.n	8001a2e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001420:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001424:	2b00      	cmp	r3, #0
 8001426:	f280 8302 	bge.w	8001a2e <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	b29a      	uxth	r2, r3
 8001432:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001436:	4013      	ands	r3, r2
 8001438:	83fb      	strh	r3, [r7, #30]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	8bfa      	ldrh	r2, [r7, #30]
 8001440:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001444:	b292      	uxth	r2, r2
 8001446:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001450:	b29b      	uxth	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	4413      	add	r3, r2
 8001462:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800146c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800146e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d019      	beq.n	80014ac <PCD_EP_ISR_Handler+0x1e4>
 8001478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d015      	beq.n	80014ac <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001486:	6959      	ldr	r1, [r3, #20]
 8001488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800148a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800148c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800148e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001490:	b29b      	uxth	r3, r3
 8001492:	f004 fb0f 	bl	8005ab4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	441a      	add	r2, r3
 80014a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014a2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80014a4:	2100      	movs	r1, #0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f006 f992 	bl	80077d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80014b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80014ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 82b5 	bne.w	8001a2e <PCD_EP_ISR_Handler+0x766>
 80014c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80014c8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80014cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80014d0:	f000 82ad 	beq.w	8001a2e <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4413      	add	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014fe:	b29a      	uxth	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	2b3e      	cmp	r3, #62	@ 0x3e
 800150a:	d91d      	bls.n	8001548 <PCD_EP_ISR_Handler+0x280>
 800150c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	095b      	lsrs	r3, r3, #5
 8001512:	647b      	str	r3, [r7, #68]	@ 0x44
 8001514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f003 031f 	and.w	r3, r3, #31
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <PCD_EP_ISR_Handler+0x25e>
 8001520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001522:	3b01      	subs	r3, #1
 8001524:	647b      	str	r3, [r7, #68]	@ 0x44
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	b29a      	uxth	r2, r3
 800152c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800152e:	b29b      	uxth	r3, r3
 8001530:	029b      	lsls	r3, r3, #10
 8001532:	b29b      	uxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b29b      	uxth	r3, r3
 8001538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800153c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001540:	b29a      	uxth	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	801a      	strh	r2, [r3, #0]
 8001546:	e026      	b.n	8001596 <PCD_EP_ISR_Handler+0x2ce>
 8001548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10a      	bne.n	8001566 <PCD_EP_ISR_Handler+0x29e>
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800155a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800155e:	b29a      	uxth	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	801a      	strh	r2, [r3, #0]
 8001564:	e017      	b.n	8001596 <PCD_EP_ISR_Handler+0x2ce>
 8001566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	647b      	str	r3, [r7, #68]	@ 0x44
 800156e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <PCD_EP_ISR_Handler+0x2b8>
 800157a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800157c:	3301      	adds	r3, #1
 800157e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	b29a      	uxth	r2, r3
 8001586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001588:	b29b      	uxth	r3, r3
 800158a:	029b      	lsls	r3, r3, #10
 800158c:	b29b      	uxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b29a      	uxth	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015a6:	827b      	strh	r3, [r7, #18]
 80015a8:	8a7b      	ldrh	r3, [r7, #18]
 80015aa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80015ae:	827b      	strh	r3, [r7, #18]
 80015b0:	8a7b      	ldrh	r3, [r7, #18]
 80015b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80015b6:	827b      	strh	r3, [r7, #18]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	8a7b      	ldrh	r3, [r7, #18]
 80015be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80015c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80015c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	8013      	strh	r3, [r2, #0]
 80015d2:	e22c      	b.n	8001a2e <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015e8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f280 80f6 	bge.w	80017de <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	b29a      	uxth	r2, r3
 8001604:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001608:	4013      	ands	r3, r2
 800160a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001620:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001624:	b292      	uxth	r2, r2
 8001626:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001628:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800163e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001640:	7b1b      	ldrb	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d123      	bne.n	800168e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4413      	add	r3, r2
 8001660:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800166a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800166e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 808e 	beq.w	8001794 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800167e:	6959      	ldr	r1, [r3, #20]
 8001680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001682:	88da      	ldrh	r2, [r3, #6]
 8001684:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001688:	f004 fa14 	bl	8005ab4 <USB_ReadPMA>
 800168c:	e082      	b.n	8001794 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800168e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001690:	78db      	ldrb	r3, [r3, #3]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d10a      	bne.n	80016ac <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001696:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800169a:	461a      	mov	r2, r3
 800169c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f9d3 	bl	8001a4a <HAL_PCD_EP_DB_Receive>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80016aa:	e073      	b.n	8001794 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80016c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016c6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	441a      	add	r2, r3
 80016d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80016dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80016e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80016e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	b29b      	uxth	r3, r3
 8001702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d022      	beq.n	8001750 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001712:	b29b      	uxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	4413      	add	r3, r2
 8001724:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800172e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001732:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001736:	2b00      	cmp	r3, #0
 8001738:	d02c      	beq.n	8001794 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001740:	6959      	ldr	r1, [r3, #20]
 8001742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001744:	891a      	ldrh	r2, [r3, #8]
 8001746:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800174a:	f004 f9b3 	bl	8005ab4 <USB_ReadPMA>
 800174e:	e021      	b.n	8001794 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001758:	b29b      	uxth	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	4413      	add	r3, r2
 800176a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001774:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001778:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001786:	6959      	ldr	r1, [r3, #20]
 8001788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800178a:	895a      	ldrh	r2, [r3, #10]
 800178c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001790:	f004 f990 	bl	8005ab4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001796:	69da      	ldr	r2, [r3, #28]
 8001798:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800179c:	441a      	add	r2, r3
 800179e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80017a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80017aa:	441a      	add	r2, r3
 80017ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80017b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <PCD_EP_ISR_Handler+0x4fc>
 80017b8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80017bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d206      	bcs.n	80017d2 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80017c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f006 f800 	bl	80077d0 <HAL_PCD_DataOutStageCallback>
 80017d0:	e005      	b.n	80017de <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fc3e 	bl	800405a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80017de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8121 	beq.w	8001a2e <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80017ec:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	3310      	adds	r3, #16
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800181a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	441a      	add	r2, r3
 800182c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001838:	b29b      	uxth	r3, r3
 800183a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800183c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183e:	78db      	ldrb	r3, [r3, #3]
 8001840:	2b01      	cmp	r3, #1
 8001842:	f040 80a2 	bne.w	800198a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8001846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800184c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184e:	7b1b      	ldrb	r3, [r3, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8093 	beq.w	800197c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001856:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800185a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d046      	beq.n	80018f0 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d126      	bne.n	80018b8 <PCD_EP_ISR_Handler+0x5f0>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001878:	b29b      	uxth	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	4413      	add	r3, r2
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
 8001882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	00da      	lsls	r2, r3, #3
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	4413      	add	r3, r2
 800188c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001890:	623b      	str	r3, [r7, #32]
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800189c:	b29a      	uxth	r2, r3
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	801a      	strh	r2, [r3, #0]
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	e061      	b.n	800197c <PCD_EP_ISR_Handler+0x6b4>
 80018b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d15d      	bne.n	800197c <PCD_EP_ISR_Handler+0x6b4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d4:	4413      	add	r3, r2
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	00da      	lsls	r2, r3, #3
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	4413      	add	r3, r2
 80018e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ea:	2200      	movs	r2, #0
 80018ec:	801a      	strh	r2, [r3, #0]
 80018ee:	e045      	b.n	800197c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d126      	bne.n	800194c <PCD_EP_ISR_Handler+0x684>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	637b      	str	r3, [r7, #52]	@ 0x34
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800190c:	b29b      	uxth	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001912:	4413      	add	r3, r2
 8001914:	637b      	str	r3, [r7, #52]	@ 0x34
 8001916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	00da      	lsls	r2, r3, #3
 800191c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800191e:	4413      	add	r3, r2
 8001920:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001924:	633b      	str	r3, [r7, #48]	@ 0x30
 8001926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001930:	b29a      	uxth	r2, r3
 8001932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001944:	b29a      	uxth	r2, r3
 8001946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001948:	801a      	strh	r2, [r3, #0]
 800194a:	e017      	b.n	800197c <PCD_EP_ISR_Handler+0x6b4>
 800194c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194e:	785b      	ldrb	r3, [r3, #1]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d113      	bne.n	800197c <PCD_EP_ISR_Handler+0x6b4>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800195c:	b29b      	uxth	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001962:	4413      	add	r3, r2
 8001964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	00da      	lsls	r2, r3, #3
 800196c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800196e:	4413      	add	r3, r2
 8001970:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001974:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001978:	2200      	movs	r2, #0
 800197a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800197c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f005 ff3f 	bl	8007806 <HAL_PCD_DataInStageCallback>
 8001988:	e051      	b.n	8001a2e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800198a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800198e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d144      	bne.n	8001a20 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800199e:	b29b      	uxth	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80019be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d907      	bls.n	80019da <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80019ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80019d2:	1ad2      	subs	r2, r2, r3
 80019d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d6:	619a      	str	r2, [r3, #24]
 80019d8:	e002      	b.n	80019e0 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80019da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80019e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d106      	bne.n	80019f6 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f005 ff09 	bl	8007806 <HAL_PCD_DataInStageCallback>
 80019f4:	e01b      	b.n	8001a2e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80019f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80019fe:	441a      	add	r2, r3
 8001a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a02:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a0c:	441a      	add	r2, r3
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a10:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fb1e 	bl	800405a <USB_EPStartXfer>
 8001a1e:	e006      	b.n	8001a2e <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a24:	461a      	mov	r2, r3
 8001a26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f917 	bl	8001c5c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f6ff ac49 	blt.w	80012d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3758      	adds	r7, #88	@ 0x58
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b088      	sub	sp, #32
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	4613      	mov	r3, r2
 8001a56:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07c      	beq.n	8001b5c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4413      	add	r3, r2
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a86:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	8b7b      	ldrh	r3, [r7, #26]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d306      	bcc.n	8001aa0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	8b7b      	ldrh	r3, [r7, #26]
 8001a98:	1ad2      	subs	r2, r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	619a      	str	r2, [r3, #24]
 8001a9e:	e002      	b.n	8001aa6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d123      	bne.n	8001af6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ac8:	833b      	strh	r3, [r7, #24]
 8001aca:	8b3b      	ldrh	r3, [r7, #24]
 8001acc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001ad0:	833b      	strh	r3, [r7, #24]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	441a      	add	r2, r3
 8001ae0:	8b3b      	ldrh	r3, [r7, #24]
 8001ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01f      	beq.n	8001b40 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b1a:	82fb      	strh	r3, [r7, #22]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	441a      	add	r2, r3
 8001b2a:	8afb      	ldrh	r3, [r7, #22]
 8001b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b40:	8b7b      	ldrh	r3, [r7, #26]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8085 	beq.w	8001c52 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	6959      	ldr	r1, [r3, #20]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	891a      	ldrh	r2, [r3, #8]
 8001b54:	8b7b      	ldrh	r3, [r7, #26]
 8001b56:	f003 ffad 	bl	8005ab4 <USB_ReadPMA>
 8001b5a:	e07a      	b.n	8001c52 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b80:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	699a      	ldr	r2, [r3, #24]
 8001b86:	8b7b      	ldrh	r3, [r7, #26]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d306      	bcc.n	8001b9a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	8b7b      	ldrh	r3, [r7, #26]
 8001b92:	1ad2      	subs	r2, r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	619a      	str	r2, [r3, #24]
 8001b98:	e002      	b.n	8001ba0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d123      	bne.n	8001bf0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bc2:	83fb      	strh	r3, [r7, #30]
 8001bc4:	8bfb      	ldrh	r3, [r7, #30]
 8001bc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001bca:	83fb      	strh	r3, [r7, #30]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	441a      	add	r2, r3
 8001bda:	8bfb      	ldrh	r3, [r7, #30]
 8001bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11f      	bne.n	8001c3a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c14:	83bb      	strh	r3, [r7, #28]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	441a      	add	r2, r3
 8001c24:	8bbb      	ldrh	r3, [r7, #28]
 8001c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c3a:	8b7b      	ldrh	r3, [r7, #26]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	6959      	ldr	r1, [r3, #20]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	895a      	ldrh	r2, [r3, #10]
 8001c4c:	8b7b      	ldrh	r3, [r7, #26]
 8001c4e:	f003 ff31 	bl	8005ab4 <USB_ReadPMA>
    }
  }

  return count;
 8001c52:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3720      	adds	r7, #32
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b0a4      	sub	sp, #144	@ 0x90
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	4613      	mov	r3, r2
 8001c68:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 81db 	beq.w	800202c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c9a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d907      	bls.n	8001cba <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001cb2:	1ad2      	subs	r2, r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	619a      	str	r2, [r3, #24]
 8001cb8:	e002      	b.n	8001cc0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 80b9 	bne.w	8001e3c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d126      	bne.n	8001d20 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce6:	4413      	add	r3, r2
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	00da      	lsls	r2, r3, #3
 8001cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d1c:	801a      	strh	r2, [r3, #0]
 8001d1e:	e01a      	b.n	8001d56 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	785b      	ldrb	r3, [r3, #1]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d116      	bne.n	8001d56 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d3c:	4413      	add	r3, r2
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	00da      	lsls	r2, r3, #3
 8001d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d48:	4413      	add	r3, r2
 8001d4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001d4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d52:	2200      	movs	r2, #0
 8001d54:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d126      	bne.n	8001db2 <HAL_PCD_EP_DB_Transmit+0x156>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	00da      	lsls	r2, r3, #3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	4413      	add	r3, r2
 8001d86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	801a      	strh	r2, [r3, #0]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	e017      	b.n	8001de2 <HAL_PCD_EP_DB_Transmit+0x186>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d113      	bne.n	8001de2 <HAL_PCD_EP_DB_Transmit+0x186>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	4413      	add	r3, r2
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	00da      	lsls	r2, r3, #3
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	2200      	movs	r2, #0
 8001de0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f005 fd0c 	bl	8007806 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 82fa 	beq.w	80023ee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e14:	82fb      	strh	r3, [r7, #22]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	441a      	add	r2, r3
 8001e24:	8afb      	ldrh	r3, [r7, #22]
 8001e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	8013      	strh	r3, [r2, #0]
 8001e3a:	e2d8      	b.n	80023ee <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d021      	beq.n	8001e8a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	441a      	add	r2, r3
 8001e72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f040 82ac 	bne.w	80023ee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001e9e:	441a      	add	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001eac:	441a      	add	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	6a1a      	ldr	r2, [r3, #32]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d30b      	bcc.n	8001ed6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	6a1a      	ldr	r2, [r3, #32]
 8001eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ece:	1ad2      	subs	r2, r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	621a      	str	r2, [r3, #32]
 8001ed4:	e017      	b.n	8001f06 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d108      	bne.n	8001ef0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8001ede:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ee2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001eee:	e00a      	b.n	8001f06 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2200      	movs	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	785b      	ldrb	r3, [r3, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d165      	bne.n	8001fda <HAL_PCD_EP_DB_Transmit+0x37e>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f22:	4413      	add	r3, r2
 8001f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	00da      	lsls	r2, r3, #3
 8001f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f2e:	4413      	add	r3, r2
 8001f30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f4c:	d91d      	bls.n	8001f8a <HAL_PCD_EP_DB_Transmit+0x32e>
 8001f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <HAL_PCD_EP_DB_Transmit+0x30c>
 8001f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f64:	3b01      	subs	r3, #1
 8001f66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	029b      	lsls	r3, r3, #10
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	e044      	b.n	8002014 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10a      	bne.n	8001fa8 <HAL_PCD_EP_DB_Transmit+0x34c>
 8001f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa4:	801a      	strh	r2, [r3, #0]
 8001fa6:	e035      	b.n	8002014 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <HAL_PCD_EP_DB_Transmit+0x366>
 8001fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	029b      	lsls	r3, r3, #10
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	e01c      	b.n	8002014 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d118      	bne.n	8002014 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ff6:	4413      	add	r3, r2
 8001ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	00da      	lsls	r2, r3, #3
 8002000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002002:	4413      	add	r3, r2
 8002004:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002008:	643b      	str	r3, [r7, #64]	@ 0x40
 800200a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800200e:	b29a      	uxth	r2, r3
 8002010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002012:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	6959      	ldr	r1, [r3, #20]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	891a      	ldrh	r2, [r3, #8]
 8002020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002024:	b29b      	uxth	r3, r3
 8002026:	f003 fd03 	bl	8005a30 <USB_WritePMA>
 800202a:	e1e0      	b.n	80023ee <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002034:	b29b      	uxth	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	4413      	add	r3, r2
 8002046:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002050:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800205c:	429a      	cmp	r2, r3
 800205e:	d307      	bcc.n	8002070 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002068:	1ad2      	subs	r2, r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	619a      	str	r2, [r3, #24]
 800206e:	e002      	b.n	8002076 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 80c0 	bne.w	8002200 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	785b      	ldrb	r3, [r3, #1]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d126      	bne.n	80020d6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002096:	b29b      	uxth	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800209c:	4413      	add	r3, r2
 800209e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	00da      	lsls	r2, r3, #3
 80020a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020a8:	4413      	add	r3, r2
 80020aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020be:	801a      	strh	r2, [r3, #0]
 80020c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	e01a      	b.n	800210c <HAL_PCD_EP_DB_Transmit+0x4b0>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	785b      	ldrb	r3, [r3, #1]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d116      	bne.n	800210c <HAL_PCD_EP_DB_Transmit+0x4b0>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020f2:	4413      	add	r3, r2
 80020f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	00da      	lsls	r2, r3, #3
 80020fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020fe:	4413      	add	r3, r2
 8002100:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002104:	663b      	str	r3, [r7, #96]	@ 0x60
 8002106:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002108:	2200      	movs	r2, #0
 800210a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	677b      	str	r3, [r7, #116]	@ 0x74
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	785b      	ldrb	r3, [r3, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d12b      	bne.n	8002172 <HAL_PCD_EP_DB_Transmit+0x516>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002128:	b29b      	uxth	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800212e:	4413      	add	r3, r2
 8002130:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	00da      	lsls	r2, r3, #3
 8002138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800213a:	4413      	add	r3, r2
 800213c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002144:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002150:	b29a      	uxth	r2, r3
 8002152:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002156:	801a      	strh	r2, [r3, #0]
 8002158:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002168:	b29a      	uxth	r2, r3
 800216a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	e017      	b.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x546>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	785b      	ldrb	r3, [r3, #1]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d113      	bne.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x546>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002182:	b29b      	uxth	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002188:	4413      	add	r3, r2
 800218a:	677b      	str	r3, [r7, #116]	@ 0x74
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	00da      	lsls	r2, r3, #3
 8002192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002194:	4413      	add	r3, r2
 8002196:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800219a:	673b      	str	r3, [r7, #112]	@ 0x70
 800219c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800219e:	2200      	movs	r2, #0
 80021a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f005 fb2c 	bl	8007806 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 811a 	bne.w	80023ee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021d4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80021ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	8013      	strh	r3, [r2, #0]
 80021fe:	e0f6      	b.n	80023ee <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d121      	bne.n	800224e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002224:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	441a      	add	r2, r3
 8002236:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800223a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800223e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002242:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800224a:	b29b      	uxth	r3, r3
 800224c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002254:	2b01      	cmp	r3, #1
 8002256:	f040 80ca 	bne.w	80023ee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002262:	441a      	add	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002270:	441a      	add	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6a1a      	ldr	r2, [r3, #32]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	429a      	cmp	r2, r3
 8002280:	d30b      	bcc.n	800229a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002292:	1ad2      	subs	r2, r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	621a      	str	r2, [r3, #32]
 8002298:	e017      	b.n	80022ca <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d108      	bne.n	80022b4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80022a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80022b2:	e00a      	b.n	80022ca <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2200      	movs	r2, #0
 80022c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d165      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x748>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ec:	4413      	add	r3, r2
 80022ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	00da      	lsls	r2, r3, #3
 80022f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f8:	4413      	add	r3, r2
 80022fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80022fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002300:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800230a:	b29a      	uxth	r2, r3
 800230c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002314:	2b3e      	cmp	r3, #62	@ 0x3e
 8002316:	d91d      	bls.n	8002354 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002318:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800232c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800232e:	3b01      	subs	r3, #1
 8002330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29a      	uxth	r2, r3
 8002338:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800233a:	b29b      	uxth	r3, r3
 800233c:	029b      	lsls	r3, r3, #10
 800233e:	b29b      	uxth	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800234c:	b29a      	uxth	r2, r3
 800234e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002350:	801a      	strh	r2, [r3, #0]
 8002352:	e041      	b.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002354:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_PCD_EP_DB_Transmit+0x716>
 800235c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236a:	b29a      	uxth	r2, r3
 800236c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800236e:	801a      	strh	r2, [r3, #0]
 8002370:	e032      	b.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800237a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_PCD_EP_DB_Transmit+0x730>
 8002386:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002388:	3301      	adds	r3, #1
 800238a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800238c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29a      	uxth	r2, r3
 8002392:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002394:	b29b      	uxth	r3, r3
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	b29b      	uxth	r3, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	b29a      	uxth	r2, r3
 800239e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	e019      	b.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	785b      	ldrb	r3, [r3, #1]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d115      	bne.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ba:	4413      	add	r3, r2
 80023bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	00da      	lsls	r2, r3, #3
 80023c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c6:	4413      	add	r3, r2
 80023c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80023cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80023ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	6959      	ldr	r1, [r3, #20]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	895a      	ldrh	r2, [r3, #10]
 80023e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f003 fb21 	bl	8005a30 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002408:	82bb      	strh	r3, [r7, #20]
 800240a:	8abb      	ldrh	r3, [r7, #20]
 800240c:	f083 0310 	eor.w	r3, r3, #16
 8002410:	82bb      	strh	r3, [r7, #20]
 8002412:	8abb      	ldrh	r3, [r7, #20]
 8002414:	f083 0320 	eor.w	r3, r3, #32
 8002418:	82bb      	strh	r3, [r7, #20]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	441a      	add	r2, r3
 8002428:	8abb      	ldrh	r3, [r7, #20]
 800242a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800242e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800243a:	b29b      	uxth	r3, r3
 800243c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3790      	adds	r7, #144	@ 0x90
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	817b      	strh	r3, [r7, #10]
 8002456:	4613      	mov	r3, r2
 8002458:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002466:	897b      	ldrh	r3, [r7, #10]
 8002468:	f003 0207 	and.w	r2, r3, #7
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	3310      	adds	r3, #16
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4413      	add	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e009      	b.n	8002492 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800247e:	897a      	ldrh	r2, [r7, #10]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002492:	893b      	ldrh	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2200      	movs	r2, #0
 800249c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	80da      	strh	r2, [r3, #6]
 80024a6:	e00b      	b.n	80024c0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2201      	movs	r2, #1
 80024ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002506:	b29b      	uxth	r3, r3
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d141      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002532:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800253e:	d131      	bne.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002540:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002546:	4a46      	ldr	r2, [pc, #280]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800254c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002550:	4b43      	ldr	r3, [pc, #268]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002558:	4a41      	ldr	r2, [pc, #260]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800255e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002560:	4b40      	ldr	r3, [pc, #256]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2232      	movs	r2, #50	@ 0x32
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	4a3f      	ldr	r2, [pc, #252]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	0c9b      	lsrs	r3, r3, #18
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002576:	e002      	b.n	800257e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3b01      	subs	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257e:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258a:	d102      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f2      	bne.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002592:	4b33      	ldr	r3, [pc, #204]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800259e:	d158      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e057      	b.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025b4:	e04d      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025bc:	d141      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025be:	4b28      	ldr	r3, [pc, #160]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ca:	d131      	bne.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025cc:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025d2:	4a23      	ldr	r2, [pc, #140]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025dc:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2232      	movs	r2, #50	@ 0x32
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	0c9b      	lsrs	r3, r3, #18
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002602:	e002      	b.n	800260a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3b01      	subs	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002616:	d102      	bne.n	800261e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f2      	bne.n	8002604 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262a:	d112      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e011      	b.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002636:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002640:	e007      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002642:	4b07      	ldr	r3, [pc, #28]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800264a:	4a05      	ldr	r2, [pc, #20]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002650:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40007000 	.word	0x40007000
 8002664:	20000000 	.word	0x20000000
 8002668:	431bde83 	.word	0x431bde83

0800266c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267a:	6093      	str	r3, [r2, #8]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40007000 	.word	0x40007000

0800268c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e2fe      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d075      	beq.n	8002796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026aa:	4b97      	ldr	r3, [pc, #604]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b4:	4b94      	ldr	r3, [pc, #592]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d102      	bne.n	80026ca <HAL_RCC_OscConfig+0x3e>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d002      	beq.n	80026d0 <HAL_RCC_OscConfig+0x44>
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05b      	beq.n	8002794 <HAL_RCC_OscConfig+0x108>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d157      	bne.n	8002794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e2d9      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f0:	d106      	bne.n	8002700 <HAL_RCC_OscConfig+0x74>
 80026f2:	4b85      	ldr	r3, [pc, #532]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a84      	ldr	r2, [pc, #528]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x98>
 800270a:	4b7f      	ldr	r3, [pc, #508]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7e      	ldr	r2, [pc, #504]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b7c      	ldr	r3, [pc, #496]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7b      	ldr	r2, [pc, #492]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002724:	4b78      	ldr	r3, [pc, #480]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a77      	ldr	r2, [pc, #476]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b75      	ldr	r3, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a74      	ldr	r2, [pc, #464]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fd ff04 	bl	8000550 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fd ff00 	bl	8000550 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	@ 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e29e      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800275e:	4b6a      	ldr	r3, [pc, #424]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xc0>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fd fef0 	bl	8000550 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7fd feec 	bl	8000550 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e28a      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002786:	4b60      	ldr	r3, [pc, #384]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0xe8>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d075      	beq.n	800288e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a2:	4b59      	ldr	r3, [pc, #356]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ac:	4b56      	ldr	r3, [pc, #344]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_OscConfig+0x136>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_OscConfig+0x13c>
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d11f      	bne.n	8002808 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_OscConfig+0x154>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e25d      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b49      	ldr	r3, [pc, #292]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	4946      	ldr	r1, [pc, #280]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027f4:	4b45      	ldr	r3, [pc, #276]	@ (800290c <HAL_RCC_OscConfig+0x280>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fe5d 	bl	80004b8 <HAL_InitTick>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d043      	beq.n	800288c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e249      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d023      	beq.n	8002858 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b3d      	ldr	r3, [pc, #244]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a3c      	ldr	r2, [pc, #240]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fd fe98 	bl	8000550 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002824:	f7fd fe94 	bl	8000550 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e232      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002836:	4b34      	ldr	r3, [pc, #208]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b31      	ldr	r3, [pc, #196]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	061b      	lsls	r3, r3, #24
 8002850:	492d      	ldr	r1, [pc, #180]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
 8002856:	e01a      	b.n	800288e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2a      	ldr	r2, [pc, #168]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 800285e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fd fe74 	bl	8000550 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286c:	f7fd fe70 	bl	8000550 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e20e      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287e:	4b22      	ldr	r3, [pc, #136]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x1e0>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d041      	beq.n	800291e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01c      	beq.n	80028dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a2:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a8:	4a17      	ldr	r2, [pc, #92]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fd fe4d 	bl	8000550 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ba:	f7fd fe49 	bl	8000550 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e1e7      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ef      	beq.n	80028ba <HAL_RCC_OscConfig+0x22e>
 80028da:	e020      	b.n	800291e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e2:	4a09      	ldr	r2, [pc, #36]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ec:	f7fd fe30 	bl	8000550 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f2:	e00d      	b.n	8002910 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f4:	f7fd fe2c 	bl	8000550 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d906      	bls.n	8002910 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1ca      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002910:	4b8c      	ldr	r3, [pc, #560]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ea      	bne.n	80028f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80a6 	beq.w	8002a78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002930:	4b84      	ldr	r3, [pc, #528]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_OscConfig+0x2b4>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x2b6>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4b7f      	ldr	r3, [pc, #508]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002950:	6593      	str	r3, [r2, #88]	@ 0x58
 8002952:	4b7c      	ldr	r3, [pc, #496]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800295e:	2301      	movs	r3, #1
 8002960:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002962:	4b79      	ldr	r3, [pc, #484]	@ (8002b48 <HAL_RCC_OscConfig+0x4bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d118      	bne.n	80029a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800296e:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <HAL_RCC_OscConfig+0x4bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	@ (8002b48 <HAL_RCC_OscConfig+0x4bc>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7fd fde9 	bl	8000550 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7fd fde5 	bl	8000550 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e183      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002994:	4b6c      	ldr	r3, [pc, #432]	@ (8002b48 <HAL_RCC_OscConfig+0x4bc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d108      	bne.n	80029ba <HAL_RCC_OscConfig+0x32e>
 80029a8:	4b66      	ldr	r3, [pc, #408]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ae:	4a65      	ldr	r2, [pc, #404]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029b8:	e024      	b.n	8002a04 <HAL_RCC_OscConfig+0x378>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d110      	bne.n	80029e4 <HAL_RCC_OscConfig+0x358>
 80029c2:	4b60      	ldr	r3, [pc, #384]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029e2:	e00f      	b.n	8002a04 <HAL_RCC_OscConfig+0x378>
 80029e4:	4b57      	ldr	r3, [pc, #348]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ea:	4a56      	ldr	r2, [pc, #344]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f4:	4b53      	ldr	r3, [pc, #332]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fa:	4a52      	ldr	r2, [pc, #328]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029fc:	f023 0304 	bic.w	r3, r3, #4
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d016      	beq.n	8002a3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fd fda0 	bl	8000550 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f7fd fd9c 	bl	8000550 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e138      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2a:	4b46      	ldr	r3, [pc, #280]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0ed      	beq.n	8002a14 <HAL_RCC_OscConfig+0x388>
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7fd fd89 	bl	8000550 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7fd fd85 	bl	8000550 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e121      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a58:	4b3a      	ldr	r3, [pc, #232]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ed      	bne.n	8002a42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a66:	7ffb      	ldrb	r3, [r7, #31]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b35      	ldr	r3, [pc, #212]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	4a34      	ldr	r2, [pc, #208]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d03c      	beq.n	8002afe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a92:	4a2c      	ldr	r2, [pc, #176]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fd fd58 	bl	8000550 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa4:	f7fd fd54 	bl	8000550 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0f2      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ab6:	4b23      	ldr	r3, [pc, #140]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ef      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x418>
 8002ac4:	e01b      	b.n	8002afe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002acc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7fd fd3b 	bl	8000550 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ade:	f7fd fd37 	bl	8000550 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0d5      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ef      	bne.n	8002ade <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80c9 	beq.w	8002c9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	f000 8083 	beq.w	8002c1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d15e      	bne.n	8002bdc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a08      	ldr	r2, [pc, #32]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002b24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fd fd11 	bl	8000550 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	e00c      	b.n	8002b4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fd fd0d 	bl	8000550 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d905      	bls.n	8002b4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0ab      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ec      	bne.n	8002b32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b58:	4b52      	ldr	r3, [pc, #328]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	4b52      	ldr	r3, [pc, #328]	@ (8002ca8 <HAL_RCC_OscConfig+0x61c>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6a11      	ldr	r1, [r2, #32]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b72:	0212      	lsls	r2, r2, #8
 8002b74:	4311      	orrs	r1, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b7a:	0852      	lsrs	r2, r2, #1
 8002b7c:	3a01      	subs	r2, #1
 8002b7e:	0552      	lsls	r2, r2, #21
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b86:	0852      	lsrs	r2, r2, #1
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	0652      	lsls	r2, r2, #25
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b92:	06d2      	lsls	r2, r2, #27
 8002b94:	430a      	orrs	r2, r1
 8002b96:	4943      	ldr	r1, [pc, #268]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a40      	ldr	r2, [pc, #256]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a3d      	ldr	r2, [pc, #244]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fd fccc 	bl	8000550 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fd fcc8 	bl	8000550 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e066      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b35      	ldr	r3, [pc, #212]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x530>
 8002bda:	e05e      	b.n	8002c9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bdc:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a30      	ldr	r2, [pc, #192]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fd fcb2 	bl	8000550 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fd fcae 	bl	8000550 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e04c      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c02:	4b28      	ldr	r3, [pc, #160]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4924      	ldr	r1, [pc, #144]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002c14:	4b25      	ldr	r3, [pc, #148]	@ (8002cac <HAL_RCC_OscConfig+0x620>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	60cb      	str	r3, [r1, #12]
 8002c1a:	e03e      	b.n	8002c9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e039      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d12c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	3b01      	subs	r3, #1
 8002c48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d123      	bne.n	8002c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d11b      	bne.n	8002c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d113      	bne.n	8002c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	019f800c 	.word	0x019f800c
 8002cac:	feeefffc 	.word	0xfeeefffc

08002cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e11e      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b91      	ldr	r3, [pc, #580]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d910      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b8e      	ldr	r3, [pc, #568]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 020f 	bic.w	r2, r3, #15
 8002cde:	498c      	ldr	r1, [pc, #560]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b8a      	ldr	r3, [pc, #552]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e106      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d073      	beq.n	8002dec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d129      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0c:	4b81      	ldr	r3, [pc, #516]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0f4      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d1c:	f000 f966 	bl	8002fec <RCC_GetSysClockFreqFromPLLSource>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4a7c      	ldr	r2, [pc, #496]	@ (8002f18 <HAL_RCC_ClockConfig+0x268>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d93f      	bls.n	8002daa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d033      	beq.n	8002daa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d12f      	bne.n	8002daa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d4a:	4b72      	ldr	r3, [pc, #456]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d52:	4a70      	ldr	r2, [pc, #448]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e024      	b.n	8002daa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d68:	4b6a      	ldr	r3, [pc, #424]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0c6      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d78:	4b66      	ldr	r3, [pc, #408]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0be      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d88:	f000 f8ce 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4a61      	ldr	r2, [pc, #388]	@ (8002f18 <HAL_RCC_ClockConfig+0x268>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d909      	bls.n	8002daa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d96:	4b5f      	ldr	r3, [pc, #380]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d9e:	4a5d      	ldr	r2, [pc, #372]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002da6:	2380      	movs	r3, #128	@ 0x80
 8002da8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b5a      	ldr	r3, [pc, #360]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4957      	ldr	r1, [pc, #348]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbc:	f7fd fbc8 	bl	8000550 <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7fd fbc4 	bl	8000550 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e095      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b4e      	ldr	r3, [pc, #312]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d023      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e04:	4b43      	ldr	r3, [pc, #268]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a42      	ldr	r2, [pc, #264]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e24:	4a3b      	ldr	r2, [pc, #236]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2c:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4936      	ldr	r1, [pc, #216]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b80      	cmp	r3, #128	@ 0x80
 8002e44:	d105      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e46:	4b33      	ldr	r3, [pc, #204]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	4a32      	ldr	r2, [pc, #200]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e52:	4b2f      	ldr	r3, [pc, #188]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d21d      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e60:	4b2b      	ldr	r3, [pc, #172]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 020f 	bic.w	r2, r3, #15
 8002e68:	4929      	ldr	r1, [pc, #164]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e70:	f7fd fb6e 	bl	8000550 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7fd fb6a 	bl	8000550 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e03b      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1ed      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4917      	ldr	r1, [pc, #92]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec6:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	490f      	ldr	r1, [pc, #60]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eda:	f000 f825 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	490c      	ldr	r1, [pc, #48]	@ (8002f1c <HAL_RCC_ClockConfig+0x26c>)
 8002eec:	5ccb      	ldrb	r3, [r1, r3]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <HAL_RCC_ClockConfig+0x270>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <HAL_RCC_ClockConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fada 	bl	80004b8 <HAL_InitTick>
 8002f04:	4603      	mov	r3, r0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40022000 	.word	0x40022000
 8002f14:	40021000 	.word	0x40021000
 8002f18:	04c4b400 	.word	0x04c4b400
 8002f1c:	08007df4 	.word	0x08007df4
 8002f20:	20000000 	.word	0x20000000
 8002f24:	20000004 	.word	0x20000004

08002f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d102      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	e047      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f4c:	4b26      	ldr	r3, [pc, #152]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	e03e      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f52:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d136      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	3301      	adds	r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d10c      	bne.n	8002f96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f86:	68d2      	ldr	r2, [r2, #12]
 8002f88:	0a12      	lsrs	r2, r2, #8
 8002f8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
      break;
 8002f94:	e00c      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f96:	4a13      	ldr	r2, [pc, #76]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa0:	68d2      	ldr	r2, [r2, #12]
 8002fa2:	0a12      	lsrs	r2, r2, #8
 8002fa4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
      break;
 8002fae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	0e5b      	lsrs	r3, r3, #25
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	e001      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fd0:	693b      	ldr	r3, [r7, #16]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800306c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d10c      	bne.n	800302a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003010:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	4a14      	ldr	r2, [pc, #80]	@ (800306c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800301a:	68d2      	ldr	r2, [r2, #12]
 800301c:	0a12      	lsrs	r2, r2, #8
 800301e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	617b      	str	r3, [r7, #20]
    break;
 8003028:	e00c      	b.n	8003044 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800302a:	4a12      	ldr	r2, [pc, #72]	@ (8003074 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003032:	4a0e      	ldr	r2, [pc, #56]	@ (800306c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003034:	68d2      	ldr	r2, [r2, #12]
 8003036:	0a12      	lsrs	r2, r2, #8
 8003038:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800303c:	fb02 f303 	mul.w	r3, r2, r3
 8003040:	617b      	str	r3, [r7, #20]
    break;
 8003042:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003044:	4b09      	ldr	r3, [pc, #36]	@ (800306c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	0e5b      	lsrs	r3, r3, #25
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	3301      	adds	r3, #1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800305e:	687b      	ldr	r3, [r7, #4]
}
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40021000 	.word	0x40021000
 8003070:	007a1200 	.word	0x007a1200
 8003074:	00f42400 	.word	0x00f42400

08003078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003080:	2300      	movs	r3, #0
 8003082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003084:	2300      	movs	r3, #0
 8003086:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8098 	beq.w	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309a:	4b43      	ldr	r3, [pc, #268]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10d      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	4b40      	ldr	r3, [pc, #256]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030aa:	4a3f      	ldr	r2, [pc, #252]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b2:	4b3d      	ldr	r3, [pc, #244]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030be:	2301      	movs	r3, #1
 80030c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c2:	4b3a      	ldr	r3, [pc, #232]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a39      	ldr	r2, [pc, #228]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ce:	f7fd fa3f 	bl	8000550 <HAL_GetTick>
 80030d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d4:	e009      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7fd fa3b 	bl	8000550 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d902      	bls.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	74fb      	strb	r3, [r7, #19]
        break;
 80030e8:	e005      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ea:	4b30      	ldr	r3, [pc, #192]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ef      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d159      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030fc:	4b2a      	ldr	r3, [pc, #168]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003106:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01e      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	d019      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003118:	4b23      	ldr	r3, [pc, #140]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003122:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003124:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	4a1f      	ldr	r2, [pc, #124]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003134:	4b1c      	ldr	r3, [pc, #112]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800313c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003144:	4a18      	ldr	r2, [pc, #96]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d016      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fd f9fb 	bl	8000550 <HAL_GetTick>
 800315a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315c:	e00b      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7fd f9f7 	bl	8000550 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316c:	4293      	cmp	r3, r2
 800316e:	d902      	bls.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	74fb      	strb	r3, [r7, #19]
            break;
 8003174:	e006      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003176:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ec      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10b      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800318a:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	4903      	ldr	r1, [pc, #12]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031a0:	e008      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	74bb      	strb	r3, [r7, #18]
 80031a6:	e005      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b4:	7c7b      	ldrb	r3, [r7, #17]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4ba6      	ldr	r3, [pc, #664]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031be:	4aa5      	ldr	r2, [pc, #660]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d2:	4ba0      	ldr	r3, [pc, #640]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f023 0203 	bic.w	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	499c      	ldr	r1, [pc, #624]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031f4:	4b97      	ldr	r3, [pc, #604]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fa:	f023 020c 	bic.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4994      	ldr	r1, [pc, #592]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003216:	4b8f      	ldr	r3, [pc, #572]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	498b      	ldr	r1, [pc, #556]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003238:	4b86      	ldr	r3, [pc, #536]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	4983      	ldr	r1, [pc, #524]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800325a:	4b7e      	ldr	r3, [pc, #504]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003260:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	497a      	ldr	r1, [pc, #488]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800327c:	4b75      	ldr	r3, [pc, #468]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003282:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	4972      	ldr	r1, [pc, #456]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800329e:	4b6d      	ldr	r3, [pc, #436]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4969      	ldr	r1, [pc, #420]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032c0:	4b64      	ldr	r3, [pc, #400]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4961      	ldr	r1, [pc, #388]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	4958      	ldr	r1, [pc, #352]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d015      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	4950      	ldr	r1, [pc, #320]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003322:	d105      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003324:	4b4b      	ldr	r3, [pc, #300]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a4a      	ldr	r2, [pc, #296]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800332a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800332e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003338:	2b00      	cmp	r3, #0
 800333a:	d015      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800333c:	4b45      	ldr	r3, [pc, #276]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003342:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334a:	4942      	ldr	r1, [pc, #264]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003356:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800335a:	d105      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800335c:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a3c      	ldr	r2, [pc, #240]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003366:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d015      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003374:	4b37      	ldr	r3, [pc, #220]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4934      	ldr	r1, [pc, #208]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003392:	d105      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003394:	4b2f      	ldr	r3, [pc, #188]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a2e      	ldr	r2, [pc, #184]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800339e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d015      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033ac:	4b29      	ldr	r3, [pc, #164]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ba:	4926      	ldr	r1, [pc, #152]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033ca:	d105      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033cc:	4b21      	ldr	r3, [pc, #132]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a20      	ldr	r2, [pc, #128]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d015      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f2:	4918      	ldr	r1, [pc, #96]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003402:	d105      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003404:	4b13      	ldr	r3, [pc, #76]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a12      	ldr	r2, [pc, #72]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800340e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800341c:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003422:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342a:	490a      	ldr	r1, [pc, #40]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800343a:	d105      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a04      	ldr	r2, [pc, #16]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003446:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003448:	7cbb      	ldrb	r3, [r7, #18]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000

08003458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003468:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800346c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800348e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003492:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	4013      	ands	r3, r2
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b09d      	sub	sp, #116	@ 0x74
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800351a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	78db      	ldrb	r3, [r3, #3]
 8003526:	2b03      	cmp	r3, #3
 8003528:	d81f      	bhi.n	800356a <USB_ActivateEndpoint+0x72>
 800352a:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <USB_ActivateEndpoint+0x38>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	08003541 	.word	0x08003541
 8003534:	0800355d 	.word	0x0800355d
 8003538:	08003573 	.word	0x08003573
 800353c:	0800354f 	.word	0x0800354f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003540:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003544:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003548:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800354c:	e012      	b.n	8003574 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800354e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003552:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003556:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800355a:	e00b      	b.n	8003574 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800355c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003560:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003564:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003568:	e004      	b.n	8003574 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003570:	e000      	b.n	8003574 <USB_ActivateEndpoint+0x7c>
      break;
 8003572:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	441a      	add	r2, r3
 800357e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003582:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003586:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800358a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800358e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003592:	b29b      	uxth	r3, r3
 8003594:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	b21b      	sxth	r3, r3
 80035a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ae:	b21a      	sxth	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	4313      	orrs	r3, r2
 80035b8:	b21b      	sxth	r3, r3
 80035ba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	441a      	add	r2, r3
 80035c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80035cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035dc:	b29b      	uxth	r3, r3
 80035de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	7b1b      	ldrb	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 8178 	bne.w	80038da <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	785b      	ldrb	r3, [r3, #1]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8084 	beq.w	80036fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035fe:	b29b      	uxth	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	4413      	add	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	00da      	lsls	r2, r3, #3
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	88db      	ldrh	r3, [r3, #6]
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	b29b      	uxth	r3, r3
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	827b      	strh	r3, [r7, #18]
 8003636:	8a7b      	ldrh	r3, [r7, #18]
 8003638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01b      	beq.n	8003678 <USB_ActivateEndpoint+0x180>
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003656:	823b      	strh	r3, [r7, #16]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	8a3b      	ldrh	r3, [r7, #16]
 8003664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800366c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003670:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003674:	b29b      	uxth	r3, r3
 8003676:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	78db      	ldrb	r3, [r3, #3]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d020      	beq.n	80036c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003696:	81bb      	strh	r3, [r7, #12]
 8003698:	89bb      	ldrh	r3, [r7, #12]
 800369a:	f083 0320 	eor.w	r3, r3, #32
 800369e:	81bb      	strh	r3, [r7, #12]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	441a      	add	r2, r3
 80036aa:	89bb      	ldrh	r3, [r7, #12]
 80036ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036bc:	b29b      	uxth	r3, r3
 80036be:	8013      	strh	r3, [r2, #0]
 80036c0:	e2d5      	b.n	8003c6e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036d8:	81fb      	strh	r3, [r7, #14]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	441a      	add	r2, r3
 80036e4:	89fb      	ldrh	r3, [r7, #14]
 80036e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8013      	strh	r3, [r2, #0]
 80036fa:	e2b8      	b.n	8003c6e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003706:	b29b      	uxth	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	4413      	add	r3, r2
 800370e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	00da      	lsls	r2, r3, #3
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	4413      	add	r3, r2
 800371a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	88db      	ldrh	r3, [r3, #6]
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	b29b      	uxth	r3, r3
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800373a:	b29b      	uxth	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003740:	4413      	add	r3, r2
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	00da      	lsls	r2, r3, #3
 800374a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374c:	4413      	add	r3, r2
 800374e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375e:	b29a      	uxth	r2, r3
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b3e      	cmp	r3, #62	@ 0x3e
 800376a:	d91d      	bls.n	80037a8 <USB_ActivateEndpoint+0x2b0>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <USB_ActivateEndpoint+0x28e>
 8003780:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003782:	3b01      	subs	r3, #1
 8003784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29a      	uxth	r2, r3
 800378c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800378e:	b29b      	uxth	r3, r3
 8003790:	029b      	lsls	r3, r3, #10
 8003792:	b29b      	uxth	r3, r3
 8003794:	4313      	orrs	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800379c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	e026      	b.n	80037f6 <USB_ActivateEndpoint+0x2fe>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <USB_ActivateEndpoint+0x2ce>
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037be:	b29a      	uxth	r2, r3
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	801a      	strh	r2, [r3, #0]
 80037c4:	e017      	b.n	80037f6 <USB_ActivateEndpoint+0x2fe>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <USB_ActivateEndpoint+0x2e8>
 80037da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037dc:	3301      	adds	r3, #1
 80037de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	029b      	lsls	r3, r3, #10
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003804:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01b      	beq.n	8003846 <USB_ActivateEndpoint+0x34e>
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003824:	843b      	strh	r3, [r7, #32]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	441a      	add	r2, r3
 8003830:	8c3b      	ldrh	r3, [r7, #32]
 8003832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800383a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800383e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003842:	b29b      	uxth	r3, r3
 8003844:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d124      	bne.n	8003898 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003864:	83bb      	strh	r3, [r7, #28]
 8003866:	8bbb      	ldrh	r3, [r7, #28]
 8003868:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800386c:	83bb      	strh	r3, [r7, #28]
 800386e:	8bbb      	ldrh	r3, [r7, #28]
 8003870:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003874:	83bb      	strh	r3, [r7, #28]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	441a      	add	r2, r3
 8003880:	8bbb      	ldrh	r3, [r7, #28]
 8003882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800388a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800388e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003892:	b29b      	uxth	r3, r3
 8003894:	8013      	strh	r3, [r2, #0]
 8003896:	e1ea      	b.n	8003c6e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ae:	83fb      	strh	r3, [r7, #30]
 80038b0:	8bfb      	ldrh	r3, [r7, #30]
 80038b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038b6:	83fb      	strh	r3, [r7, #30]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	8bfb      	ldrh	r3, [r7, #30]
 80038c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8013      	strh	r3, [r2, #0]
 80038d8:	e1c9      	b.n	8003c6e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	78db      	ldrb	r3, [r3, #3]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d11e      	bne.n	8003920 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800390a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800390e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003912:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800391a:	b29b      	uxth	r3, r3
 800391c:	8013      	strh	r3, [r2, #0]
 800391e:	e01d      	b.n	800395c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003936:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	441a      	add	r2, r3
 8003944:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800394c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003958:	b29b      	uxth	r3, r3
 800395a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396c:	4413      	add	r3, r2
 800396e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	00da      	lsls	r2, r3, #3
 8003976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003978:	4413      	add	r3, r2
 800397a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800397e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	891b      	ldrh	r3, [r3, #8]
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	b29b      	uxth	r3, r3
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800398e:	801a      	strh	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	657b      	str	r3, [r7, #84]	@ 0x54
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800399a:	b29b      	uxth	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a0:	4413      	add	r3, r2
 80039a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	00da      	lsls	r2, r3, #3
 80039aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ac:	4413      	add	r3, r2
 80039ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	895b      	ldrh	r3, [r3, #10]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f040 8093 	bne.w	8003af4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80039de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01b      	beq.n	8003a22 <USB_ActivateEndpoint+0x52a>
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	441a      	add	r2, r3
 8003a0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003a0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003a30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01b      	beq.n	8003a72 <USB_ActivateEndpoint+0x57a>
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a50:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	441a      	add	r2, r3
 8003a5c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a88:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003a8a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003a8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003a90:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003a92:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003a94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a98:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	441a      	add	r2, r3
 8003aa4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ad0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	441a      	add	r2, r3
 8003adc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	8013      	strh	r3, [r2, #0]
 8003af2:	e0bc      	b.n	8003c6e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01d      	beq.n	8003b4c <USB_ActivateEndpoint+0x654>
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b26:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	441a      	add	r2, r3
 8003b34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003b5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01d      	beq.n	8003ba4 <USB_ActivateEndpoint+0x6ac>
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	441a      	add	r2, r3
 8003b8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	78db      	ldrb	r3, [r3, #3]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d024      	beq.n	8003bf6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bc2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003bc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003bca:	f083 0320 	eor.w	r3, r3, #32
 8003bce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	441a      	add	r2, r3
 8003bdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	8013      	strh	r3, [r2, #0]
 8003bf4:	e01d      	b.n	8003c32 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	441a      	add	r2, r3
 8003c56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003c6e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3774      	adds	r7, #116	@ 0x74
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop

08003c80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b08d      	sub	sp, #52	@ 0x34
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	7b1b      	ldrb	r3, [r3, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 808e 	bne.w	8003db0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d044      	beq.n	8003d26 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	81bb      	strh	r3, [r7, #12]
 8003caa:	89bb      	ldrh	r3, [r7, #12]
 8003cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <USB_DeactivateEndpoint+0x6c>
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cca:	817b      	strh	r3, [r7, #10]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d02:	813b      	strh	r3, [r7, #8]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	893b      	ldrh	r3, [r7, #8]
 8003d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	8013      	strh	r3, [r2, #0]
 8003d24:	e192      	b.n	800404c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	827b      	strh	r3, [r7, #18]
 8003d34:	8a7b      	ldrh	r3, [r7, #18]
 8003d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01b      	beq.n	8003d76 <USB_DeactivateEndpoint+0xf6>
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d54:	823b      	strh	r3, [r7, #16]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	441a      	add	r2, r3
 8003d60:	8a3b      	ldrh	r3, [r7, #16]
 8003d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8c:	81fb      	strh	r3, [r7, #14]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	441a      	add	r2, r3
 8003d98:	89fb      	ldrh	r3, [r7, #14]
 8003d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	8013      	strh	r3, [r2, #0]
 8003dae:	e14d      	b.n	800404c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f040 80a5 	bne.w	8003f04 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	843b      	strh	r3, [r7, #32]
 8003dc8:	8c3b      	ldrh	r3, [r7, #32]
 8003dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01b      	beq.n	8003e0a <USB_DeactivateEndpoint+0x18a>
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de8:	83fb      	strh	r3, [r7, #30]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	441a      	add	r2, r3
 8003df4:	8bfb      	ldrh	r3, [r7, #30]
 8003df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	83bb      	strh	r3, [r7, #28]
 8003e18:	8bbb      	ldrh	r3, [r7, #28]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01b      	beq.n	8003e5a <USB_DeactivateEndpoint+0x1da>
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e38:	837b      	strh	r3, [r7, #26]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	441a      	add	r2, r3
 8003e44:	8b7b      	ldrh	r3, [r7, #26]
 8003e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e70:	833b      	strh	r3, [r7, #24]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	441a      	add	r2, r3
 8003e7c:	8b3b      	ldrh	r3, [r7, #24]
 8003e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea8:	82fb      	strh	r3, [r7, #22]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	441a      	add	r2, r3
 8003eb4:	8afb      	ldrh	r3, [r7, #22]
 8003eb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003edc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ee0:	82bb      	strh	r3, [r7, #20]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	8abb      	ldrh	r3, [r7, #20]
 8003eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]
 8003f02:	e0a3      	b.n	800404c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003f12:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <USB_DeactivateEndpoint+0x2d4>
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f32:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003f62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <USB_DeactivateEndpoint+0x324>
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f82:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	441a      	add	r2, r3
 8003fc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003fc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ff2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004000:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800400c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004010:	b29b      	uxth	r3, r3
 8004012:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800403c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004040:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004048:	b29b      	uxth	r3, r3
 800404a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3734      	adds	r7, #52	@ 0x34
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b0c2      	sub	sp, #264	@ 0x108
 800405e:	af00      	add	r7, sp, #0
 8004060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004068:	6018      	str	r0, [r3, #0]
 800406a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800406e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004072:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 86b7 	bne.w	8004df4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800408a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d908      	bls.n	80040b4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80040a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80040b2:	e007      	b.n	80040c4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80040b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80040c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	7b1b      	ldrb	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d13a      	bne.n	800414a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80040d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6959      	ldr	r1, [r3, #20]
 80040e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	88da      	ldrh	r2, [r3, #6]
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80040f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	f001 fc98 	bl	8005a30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800411a:	b29b      	uxth	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	00da      	lsls	r2, r3, #3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4413      	add	r3, r2
 8004136:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	f000 be1f 	b.w	8004d88 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800414a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800414e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	2b02      	cmp	r3, #2
 8004158:	f040 8462 	bne.w	8004a20 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800415c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800416c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	429a      	cmp	r2, r3
 8004176:	f240 83df 	bls.w	8004938 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800417a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800417e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800419c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80041a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80041c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80041ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80041d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6a1a      	ldr	r2, [r3, #32]
 80041e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e6:	1ad2      	subs	r2, r2, r3
 80041e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80041f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 81c7 	beq.w	80045aa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800421c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	633b      	str	r3, [r7, #48]	@ 0x30
 8004228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800422c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	785b      	ldrb	r3, [r3, #1]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d177      	bne.n	8004328 <USB_EPStartXfer+0x2ce>
 8004238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800423c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004248:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004252:	b29b      	uxth	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004258:	4413      	add	r3, r2
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800425c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	00da      	lsls	r2, r3, #3
 800426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426c:	4413      	add	r3, r2
 800426e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800427e:	b29a      	uxth	r2, r3
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	801a      	strh	r2, [r3, #0]
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004288:	2b3e      	cmp	r3, #62	@ 0x3e
 800428a:	d921      	bls.n	80042d0 <USB_EPStartXfer+0x276>
 800428c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <USB_EPStartXfer+0x252>
 80042a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80042a6:	3b01      	subs	r3, #1
 80042a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	029b      	lsls	r3, r3, #10
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	4313      	orrs	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	e050      	b.n	8004372 <USB_EPStartXfer+0x318>
 80042d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <USB_EPStartXfer+0x294>
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	801a      	strh	r2, [r3, #0]
 80042ec:	e041      	b.n	8004372 <USB_EPStartXfer+0x318>
 80042ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80042f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <USB_EPStartXfer+0x2b4>
 8004304:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004308:	3301      	adds	r3, #1
 800430a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29a      	uxth	r2, r3
 8004314:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004318:	b29b      	uxth	r3, r3
 800431a:	029b      	lsls	r3, r3, #10
 800431c:	b29b      	uxth	r3, r3
 800431e:	4313      	orrs	r3, r2
 8004320:	b29a      	uxth	r2, r3
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	e024      	b.n	8004372 <USB_EPStartXfer+0x318>
 8004328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800432c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d11c      	bne.n	8004372 <USB_EPStartXfer+0x318>
 8004338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800433c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	4413      	add	r3, r2
 800434e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	00da      	lsls	r2, r3, #3
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	4413      	add	r3, r2
 8004362:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436c:	b29a      	uxth	r2, r3
 800436e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004370:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	895b      	ldrh	r3, [r3, #10]
 800437e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6959      	ldr	r1, [r3, #20]
 800438e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004392:	b29b      	uxth	r3, r3
 8004394:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004398:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800439c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80043a0:	6800      	ldr	r0, [r0, #0]
 80043a2:	f001 fb45 	bl	8005a30 <USB_WritePMA>
            ep->xfer_buff += len;
 80043a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b6:	441a      	add	r2, r3
 80043b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80043c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d90f      	bls.n	8004400 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80043e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f0:	1ad2      	subs	r2, r2, r3
 80043f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	621a      	str	r2, [r3, #32]
 80043fe:	e00e      	b.n	800441e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800441e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d177      	bne.n	800451e <USB_EPStartXfer+0x4c4>
 800442e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004432:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800443e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004448:	b29b      	uxth	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	4413      	add	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	00da      	lsls	r2, r3, #3
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	4413      	add	r3, r2
 8004464:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004474:	b29a      	uxth	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004480:	d921      	bls.n	80044c6 <USB_EPStartXfer+0x46c>
 8004482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800448c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	2b00      	cmp	r3, #0
 8004496:	d104      	bne.n	80044a2 <USB_EPStartXfer+0x448>
 8004498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449c:	3b01      	subs	r3, #1
 800449e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	029b      	lsls	r3, r3, #10
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044be:	b29a      	uxth	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	e056      	b.n	8004574 <USB_EPStartXfer+0x51a>
 80044c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <USB_EPStartXfer+0x48a>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044dc:	b29a      	uxth	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	801a      	strh	r2, [r3, #0]
 80044e2:	e047      	b.n	8004574 <USB_EPStartXfer+0x51a>
 80044e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80044ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <USB_EPStartXfer+0x4aa>
 80044fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044fe:	3301      	adds	r3, #1
 8004500:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29a      	uxth	r2, r3
 800450a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800450e:	b29b      	uxth	r3, r3
 8004510:	029b      	lsls	r3, r3, #10
 8004512:	b29b      	uxth	r3, r3
 8004514:	4313      	orrs	r3, r2
 8004516:	b29a      	uxth	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	e02a      	b.n	8004574 <USB_EPStartXfer+0x51a>
 800451e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	785b      	ldrb	r3, [r3, #1]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d122      	bne.n	8004574 <USB_EPStartXfer+0x51a>
 800452e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800453e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004548:	b29b      	uxth	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	4413      	add	r3, r2
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	00da      	lsls	r2, r3, #3
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	4413      	add	r3, r2
 8004564:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456e:	b29a      	uxth	r2, r3
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	891b      	ldrh	r3, [r3, #8]
 8004580:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6959      	ldr	r1, [r3, #20]
 8004590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004594:	b29b      	uxth	r3, r3
 8004596:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800459a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800459e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80045a2:	6800      	ldr	r0, [r0, #0]
 80045a4:	f001 fa44 	bl	8005a30 <USB_WritePMA>
 80045a8:	e3ee      	b.n	8004d88 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80045aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d177      	bne.n	80046aa <USB_EPStartXfer+0x650>
 80045ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045da:	4413      	add	r3, r2
 80045dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	00da      	lsls	r2, r3, #3
 80045ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ee:	4413      	add	r3, r2
 80045f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004600:	b29a      	uxth	r2, r3
 8004602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800460a:	2b3e      	cmp	r3, #62	@ 0x3e
 800460c:	d921      	bls.n	8004652 <USB_EPStartXfer+0x5f8>
 800460e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <USB_EPStartXfer+0x5d4>
 8004624:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004628:	3b01      	subs	r3, #1
 800462a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800462e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29a      	uxth	r2, r3
 8004634:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004638:	b29b      	uxth	r3, r3
 800463a:	029b      	lsls	r3, r3, #10
 800463c:	b29b      	uxth	r3, r3
 800463e:	4313      	orrs	r3, r2
 8004640:	b29b      	uxth	r3, r3
 8004642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800464a:	b29a      	uxth	r2, r3
 800464c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	e056      	b.n	8004700 <USB_EPStartXfer+0x6a6>
 8004652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <USB_EPStartXfer+0x616>
 800465a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004668:	b29a      	uxth	r2, r3
 800466a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800466c:	801a      	strh	r2, [r3, #0]
 800466e:	e047      	b.n	8004700 <USB_EPStartXfer+0x6a6>
 8004670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800467a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <USB_EPStartXfer+0x636>
 8004686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800468a:	3301      	adds	r3, #1
 800468c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29a      	uxth	r2, r3
 8004696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800469a:	b29b      	uxth	r3, r3
 800469c:	029b      	lsls	r3, r3, #10
 800469e:	b29b      	uxth	r3, r3
 80046a0:	4313      	orrs	r3, r2
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a6:	801a      	strh	r2, [r3, #0]
 80046a8:	e02a      	b.n	8004700 <USB_EPStartXfer+0x6a6>
 80046aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d122      	bne.n	8004700 <USB_EPStartXfer+0x6a6>
 80046ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80046c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046da:	4413      	add	r3, r2
 80046dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80046de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	00da      	lsls	r2, r3, #3
 80046ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ee:	4413      	add	r3, r2
 80046f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	891b      	ldrh	r3, [r3, #8]
 800470c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6959      	ldr	r1, [r3, #20]
 800471c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004720:	b29b      	uxth	r3, r3
 8004722:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004726:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800472a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800472e:	6800      	ldr	r0, [r0, #0]
 8004730:	f001 f97e 	bl	8005a30 <USB_WritePMA>
            ep->xfer_buff += len;
 8004734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004744:	441a      	add	r2, r3
 8004746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800474a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	d90f      	bls.n	800478e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800476e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a1a      	ldr	r2, [r3, #32]
 800477a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	621a      	str	r2, [r3, #32]
 800478c:	e00e      	b.n	80047ac <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800478e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800479e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2200      	movs	r2, #0
 80047aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80047b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d177      	bne.n	80048b8 <USB_EPStartXfer+0x85e>
 80047c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e8:	4413      	add	r3, r2
 80047ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	00da      	lsls	r2, r3, #3
 80047fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fc:	4413      	add	r3, r2
 80047fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
 8004804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800480e:	b29a      	uxth	r2, r3
 8004810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004818:	2b3e      	cmp	r3, #62	@ 0x3e
 800481a:	d921      	bls.n	8004860 <USB_EPStartXfer+0x806>
 800481c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	2b00      	cmp	r3, #0
 8004830:	d104      	bne.n	800483c <USB_EPStartXfer+0x7e2>
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004836:	3b01      	subs	r3, #1
 8004838:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800483c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29a      	uxth	r2, r3
 8004842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004846:	b29b      	uxth	r3, r3
 8004848:	029b      	lsls	r3, r3, #10
 800484a:	b29b      	uxth	r3, r3
 800484c:	4313      	orrs	r3, r2
 800484e:	b29b      	uxth	r3, r3
 8004850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004858:	b29a      	uxth	r2, r3
 800485a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	e050      	b.n	8004902 <USB_EPStartXfer+0x8a8>
 8004860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <USB_EPStartXfer+0x824>
 8004868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004876:	b29a      	uxth	r2, r3
 8004878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800487a:	801a      	strh	r2, [r3, #0]
 800487c:	e041      	b.n	8004902 <USB_EPStartXfer+0x8a8>
 800487e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <USB_EPStartXfer+0x844>
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004898:	3301      	adds	r3, #1
 800489a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800489e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	029b      	lsls	r3, r3, #10
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	4313      	orrs	r3, r2
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	e024      	b.n	8004902 <USB_EPStartXfer+0x8a8>
 80048b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d11c      	bne.n	8004902 <USB_EPStartXfer+0x8a8>
 80048c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048dc:	4413      	add	r3, r2
 80048de:	643b      	str	r3, [r7, #64]	@ 0x40
 80048e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	00da      	lsls	r2, r3, #3
 80048ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f0:	4413      	add	r3, r2
 80048f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004900:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	895b      	ldrh	r3, [r3, #10]
 800490e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6959      	ldr	r1, [r3, #20]
 800491e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004922:	b29b      	uxth	r3, r3
 8004924:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004928:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800492c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004930:	6800      	ldr	r0, [r0, #0]
 8004932:	f001 f87d 	bl	8005a30 <USB_WritePMA>
 8004936:	e227      	b.n	8004d88 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800493c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800494c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800496a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	441a      	add	r2, r3
 800498c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800499c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049c4:	4413      	add	r3, r2
 80049c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	00da      	lsls	r2, r3, #3
 80049d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049d8:	4413      	add	r3, r2
 80049da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80049ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	891b      	ldrh	r3, [r3, #8]
 80049f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6959      	ldr	r1, [r3, #20]
 8004a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004a10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004a14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004a18:	6800      	ldr	r0, [r0, #0]
 8004a1a:	f001 f809 	bl	8005a30 <USB_WritePMA>
 8004a1e:	e1b3      	b.n	8004d88 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a30:	1ad2      	subs	r2, r2, r3
 8004a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80c6 	beq.w	8004bf2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d177      	bne.n	8004b72 <USB_EPStartXfer+0xb18>
 8004a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004aa2:	4413      	add	r3, r2
 8004aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	00da      	lsls	r2, r3, #3
 8004ab4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004abc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004abe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004acc:	801a      	strh	r2, [r3, #0]
 8004ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ad4:	d921      	bls.n	8004b1a <USB_EPStartXfer+0xac0>
 8004ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <USB_EPStartXfer+0xa9c>
 8004aec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004af0:	3b01      	subs	r3, #1
 8004af2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004af6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	029b      	lsls	r3, r3, #10
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	4313      	orrs	r3, r2
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b16:	801a      	strh	r2, [r3, #0]
 8004b18:	e050      	b.n	8004bbc <USB_EPStartXfer+0xb62>
 8004b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <USB_EPStartXfer+0xade>
 8004b22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	e041      	b.n	8004bbc <USB_EPStartXfer+0xb62>
 8004b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3c:	085b      	lsrs	r3, r3, #1
 8004b3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d004      	beq.n	8004b58 <USB_EPStartXfer+0xafe>
 8004b4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004b52:	3301      	adds	r3, #1
 8004b54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	029b      	lsls	r3, r3, #10
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	e024      	b.n	8004bbc <USB_EPStartXfer+0xb62>
 8004b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d11c      	bne.n	8004bbc <USB_EPStartXfer+0xb62>
 8004b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b96:	4413      	add	r3, r2
 8004b98:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	00da      	lsls	r2, r3, #3
 8004ba8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004baa:	4413      	add	r3, r2
 8004bac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	895b      	ldrh	r3, [r3, #10]
 8004bc8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6959      	ldr	r1, [r3, #20]
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004be2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004be6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	f000 ff20 	bl	8005a30 <USB_WritePMA>
 8004bf0:	e0ca      	b.n	8004d88 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d177      	bne.n	8004cf2 <USB_EPStartXfer+0xc98>
 8004c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c22:	4413      	add	r3, r2
 8004c24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	00da      	lsls	r2, r3, #3
 8004c34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c36:	4413      	add	r3, r2
 8004c38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c4c:	801a      	strh	r2, [r3, #0]
 8004c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c52:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c54:	d921      	bls.n	8004c9a <USB_EPStartXfer+0xc40>
 8004c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <USB_EPStartXfer+0xc1c>
 8004c6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004c70:	3b01      	subs	r3, #1
 8004c72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	029b      	lsls	r3, r3, #10
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	4313      	orrs	r3, r2
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c96:	801a      	strh	r2, [r3, #0]
 8004c98:	e05c      	b.n	8004d54 <USB_EPStartXfer+0xcfa>
 8004c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <USB_EPStartXfer+0xc5e>
 8004ca2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	e04d      	b.n	8004d54 <USB_EPStartXfer+0xcfa>
 8004cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <USB_EPStartXfer+0xc7e>
 8004cce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	029b      	lsls	r3, r3, #10
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	e030      	b.n	8004d54 <USB_EPStartXfer+0xcfa>
 8004cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d128      	bne.n	8004d54 <USB_EPStartXfer+0xcfa>
 8004d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d26:	4413      	add	r3, r2
 8004d28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	00da      	lsls	r2, r3, #3
 8004d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d3e:	4413      	add	r3, r2
 8004d40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	891b      	ldrh	r3, [r3, #8]
 8004d60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6959      	ldr	r1, [r3, #20]
 8004d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004d7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004d7e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004d82:	6800      	ldr	r0, [r0, #0]
 8004d84:	f000 fe54 	bl	8005a30 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dae:	817b      	strh	r3, [r7, #10]
 8004db0:	897b      	ldrh	r3, [r7, #10]
 8004db2:	f083 0310 	eor.w	r3, r3, #16
 8004db6:	817b      	strh	r3, [r7, #10]
 8004db8:	897b      	ldrh	r3, [r7, #10]
 8004dba:	f083 0320 	eor.w	r3, r3, #32
 8004dbe:	817b      	strh	r3, [r7, #10]
 8004dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	897b      	ldrh	r3, [r7, #10]
 8004ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	8013      	strh	r3, [r2, #0]
 8004df0:	f000 bcde 	b.w	80057b0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	7b1b      	ldrb	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f040 80bb 	bne.w	8004f7c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d917      	bls.n	8004e52 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8004e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e42:	1ad2      	subs	r2, r2, r3
 8004e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	619a      	str	r2, [r3, #24]
 8004e50:	e00e      	b.n	8004e70 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8004e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e94:	4413      	add	r3, r2
 8004e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	00da      	lsls	r2, r3, #3
 8004ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004eac:	4413      	add	r3, r2
 8004eae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004eb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ece:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ed0:	d924      	bls.n	8004f1c <USB_EPStartXfer+0xec2>
 8004ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee0:	f003 031f 	and.w	r3, r3, #31
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <USB_EPStartXfer+0xe98>
 8004ee8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004eec:	3b01      	subs	r3, #1
 8004eee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	029b      	lsls	r3, r3, #10
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	4313      	orrs	r3, r2
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	f000 bc10 	b.w	800573c <USB_EPStartXfer+0x16e2>
 8004f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10c      	bne.n	8004f3e <USB_EPStartXfer+0xee4>
 8004f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f3a:	801a      	strh	r2, [r3, #0]
 8004f3c:	e3fe      	b.n	800573c <USB_EPStartXfer+0x16e2>
 8004f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <USB_EPStartXfer+0xf04>
 8004f54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	029b      	lsls	r3, r3, #10
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4313      	orrs	r3, r2
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	e3df      	b.n	800573c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	78db      	ldrb	r3, [r3, #3]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	f040 8218 	bne.w	80053be <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f040 809d 	bne.w	80050da <USB_EPStartXfer+0x1080>
 8004fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	00da      	lsls	r2, r3, #3
 8004fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fdc:	4413      	add	r3, r2
 8004fde:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b3e      	cmp	r3, #62	@ 0x3e
 8005008:	d92b      	bls.n	8005062 <USB_EPStartXfer+0x1008>
 800500a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800500e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800501c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <USB_EPStartXfer+0xfe0>
 8005030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005034:	3b01      	subs	r3, #1
 8005036:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800503a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29a      	uxth	r2, r3
 8005042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005046:	b29b      	uxth	r3, r3
 8005048:	029b      	lsls	r3, r3, #10
 800504a:	b29b      	uxth	r3, r3
 800504c:	4313      	orrs	r3, r2
 800504e:	b29b      	uxth	r3, r3
 8005050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005058:	b29a      	uxth	r2, r3
 800505a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e070      	b.n	8005144 <USB_EPStartXfer+0x10ea>
 8005062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10c      	bne.n	800508c <USB_EPStartXfer+0x1032>
 8005072:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005082:	b29a      	uxth	r2, r3
 8005084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	e05b      	b.n	8005144 <USB_EPStartXfer+0x10ea>
 800508c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800509e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <USB_EPStartXfer+0x1062>
 80050b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b6:	3301      	adds	r3, #1
 80050b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	4313      	orrs	r3, r2
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050d6:	801a      	strh	r2, [r3, #0]
 80050d8:	e034      	b.n	8005144 <USB_EPStartXfer+0x10ea>
 80050da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d12c      	bne.n	8005144 <USB_EPStartXfer+0x10ea>
 80050ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800510e:	4413      	add	r3, r2
 8005110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	00da      	lsls	r2, r3, #3
 8005122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005126:	4413      	add	r3, r2
 8005128:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800512c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	b29a      	uxth	r2, r3
 800513e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005142:	801a      	strh	r2, [r3, #0]
 8005144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005148:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	2b00      	cmp	r3, #0
 8005160:	f040 809d 	bne.w	800529e <USB_EPStartXfer+0x1244>
 8005164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005168:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005180:	b29b      	uxth	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005188:	4413      	add	r3, r2
 800518a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800518e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	00da      	lsls	r2, r3, #3
 800519c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051a0:	4413      	add	r3, r2
 80051a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80051a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051bc:	801a      	strh	r2, [r3, #0]
 80051be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80051cc:	d92b      	bls.n	8005226 <USB_EPStartXfer+0x11cc>
 80051ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <USB_EPStartXfer+0x11a4>
 80051f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f8:	3b01      	subs	r3, #1
 80051fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29a      	uxth	r2, r3
 8005206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800520a:	b29b      	uxth	r3, r3
 800520c:	029b      	lsls	r3, r3, #10
 800520e:	b29b      	uxth	r3, r3
 8005210:	4313      	orrs	r3, r2
 8005212:	b29b      	uxth	r3, r3
 8005214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521c:	b29a      	uxth	r2, r3
 800521e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005222:	801a      	strh	r2, [r3, #0]
 8005224:	e069      	b.n	80052fa <USB_EPStartXfer+0x12a0>
 8005226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10c      	bne.n	8005250 <USB_EPStartXfer+0x11f6>
 8005236:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005246:	b29a      	uxth	r2, r3
 8005248:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	e054      	b.n	80052fa <USB_EPStartXfer+0x12a0>
 8005250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <USB_EPStartXfer+0x1226>
 8005276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527a:	3301      	adds	r3, #1
 800527c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29a      	uxth	r2, r3
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800528c:	b29b      	uxth	r3, r3
 800528e:	029b      	lsls	r3, r3, #10
 8005290:	b29b      	uxth	r3, r3
 8005292:	4313      	orrs	r3, r2
 8005294:	b29a      	uxth	r2, r3
 8005296:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	e02d      	b.n	80052fa <USB_EPStartXfer+0x12a0>
 800529e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d125      	bne.n	80052fa <USB_EPStartXfer+0x12a0>
 80052ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052c4:	4413      	add	r3, r2
 80052c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	00da      	lsls	r2, r3, #3
 80052d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052dc:	4413      	add	r3, r2
 80052de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80052fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8218 	beq.w	800573c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800530c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800532c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <USB_EPStartXfer+0x12ea>
 8005338:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800533c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10d      	bne.n	8005360 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005344:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800534c:	2b00      	cmp	r3, #0
 800534e:	f040 81f5 	bne.w	800573c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005352:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	f040 81ee 	bne.w	800573c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005364:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005386:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800538a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	441a      	add	r2, r3
 80053a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80053a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	8013      	strh	r3, [r2, #0]
 80053bc:	e1be      	b.n	800573c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80053be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	78db      	ldrb	r3, [r3, #3]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	f040 81b4 	bne.w	8005738 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80053d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d917      	bls.n	800541c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80053ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80053fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540c:	1ad2      	subs	r2, r2, r3
 800540e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	619a      	str	r2, [r3, #24]
 800541a:	e00e      	b.n	800543a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800541c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800542c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2200      	movs	r2, #0
 8005438:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800543a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 8085 	bne.w	8005556 <USB_EPStartXfer+0x14fc>
 800544c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800545a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005468:	b29b      	uxth	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005470:	4413      	add	r3, r2
 8005472:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	00da      	lsls	r2, r3, #3
 8005484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005488:	4413      	add	r3, r2
 800548a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800548e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549e:	b29a      	uxth	r2, r3
 80054a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80054ac:	d923      	bls.n	80054f6 <USB_EPStartXfer+0x149c>
 80054ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <USB_EPStartXfer+0x1474>
 80054c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c8:	3b01      	subs	r3, #1
 80054ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80054ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4313      	orrs	r3, r2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	e060      	b.n	80055b8 <USB_EPStartXfer+0x155e>
 80054f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10c      	bne.n	8005518 <USB_EPStartXfer+0x14be>
 80054fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550e:	b29a      	uxth	r2, r3
 8005510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	e04f      	b.n	80055b8 <USB_EPStartXfer+0x155e>
 8005518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d004      	beq.n	8005538 <USB_EPStartXfer+0x14de>
 800552e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005532:	3301      	adds	r3, #1
 8005534:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005538:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29a      	uxth	r2, r3
 8005540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005544:	b29b      	uxth	r3, r3
 8005546:	029b      	lsls	r3, r3, #10
 8005548:	b29b      	uxth	r3, r3
 800554a:	4313      	orrs	r3, r2
 800554c:	b29a      	uxth	r2, r3
 800554e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	e030      	b.n	80055b8 <USB_EPStartXfer+0x155e>
 8005556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d128      	bne.n	80055b8 <USB_EPStartXfer+0x155e>
 8005566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005582:	b29b      	uxth	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800558a:	4413      	add	r3, r2
 800558c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	00da      	lsls	r2, r3, #3
 800559e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055a2:	4413      	add	r3, r2
 80055a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	785b      	ldrb	r3, [r3, #1]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 8085 	bne.w	80056e2 <USB_EPStartXfer+0x1688>
 80055d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80055e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80055fc:	4413      	add	r3, r2
 80055fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	00da      	lsls	r2, r3, #3
 8005610:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005614:	4413      	add	r3, r2
 8005616:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800561a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800561e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29b      	uxth	r3, r3
 8005626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800562a:	b29a      	uxth	r2, r3
 800562c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005636:	2b3e      	cmp	r3, #62	@ 0x3e
 8005638:	d923      	bls.n	8005682 <USB_EPStartXfer+0x1628>
 800563a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <USB_EPStartXfer+0x1600>
 8005650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005654:	3b01      	subs	r3, #1
 8005656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800565a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29a      	uxth	r2, r3
 8005662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005666:	b29b      	uxth	r3, r3
 8005668:	029b      	lsls	r3, r3, #10
 800566a:	b29b      	uxth	r3, r3
 800566c:	4313      	orrs	r3, r2
 800566e:	b29b      	uxth	r3, r3
 8005670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005678:	b29a      	uxth	r2, r3
 800567a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	e05c      	b.n	800573c <USB_EPStartXfer+0x16e2>
 8005682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10c      	bne.n	80056a4 <USB_EPStartXfer+0x164a>
 800568a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569a:	b29a      	uxth	r2, r3
 800569c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	e04b      	b.n	800573c <USB_EPStartXfer+0x16e2>
 80056a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a8:	085b      	lsrs	r3, r3, #1
 80056aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d004      	beq.n	80056c4 <USB_EPStartXfer+0x166a>
 80056ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056be:	3301      	adds	r3, #1
 80056c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	029b      	lsls	r3, r3, #10
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4313      	orrs	r3, r2
 80056d8:	b29a      	uxth	r2, r3
 80056da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	e02c      	b.n	800573c <USB_EPStartXfer+0x16e2>
 80056e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d124      	bne.n	800573c <USB_EPStartXfer+0x16e2>
 80056f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005700:	b29b      	uxth	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005708:	4413      	add	r3, r2
 800570a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800570e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	00da      	lsls	r2, r3, #3
 800571c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005720:	4413      	add	r3, r2
 8005722:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005726:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572e:	b29a      	uxth	r2, r3
 8005730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	e001      	b.n	800573c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e03a      	b.n	80057b2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800573c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005740:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800575e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005762:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005766:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800576a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800576e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005772:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005776:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800577a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800577e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	441a      	add	r2, r3
 8005798:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800579c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d020      	beq.n	8005810 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e4:	81bb      	strh	r3, [r7, #12]
 80057e6:	89bb      	ldrh	r3, [r7, #12]
 80057e8:	f083 0310 	eor.w	r3, r3, #16
 80057ec:	81bb      	strh	r3, [r7, #12]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	441a      	add	r2, r3
 80057f8:	89bb      	ldrh	r3, [r7, #12]
 80057fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580a:	b29b      	uxth	r3, r3
 800580c:	8013      	strh	r3, [r2, #0]
 800580e:	e01f      	b.n	8005850 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005826:	81fb      	strh	r3, [r7, #14]
 8005828:	89fb      	ldrh	r3, [r7, #14]
 800582a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800582e:	81fb      	strh	r3, [r7, #14]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	89fb      	ldrh	r3, [r7, #14]
 800583c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800584c:	b29b      	uxth	r3, r3
 800584e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800585e:	b480      	push	{r7}
 8005860:	b087      	sub	sp, #28
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	7b1b      	ldrb	r3, [r3, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f040 809d 	bne.w	80059ac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d04c      	beq.n	8005914 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	823b      	strh	r3, [r7, #16]
 8005888:	8a3b      	ldrh	r3, [r7, #16]
 800588a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01b      	beq.n	80058ca <USB_EPClearStall+0x6c>
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a8:	81fb      	strh	r3, [r7, #14]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	441a      	add	r2, r3
 80058b4:	89fb      	ldrh	r3, [r7, #14]
 80058b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	78db      	ldrb	r3, [r3, #3]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d06c      	beq.n	80059ac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e8:	81bb      	strh	r3, [r7, #12]
 80058ea:	89bb      	ldrh	r3, [r7, #12]
 80058ec:	f083 0320 	eor.w	r3, r3, #32
 80058f0:	81bb      	strh	r3, [r7, #12]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	441a      	add	r2, r3
 80058fc:	89bb      	ldrh	r3, [r7, #12]
 80058fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800590a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590e:	b29b      	uxth	r3, r3
 8005910:	8013      	strh	r3, [r2, #0]
 8005912:	e04b      	b.n	80059ac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	82fb      	strh	r3, [r7, #22]
 8005922:	8afb      	ldrh	r3, [r7, #22]
 8005924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <USB_EPClearStall+0x106>
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800593e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005942:	82bb      	strh	r3, [r7, #20]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	441a      	add	r2, r3
 800594e:	8abb      	ldrh	r3, [r7, #20]
 8005950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005958:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800595c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005960:	b29b      	uxth	r3, r3
 8005962:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597a:	827b      	strh	r3, [r7, #18]
 800597c:	8a7b      	ldrh	r3, [r7, #18]
 800597e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005982:	827b      	strh	r3, [r7, #18]
 8005984:	8a7b      	ldrh	r3, [r7, #18]
 8005986:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800598a:	827b      	strh	r3, [r7, #18]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	8a7b      	ldrh	r3, [r7, #18]
 8005998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800599c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d103      	bne.n	80059d4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2280      	movs	r2, #128	@ 0x80
 80059d0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b08b      	sub	sp, #44	@ 0x2c
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	460b      	mov	r3, r1
 8005a40:	80fb      	strh	r3, [r7, #6]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a46:	88bb      	ldrh	r3, [r7, #4]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a56:	88fa      	ldrh	r2, [r7, #6]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a66:	e01b      	b.n	8005aa0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3301      	adds	r3, #1
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	b21a      	sxth	r2, r3
 8005a78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	b21b      	sxth	r3, r3
 8005a80:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	8a7a      	ldrh	r2, [r7, #18]
 8005a86:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	3302      	adds	r3, #2
 8005a8c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	3301      	adds	r3, #1
 8005a92:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	3301      	adds	r3, #1
 8005a98:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e0      	bne.n	8005a68 <USB_WritePMA+0x38>
  }
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	372c      	adds	r7, #44	@ 0x2c
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b08b      	sub	sp, #44	@ 0x2c
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	4611      	mov	r1, r2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	80fb      	strh	r3, [r7, #6]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005aca:	88bb      	ldrh	r3, [r7, #4]
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ada:	88fa      	ldrh	r2, [r7, #6]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ae4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aea:	e018      	b.n	8005b1e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	3302      	adds	r3, #2
 8005af8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3301      	adds	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e3      	bne.n	8005aec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005b24:	88bb      	ldrh	r3, [r7, #4]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	701a      	strb	r2, [r3, #0]
  }
}
 8005b40:	bf00      	nop
 8005b42:	372c      	adds	r7, #44	@ 0x2c
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005b5c:	f002 f8a4 	bl	8007ca8 <USBD_static_malloc>
 8005b60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8005b70:	2302      	movs	r3, #2
 8005b72:	e066      	b.n	8005c42 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	7c1b      	ldrb	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d119      	bne.n	8005bb8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b88:	2202      	movs	r2, #2
 8005b8a:	2181      	movs	r1, #129	@ 0x81
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 ff32 	bl	80079f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f001 ff28 	bl	80079f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8005bb6:	e016      	b.n	8005be6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bb8:	2340      	movs	r3, #64	@ 0x40
 8005bba:	2202      	movs	r2, #2
 8005bbc:	2181      	movs	r1, #129	@ 0x81
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 ff19 	bl	80079f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bca:	2340      	movs	r3, #64	@ 0x40
 8005bcc:	2202      	movs	r2, #2
 8005bce:	2101      	movs	r1, #1
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 ff10 	bl	80079f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2210      	movs	r2, #16
 8005be2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005be6:	2308      	movs	r3, #8
 8005be8:	2203      	movs	r2, #3
 8005bea:	2182      	movs	r1, #130	@ 0x82
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 ff02 	bl	80079f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	7c1b      	ldrb	r3, [r3, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c26:	2101      	movs	r1, #1
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 ffd3 	bl	8007bd4 <USBD_LL_PrepareReceive>
 8005c2e:	e007      	b.n	8005c40 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c36:	2340      	movs	r3, #64	@ 0x40
 8005c38:	2101      	movs	r1, #1
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f001 ffca 	bl	8007bd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c56:	2181      	movs	r1, #129	@ 0x81
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 fef2 	bl	8007a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c64:	2101      	movs	r1, #1
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 feeb 	bl	8007a42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005c74:	2182      	movs	r1, #130	@ 0x82
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 fee3 	bl	8007a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00e      	beq.n	8005cb4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f002 f80c 	bl	8007cc4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005cd0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e0af      	b.n	8005e48 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d03f      	beq.n	8005d74 <USBD_CDC_Setup+0xb4>
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	f040 809f 	bne.w	8005e38 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	88db      	ldrh	r3, [r3, #6]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d02e      	beq.n	8005d60 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	b25b      	sxtb	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	da16      	bge.n	8005d3a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005d18:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	88d2      	ldrh	r2, [r2, #6]
 8005d1e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	88db      	ldrh	r3, [r3, #6]
 8005d24:	2b07      	cmp	r3, #7
 8005d26:	bf28      	it	cs
 8005d28:	2307      	movcs	r3, #7
 8005d2a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	89fa      	ldrh	r2, [r7, #14]
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 fa9d 	bl	8007272 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005d38:	e085      	b.n	8005e46 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	785a      	ldrb	r2, [r3, #1]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	88db      	ldrh	r3, [r3, #6]
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d50:	6939      	ldr	r1, [r7, #16]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	88db      	ldrh	r3, [r3, #6]
 8005d56:	461a      	mov	r2, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fab6 	bl	80072ca <USBD_CtlPrepareRx>
      break;
 8005d5e:	e072      	b.n	8005e46 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	7850      	ldrb	r0, [r2, #1]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	4798      	blx	r3
      break;
 8005d72:	e068      	b.n	8005e46 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2b0b      	cmp	r3, #11
 8005d7a:	d852      	bhi.n	8005e22 <USBD_CDC_Setup+0x162>
 8005d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d84 <USBD_CDC_Setup+0xc4>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005db5 	.word	0x08005db5
 8005d88:	08005e31 	.word	0x08005e31
 8005d8c:	08005e23 	.word	0x08005e23
 8005d90:	08005e23 	.word	0x08005e23
 8005d94:	08005e23 	.word	0x08005e23
 8005d98:	08005e23 	.word	0x08005e23
 8005d9c:	08005e23 	.word	0x08005e23
 8005da0:	08005e23 	.word	0x08005e23
 8005da4:	08005e23 	.word	0x08005e23
 8005da8:	08005e23 	.word	0x08005e23
 8005dac:	08005ddf 	.word	0x08005ddf
 8005db0:	08005e09 	.word	0x08005e09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d107      	bne.n	8005dd0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005dc0:	f107 030a 	add.w	r3, r7, #10
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 fa52 	bl	8007272 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005dce:	e032      	b.n	8005e36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 f9dc 	bl	8007190 <USBD_CtlError>
            ret = USBD_FAIL;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	75fb      	strb	r3, [r7, #23]
          break;
 8005ddc:	e02b      	b.n	8005e36 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d107      	bne.n	8005dfa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005dea:	f107 030d 	add.w	r3, r7, #13
 8005dee:	2201      	movs	r2, #1
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 fa3d 	bl	8007272 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005df8:	e01d      	b.n	8005e36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f001 f9c7 	bl	8007190 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e02:	2303      	movs	r3, #3
 8005e04:	75fb      	strb	r3, [r7, #23]
          break;
 8005e06:	e016      	b.n	8005e36 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d00f      	beq.n	8005e34 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 f9ba 	bl	8007190 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e20:	e008      	b.n	8005e34 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 f9b3 	bl	8007190 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e2e:	e002      	b.n	8005e36 <USBD_CDC_Setup+0x176>
          break;
 8005e30:	bf00      	nop
 8005e32:	e008      	b.n	8005e46 <USBD_CDC_Setup+0x186>
          break;
 8005e34:	bf00      	nop
      }
      break;
 8005e36:	e006      	b.n	8005e46 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f001 f9a8 	bl	8007190 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e40:	2303      	movs	r3, #3
 8005e42:	75fb      	strb	r3, [r7, #23]
      break;
 8005e44:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8005e62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e04f      	b.n	8005f12 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005e78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	3318      	adds	r3, #24
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d029      	beq.n	8005ee4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e90:	78fa      	ldrb	r2, [r7, #3]
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3318      	adds	r3, #24
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	78f9      	ldrb	r1, [r7, #3]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	4403      	add	r3, r0
 8005eb0:	3320      	adds	r3, #32
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d110      	bne.n	8005ee4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005ec2:	78fa      	ldrb	r2, [r7, #3]
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	3318      	adds	r3, #24
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ed6:	78f9      	ldrb	r1, [r7, #3]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2200      	movs	r2, #0
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 fe58 	bl	8007b92 <USBD_LL_Transmit>
 8005ee2:	e015      	b.n	8005f10 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e015      	b.n	8005f68 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f001 fe68 	bl	8007c16 <USBD_LL_GetRxDataSize>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005f62:	4611      	mov	r1, r2
 8005f64:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e01a      	b.n	8005fc0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d014      	beq.n	8005fbe <USBD_CDC_EP0_RxReady+0x4e>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005f9a:	2bff      	cmp	r3, #255	@ 0xff
 8005f9c:	d00f      	beq.n	8005fbe <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8005fac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005fb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	22ff      	movs	r2, #255	@ 0xff
 8005fba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2243      	movs	r2, #67	@ 0x43
 8005fd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005fd6:	4b03      	ldr	r3, [pc, #12]	@ (8005fe4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	20000094 	.word	0x20000094

08005fe8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2243      	movs	r2, #67	@ 0x43
 8005ff4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005ff6:	4b03      	ldr	r3, [pc, #12]	@ (8006004 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	20000050 	.word	0x20000050

08006008 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2243      	movs	r2, #67	@ 0x43
 8006014:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006016:	4b03      	ldr	r3, [pc, #12]	@ (8006024 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	200000d8 	.word	0x200000d8

08006028 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	220a      	movs	r2, #10
 8006034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006036:	4b03      	ldr	r3, [pc, #12]	@ (8006044 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	2000000c 	.word	0x2000000c

08006048 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006058:	2303      	movs	r3, #3
 800605a:	e004      	b.n	8006066 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006072:	b480      	push	{r7}
 8006074:	b087      	sub	sp, #28
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006084:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800608c:	2303      	movs	r3, #3
 800608e:	e008      	b.n	80060a2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b085      	sub	sp, #20
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e004      	b.n	80060d4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e016      	b.n	800612c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	7c1b      	ldrb	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d109      	bne.n	800611a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800610c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006110:	2101      	movs	r1, #1
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 fd5e 	bl	8007bd4 <USBD_LL_PrepareReceive>
 8006118:	e007      	b.n	800612a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006120:	2340      	movs	r3, #64	@ 0x40
 8006122:	2101      	movs	r1, #1
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 fd55 	bl	8007bd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	4613      	mov	r3, r2
 8006140:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006148:	2303      	movs	r3, #3
 800614a:	e01f      	b.n	800618c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	79fa      	ldrb	r2, [r7, #7]
 800617e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f001 fbbd 	bl	8007900 <USBD_LL_Init>
 8006186:	4603      	mov	r3, r0
 8006188:	75fb      	strb	r3, [r7, #23]

  return ret;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e016      	b.n	80061da <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c8:	f107 020e 	add.w	r2, r7, #14
 80061cc:	4610      	mov	r0, r2
 80061ce:	4798      	blx	r3
 80061d0:	4602      	mov	r2, r0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f001 fbe8 	bl	80079c0 <USBD_LL_Start>
 80061f0:	4603      	mov	r3, r0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800621c:	2303      	movs	r3, #3
 800621e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	4611      	mov	r1, r2
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
 800623a:	4603      	mov	r3, r0
 800623c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	4611      	mov	r1, r2
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
  }

  return USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 ff46 	bl	800711c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800629e:	461a      	mov	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d01a      	beq.n	80062ea <USBD_LL_SetupStage+0x72>
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d822      	bhi.n	80062fe <USBD_LL_SetupStage+0x86>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <USBD_LL_SetupStage+0x4a>
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d00a      	beq.n	80062d6 <USBD_LL_SetupStage+0x5e>
 80062c0:	e01d      	b.n	80062fe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f9ee 	bl	80066ac <USBD_StdDevReq>
 80062d0:	4603      	mov	r3, r0
 80062d2:	73fb      	strb	r3, [r7, #15]
      break;
 80062d4:	e020      	b.n	8006318 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa52 	bl	8006788 <USBD_StdItfReq>
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]
      break;
 80062e8:	e016      	b.n	8006318 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fa91 	bl	800681a <USBD_StdEPReq>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]
      break;
 80062fc:	e00c      	b.n	8006318 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006304:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006308:	b2db      	uxtb	r3, r3
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fbb7 	bl	8007a80 <USBD_LL_StallEP>
 8006312:	4603      	mov	r3, r0
 8006314:	73fb      	strb	r3, [r7, #15]
      break;
 8006316:	bf00      	nop
  }

  return ret;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b086      	sub	sp, #24
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	460b      	mov	r3, r1
 800632c:	607a      	str	r2, [r7, #4]
 800632e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006330:	7afb      	ldrb	r3, [r7, #11]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d138      	bne.n	80063a8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800633c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006344:	2b03      	cmp	r3, #3
 8006346:	d14a      	bne.n	80063de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	429a      	cmp	r2, r3
 8006352:	d913      	bls.n	800637c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	1ad2      	subs	r2, r2, r3
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	4293      	cmp	r3, r2
 800636c:	bf28      	it	cs
 800636e:	4613      	movcs	r3, r2
 8006370:	461a      	mov	r2, r3
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 ffc5 	bl	8007304 <USBD_CtlContinueRx>
 800637a:	e030      	b.n	80063de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b03      	cmp	r3, #3
 8006386:	d10b      	bne.n	80063a0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 ffc0 	bl	8007326 <USBD_CtlSendStatus>
 80063a6:	e01a      	b.n	80063de <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d114      	bne.n	80063de <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00e      	beq.n	80063de <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	7afa      	ldrb	r2, [r7, #11]
 80063ca:	4611      	mov	r1, r2
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	4798      	blx	r3
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	e000      	b.n	80063e0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	460b      	mov	r3, r1
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063f6:	7afb      	ldrb	r3, [r7, #11]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d16b      	bne.n	80064d4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3314      	adds	r3, #20
 8006400:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006408:	2b02      	cmp	r3, #2
 800640a:	d156      	bne.n	80064ba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	429a      	cmp	r2, r3
 8006416:	d914      	bls.n	8006442 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	1ad2      	subs	r2, r2, r3
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	461a      	mov	r2, r3
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 ff3a 	bl	80072a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006434:	2300      	movs	r3, #0
 8006436:	2200      	movs	r2, #0
 8006438:	2100      	movs	r1, #0
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f001 fbca 	bl	8007bd4 <USBD_LL_PrepareReceive>
 8006440:	e03b      	b.n	80064ba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	d11c      	bne.n	8006488 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006456:	429a      	cmp	r2, r3
 8006458:	d316      	bcc.n	8006488 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006464:	429a      	cmp	r2, r3
 8006466:	d20f      	bcs.n	8006488 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006468:	2200      	movs	r2, #0
 800646a:	2100      	movs	r1, #0
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 ff1b 	bl	80072a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800647a:	2300      	movs	r3, #0
 800647c:	2200      	movs	r2, #0
 800647e:	2100      	movs	r1, #0
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f001 fba7 	bl	8007bd4 <USBD_LL_PrepareReceive>
 8006486:	e018      	b.n	80064ba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b03      	cmp	r3, #3
 8006492:	d10b      	bne.n	80064ac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064ac:	2180      	movs	r1, #128	@ 0x80
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f001 fae6 	bl	8007a80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 ff49 	bl	800734c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d122      	bne.n	800650a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff fe98 	bl	80061fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80064d2:	e01a      	b.n	800650a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d114      	bne.n	800650a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00e      	beq.n	800650a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	7afa      	ldrb	r2, [r7, #11]
 80064f6:	4611      	mov	r1, r2
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	4798      	blx	r3
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	e000      	b.n	800650c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006544:	2303      	movs	r3, #3
 8006546:	e02f      	b.n	80065a8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00f      	beq.n	8006572 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6852      	ldr	r2, [r2, #4]
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	4611      	mov	r1, r2
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006572:	2340      	movs	r3, #64	@ 0x40
 8006574:	2200      	movs	r2, #0
 8006576:	2100      	movs	r1, #0
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fa3c 	bl	80079f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2240      	movs	r2, #64	@ 0x40
 800658a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800658e:	2340      	movs	r3, #64	@ 0x40
 8006590:	2200      	movs	r2, #0
 8006592:	2180      	movs	r1, #128	@ 0x80
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 fa2e 	bl	80079f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2240      	movs	r2, #64	@ 0x40
 80065a4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2204      	movs	r2, #4
 80065ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b04      	cmp	r3, #4
 800660e:	d106      	bne.n	800661e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006616:	b2da      	uxtb	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800663e:	2303      	movs	r3, #3
 8006640:	e012      	b.n	8006668 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b03      	cmp	r3, #3
 800664c:	d10b      	bne.n	8006666 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	3301      	adds	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800668e:	8a3b      	ldrh	r3, [r7, #16]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	b21a      	sxth	r2, r3
 8006694:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006698:	4313      	orrs	r3, r2
 800669a:	b21b      	sxth	r3, r3
 800669c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800669e:	89fb      	ldrh	r3, [r7, #14]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066c2:	2b40      	cmp	r3, #64	@ 0x40
 80066c4:	d005      	beq.n	80066d2 <USBD_StdDevReq+0x26>
 80066c6:	2b40      	cmp	r3, #64	@ 0x40
 80066c8:	d853      	bhi.n	8006772 <USBD_StdDevReq+0xc6>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <USBD_StdDevReq+0x3a>
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d14f      	bne.n	8006772 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]
      break;
 80066e4:	e04a      	b.n	800677c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	785b      	ldrb	r3, [r3, #1]
 80066ea:	2b09      	cmp	r3, #9
 80066ec:	d83b      	bhi.n	8006766 <USBD_StdDevReq+0xba>
 80066ee:	a201      	add	r2, pc, #4	@ (adr r2, 80066f4 <USBD_StdDevReq+0x48>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006749 	.word	0x08006749
 80066f8:	0800675d 	.word	0x0800675d
 80066fc:	08006767 	.word	0x08006767
 8006700:	08006753 	.word	0x08006753
 8006704:	08006767 	.word	0x08006767
 8006708:	08006727 	.word	0x08006727
 800670c:	0800671d 	.word	0x0800671d
 8006710:	08006767 	.word	0x08006767
 8006714:	0800673f 	.word	0x0800673f
 8006718:	08006731 	.word	0x08006731
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f9de 	bl	8006ae0 <USBD_GetDescriptor>
          break;
 8006724:	e024      	b.n	8006770 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fb6d 	bl	8006e08 <USBD_SetAddress>
          break;
 800672e:	e01f      	b.n	8006770 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fbac 	bl	8006e90 <USBD_SetConfig>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
          break;
 800673c:	e018      	b.n	8006770 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fc4b 	bl	8006fdc <USBD_GetConfig>
          break;
 8006746:	e013      	b.n	8006770 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fc7c 	bl	8007048 <USBD_GetStatus>
          break;
 8006750:	e00e      	b.n	8006770 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fcab 	bl	80070b0 <USBD_SetFeature>
          break;
 800675a:	e009      	b.n	8006770 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fcba 	bl	80070d8 <USBD_ClrFeature>
          break;
 8006764:	e004      	b.n	8006770 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fd11 	bl	8007190 <USBD_CtlError>
          break;
 800676e:	bf00      	nop
      }
      break;
 8006770:	e004      	b.n	800677c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fd0b 	bl	8007190 <USBD_CtlError>
      break;
 800677a:	bf00      	nop
  }

  return ret;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop

08006788 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800679e:	2b40      	cmp	r3, #64	@ 0x40
 80067a0:	d005      	beq.n	80067ae <USBD_StdItfReq+0x26>
 80067a2:	2b40      	cmp	r3, #64	@ 0x40
 80067a4:	d82f      	bhi.n	8006806 <USBD_StdItfReq+0x7e>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <USBD_StdItfReq+0x26>
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d12b      	bne.n	8006806 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d81d      	bhi.n	80067f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	889b      	ldrh	r3, [r3, #4]
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d813      	bhi.n	80067ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4798      	blx	r3
 80067d4:	4603      	mov	r3, r0
 80067d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	88db      	ldrh	r3, [r3, #6]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d110      	bne.n	8006802 <USBD_StdItfReq+0x7a>
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10d      	bne.n	8006802 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fd9d 	bl	8007326 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067ec:	e009      	b.n	8006802 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fccd 	bl	8007190 <USBD_CtlError>
          break;
 80067f6:	e004      	b.n	8006802 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fcc8 	bl	8007190 <USBD_CtlError>
          break;
 8006800:	e000      	b.n	8006804 <USBD_StdItfReq+0x7c>
          break;
 8006802:	bf00      	nop
      }
      break;
 8006804:	e004      	b.n	8006810 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fcc1 	bl	8007190 <USBD_CtlError>
      break;
 800680e:	bf00      	nop
  }

  return ret;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	889b      	ldrh	r3, [r3, #4]
 800682c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006836:	2b40      	cmp	r3, #64	@ 0x40
 8006838:	d007      	beq.n	800684a <USBD_StdEPReq+0x30>
 800683a:	2b40      	cmp	r3, #64	@ 0x40
 800683c:	f200 8145 	bhi.w	8006aca <USBD_StdEPReq+0x2b0>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00c      	beq.n	800685e <USBD_StdEPReq+0x44>
 8006844:	2b20      	cmp	r3, #32
 8006846:	f040 8140 	bne.w	8006aca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
      break;
 800685c:	e13a      	b.n	8006ad4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	785b      	ldrb	r3, [r3, #1]
 8006862:	2b03      	cmp	r3, #3
 8006864:	d007      	beq.n	8006876 <USBD_StdEPReq+0x5c>
 8006866:	2b03      	cmp	r3, #3
 8006868:	f300 8129 	bgt.w	8006abe <USBD_StdEPReq+0x2a4>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d07f      	beq.n	8006970 <USBD_StdEPReq+0x156>
 8006870:	2b01      	cmp	r3, #1
 8006872:	d03c      	beq.n	80068ee <USBD_StdEPReq+0xd4>
 8006874:	e123      	b.n	8006abe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d002      	beq.n	8006888 <USBD_StdEPReq+0x6e>
 8006882:	2b03      	cmp	r3, #3
 8006884:	d016      	beq.n	80068b4 <USBD_StdEPReq+0x9a>
 8006886:	e02c      	b.n	80068e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00d      	beq.n	80068aa <USBD_StdEPReq+0x90>
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	2b80      	cmp	r3, #128	@ 0x80
 8006892:	d00a      	beq.n	80068aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f8f1 	bl	8007a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800689e:	2180      	movs	r1, #128	@ 0x80
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f8ed 	bl	8007a80 <USBD_LL_StallEP>
 80068a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068a8:	e020      	b.n	80068ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fc6f 	bl	8007190 <USBD_CtlError>
              break;
 80068b2:	e01b      	b.n	80068ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	885b      	ldrh	r3, [r3, #2]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10e      	bne.n	80068da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <USBD_StdEPReq+0xc0>
 80068c2:	7bbb      	ldrb	r3, [r7, #14]
 80068c4:	2b80      	cmp	r3, #128	@ 0x80
 80068c6:	d008      	beq.n	80068da <USBD_StdEPReq+0xc0>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	88db      	ldrh	r3, [r3, #6]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 f8d3 	bl	8007a80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fd23 	bl	8007326 <USBD_CtlSendStatus>

              break;
 80068e0:	e004      	b.n	80068ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fc53 	bl	8007190 <USBD_CtlError>
              break;
 80068ea:	bf00      	nop
          }
          break;
 80068ec:	e0ec      	b.n	8006ac8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d002      	beq.n	8006900 <USBD_StdEPReq+0xe6>
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d016      	beq.n	800692c <USBD_StdEPReq+0x112>
 80068fe:	e030      	b.n	8006962 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00d      	beq.n	8006922 <USBD_StdEPReq+0x108>
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	2b80      	cmp	r3, #128	@ 0x80
 800690a:	d00a      	beq.n	8006922 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 f8b5 	bl	8007a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006916:	2180      	movs	r1, #128	@ 0x80
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 f8b1 	bl	8007a80 <USBD_LL_StallEP>
 800691e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006920:	e025      	b.n	800696e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fc33 	bl	8007190 <USBD_CtlError>
              break;
 800692a:	e020      	b.n	800696e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	885b      	ldrh	r3, [r3, #2]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11b      	bne.n	800696c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 f8bb 	bl	8007abe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fcec 	bl	8007326 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006960:	e004      	b.n	800696c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc13 	bl	8007190 <USBD_CtlError>
              break;
 800696a:	e000      	b.n	800696e <USBD_StdEPReq+0x154>
              break;
 800696c:	bf00      	nop
          }
          break;
 800696e:	e0ab      	b.n	8006ac8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d002      	beq.n	8006982 <USBD_StdEPReq+0x168>
 800697c:	2b03      	cmp	r3, #3
 800697e:	d032      	beq.n	80069e6 <USBD_StdEPReq+0x1cc>
 8006980:	e097      	b.n	8006ab2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <USBD_StdEPReq+0x17e>
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	2b80      	cmp	r3, #128	@ 0x80
 800698c:	d004      	beq.n	8006998 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fbfd 	bl	8007190 <USBD_CtlError>
                break;
 8006996:	e091      	b.n	8006abc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800699c:	2b00      	cmp	r3, #0
 800699e:	da0b      	bge.n	80069b8 <USBD_StdEPReq+0x19e>
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	3310      	adds	r3, #16
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	4413      	add	r3, r2
 80069b4:	3304      	adds	r3, #4
 80069b6:	e00b      	b.n	80069d0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	3304      	adds	r3, #4
 80069d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2202      	movs	r2, #2
 80069dc:	4619      	mov	r1, r3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fc47 	bl	8007272 <USBD_CtlSendData>
              break;
 80069e4:	e06a      	b.n	8006abc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	da11      	bge.n	8006a12 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
 80069f0:	f003 020f 	and.w	r2, r3, #15
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	3324      	adds	r3, #36	@ 0x24
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d117      	bne.n	8006a38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fbc0 	bl	8007190 <USBD_CtlError>
                  break;
 8006a10:	e054      	b.n	8006abc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	f003 020f 	and.w	r2, r3, #15
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	440b      	add	r3, r1
 8006a24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fbad 	bl	8007190 <USBD_CtlError>
                  break;
 8006a36:	e041      	b.n	8006abc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	da0b      	bge.n	8006a58 <USBD_StdEPReq+0x23e>
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	3310      	adds	r3, #16
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	4413      	add	r3, r2
 8006a54:	3304      	adds	r3, #4
 8006a56:	e00b      	b.n	8006a70 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3304      	adds	r3, #4
 8006a70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a72:	7bbb      	ldrb	r3, [r7, #14]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <USBD_StdEPReq+0x264>
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	2b80      	cmp	r3, #128	@ 0x80
 8006a7c:	d103      	bne.n	8006a86 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	e00e      	b.n	8006aa4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 f836 	bl	8007afc <USBD_LL_IsStallEP>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	e002      	b.n	8006aa4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fbe1 	bl	8007272 <USBD_CtlSendData>
              break;
 8006ab0:	e004      	b.n	8006abc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fb6b 	bl	8007190 <USBD_CtlError>
              break;
 8006aba:	bf00      	nop
          }
          break;
 8006abc:	e004      	b.n	8006ac8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fb65 	bl	8007190 <USBD_CtlError>
          break;
 8006ac6:	bf00      	nop
      }
      break;
 8006ac8:	e004      	b.n	8006ad4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fb5f 	bl	8007190 <USBD_CtlError>
      break;
 8006ad2:	bf00      	nop
  }

  return ret;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	885b      	ldrh	r3, [r3, #2]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	2b0e      	cmp	r3, #14
 8006b02:	f200 8152 	bhi.w	8006daa <USBD_GetDescriptor+0x2ca>
 8006b06:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <USBD_GetDescriptor+0x2c>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b7d 	.word	0x08006b7d
 8006b10:	08006b95 	.word	0x08006b95
 8006b14:	08006bd5 	.word	0x08006bd5
 8006b18:	08006dab 	.word	0x08006dab
 8006b1c:	08006dab 	.word	0x08006dab
 8006b20:	08006d4b 	.word	0x08006d4b
 8006b24:	08006d77 	.word	0x08006d77
 8006b28:	08006dab 	.word	0x08006dab
 8006b2c:	08006dab 	.word	0x08006dab
 8006b30:	08006dab 	.word	0x08006dab
 8006b34:	08006dab 	.word	0x08006dab
 8006b38:	08006dab 	.word	0x08006dab
 8006b3c:	08006dab 	.word	0x08006dab
 8006b40:	08006dab 	.word	0x08006dab
 8006b44:	08006b49 	.word	0x08006b49
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	7c12      	ldrb	r2, [r2, #16]
 8006b60:	f107 0108 	add.w	r1, r7, #8
 8006b64:	4610      	mov	r0, r2
 8006b66:	4798      	blx	r3
 8006b68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b6a:	e126      	b.n	8006dba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fb0e 	bl	8007190 <USBD_CtlError>
        err++;
 8006b74:	7afb      	ldrb	r3, [r7, #11]
 8006b76:	3301      	adds	r3, #1
 8006b78:	72fb      	strb	r3, [r7, #11]
      break;
 8006b7a:	e11e      	b.n	8006dba <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	7c12      	ldrb	r2, [r2, #16]
 8006b88:	f107 0108 	add.w	r1, r7, #8
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4798      	blx	r3
 8006b90:	60f8      	str	r0, [r7, #12]
      break;
 8006b92:	e112      	b.n	8006dba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	7c1b      	ldrb	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10d      	bne.n	8006bb8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	f107 0208 	add.w	r2, r7, #8
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4798      	blx	r3
 8006bac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006bb6:	e100      	b.n	8006dba <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc0:	f107 0208 	add.w	r2, r7, #8
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4798      	blx	r3
 8006bc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	2202      	movs	r2, #2
 8006bd0:	701a      	strb	r2, [r3, #0]
      break;
 8006bd2:	e0f2      	b.n	8006dba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	885b      	ldrh	r3, [r3, #2]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b05      	cmp	r3, #5
 8006bdc:	f200 80ac 	bhi.w	8006d38 <USBD_GetDescriptor+0x258>
 8006be0:	a201      	add	r2, pc, #4	@ (adr r2, 8006be8 <USBD_GetDescriptor+0x108>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c01 	.word	0x08006c01
 8006bec:	08006c35 	.word	0x08006c35
 8006bf0:	08006c69 	.word	0x08006c69
 8006bf4:	08006c9d 	.word	0x08006c9d
 8006bf8:	08006cd1 	.word	0x08006cd1
 8006bfc:	08006d05 	.word	0x08006d05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00b      	beq.n	8006c24 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	7c12      	ldrb	r2, [r2, #16]
 8006c18:	f107 0108 	add.w	r1, r7, #8
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	4798      	blx	r3
 8006c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c22:	e091      	b.n	8006d48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fab2 	bl	8007190 <USBD_CtlError>
            err++;
 8006c2c:	7afb      	ldrb	r3, [r7, #11]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	72fb      	strb	r3, [r7, #11]
          break;
 8006c32:	e089      	b.n	8006d48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00b      	beq.n	8006c58 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	7c12      	ldrb	r2, [r2, #16]
 8006c4c:	f107 0108 	add.w	r1, r7, #8
 8006c50:	4610      	mov	r0, r2
 8006c52:	4798      	blx	r3
 8006c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c56:	e077      	b.n	8006d48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa98 	bl	8007190 <USBD_CtlError>
            err++;
 8006c60:	7afb      	ldrb	r3, [r7, #11]
 8006c62:	3301      	adds	r3, #1
 8006c64:	72fb      	strb	r3, [r7, #11]
          break;
 8006c66:	e06f      	b.n	8006d48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	7c12      	ldrb	r2, [r2, #16]
 8006c80:	f107 0108 	add.w	r1, r7, #8
 8006c84:	4610      	mov	r0, r2
 8006c86:	4798      	blx	r3
 8006c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c8a:	e05d      	b.n	8006d48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fa7e 	bl	8007190 <USBD_CtlError>
            err++;
 8006c94:	7afb      	ldrb	r3, [r7, #11]
 8006c96:	3301      	adds	r3, #1
 8006c98:	72fb      	strb	r3, [r7, #11]
          break;
 8006c9a:	e055      	b.n	8006d48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00b      	beq.n	8006cc0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	7c12      	ldrb	r2, [r2, #16]
 8006cb4:	f107 0108 	add.w	r1, r7, #8
 8006cb8:	4610      	mov	r0, r2
 8006cba:	4798      	blx	r3
 8006cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cbe:	e043      	b.n	8006d48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa64 	bl	8007190 <USBD_CtlError>
            err++;
 8006cc8:	7afb      	ldrb	r3, [r7, #11]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8006cce:	e03b      	b.n	8006d48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00b      	beq.n	8006cf4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	7c12      	ldrb	r2, [r2, #16]
 8006ce8:	f107 0108 	add.w	r1, r7, #8
 8006cec:	4610      	mov	r0, r2
 8006cee:	4798      	blx	r3
 8006cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cf2:	e029      	b.n	8006d48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa4a 	bl	8007190 <USBD_CtlError>
            err++;
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	72fb      	strb	r3, [r7, #11]
          break;
 8006d02:	e021      	b.n	8006d48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00b      	beq.n	8006d28 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	7c12      	ldrb	r2, [r2, #16]
 8006d1c:	f107 0108 	add.w	r1, r7, #8
 8006d20:	4610      	mov	r0, r2
 8006d22:	4798      	blx	r3
 8006d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d26:	e00f      	b.n	8006d48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa30 	bl	8007190 <USBD_CtlError>
            err++;
 8006d30:	7afb      	ldrb	r3, [r7, #11]
 8006d32:	3301      	adds	r3, #1
 8006d34:	72fb      	strb	r3, [r7, #11]
          break;
 8006d36:	e007      	b.n	8006d48 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa28 	bl	8007190 <USBD_CtlError>
          err++;
 8006d40:	7afb      	ldrb	r3, [r7, #11]
 8006d42:	3301      	adds	r3, #1
 8006d44:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006d46:	bf00      	nop
      }
      break;
 8006d48:	e037      	b.n	8006dba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	7c1b      	ldrb	r3, [r3, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d109      	bne.n	8006d66 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d5a:	f107 0208 	add.w	r2, r7, #8
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4798      	blx	r3
 8006d62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d64:	e029      	b.n	8006dba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fa11 	bl	8007190 <USBD_CtlError>
        err++;
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	3301      	adds	r3, #1
 8006d72:	72fb      	strb	r3, [r7, #11]
      break;
 8006d74:	e021      	b.n	8006dba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	7c1b      	ldrb	r3, [r3, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10d      	bne.n	8006d9a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d86:	f107 0208 	add.w	r2, r7, #8
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4798      	blx	r3
 8006d8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	2207      	movs	r2, #7
 8006d96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d98:	e00f      	b.n	8006dba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f9f7 	bl	8007190 <USBD_CtlError>
        err++;
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	3301      	adds	r3, #1
 8006da6:	72fb      	strb	r3, [r7, #11]
      break;
 8006da8:	e007      	b.n	8006dba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f9ef 	bl	8007190 <USBD_CtlError>
      err++;
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	3301      	adds	r3, #1
 8006db6:	72fb      	strb	r3, [r7, #11]
      break;
 8006db8:	bf00      	nop
  }

  if (err != 0U)
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d11e      	bne.n	8006dfe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	88db      	ldrh	r3, [r3, #6]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d016      	beq.n	8006df6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006dc8:	893b      	ldrh	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00e      	beq.n	8006dec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88da      	ldrh	r2, [r3, #6]
 8006dd2:	893b      	ldrh	r3, [r7, #8]
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	bf28      	it	cs
 8006dd8:	4613      	movcs	r3, r2
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dde:	893b      	ldrh	r3, [r7, #8]
 8006de0:	461a      	mov	r2, r3
 8006de2:	68f9      	ldr	r1, [r7, #12]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fa44 	bl	8007272 <USBD_CtlSendData>
 8006dea:	e009      	b.n	8006e00 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f9ce 	bl	8007190 <USBD_CtlError>
 8006df4:	e004      	b.n	8006e00 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa95 	bl	8007326 <USBD_CtlSendStatus>
 8006dfc:	e000      	b.n	8006e00 <USBD_GetDescriptor+0x320>
    return;
 8006dfe:	bf00      	nop
  }
}
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop

08006e08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	889b      	ldrh	r3, [r3, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d131      	bne.n	8006e7e <USBD_SetAddress+0x76>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	88db      	ldrh	r3, [r3, #6]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d12d      	bne.n	8006e7e <USBD_SetAddress+0x76>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	885b      	ldrh	r3, [r3, #2]
 8006e26:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e28:	d829      	bhi.n	8006e7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	885b      	ldrh	r3, [r3, #2]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d104      	bne.n	8006e4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f9a3 	bl	8007190 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4a:	e01d      	b.n	8006e88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7bfa      	ldrb	r2, [r7, #15]
 8006e50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fe7b 	bl	8007b54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa61 	bl	8007326 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d004      	beq.n	8006e74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e72:	e009      	b.n	8006e88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7c:	e004      	b.n	8006e88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f985 	bl	8007190 <USBD_CtlError>
  }
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	885b      	ldrh	r3, [r3, #2]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006ea6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d905      	bls.n	8006ebc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f96c 	bl	8007190 <USBD_CtlError>
    return USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e088      	b.n	8006fce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d002      	beq.n	8006ece <USBD_SetConfig+0x3e>
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d025      	beq.n	8006f18 <USBD_SetConfig+0x88>
 8006ecc:	e071      	b.n	8006fb2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ece:	4b42      	ldr	r3, [pc, #264]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d01c      	beq.n	8006f10 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006ed6:	4b40      	ldr	r3, [pc, #256]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff f992 	bl	8006210 <USBD_SetClassConfig>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f949 	bl	8007190 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006efe:	e065      	b.n	8006fcc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fa10 	bl	8007326 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2203      	movs	r2, #3
 8006f0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f0e:	e05d      	b.n	8006fcc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fa08 	bl	8007326 <USBD_CtlSendStatus>
      break;
 8006f16:	e059      	b.n	8006fcc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f18:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d112      	bne.n	8006f46 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006f28:	4b2b      	ldr	r3, [pc, #172]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f32:	4b29      	ldr	r3, [pc, #164]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff f985 	bl	8006248 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f9f1 	bl	8007326 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f44:	e042      	b.n	8006fcc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006f46:	4b24      	ldr	r3, [pc, #144]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d02a      	beq.n	8006faa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff f973 	bl	8006248 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f62:	4b1d      	ldr	r3, [pc, #116]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff f94c 	bl	8006210 <USBD_SetClassConfig>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00f      	beq.n	8006fa2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f903 	bl	8007190 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff f958 	bl	8006248 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006fa0:	e014      	b.n	8006fcc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f9bf 	bl	8007326 <USBD_CtlSendStatus>
      break;
 8006fa8:	e010      	b.n	8006fcc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f9bb 	bl	8007326 <USBD_CtlSendStatus>
      break;
 8006fb0:	e00c      	b.n	8006fcc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f8eb 	bl	8007190 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fba:	4b07      	ldr	r3, [pc, #28]	@ (8006fd8 <USBD_SetConfig+0x148>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff f941 	bl	8006248 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fca:	bf00      	nop
  }

  return ret;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200001a4 	.word	0x200001a4

08006fdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	88db      	ldrh	r3, [r3, #6]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d004      	beq.n	8006ff8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f8cd 	bl	8007190 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ff6:	e023      	b.n	8007040 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	dc02      	bgt.n	800700a <USBD_GetConfig+0x2e>
 8007004:	2b00      	cmp	r3, #0
 8007006:	dc03      	bgt.n	8007010 <USBD_GetConfig+0x34>
 8007008:	e015      	b.n	8007036 <USBD_GetConfig+0x5a>
 800700a:	2b03      	cmp	r3, #3
 800700c:	d00b      	beq.n	8007026 <USBD_GetConfig+0x4a>
 800700e:	e012      	b.n	8007036 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3308      	adds	r3, #8
 800701a:	2201      	movs	r2, #1
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f927 	bl	8007272 <USBD_CtlSendData>
        break;
 8007024:	e00c      	b.n	8007040 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3304      	adds	r3, #4
 800702a:	2201      	movs	r2, #1
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f91f 	bl	8007272 <USBD_CtlSendData>
        break;
 8007034:	e004      	b.n	8007040 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f8a9 	bl	8007190 <USBD_CtlError>
        break;
 800703e:	bf00      	nop
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007058:	b2db      	uxtb	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	2b02      	cmp	r3, #2
 800705e:	d81e      	bhi.n	800709e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	88db      	ldrh	r3, [r3, #6]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d004      	beq.n	8007072 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f890 	bl	8007190 <USBD_CtlError>
        break;
 8007070:	e01a      	b.n	80070a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f043 0202 	orr.w	r2, r3, #2
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	330c      	adds	r3, #12
 8007092:	2202      	movs	r2, #2
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8eb 	bl	8007272 <USBD_CtlSendData>
      break;
 800709c:	e004      	b.n	80070a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f875 	bl	8007190 <USBD_CtlError>
      break;
 80070a6:	bf00      	nop
  }
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	885b      	ldrh	r3, [r3, #2]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d106      	bne.n	80070d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f92b 	bl	8007326 <USBD_CtlSendStatus>
  }
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d80b      	bhi.n	8007108 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	885b      	ldrh	r3, [r3, #2]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d10c      	bne.n	8007112 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f910 	bl	8007326 <USBD_CtlSendStatus>
      }
      break;
 8007106:	e004      	b.n	8007112 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f840 	bl	8007190 <USBD_CtlError>
      break;
 8007110:	e000      	b.n	8007114 <USBD_ClrFeature+0x3c>
      break;
 8007112:	bf00      	nop
  }
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	781a      	ldrb	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3301      	adds	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff fa92 	bl	8006670 <SWAPBYTE>
 800714c:	4603      	mov	r3, r0
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3301      	adds	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3301      	adds	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff fa85 	bl	8006670 <SWAPBYTE>
 8007166:	4603      	mov	r3, r0
 8007168:	461a      	mov	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7ff fa78 	bl	8006670 <SWAPBYTE>
 8007180:	4603      	mov	r3, r0
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	80da      	strh	r2, [r3, #6]
}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800719a:	2180      	movs	r1, #128	@ 0x80
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fc6f 	bl	8007a80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071a2:	2100      	movs	r1, #0
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fc6b 	bl	8007a80 <USBD_LL_StallEP>
}
 80071aa:	bf00      	nop
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b086      	sub	sp, #24
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d036      	beq.n	8007236 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80071cc:	6938      	ldr	r0, [r7, #16]
 80071ce:	f000 f836 	bl	800723e <USBD_GetLen>
 80071d2:	4603      	mov	r3, r0
 80071d4:	3301      	adds	r3, #1
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	4413      	add	r3, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	7812      	ldrb	r2, [r2, #0]
 80071ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	3301      	adds	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	4413      	add	r3, r2
 80071f8:	2203      	movs	r2, #3
 80071fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	3301      	adds	r3, #1
 8007200:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007202:	e013      	b.n	800722c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007204:	7dfb      	ldrb	r3, [r7, #23]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	4413      	add	r3, r2
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	7812      	ldrb	r2, [r2, #0]
 800720e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	3301      	adds	r3, #1
 8007214:	613b      	str	r3, [r7, #16]
    idx++;
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	3301      	adds	r3, #1
 800721a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
    idx++;
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	3301      	adds	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e7      	bne.n	8007204 <USBD_GetString+0x52>
 8007234:	e000      	b.n	8007238 <USBD_GetString+0x86>
    return;
 8007236:	bf00      	nop
  }
}
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800724e:	e005      	b.n	800725c <USBD_GetLen+0x1e>
  {
    len++;
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	3301      	adds	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	3301      	adds	r3, #1
 800725a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1f5      	bne.n	8007250 <USBD_GetLen+0x12>
  }

  return len;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2202      	movs	r2, #2
 8007282:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	2100      	movs	r1, #0
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fc7a 	bl	8007b92 <USBD_LL_Transmit>

  return USBD_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	2100      	movs	r1, #0
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 fc69 	bl	8007b92 <USBD_LL_Transmit>

  return USBD_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2203      	movs	r2, #3
 80072da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	2100      	movs	r1, #0
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fc6d 	bl	8007bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 fc5c 	bl	8007bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2204      	movs	r2, #4
 8007332:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007336:	2300      	movs	r3, #0
 8007338:	2200      	movs	r2, #0
 800733a:	2100      	movs	r1, #0
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fc28 	bl	8007b92 <USBD_LL_Transmit>

  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2205      	movs	r2, #5
 8007358:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800735c:	2300      	movs	r3, #0
 800735e:	2200      	movs	r2, #0
 8007360:	2100      	movs	r1, #0
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fc36 	bl	8007bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007378:	2200      	movs	r2, #0
 800737a:	4912      	ldr	r1, [pc, #72]	@ (80073c4 <MX_USB_Device_Init+0x50>)
 800737c:	4812      	ldr	r0, [pc, #72]	@ (80073c8 <MX_USB_Device_Init+0x54>)
 800737e:	f7fe fed9 	bl	8006134 <USBD_Init>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007388:	f7f8 ffde 	bl	8000348 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800738c:	490f      	ldr	r1, [pc, #60]	@ (80073cc <MX_USB_Device_Init+0x58>)
 800738e:	480e      	ldr	r0, [pc, #56]	@ (80073c8 <MX_USB_Device_Init+0x54>)
 8007390:	f7fe ff00 	bl	8006194 <USBD_RegisterClass>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800739a:	f7f8 ffd5 	bl	8000348 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800739e:	490c      	ldr	r1, [pc, #48]	@ (80073d0 <MX_USB_Device_Init+0x5c>)
 80073a0:	4809      	ldr	r0, [pc, #36]	@ (80073c8 <MX_USB_Device_Init+0x54>)
 80073a2:	f7fe fe51 	bl	8006048 <USBD_CDC_RegisterInterface>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80073ac:	f7f8 ffcc 	bl	8000348 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80073b0:	4805      	ldr	r0, [pc, #20]	@ (80073c8 <MX_USB_Device_Init+0x54>)
 80073b2:	f7fe ff16 	bl	80061e2 <USBD_Start>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80073bc:	f7f8 ffc4 	bl	8000348 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80073c0:	bf00      	nop
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	20000130 	.word	0x20000130
 80073c8:	200001a8 	.word	0x200001a8
 80073cc:	20000018 	.word	0x20000018
 80073d0:	2000011c 	.word	0x2000011c

080073d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80073d8:	2200      	movs	r2, #0
 80073da:	4905      	ldr	r1, [pc, #20]	@ (80073f0 <CDC_Init_FS+0x1c>)
 80073dc:	4805      	ldr	r0, [pc, #20]	@ (80073f4 <CDC_Init_FS+0x20>)
 80073de:	f7fe fe48 	bl	8006072 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80073e2:	4905      	ldr	r1, [pc, #20]	@ (80073f8 <CDC_Init_FS+0x24>)
 80073e4:	4803      	ldr	r0, [pc, #12]	@ (80073f4 <CDC_Init_FS+0x20>)
 80073e6:	f7fe fe62 	bl	80060ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80073ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20000878 	.word	0x20000878
 80073f4:	200001a8 	.word	0x200001a8
 80073f8:	20000478 	.word	0x20000478

080073fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007400:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007402:	4618      	mov	r0, r3
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	4603      	mov	r3, r0
 8007414:	6039      	str	r1, [r7, #0]
 8007416:	71fb      	strb	r3, [r7, #7]
 8007418:	4613      	mov	r3, r2
 800741a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800741c:	79fb      	ldrb	r3, [r7, #7]
 800741e:	2b23      	cmp	r3, #35	@ 0x23
 8007420:	d84a      	bhi.n	80074b8 <CDC_Control_FS+0xac>
 8007422:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <CDC_Control_FS+0x1c>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	080074b9 	.word	0x080074b9
 800742c:	080074b9 	.word	0x080074b9
 8007430:	080074b9 	.word	0x080074b9
 8007434:	080074b9 	.word	0x080074b9
 8007438:	080074b9 	.word	0x080074b9
 800743c:	080074b9 	.word	0x080074b9
 8007440:	080074b9 	.word	0x080074b9
 8007444:	080074b9 	.word	0x080074b9
 8007448:	080074b9 	.word	0x080074b9
 800744c:	080074b9 	.word	0x080074b9
 8007450:	080074b9 	.word	0x080074b9
 8007454:	080074b9 	.word	0x080074b9
 8007458:	080074b9 	.word	0x080074b9
 800745c:	080074b9 	.word	0x080074b9
 8007460:	080074b9 	.word	0x080074b9
 8007464:	080074b9 	.word	0x080074b9
 8007468:	080074b9 	.word	0x080074b9
 800746c:	080074b9 	.word	0x080074b9
 8007470:	080074b9 	.word	0x080074b9
 8007474:	080074b9 	.word	0x080074b9
 8007478:	080074b9 	.word	0x080074b9
 800747c:	080074b9 	.word	0x080074b9
 8007480:	080074b9 	.word	0x080074b9
 8007484:	080074b9 	.word	0x080074b9
 8007488:	080074b9 	.word	0x080074b9
 800748c:	080074b9 	.word	0x080074b9
 8007490:	080074b9 	.word	0x080074b9
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074b9 	.word	0x080074b9
 800749c:	080074b9 	.word	0x080074b9
 80074a0:	080074b9 	.word	0x080074b9
 80074a4:	080074b9 	.word	0x080074b9
 80074a8:	080074b9 	.word	0x080074b9
 80074ac:	080074b9 	.word	0x080074b9
 80074b0:	080074b9 	.word	0x080074b9
 80074b4:	080074b9 	.word	0x080074b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80074b8:	bf00      	nop
  }

  return (USBD_OK);
 80074ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	4805      	ldr	r0, [pc, #20]	@ (80074ec <CDC_Receive_FS+0x24>)
 80074d6:	f7fe fdea 	bl	80060ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074da:	4804      	ldr	r0, [pc, #16]	@ (80074ec <CDC_Receive_FS+0x24>)
 80074dc:	f7fe fe00 	bl	80060e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80074e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	200001a8 	.word	0x200001a8

080074f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007502:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007506:	4618      	mov	r0, r3
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	6039      	str	r1, [r7, #0]
 800751e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2212      	movs	r2, #18
 8007524:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8007526:	4b03      	ldr	r3, [pc, #12]	@ (8007534 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	20000150 	.word	0x20000150

08007538 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	4603      	mov	r3, r0
 8007540:	6039      	str	r1, [r7, #0]
 8007542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2204      	movs	r2, #4
 8007548:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800754a:	4b03      	ldr	r3, [pc, #12]	@ (8007558 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	20000164 	.word	0x20000164

0800755c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	6039      	str	r1, [r7, #0]
 8007566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d105      	bne.n	800757a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4907      	ldr	r1, [pc, #28]	@ (8007590 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007572:	4808      	ldr	r0, [pc, #32]	@ (8007594 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007574:	f7ff fe1d 	bl	80071b2 <USBD_GetString>
 8007578:	e004      	b.n	8007584 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4904      	ldr	r1, [pc, #16]	@ (8007590 <USBD_CDC_ProductStrDescriptor+0x34>)
 800757e:	4805      	ldr	r0, [pc, #20]	@ (8007594 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007580:	f7ff fe17 	bl	80071b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007584:	4b02      	ldr	r3, [pc, #8]	@ (8007590 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000c78 	.word	0x20000c78
 8007594:	08007dac 	.word	0x08007dac

08007598 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	4904      	ldr	r1, [pc, #16]	@ (80075b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80075a8:	4804      	ldr	r0, [pc, #16]	@ (80075bc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80075aa:	f7ff fe02 	bl	80071b2 <USBD_GetString>
  return USBD_StrDesc;
 80075ae:	4b02      	ldr	r3, [pc, #8]	@ (80075b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20000c78 	.word	0x20000c78
 80075bc:	08007dc4 	.word	0x08007dc4

080075c0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	221a      	movs	r2, #26
 80075d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075d2:	f000 f843 	bl	800765c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80075d6:	4b02      	ldr	r3, [pc, #8]	@ (80075e0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20000168 	.word	0x20000168

080075e4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d105      	bne.n	8007602 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4907      	ldr	r1, [pc, #28]	@ (8007618 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80075fa:	4808      	ldr	r0, [pc, #32]	@ (800761c <USBD_CDC_ConfigStrDescriptor+0x38>)
 80075fc:	f7ff fdd9 	bl	80071b2 <USBD_GetString>
 8007600:	e004      	b.n	800760c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4904      	ldr	r1, [pc, #16]	@ (8007618 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8007606:	4805      	ldr	r0, [pc, #20]	@ (800761c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007608:	f7ff fdd3 	bl	80071b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800760c:	4b02      	ldr	r3, [pc, #8]	@ (8007618 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000c78 	.word	0x20000c78
 800761c:	08007dd8 	.word	0x08007dd8

08007620 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	4907      	ldr	r1, [pc, #28]	@ (8007654 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007636:	4808      	ldr	r0, [pc, #32]	@ (8007658 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007638:	f7ff fdbb 	bl	80071b2 <USBD_GetString>
 800763c:	e004      	b.n	8007648 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	4904      	ldr	r1, [pc, #16]	@ (8007654 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007642:	4805      	ldr	r0, [pc, #20]	@ (8007658 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007644:	f7ff fdb5 	bl	80071b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007648:	4b02      	ldr	r3, [pc, #8]	@ (8007654 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20000c78 	.word	0x20000c78
 8007658:	08007de4 	.word	0x08007de4

0800765c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007662:	4b0f      	ldr	r3, [pc, #60]	@ (80076a0 <Get_SerialNum+0x44>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007668:	4b0e      	ldr	r3, [pc, #56]	@ (80076a4 <Get_SerialNum+0x48>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800766e:	4b0e      	ldr	r3, [pc, #56]	@ (80076a8 <Get_SerialNum+0x4c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4413      	add	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007682:	2208      	movs	r2, #8
 8007684:	4909      	ldr	r1, [pc, #36]	@ (80076ac <Get_SerialNum+0x50>)
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f814 	bl	80076b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800768c:	2204      	movs	r2, #4
 800768e:	4908      	ldr	r1, [pc, #32]	@ (80076b0 <Get_SerialNum+0x54>)
 8007690:	68b8      	ldr	r0, [r7, #8]
 8007692:	f000 f80f 	bl	80076b4 <IntToUnicode>
  }
}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	1fff7590 	.word	0x1fff7590
 80076a4:	1fff7594 	.word	0x1fff7594
 80076a8:	1fff7598 	.word	0x1fff7598
 80076ac:	2000016a 	.word	0x2000016a
 80076b0:	2000017a 	.word	0x2000017a

080076b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076c6:	2300      	movs	r3, #0
 80076c8:	75fb      	strb	r3, [r7, #23]
 80076ca:	e027      	b.n	800771c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	0f1b      	lsrs	r3, r3, #28
 80076d0:	2b09      	cmp	r3, #9
 80076d2:	d80b      	bhi.n	80076ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	0f1b      	lsrs	r3, r3, #28
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4619      	mov	r1, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	440b      	add	r3, r1
 80076e4:	3230      	adds	r2, #48	@ 0x30
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	701a      	strb	r2, [r3, #0]
 80076ea:	e00a      	b.n	8007702 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	0f1b      	lsrs	r3, r3, #28
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	4619      	mov	r1, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	440b      	add	r3, r1
 80076fc:	3237      	adds	r2, #55	@ 0x37
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	3301      	adds	r3, #1
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4413      	add	r3, r2
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	3301      	adds	r3, #1
 800771a:	75fb      	strb	r3, [r7, #23]
 800771c:	7dfa      	ldrb	r2, [r7, #23]
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	429a      	cmp	r2, r3
 8007722:	d3d3      	bcc.n	80076cc <IntToUnicode+0x18>
  }
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b094      	sub	sp, #80	@ 0x50
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800773c:	f107 030c 	add.w	r3, r7, #12
 8007740:	2244      	movs	r2, #68	@ 0x44
 8007742:	2100      	movs	r1, #0
 8007744:	4618      	mov	r0, r3
 8007746:	f000 faf9 	bl	8007d3c <memset>
  if(pcdHandle->Instance==USB)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a15      	ldr	r2, [pc, #84]	@ (80077a4 <HAL_PCD_MspInit+0x70>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d122      	bne.n	800779a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007754:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007758:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800775a:	2300      	movs	r3, #0
 800775c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800775e:	f107 030c 	add.w	r3, r7, #12
 8007762:	4618      	mov	r0, r3
 8007764:	f7fb fc88 	bl	8003078 <HAL_RCCEx_PeriphCLKConfig>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800776e:	f7f8 fdeb 	bl	8000348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007772:	4b0d      	ldr	r3, [pc, #52]	@ (80077a8 <HAL_PCD_MspInit+0x74>)
 8007774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007776:	4a0c      	ldr	r2, [pc, #48]	@ (80077a8 <HAL_PCD_MspInit+0x74>)
 8007778:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800777c:	6593      	str	r3, [r2, #88]	@ 0x58
 800777e:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <HAL_PCD_MspInit+0x74>)
 8007780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007786:	60bb      	str	r3, [r7, #8]
 8007788:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800778a:	2200      	movs	r2, #0
 800778c:	2100      	movs	r1, #0
 800778e:	2014      	movs	r0, #20
 8007790:	f7f8 ffc5 	bl	800071e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007794:	2014      	movs	r0, #20
 8007796:	f7f8 ffdc 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800779a:	bf00      	nop
 800779c:	3750      	adds	r7, #80	@ 0x50
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40005c00 	.word	0x40005c00
 80077a8:	40021000 	.word	0x40021000

080077ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80077c0:	4619      	mov	r1, r3
 80077c2:	4610      	mov	r0, r2
 80077c4:	f7fe fd58 	bl	8006278 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	440b      	add	r3, r1
 80077f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	4619      	mov	r1, r3
 80077fa:	f7fe fd92 	bl	8006322 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80077fe:	bf00      	nop
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	460b      	mov	r3, r1
 8007810:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8007818:	78fa      	ldrb	r2, [r7, #3]
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	440b      	add	r3, r1
 8007826:	3324      	adds	r3, #36	@ 0x24
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	4619      	mov	r1, r3
 800782e:	f7fe fddb 	bl	80063e8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe feef 	bl	800662c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800785e:	2301      	movs	r3, #1
 8007860:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	795b      	ldrb	r3, [r3, #5]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d001      	beq.n	800786e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800786a:	f7f8 fd6d 	bl	8000348 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007874:	7bfa      	ldrb	r2, [r7, #15]
 8007876:	4611      	mov	r1, r2
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fe99 	bl	80065b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe fe45 	bl	8006514 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fe94 	bl	80065d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	7a5b      	ldrb	r3, [r3, #9]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078b0:	4b04      	ldr	r3, [pc, #16]	@ (80078c4 <HAL_PCD_SuspendCallback+0x30>)
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	4a03      	ldr	r2, [pc, #12]	@ (80078c4 <HAL_PCD_SuspendCallback+0x30>)
 80078b6:	f043 0306 	orr.w	r3, r3, #6
 80078ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	e000ed00 	.word	0xe000ed00

080078c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	7a5b      	ldrb	r3, [r3, #9]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078d8:	4b08      	ldr	r3, [pc, #32]	@ (80078fc <HAL_PCD_ResumeCallback+0x34>)
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	4a07      	ldr	r2, [pc, #28]	@ (80078fc <HAL_PCD_ResumeCallback+0x34>)
 80078de:	f023 0306 	bic.w	r3, r3, #6
 80078e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80078e4:	f000 f9f8 	bl	8007cd8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fe84 	bl	80065fc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	e000ed00 	.word	0xe000ed00

08007900 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007908:	4a2b      	ldr	r2, [pc, #172]	@ (80079b8 <USBD_LL_Init+0xb8>)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a29      	ldr	r2, [pc, #164]	@ (80079b8 <USBD_LL_Init+0xb8>)
 8007914:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007918:	4b27      	ldr	r3, [pc, #156]	@ (80079b8 <USBD_LL_Init+0xb8>)
 800791a:	4a28      	ldr	r2, [pc, #160]	@ (80079bc <USBD_LL_Init+0xbc>)
 800791c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800791e:	4b26      	ldr	r3, [pc, #152]	@ (80079b8 <USBD_LL_Init+0xb8>)
 8007920:	2208      	movs	r2, #8
 8007922:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007924:	4b24      	ldr	r3, [pc, #144]	@ (80079b8 <USBD_LL_Init+0xb8>)
 8007926:	2202      	movs	r2, #2
 8007928:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800792a:	4b23      	ldr	r3, [pc, #140]	@ (80079b8 <USBD_LL_Init+0xb8>)
 800792c:	2202      	movs	r2, #2
 800792e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007930:	4b21      	ldr	r3, [pc, #132]	@ (80079b8 <USBD_LL_Init+0xb8>)
 8007932:	2200      	movs	r2, #0
 8007934:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007936:	4b20      	ldr	r3, [pc, #128]	@ (80079b8 <USBD_LL_Init+0xb8>)
 8007938:	2200      	movs	r2, #0
 800793a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800793c:	4b1e      	ldr	r3, [pc, #120]	@ (80079b8 <USBD_LL_Init+0xb8>)
 800793e:	2200      	movs	r2, #0
 8007940:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007942:	4b1d      	ldr	r3, [pc, #116]	@ (80079b8 <USBD_LL_Init+0xb8>)
 8007944:	2200      	movs	r2, #0
 8007946:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007948:	481b      	ldr	r0, [pc, #108]	@ (80079b8 <USBD_LL_Init+0xb8>)
 800794a:	f7f9 f8b7 	bl	8000abc <HAL_PCD_Init>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007954:	f7f8 fcf8 	bl	8000348 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800795e:	2318      	movs	r3, #24
 8007960:	2200      	movs	r2, #0
 8007962:	2100      	movs	r1, #0
 8007964:	f7fa fd70 	bl	8002448 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800796e:	2358      	movs	r3, #88	@ 0x58
 8007970:	2200      	movs	r2, #0
 8007972:	2180      	movs	r1, #128	@ 0x80
 8007974:	f7fa fd68 	bl	8002448 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800797e:	23c0      	movs	r3, #192	@ 0xc0
 8007980:	2200      	movs	r2, #0
 8007982:	2181      	movs	r1, #129	@ 0x81
 8007984:	f7fa fd60 	bl	8002448 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800798e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007992:	2200      	movs	r2, #0
 8007994:	2101      	movs	r1, #1
 8007996:	f7fa fd57 	bl	8002448 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80079a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079a4:	2200      	movs	r2, #0
 80079a6:	2182      	movs	r1, #130	@ 0x82
 80079a8:	f7fa fd4e 	bl	8002448 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000e78 	.word	0x20000e78
 80079bc:	40005c00 	.word	0x40005c00

080079c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7f9 f93e 	bl	8000c58 <HAL_PCD_Start>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 f97e 	bl	8007ce4 <USBD_Get_USB_Status>
 80079e8:	4603      	mov	r3, r0
 80079ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	4608      	mov	r0, r1
 8007a00:	4611      	mov	r1, r2
 8007a02:	461a      	mov	r2, r3
 8007a04:	4603      	mov	r3, r0
 8007a06:	70fb      	strb	r3, [r7, #3]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70bb      	strb	r3, [r7, #2]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a1e:	78bb      	ldrb	r3, [r7, #2]
 8007a20:	883a      	ldrh	r2, [r7, #0]
 8007a22:	78f9      	ldrb	r1, [r7, #3]
 8007a24:	f7f9 fa85 	bl	8000f32 <HAL_PCD_EP_Open>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 f958 	bl	8007ce4 <USBD_Get_USB_Status>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007a5c:	78fa      	ldrb	r2, [r7, #3]
 8007a5e:	4611      	mov	r1, r2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7f9 fac3 	bl	8000fec <HAL_PCD_EP_Close>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 f939 	bl	8007ce4 <USBD_Get_USB_Status>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7f9 fb6c 	bl	800117c <HAL_PCD_EP_SetStall>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f91a 	bl	8007ce4 <USBD_Get_USB_Status>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	4611      	mov	r1, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f9 fb9f 	bl	8001220 <HAL_PCD_EP_ClrStall>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 f8fb 	bl	8007ce4 <USBD_Get_USB_Status>
 8007aee:	4603      	mov	r3, r0
 8007af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	da0b      	bge.n	8007b30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	440b      	add	r3, r1
 8007b2a:	3312      	adds	r3, #18
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	e00b      	b.n	8007b48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b36:	68f9      	ldr	r1, [r7, #12]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	440b      	add	r3, r1
 8007b42:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8007b46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b6e:	78fa      	ldrb	r2, [r7, #3]
 8007b70:	4611      	mov	r1, r2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7f9 f9b9 	bl	8000eea <HAL_PCD_SetAddress>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 f8b0 	bl	8007ce4 <USBD_Get_USB_Status>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b086      	sub	sp, #24
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	603b      	str	r3, [r7, #0]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007bb0:	7af9      	ldrb	r1, [r7, #11]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	f7f9 faaa 	bl	800110e <HAL_PCD_EP_Transmit>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f88f 	bl	8007ce4 <USBD_Get_USB_Status>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bca:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	607a      	str	r2, [r7, #4]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	460b      	mov	r3, r1
 8007be2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007bf2:	7af9      	ldrb	r1, [r7, #11]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	f7f9 fa40 	bl	800107c <HAL_PCD_EP_Receive>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 f86e 	bl	8007ce4 <USBD_Get_USB_Status>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7f9 fa56 	bl	80010de <HAL_PCD_EP_GetRxCount>
 8007c32:	4603      	mov	r3, r0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007c48:	78fb      	ldrb	r3, [r7, #3]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <HAL_PCDEx_LPM_Callback+0x18>
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d013      	beq.n	8007c7a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8007c52:	e023      	b.n	8007c9c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	7a5b      	ldrb	r3, [r3, #9]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007c5c:	f000 f83c 	bl	8007cd8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c60:	4b10      	ldr	r3, [pc, #64]	@ (8007ca4 <HAL_PCDEx_LPM_Callback+0x68>)
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	4a0f      	ldr	r2, [pc, #60]	@ (8007ca4 <HAL_PCDEx_LPM_Callback+0x68>)
 8007c66:	f023 0306 	bic.w	r3, r3, #6
 8007c6a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fcc2 	bl	80065fc <USBD_LL_Resume>
    break;
 8007c78:	e010      	b.n	8007c9c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe fca5 	bl	80065d0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7a5b      	ldrb	r3, [r3, #9]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c8e:	4b05      	ldr	r3, [pc, #20]	@ (8007ca4 <HAL_PCDEx_LPM_Callback+0x68>)
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	4a04      	ldr	r2, [pc, #16]	@ (8007ca4 <HAL_PCDEx_LPM_Callback+0x68>)
 8007c94:	f043 0306 	orr.w	r3, r3, #6
 8007c98:	6113      	str	r3, [r2, #16]
    break;
 8007c9a:	bf00      	nop
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	e000ed00 	.word	0xe000ed00

08007ca8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cb0:	4b03      	ldr	r3, [pc, #12]	@ (8007cc0 <USBD_static_malloc+0x18>)
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	20001154 	.word	0x20001154

08007cc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]

}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007cdc:	f7f8 faa8 	bl	8000230 <SystemClock_Config>
}
 8007ce0:	bf00      	nop
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d817      	bhi.n	8007d28 <USBD_Get_USB_Status+0x44>
 8007cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8007d00 <USBD_Get_USB_Status+0x1c>)
 8007cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfe:	bf00      	nop
 8007d00:	08007d11 	.word	0x08007d11
 8007d04:	08007d17 	.word	0x08007d17
 8007d08:	08007d1d 	.word	0x08007d1d
 8007d0c:	08007d23 	.word	0x08007d23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
    break;
 8007d14:	e00b      	b.n	8007d2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d16:	2303      	movs	r3, #3
 8007d18:	73fb      	strb	r3, [r7, #15]
    break;
 8007d1a:	e008      	b.n	8007d2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d20:	e005      	b.n	8007d2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d22:	2303      	movs	r3, #3
 8007d24:	73fb      	strb	r3, [r7, #15]
    break;
 8007d26:	e002      	b.n	8007d2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d2c:	bf00      	nop
  }
  return usb_status;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <memset>:
 8007d3c:	4402      	add	r2, r0
 8007d3e:	4603      	mov	r3, r0
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d100      	bne.n	8007d46 <memset+0xa>
 8007d44:	4770      	bx	lr
 8007d46:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4a:	e7f9      	b.n	8007d40 <memset+0x4>

08007d4c <__libc_init_array>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8007d84 <__libc_init_array+0x38>)
 8007d50:	4c0d      	ldr	r4, [pc, #52]	@ (8007d88 <__libc_init_array+0x3c>)
 8007d52:	1b64      	subs	r4, r4, r5
 8007d54:	10a4      	asrs	r4, r4, #2
 8007d56:	2600      	movs	r6, #0
 8007d58:	42a6      	cmp	r6, r4
 8007d5a:	d109      	bne.n	8007d70 <__libc_init_array+0x24>
 8007d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8007d8c <__libc_init_array+0x40>)
 8007d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8007d90 <__libc_init_array+0x44>)
 8007d60:	f000 f818 	bl	8007d94 <_init>
 8007d64:	1b64      	subs	r4, r4, r5
 8007d66:	10a4      	asrs	r4, r4, #2
 8007d68:	2600      	movs	r6, #0
 8007d6a:	42a6      	cmp	r6, r4
 8007d6c:	d105      	bne.n	8007d7a <__libc_init_array+0x2e>
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}
 8007d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d74:	4798      	blx	r3
 8007d76:	3601      	adds	r6, #1
 8007d78:	e7ee      	b.n	8007d58 <__libc_init_array+0xc>
 8007d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7e:	4798      	blx	r3
 8007d80:	3601      	adds	r6, #1
 8007d82:	e7f2      	b.n	8007d6a <__libc_init_array+0x1e>
 8007d84:	08007e04 	.word	0x08007e04
 8007d88:	08007e04 	.word	0x08007e04
 8007d8c:	08007e04 	.word	0x08007e04
 8007d90:	08007e08 	.word	0x08007e08

08007d94 <_init>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr

08007da0 <_fini>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr
