
ETR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800ef40  0800ef40  0000ff40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efec  0800efec  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800efec  0800efec  0000ffec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eff4  0800eff4  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eff4  0800eff4  0000fff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eff8  0800eff8  0000fff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800effc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b40  200001d4  0800f1d0  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d14  0800f1d0  00010d14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d364  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004415  00000000  00000000  0002d568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  00031980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001357  00000000  00000000  000332e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4b8  00000000  00000000  00034637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef29  00000000  00000000  0005faef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112ceb  00000000  00000000  0007ea18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00191703  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fe0  00000000  00000000  00191748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00198728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ef28 	.word	0x0800ef28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800ef28 	.word	0x0800ef28

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <SysTick_GetValue>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t SysTick_GetValue(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
    return SysTick->VAL;
 80002c4:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <SysTick_GetValue+0x14>)
 80002c6:	689b      	ldr	r3, [r3, #8]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e000e010 	.word	0xe000e010

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002dc:	b08a      	sub	sp, #40	@ 0x28
 80002de:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f001 fc09 	bl	8001af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f8ce 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 fdcc 	bl	8000e84 <MX_GPIO_Init>
  MX_DMA_Init();
 80002ec:	f000 fd88 	bl	8000e00 <MX_DMA_Init>
  MX_TIM2_Init();
 80002f0:	f000 fb96 	bl	8000a20 <MX_TIM2_Init>
  MX_TIM4_Init();
 80002f4:	f000 fc96 	bl	8000c24 <MX_TIM4_Init>
  MX_USB_Device_Init();
 80002f8:	f00d fc6c 	bl	800dbd4 <MX_USB_Device_Init>
  MX_TIM3_Init();
 80002fc:	f000 fc1c 	bl	8000b38 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000300:	f000 f90c 	bl	800051c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000304:	f000 f984 	bl	8000610 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000308:	f000 f9ea 	bl	80006e0 <MX_ADC3_Init>
  MX_OPAMP1_Init();
 800030c:	f000 fa62 	bl	80007d4 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 8000310:	f000 fa86 	bl	8000820 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8000314:	f000 faaa 	bl	800086c <MX_TIM1_Init>
  MX_TIM15_Init();
 8000318:	f000 fcd4 	bl	8000cc4 <MX_TIM15_Init>





  HAL_OPAMP_Start(&hopamp1);
 800031c:	4847      	ldr	r0, [pc, #284]	@ (800043c <main+0x164>)
 800031e:	f004 f8fb 	bl	8004518 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8000322:	4847      	ldr	r0, [pc, #284]	@ (8000440 <main+0x168>)
 8000324:	f004 f8f8 	bl	8004518 <HAL_OPAMP_Start>

  HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 8000328:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800032c:	4945      	ldr	r1, [pc, #276]	@ (8000444 <main+0x16c>)
 800032e:	4846      	ldr	r0, [pc, #280]	@ (8000448 <main+0x170>)
 8000330:	f002 f8d0 	bl	80024d4 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 8000334:	4845      	ldr	r0, [pc, #276]	@ (800044c <main+0x174>)
 8000336:	f006 fea3 	bl	8007080 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim2);
 800033a:	4845      	ldr	r0, [pc, #276]	@ (8000450 <main+0x178>)
 800033c:	f006 fea0 	bl	8007080 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000340:	4844      	ldr	r0, [pc, #272]	@ (8000454 <main+0x17c>)
 8000342:	f006 fe9d 	bl	8007080 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000346:	4844      	ldr	r0, [pc, #272]	@ (8000458 <main+0x180>)
 8000348:	f006 ff0a 	bl	8007160 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800034c:	210c      	movs	r1, #12
 800034e:	4840      	ldr	r0, [pc, #256]	@ (8000450 <main+0x178>)
 8000350:	f007 f954 	bl	80075fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000354:	2108      	movs	r1, #8
 8000356:	483e      	ldr	r0, [pc, #248]	@ (8000450 <main+0x178>)
 8000358:	f007 f950 	bl	80075fc <HAL_TIM_PWM_Start>



  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800035c:	2100      	movs	r1, #0
 800035e:	483b      	ldr	r0, [pc, #236]	@ (800044c <main+0x174>)
 8000360:	f006 ffd8 	bl	8007314 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000364:	2104      	movs	r1, #4
 8000366:	4839      	ldr	r0, [pc, #228]	@ (800044c <main+0x174>)
 8000368:	f006 ffd4 	bl	8007314 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 800036c:	2108      	movs	r1, #8
 800036e:	4837      	ldr	r0, [pc, #220]	@ (800044c <main+0x174>)
 8000370:	f006 ffd0 	bl	8007314 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000374:	210c      	movs	r1, #12
 8000376:	4835      	ldr	r0, [pc, #212]	@ (800044c <main+0x174>)
 8000378:	f006 ffcc 	bl	8007314 <HAL_TIM_OC_Start>

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800037c:	2100      	movs	r1, #0
 800037e:	4837      	ldr	r0, [pc, #220]	@ (800045c <main+0x184>)
 8000380:	f007 fcdc 	bl	8007d3c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 8000384:	2104      	movs	r1, #4
 8000386:	4835      	ldr	r0, [pc, #212]	@ (800045c <main+0x184>)
 8000388:	f007 fcd8 	bl	8007d3c <HAL_TIM_IC_Start_IT>

  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	2110      	movs	r1, #16
 8000390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000394:	f003 ffb4 	bl	8004300 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_PRESCALER(&htim1,BOOT0_BTN_COUNT);//when 170Mhz 9 is best
 8000398:	4b2c      	ldr	r3, [pc, #176]	@ (800044c <main+0x174>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a30      	ldr	r2, [pc, #192]	@ (8000460 <main+0x188>)
 800039e:	6812      	ldr	r2, [r2, #0]
 80003a0:	629a      	str	r2, [r3, #40]	@ 0x28

//	  WS2812_BRIGHTNESS=BOOT0_BTN_COUNT;
		if (WHILE_FLAG==2) {
 80003a2:	4b30      	ldr	r3, [pc, #192]	@ (8000464 <main+0x18c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d1f6      	bne.n	8000398 <main+0xc0>
////	  sprintf(CDC_BUFFER,"-----WHILE-----      \r\n");
////	  CDC_Transmit_FS(CDC_BUFFER, 50);
//
//			rainbow_effect(255, 10);

		for (int i = 0; i < BUFFER_SIZE; ++i) {
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	e039      	b.n	8000424 <main+0x14c>


		ws2812_set_all(rgb_to_color(255-uwDutyCycle, uwDutyCycle, 0x00));
 80003b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000468 <main+0x190>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80003b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000468 <main+0x190>)
 80003ba:	6811      	ldr	r1, [r2, #0]
 80003bc:	2200      	movs	r2, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fb3e 	bl	8001a40 <rgb_to_color>
 80003c4:	4603      	mov	r3, r0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 fb1e 	bl	8001a08 <ws2812_set_all>
		ws2812_update_force();
 80003cc:	f001 fa98 	bl	8001900 <ws2812_update_force>
		  sprintf(CDC_BUFFER,"Val:%d,%d,%d,%d,%d,%d,%d,%d\r\n",WHILE_BUFFER[i]-2048,i,USER_CounterTicks,uwDutyCycle,uwFrequency,uwIC2Value,BOOT0_BTN_COUNT,SysTick_GetValue());
 80003d0:	4a26      	ldr	r2, [pc, #152]	@ (800046c <main+0x194>)
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d8:	f5a3 6800 	sub.w	r8, r3, #2048	@ 0x800
 80003dc:	4b24      	ldr	r3, [pc, #144]	@ (8000470 <main+0x198>)
 80003de:	681c      	ldr	r4, [r3, #0]
 80003e0:	4b21      	ldr	r3, [pc, #132]	@ (8000468 <main+0x190>)
 80003e2:	681d      	ldr	r5, [r3, #0]
 80003e4:	4b23      	ldr	r3, [pc, #140]	@ (8000474 <main+0x19c>)
 80003e6:	681e      	ldr	r6, [r3, #0]
 80003e8:	4b23      	ldr	r3, [pc, #140]	@ (8000478 <main+0x1a0>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000460 <main+0x188>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	603a      	str	r2, [r7, #0]
 80003f4:	f7ff ff64 	bl	80002c0 <SysTick_GetValue>
 80003f8:	4603      	mov	r3, r0
 80003fa:	9305      	str	r3, [sp, #20]
 80003fc:	683a      	ldr	r2, [r7, #0]
 80003fe:	9204      	str	r2, [sp, #16]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	9303      	str	r3, [sp, #12]
 8000404:	9602      	str	r6, [sp, #8]
 8000406:	9501      	str	r5, [sp, #4]
 8000408:	9400      	str	r4, [sp, #0]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	4642      	mov	r2, r8
 800040e:	491b      	ldr	r1, [pc, #108]	@ (800047c <main+0x1a4>)
 8000410:	481b      	ldr	r0, [pc, #108]	@ (8000480 <main+0x1a8>)
 8000412:	f00e f8e9 	bl	800e5e8 <siprintf>
		  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 8000416:	2132      	movs	r1, #50	@ 0x32
 8000418:	4819      	ldr	r0, [pc, #100]	@ (8000480 <main+0x1a8>)
 800041a:	f00d fc99 	bl	800dd50 <CDC_Transmit_FS>
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	3301      	adds	r3, #1
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800042a:	dbc1      	blt.n	80003b0 <main+0xd8>



		}

		HAL_Delay(10);
 800042c:	200a      	movs	r0, #10
 800042e:	f001 fbd3 	bl	8001bd8 <HAL_Delay>
		  WHILE_FLAG=0;
 8000432:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <main+0x18c>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_PRESCALER(&htim1,BOOT0_BTN_COUNT);//when 170Mhz 9 is best
 8000438:	e7ae      	b.n	8000398 <main+0xc0>
 800043a:	bf00      	nop
 800043c:	20000454 	.word	0x20000454
 8000440:	20000490 	.word	0x20000490
 8000444:	200006b8 	.word	0x200006b8
 8000448:	2000025c 	.word	0x2000025c
 800044c:	200004cc 	.word	0x200004cc
 8000450:	20000518 	.word	0x20000518
 8000454:	20000564 	.word	0x20000564
 8000458:	200005b0 	.word	0x200005b0
 800045c:	200005fc 	.word	0x200005fc
 8000460:	20002630 	.word	0x20002630
 8000464:	2000262c 	.word	0x2000262c
 8000468:	200006ac 	.word	0x200006ac
 800046c:	20001658 	.word	0x20001658
 8000470:	200006b4 	.word	0x200006b4
 8000474:	200006b0 	.word	0x200006b0
 8000478:	200006a8 	.word	0x200006a8
 800047c:	0800ef40 	.word	0x0800ef40
 8000480:	200025f8 	.word	0x200025f8

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b094      	sub	sp, #80	@ 0x50
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	2238      	movs	r2, #56	@ 0x38
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f00e f8c8 	bl	800e628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004aa:	f005 fd99 	bl	8005fe0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004ae:	2321      	movs	r3, #33	@ 0x21
 80004b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004b8:	2301      	movs	r3, #1
 80004ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004bc:	2302      	movs	r3, #2
 80004be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c0:	2303      	movs	r3, #3
 80004c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80004c4:	2302      	movs	r3, #2
 80004c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80004c8:	233c      	movs	r3, #60	@ 0x3c
 80004ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004cc:	2302      	movs	r3, #2
 80004ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004d0:	2302      	movs	r3, #2
 80004d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004d4:	2302      	movs	r3, #2
 80004d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d8:	f107 0318 	add.w	r3, r7, #24
 80004dc:	4618      	mov	r0, r3
 80004de:	f005 fe33 	bl	8006148 <HAL_RCC_OscConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x68>
  {
    Error_Handler();
 80004e8:	f000 fdd4 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ec:	230f      	movs	r3, #15
 80004ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f0:	2303      	movs	r3, #3
 80004f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2103      	movs	r1, #3
 8000504:	4618      	mov	r0, r3
 8000506:	f006 f931 	bl	800676c <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000510:	f000 fdc0 	bl	8001094 <Error_Handler>
  }
}
 8000514:	bf00      	nop
 8000516:	3750      	adds	r7, #80	@ 0x50
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	@ 0x30
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2220      	movs	r2, #32
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f00e f877 	bl	800e628 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800053a:	4b33      	ldr	r3, [pc, #204]	@ (8000608 <MX_ADC1_Init+0xec>)
 800053c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000540:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000542:	4b31      	ldr	r3, [pc, #196]	@ (8000608 <MX_ADC1_Init+0xec>)
 8000544:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000548:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800054a:	4b2f      	ldr	r3, [pc, #188]	@ (8000608 <MX_ADC1_Init+0xec>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000550:	4b2d      	ldr	r3, [pc, #180]	@ (8000608 <MX_ADC1_Init+0xec>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000556:	4b2c      	ldr	r3, [pc, #176]	@ (8000608 <MX_ADC1_Init+0xec>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800055c:	4b2a      	ldr	r3, [pc, #168]	@ (8000608 <MX_ADC1_Init+0xec>)
 800055e:	2200      	movs	r2, #0
 8000560:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000562:	4b29      	ldr	r3, [pc, #164]	@ (8000608 <MX_ADC1_Init+0xec>)
 8000564:	2204      	movs	r2, #4
 8000566:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000568:	4b27      	ldr	r3, [pc, #156]	@ (8000608 <MX_ADC1_Init+0xec>)
 800056a:	2200      	movs	r2, #0
 800056c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056e:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <MX_ADC1_Init+0xec>)
 8000570:	2200      	movs	r2, #0
 8000572:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000574:	4b24      	ldr	r3, [pc, #144]	@ (8000608 <MX_ADC1_Init+0xec>)
 8000576:	2201      	movs	r2, #1
 8000578:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057a:	4b23      	ldr	r3, [pc, #140]	@ (8000608 <MX_ADC1_Init+0xec>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0xec>)
 8000584:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000588:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800058a:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0xec>)
 800058c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000590:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000592:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0xec>)
 8000594:	2201      	movs	r2, #1
 8000596:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_ADC1_Init+0xec>)
 800059c:	2200      	movs	r2, #0
 800059e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0xec>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a8:	4817      	ldr	r0, [pc, #92]	@ (8000608 <MX_ADC1_Init+0xec>)
 80005aa:	f001 fdd7 	bl	800215c <HAL_ADC_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005b4:	f000 fd6e 	bl	8001094 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c0:	4619      	mov	r1, r3
 80005c2:	4811      	ldr	r0, [pc, #68]	@ (8000608 <MX_ADC1_Init+0xec>)
 80005c4:	f003 f890 	bl	80036e8 <HAL_ADCEx_MultiModeConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005ce:	f000 fd61 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_ADC1_Init+0xf0>)
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d6:	2306      	movs	r3, #6
 80005d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005de:	237f      	movs	r3, #127	@ 0x7f
 80005e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005e2:	2304      	movs	r3, #4
 80005e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_ADC1_Init+0xec>)
 80005f0:	f002 fab8 	bl	8002b64 <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005fa:	f000 fd4b 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3730      	adds	r7, #48	@ 0x30
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200001f0 	.word	0x200001f0
 800060c:	b6902000 	.word	0xb6902000

08000610 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2220      	movs	r2, #32
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f00e f803 	bl	800e628 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000622:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000624:	4a2c      	ldr	r2, [pc, #176]	@ (80006d8 <MX_ADC2_Init+0xc8>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000628:	4b2a      	ldr	r3, [pc, #168]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 800062a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800062e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b27      	ldr	r3, [pc, #156]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000642:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 800064a:	2204      	movs	r2, #4
 800064c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800064e:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000650:	2200      	movs	r2, #0
 8000652:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000656:	2200      	movs	r2, #0
 8000658:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800065a:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 800065c:	2201      	movs	r2, #1
 800065e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 8000668:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 800066a:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800066e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000670:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000672:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000676:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 800067a:	2201      	movs	r2, #1
 800067c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000682:	2200      	movs	r2, #0
 8000684:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800068e:	4811      	ldr	r0, [pc, #68]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 8000690:	f001 fd64 	bl	800215c <HAL_ADC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800069a:	f000 fcfb 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC2_Init+0xcc>)
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	@ 0x7f
 80006ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	@ (80006d4 <MX_ADC2_Init+0xc4>)
 80006bc:	f002 fa52 	bl	8002b64 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80006c6:	f000 fce5 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000025c 	.word	0x2000025c
 80006d8:	50000100 	.word	0x50000100
 80006dc:	cb8c0000 	.word	0xcb8c0000

080006e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	@ 0x30
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2220      	movs	r2, #32
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f00d ff95 	bl	800e628 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006fe:	4b32      	ldr	r3, [pc, #200]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000700:	4a32      	ldr	r2, [pc, #200]	@ (80007cc <MX_ADC3_Init+0xec>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000704:	4b30      	ldr	r3, [pc, #192]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000706:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800070a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800070c:	4b2e      	ldr	r3, [pc, #184]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b2d      	ldr	r3, [pc, #180]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000718:	4b2b      	ldr	r3, [pc, #172]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071e:	4b2a      	ldr	r3, [pc, #168]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000724:	4b28      	ldr	r3, [pc, #160]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000726:	2204      	movs	r2, #4
 8000728:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800072a:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 800072c:	2200      	movs	r2, #0
 800072e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000730:	4b25      	ldr	r3, [pc, #148]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000732:	2200      	movs	r2, #0
 8000734:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000736:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000738:	2201      	movs	r2, #1
 800073a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC3;
 8000744:	4b20      	ldr	r3, [pc, #128]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000746:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800074c:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 800074e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000756:	2201      	movs	r2, #1
 8000758:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800075c:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 800075e:	2200      	movs	r2, #0
 8000760:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800076a:	4817      	ldr	r0, [pc, #92]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 800076c:	f001 fcf6 	bl	800215c <HAL_ADC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000776:	f000 fc8d 	bl	8001094 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800077e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000782:	4619      	mov	r1, r3
 8000784:	4810      	ldr	r0, [pc, #64]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 8000786:	f002 ffaf 	bl	80036e8 <HAL_ADCEx_MultiModeConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000790:	f000 fc80 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_ADC3_Init+0xf0>)
 8000796:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000798:	2306      	movs	r3, #6
 800079a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a0:	237f      	movs	r3, #127	@ 0x7f
 80007a2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a4:	2304      	movs	r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_ADC3_Init+0xe8>)
 80007b2:	f002 f9d7 	bl	8002b64 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 80007bc:	f000 fc6a 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3730      	adds	r7, #48	@ 0x30
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200002c8 	.word	0x200002c8
 80007cc:	50000400 	.word	0x50000400
 80007d0:	b6982000 	.word	0xb6982000

080007d4 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_OPAMP1_Init+0x44>)
 80007da:	4a10      	ldr	r2, [pc, #64]	@ (800081c <MX_OPAMP1_Init+0x48>)
 80007dc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_OPAMP1_Init+0x44>)
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_OPAMP1_Init+0x44>)
 80007e6:	2260      	movs	r2, #96	@ 0x60
 80007e8:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_OPAMP1_Init+0x44>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_OPAMP1_Init+0x44>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_OPAMP1_Init+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_OPAMP1_Init+0x44>)
 80007fe:	2200      	movs	r2, #0
 8000800:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_OPAMP1_Init+0x44>)
 8000804:	f003 fdb8 	bl	8004378 <HAL_OPAMP_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 800080e:	f000 fc41 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000454 	.word	0x20000454
 800081c:	40010300 	.word	0x40010300

08000820 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_OPAMP3_Init+0x44>)
 8000826:	4a10      	ldr	r2, [pc, #64]	@ (8000868 <MX_OPAMP3_Init+0x48>)
 8000828:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_OPAMP3_Init+0x44>)
 800082c:	2280      	movs	r2, #128	@ 0x80
 800082e:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_OPAMP3_Init+0x44>)
 8000832:	2260      	movs	r2, #96	@ 0x60
 8000834:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_OPAMP3_Init+0x44>)
 8000838:	2208      	movs	r2, #8
 800083a:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_OPAMP3_Init+0x44>)
 800083e:	2201      	movs	r2, #1
 8000840:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_OPAMP3_Init+0x44>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_OPAMP3_Init+0x44>)
 800084a:	2200      	movs	r2, #0
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_OPAMP3_Init+0x44>)
 8000850:	f003 fd92 	bl	8004378 <HAL_OPAMP_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 800085a:	f000 fc1b 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000490 	.word	0x20000490
 8000868:	40010308 	.word	0x40010308

0800086c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b09c      	sub	sp, #112	@ 0x70
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2234      	movs	r2, #52	@ 0x34
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f00d febe 	bl	800e628 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ac:	4b5a      	ldr	r3, [pc, #360]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80008ae:	4a5b      	ldr	r2, [pc, #364]	@ (8000a1c <MX_TIM1_Init+0x1b0>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14-1;
 80008b2:	4b59      	ldr	r3, [pc, #356]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80008b4:	220d      	movs	r2, #13
 80008b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b57      	ldr	r3, [pc, #348]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 80008be:	4b56      	ldr	r3, [pc, #344]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b54      	ldr	r3, [pc, #336]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ca:	4b53      	ldr	r3, [pc, #332]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b51      	ldr	r3, [pc, #324]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008d6:	4850      	ldr	r0, [pc, #320]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80008d8:	f006 fb7a 	bl	8006fd0 <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008e2:	f000 fbd7 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ea:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008ec:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008f0:	4619      	mov	r1, r3
 80008f2:	4849      	ldr	r0, [pc, #292]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80008f4:	f007 feec 	bl	80086d0 <HAL_TIM_ConfigClockSource>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008fe:	f000 fbc9 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000902:	4845      	ldr	r0, [pc, #276]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 8000904:	f006 fca4 	bl	8007250 <HAL_TIM_OC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800090e:	f000 fbc1 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000912:	2320      	movs	r3, #32
 8000914:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800091e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000922:	4619      	mov	r1, r3
 8000924:	483c      	ldr	r0, [pc, #240]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 8000926:	f009 f827 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000930:	f000 fbb0 	bl	8001094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000934:	2330      	movs	r3, #48	@ 0x30
 8000936:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093c:	2300      	movs	r3, #0
 800093e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000940:	2300      	movs	r3, #0
 8000942:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000950:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	482f      	ldr	r0, [pc, #188]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 800095a:	f007 fc8f 	bl	800827c <HAL_TIM_OC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000964:	f000 fb96 	bl	8001094 <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800096c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000970:	2204      	movs	r2, #4
 8000972:	4619      	mov	r1, r3
 8000974:	4828      	ldr	r0, [pc, #160]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 8000976:	f007 fc81 	bl	800827c <HAL_TIM_OC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000980:	f000 fb88 	bl	8001094 <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000988:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800098c:	2208      	movs	r2, #8
 800098e:	4619      	mov	r1, r3
 8000990:	4821      	ldr	r0, [pc, #132]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 8000992:	f007 fc73 	bl	800827c <HAL_TIM_OC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800099c:	f000 fb7a 	bl	8001094 <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 80009a0:	2303      	movs	r3, #3
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009a8:	220c      	movs	r2, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	481a      	ldr	r0, [pc, #104]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80009ae:	f007 fc65 	bl	800827c <HAL_TIM_OC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80009b8:	f000 fb6c 	bl	8001094 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	4807      	ldr	r0, [pc, #28]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 80009fa:	f009 f853 	bl	8009aa4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8000a04:	f000 fb46 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <MX_TIM1_Init+0x1ac>)
 8000a0a:	f000 fe0f 	bl	800162c <HAL_TIM_MspPostInit>

}
 8000a0e:	bf00      	nop
 8000a10:	3770      	adds	r7, #112	@ 0x70
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200004cc 	.word	0x200004cc
 8000a1c:	40012c00 	.word	0x40012c00

08000a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	@ 0x38
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a52:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a5a:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a66:	4b32      	ldr	r3, [pc, #200]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b30      	ldr	r3, [pc, #192]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7a:	482d      	ldr	r0, [pc, #180]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000a7c:	f006 faa8 	bl	8006fd0 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a86:	f000 fb05 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4823      	ldr	r0, [pc, #140]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000aa4:	f007 fe14 	bl	80086d0 <HAL_TIM_ConfigClockSource>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000aae:	f000 faf1 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ab2:	481f      	ldr	r0, [pc, #124]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000ab4:	f006 fd40 	bl	8007538 <HAL_TIM_PWM_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000abe:	f000 fae9 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4817      	ldr	r0, [pc, #92]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000ad2:	f008 ff51 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000adc:	f000 fada 	bl	8001094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae0:	2360      	movs	r3, #96	@ 0x60
 8000ae2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8000ae4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	2208      	movs	r2, #8
 8000af6:	4619      	mov	r1, r3
 8000af8:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000afa:	f007 fcd5 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000b04:	f000 fac6 	bl	8001094 <Error_Handler>
  }
  sConfigOC.Pulse = 1000000;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <MX_TIM2_Init+0x114>)
 8000b0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	220c      	movs	r2, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	4807      	ldr	r0, [pc, #28]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000b14:	f007 fcc8 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000b1e:	f000 fab9 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b22:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <MX_TIM2_Init+0x110>)
 8000b24:	f000 fd82 	bl	800162c <HAL_TIM_MspPostInit>

}
 8000b28:	bf00      	nop
 8000b2a:	3738      	adds	r7, #56	@ 0x38
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000518 	.word	0x20000518
 8000b34:	000f4240 	.word	0x000f4240

08000b38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	@ 0x38
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
 8000b66:	615a      	str	r2, [r3, #20]
 8000b68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c20 <MX_TIM3_Init+0xe8>)
 8000b6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b70:	4b2a      	ldr	r3, [pc, #168]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000b7e:	2296      	movs	r2, #150	@ 0x96
 8000b80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b8e:	4823      	ldr	r0, [pc, #140]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000b90:	f006 fa1e 	bl	8006fd0 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b9a:	f000 fa7b 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481c      	ldr	r0, [pc, #112]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000bac:	f007 fd90 	bl	80086d0 <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bb6:	f000 fa6d 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bba:	4818      	ldr	r0, [pc, #96]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000bbc:	f006 fcbc 	bl	8007538 <HAL_TIM_PWM_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bc6:	f000 fa65 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4810      	ldr	r0, [pc, #64]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000bda:	f008 fecd 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000be4:	f000 fa56 	bl	8001094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be8:	2360      	movs	r3, #96	@ 0x60
 8000bea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000c00:	f007 fc52 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c0a:	f000 fa43 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <MX_TIM3_Init+0xe4>)
 8000c10:	f000 fd0c 	bl	800162c <HAL_TIM_MspPostInit>

}
 8000c14:	bf00      	nop
 8000c16:	3738      	adds	r7, #56	@ 0x38
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000564 	.word	0x20000564
 8000c20:	40000400 	.word	0x40000400

08000c24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <MX_TIM4_Init+0x98>)
 8000c44:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc0 <MX_TIM4_Init+0x9c>)
 8000c46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12000-1;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <MX_TIM4_Init+0x98>)
 8000c4a:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000c4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_TIM4_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000c56:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <MX_TIM4_Init+0x98>)
 8000c58:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_TIM4_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <MX_TIM4_Init+0x98>)
 8000c66:	2280      	movs	r2, #128	@ 0x80
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c6a:	4814      	ldr	r0, [pc, #80]	@ (8000cbc <MX_TIM4_Init+0x98>)
 8000c6c:	f006 f9b0 	bl	8006fd0 <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000c76:	f000 fa0d 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4619      	mov	r1, r3
 8000c86:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <MX_TIM4_Init+0x98>)
 8000c88:	f007 fd22 	bl	80086d0 <HAL_TIM_ConfigClockSource>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000c92:	f000 f9ff 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	@ (8000cbc <MX_TIM4_Init+0x98>)
 8000ca4:	f008 fe68 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000cae:	f000 f9f1 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	3720      	adds	r7, #32
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200005b0 	.word	0x200005b0
 8000cc0:	40000800 	.word	0x40000800

08000cc4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b090      	sub	sp, #64	@ 0x40
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d00:	4b3d      	ldr	r3, [pc, #244]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d02:	4a3e      	ldr	r2, [pc, #248]	@ (8000dfc <MX_TIM15_Init+0x138>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000d06:	4b3c      	ldr	r3, [pc, #240]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000d12:	4b39      	ldr	r3, [pc, #228]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d18:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b37      	ldr	r3, [pc, #220]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d20:	4b35      	ldr	r3, [pc, #212]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b34      	ldr	r3, [pc, #208]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d2c:	4832      	ldr	r0, [pc, #200]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d2e:	f006 f94f 	bl	8006fd0 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000d38:	f000 f9ac 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d46:	4619      	mov	r1, r3
 8000d48:	482b      	ldr	r0, [pc, #172]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d4a:	f007 fcc1 	bl	80086d0 <HAL_TIM_ConfigClockSource>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000d54:	f000 f99e 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000d58:	4827      	ldr	r0, [pc, #156]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d5a:	f006 ff8d 	bl	8007c78 <HAL_TIM_IC_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8000d64:	f000 f996 	bl	8001094 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d6c:	2350      	movs	r3, #80	@ 0x50
 8000d6e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d70:	2302      	movs	r3, #2
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	481e      	ldr	r0, [pc, #120]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d80:	f007 fdbc 	bl	80088fc <HAL_TIM_SlaveConfigSynchro>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 8000d8a:	f000 f983 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4816      	ldr	r0, [pc, #88]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000d9e:	f008 fdeb 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8000da8:	f000 f974 	bl	8001094 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dac:	2302      	movs	r3, #2
 8000dae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000db0:	2301      	movs	r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000dc4:	f007 fad4 	bl	8008370 <HAL_TIM_IC_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000dce:	f000 f961 	bl	8001094 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2204      	movs	r2, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <MX_TIM15_Init+0x134>)
 8000de2:	f007 fac5 	bl	8008370 <HAL_TIM_IC_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000dec:	f000 f952 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3740      	adds	r7, #64	@ 0x40
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200005fc 	.word	0x200005fc
 8000dfc:	40014000 	.word	0x40014000

08000e00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <MX_DMA_Init+0x80>)
 8000e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000e80 <MX_DMA_Init+0x80>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e12:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <MX_DMA_Init+0x80>)
 8000e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <MX_DMA_Init+0x80>)
 8000e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e22:	4a17      	ldr	r2, [pc, #92]	@ (8000e80 <MX_DMA_Init+0x80>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_DMA_Init+0x80>)
 8000e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	200b      	movs	r0, #11
 8000e3c:	f002 fe37 	bl	8003aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e40:	200b      	movs	r0, #11
 8000e42:	f002 fe4e 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200c      	movs	r0, #12
 8000e4c:	f002 fe2f 	bl	8003aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e50:	200c      	movs	r0, #12
 8000e52:	f002 fe46 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	200d      	movs	r0, #13
 8000e5c:	f002 fe27 	bl	8003aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e60:	200d      	movs	r0, #13
 8000e62:	f002 fe3e 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	200e      	movs	r0, #14
 8000e6c:	f002 fe1f 	bl	8003aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e70:	200e      	movs	r0, #14
 8000e72:	f002 fe36 	bl	8003ae2 <HAL_NVIC_EnableIRQ>

}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9a:	4b30      	ldr	r3, [pc, #192]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	4a29      	ldr	r2, [pc, #164]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebe:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	4a23      	ldr	r2, [pc, #140]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed6:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eee:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <MX_GPIO_Init+0xd8>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f04:	f003 f9fc 	bl	8004300 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERROR_LED_Pin PA10 */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|GPIO_PIN_10;
 8000f08:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f24:	f003 f86a 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4808      	ldr	r0, [pc, #32]	@ (8000f60 <MX_GPIO_Init+0xdc>)
 8000f40:	f003 f85c 	bl	8003ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2017      	movs	r0, #23
 8000f4a:	f002 fdb0 	bl	8003aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f4e:	2017      	movs	r0, #23
 8000f50:	f002 fdc7 	bl	8003ae2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	@ 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	48000400 	.word	0x48000400

08000f64 <HAL_ADC_ConvHalfCpltCallback>:



//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]


#if TOWHILE

	//抓数据进while
	if (WHILE_FLAG==0) {
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d114      	bne.n	8000f9e <HAL_ADC_ConvHalfCpltCallback+0x3a>
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	e00a      	b.n	8000f90 <HAL_ADC_ConvHalfCpltCallback+0x2c>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb0 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f82:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f96:	d3f0      	bcc.n	8000f7a <HAL_ADC_ConvHalfCpltCallback+0x16>
		WHILE_FLAG=1;
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]


#endif


}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000262c 	.word	0x2000262c
 8000fb0:	200006b8 	.word	0x200006b8
 8000fb4:	20001658 	.word	0x20001658

08000fb8 <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
#endif

#if TOWHILE

//	抓数据进while
	if (WHILE_FLAG==1) {
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <HAL_ADC_ConvCpltCallback+0x48>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d115      	bne.n	8000ff4 <HAL_ADC_ConvCpltCallback+0x3c>
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8000fc8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e00a      	b.n	8000fe6 <HAL_ADC_ConvCpltCallback+0x2e>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001004 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fd8:	490b      	ldr	r1, [pc, #44]	@ (8001008 <HAL_ADC_ConvCpltCallback+0x50>)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fec:	d3f0      	bcc.n	8000fd0 <HAL_ADC_ConvCpltCallback+0x18>
		WHILE_FLAG=2;
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <HAL_ADC_ConvCpltCallback+0x48>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	601a      	str	r2, [r3, #0]
	}

#endif
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	2000262c 	.word	0x2000262c
 8001004:	200006b8 	.word	0x200006b8
 8001008:	20001658 	.word	0x20001658

0800100c <HAL_TIM_IC_CaptureCallback>:




 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

   if (htim->Instance == TIM15) // 判断是否为TIM15
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1a      	ldr	r2, [pc, #104]	@ (8001084 <HAL_TIM_IC_CaptureCallback+0x78>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12e      	bne.n	800107c <HAL_TIM_IC_CaptureCallback+0x70>
   {


     if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7f1b      	ldrb	r3, [r3, #28]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d12a      	bne.n	800107c <HAL_TIM_IC_CaptureCallback+0x70>
     {

//  	   HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);

       /* Get the Input Capture value */
       uwIC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001026:	2100      	movs	r1, #0
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f007 fca9 	bl	8008980 <HAL_TIM_ReadCapturedValue>
 800102e:	4603      	mov	r3, r0
 8001030:	4a15      	ldr	r2, [pc, #84]	@ (8001088 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001032:	6013      	str	r3, [r2, #0]

       if (uwIC2Value != 0)
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d019      	beq.n	8001070 <HAL_TIM_IC_CaptureCallback+0x64>
       {
         /* Duty cycle computation */
         uwDutyCycle = 255-((HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) * 255) / uwIC2Value;
 800103c:	2104      	movs	r1, #4
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f007 fc9e 	bl	8008980 <HAL_TIM_ReadCapturedValue>
 8001044:	4602      	mov	r2, r0
 8001046:	4613      	mov	r3, r2
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	1a9a      	subs	r2, r3, r2
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001058:	4a0c      	ldr	r2, [pc, #48]	@ (800108c <HAL_TIM_IC_CaptureCallback+0x80>)
 800105a:	6013      	str	r3, [r2, #0]

         /* uwFrequency computation
         TIM1 counter clock = (System Clock) */
         uwFrequency = ( HAL_RCC_GetSysClockFreq()  ) / uwIC2Value;
 800105c:	f005 fcc2 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 8001060:	4602      	mov	r2, r0
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <HAL_TIM_IC_CaptureCallback+0x84>)
 800106c:	6013      	str	r3, [r2, #0]
         uwDutyCycle = 0;
         uwFrequency = 0;
       }
     }
   }
 }
 800106e:	e005      	b.n	800107c <HAL_TIM_IC_CaptureCallback+0x70>
         uwDutyCycle = 0;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_TIM_IC_CaptureCallback+0x80>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
         uwFrequency = 0;
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 }
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40014000 	.word	0x40014000
 8001088:	200006a8 	.word	0x200006a8
 800108c:	200006ac 	.word	0x200006ac
 8001090:	200006b0 	.word	0x200006b0

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */



//  __disable_irq();
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2110      	movs	r1, #16
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f003 f92e 	bl	8004300 <HAL_GPIO_WritePin>
//  while (1)
//  {
//
//  }
  /* USER CODE END Error_Handler_Debug */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <HAL_MspInit+0x58>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b2:	4a13      	ldr	r2, [pc, #76]	@ (8001100 <HAL_MspInit+0x58>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_MspInit+0x58>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_MspInit+0x58>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <HAL_MspInit+0x58>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_MspInit+0x58>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Tune the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_VREFBUF_TrimmingConfig(0);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 fdc4 	bl	8001c6c <HAL_SYSCFG_VREFBUF_TrimmingConfig>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 fd99 	bl	8001c1c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80010ea:	f000 fdd3 	bl	8001c94 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 fda8 	bl	8001c44 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010f4:	f005 f818 	bl	8006128 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0a0      	sub	sp, #128	@ 0x80
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	2254      	movs	r2, #84	@ 0x54
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f00d fa7f 	bl	800e628 <memset>
  if(hadc->Instance==ADC1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001132:	d158      	bne.n	80011e6 <HAL_ADC_MspInit+0xe2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001138:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800113a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800113e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4618      	mov	r0, r3
 8001146:	f005 fcf5 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001150:	f7ff ffa0 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001154:	4b87      	ldr	r3, [pc, #540]	@ (8001374 <HAL_ADC_MspInit+0x270>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4a86      	ldr	r2, [pc, #536]	@ (8001374 <HAL_ADC_MspInit+0x270>)
 800115c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800115e:	4b85      	ldr	r3, [pc, #532]	@ (8001374 <HAL_ADC_MspInit+0x270>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d10b      	bne.n	800117e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001166:	4b84      	ldr	r3, [pc, #528]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a83      	ldr	r2, [pc, #524]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 800116c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b81      	ldr	r3, [pc, #516]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800117e:	4b7f      	ldr	r3, [pc, #508]	@ (800137c <HAL_ADC_MspInit+0x278>)
 8001180:	4a7f      	ldr	r2, [pc, #508]	@ (8001380 <HAL_ADC_MspInit+0x27c>)
 8001182:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001184:	4b7d      	ldr	r3, [pc, #500]	@ (800137c <HAL_ADC_MspInit+0x278>)
 8001186:	2205      	movs	r2, #5
 8001188:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800118a:	4b7c      	ldr	r3, [pc, #496]	@ (800137c <HAL_ADC_MspInit+0x278>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b7a      	ldr	r3, [pc, #488]	@ (800137c <HAL_ADC_MspInit+0x278>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b79      	ldr	r3, [pc, #484]	@ (800137c <HAL_ADC_MspInit+0x278>)
 8001198:	2280      	movs	r2, #128	@ 0x80
 800119a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800119c:	4b77      	ldr	r3, [pc, #476]	@ (800137c <HAL_ADC_MspInit+0x278>)
 800119e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011a4:	4b75      	ldr	r3, [pc, #468]	@ (800137c <HAL_ADC_MspInit+0x278>)
 80011a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011ac:	4b73      	ldr	r3, [pc, #460]	@ (800137c <HAL_ADC_MspInit+0x278>)
 80011ae:	2220      	movs	r2, #32
 80011b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011b2:	4b72      	ldr	r3, [pc, #456]	@ (800137c <HAL_ADC_MspInit+0x278>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011b8:	4870      	ldr	r0, [pc, #448]	@ (800137c <HAL_ADC_MspInit+0x278>)
 80011ba:	f002 fcad 	bl	8003b18 <HAL_DMA_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80011c4:	f7ff ff66 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a6c      	ldr	r2, [pc, #432]	@ (800137c <HAL_ADC_MspInit+0x278>)
 80011cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80011ce:	4a6b      	ldr	r2, [pc, #428]	@ (800137c <HAL_ADC_MspInit+0x278>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2012      	movs	r0, #18
 80011da:	f002 fc68 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011de:	2012      	movs	r0, #18
 80011e0:	f002 fc7f 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80011e4:	e0c2      	b.n	800136c <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC2)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a66      	ldr	r2, [pc, #408]	@ (8001384 <HAL_ADC_MspInit+0x280>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d171      	bne.n	80012d4 <HAL_ADC_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011f6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	4618      	mov	r0, r3
 8001202:	f005 fc97 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_ADC_MspInit+0x10c>
      Error_Handler();
 800120c:	f7ff ff42 	bl	8001094 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001210:	4b58      	ldr	r3, [pc, #352]	@ (8001374 <HAL_ADC_MspInit+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a57      	ldr	r2, [pc, #348]	@ (8001374 <HAL_ADC_MspInit+0x270>)
 8001218:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800121a:	4b56      	ldr	r3, [pc, #344]	@ (8001374 <HAL_ADC_MspInit+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d10b      	bne.n	800123a <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001222:	4b55      	ldr	r3, [pc, #340]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a54      	ldr	r2, [pc, #336]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 8001228:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b52      	ldr	r3, [pc, #328]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b4f      	ldr	r3, [pc, #316]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a4e      	ldr	r2, [pc, #312]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b4c      	ldr	r3, [pc, #304]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001252:	2302      	movs	r3, #2
 8001254:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001256:	2303      	movs	r3, #3
 8001258:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001268:	f002 fec8 	bl	8003ffc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 800126c:	4b46      	ldr	r3, [pc, #280]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 800126e:	4a47      	ldr	r2, [pc, #284]	@ (800138c <HAL_ADC_MspInit+0x288>)
 8001270:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001272:	4b45      	ldr	r3, [pc, #276]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 8001274:	2224      	movs	r2, #36	@ 0x24
 8001276:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001278:	4b43      	ldr	r3, [pc, #268]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800127e:	4b42      	ldr	r3, [pc, #264]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001284:	4b40      	ldr	r3, [pc, #256]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800128a:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 800128c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001290:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001292:	4b3d      	ldr	r3, [pc, #244]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 8001294:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001298:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800129a:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 800129c:	2220      	movs	r2, #32
 800129e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80012a0:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012a6:	4838      	ldr	r0, [pc, #224]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 80012a8:	f002 fc36 	bl	8003b18 <HAL_DMA_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 80012b2:	f7ff feef 	bl	8001094 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a33      	ldr	r2, [pc, #204]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 80012ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80012bc:	4a32      	ldr	r2, [pc, #200]	@ (8001388 <HAL_ADC_MspInit+0x284>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2012      	movs	r0, #18
 80012c8:	f002 fbf1 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012cc:	2012      	movs	r0, #18
 80012ce:	f002 fc08 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
}
 80012d2:	e04b      	b.n	800136c <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC3)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001390 <HAL_ADC_MspInit+0x28c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d146      	bne.n	800136c <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80012de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80012e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80012e8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	4618      	mov	r0, r3
 80012f0:	f005 fc20 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 80012fa:	f7ff fecb 	bl	8001094 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130a:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <HAL_ADC_MspInit+0x274>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA1_Channel4;
 8001316:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 8001318:	4a1f      	ldr	r2, [pc, #124]	@ (8001398 <HAL_ADC_MspInit+0x294>)
 800131a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 800131e:	2225      	movs	r2, #37	@ 0x25
 8001320:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 8001330:	2280      	movs	r2, #128	@ 0x80
 8001332:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 8001336:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 800133e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001342:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001350:	4810      	ldr	r0, [pc, #64]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 8001352:	f002 fbe1 	bl	8003b18 <HAL_DMA_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 800135c:	f7ff fe9a 	bl	8001094 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 8001364:	655a      	str	r2, [r3, #84]	@ 0x54
 8001366:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <HAL_ADC_MspInit+0x290>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800136c:	bf00      	nop
 800136e:	3780      	adds	r7, #128	@ 0x80
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20002634 	.word	0x20002634
 8001378:	40021000 	.word	0x40021000
 800137c:	20000334 	.word	0x20000334
 8001380:	4002001c 	.word	0x4002001c
 8001384:	50000100 	.word	0x50000100
 8001388:	20000394 	.word	0x20000394
 800138c:	40020030 	.word	0x40020030
 8001390:	50000400 	.word	0x50000400
 8001394:	200003f4 	.word	0x200003f4
 8001398:	40020044 	.word	0x40020044

0800139c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <HAL_OPAMP_MspInit+0x9c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d119      	bne.n	80013f2 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <HAL_OPAMP_MspInit+0xa0>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <HAL_OPAMP_MspInit+0xa0>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <HAL_OPAMP_MspInit+0xa0>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013d6:	2302      	movs	r3, #2
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ec:	f002 fe06 	bl	8003ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80013f0:	e01d      	b.n	800142e <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <HAL_OPAMP_MspInit+0xa4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d118      	bne.n	800142e <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <HAL_OPAMP_MspInit+0xa0>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	4a0e      	ldr	r2, [pc, #56]	@ (800143c <HAL_OPAMP_MspInit+0xa0>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <HAL_OPAMP_MspInit+0xa0>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001414:	2302      	movs	r3, #2
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001418:	2303      	movs	r3, #3
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142a:	f002 fde7 	bl	8003ffc <HAL_GPIO_Init>
}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	@ 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40010300 	.word	0x40010300
 800143c:	40021000 	.word	0x40021000
 8001440:	40010308 	.word	0x40010308

08001444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	@ 0x38
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a6b      	ldr	r2, [pc, #428]	@ (8001610 <HAL_TIM_Base_MspInit+0x1cc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d114      	bne.n	8001490 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001466:	4b6b      	ldr	r3, [pc, #428]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146a:	4a6a      	ldr	r2, [pc, #424]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 800146c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001470:	6613      	str	r3, [r2, #96]	@ 0x60
 8001472:	4b68      	ldr	r3, [pc, #416]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001476:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	2018      	movs	r0, #24
 8001484:	f002 fb13 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001488:	2018      	movs	r0, #24
 800148a:	f002 fb2a 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800148e:	e0bb      	b.n	8001608 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001498:	d129      	bne.n	80014ee <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149a:	4b5e      	ldr	r3, [pc, #376]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149e:	4a5d      	ldr	r2, [pc, #372]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b58      	ldr	r3, [pc, #352]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	4a57      	ldr	r2, [pc, #348]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014be:	4b55      	ldr	r3, [pc, #340]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ca:	2301      	movs	r3, #1
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80014da:	230e      	movs	r3, #14
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e8:	f002 fd88 	bl	8003ffc <HAL_GPIO_Init>
}
 80014ec:	e08c      	b.n	8001608 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM3)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a49      	ldr	r2, [pc, #292]	@ (8001618 <HAL_TIM_Base_MspInit+0x1d4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d137      	bne.n	8001568 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014f8:	4b46      	ldr	r3, [pc, #280]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	4a45      	ldr	r2, [pc, #276]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	6593      	str	r3, [r2, #88]	@ 0x58
 8001504:	4b43      	ldr	r3, [pc, #268]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 8001510:	4b42      	ldr	r3, [pc, #264]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 8001512:	4a43      	ldr	r2, [pc, #268]	@ (8001620 <HAL_TIM_Base_MspInit+0x1dc>)
 8001514:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8001516:	4b41      	ldr	r3, [pc, #260]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 8001518:	2240      	movs	r2, #64	@ 0x40
 800151a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800151c:	4b3f      	ldr	r3, [pc, #252]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 800151e:	2210      	movs	r2, #16
 8001520:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001522:	4b3e      	ldr	r3, [pc, #248]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001528:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 800152a:	2280      	movs	r2, #128	@ 0x80
 800152c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152e:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 8001530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001534:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001536:	4b39      	ldr	r3, [pc, #228]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 8001538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 800153e:	4b37      	ldr	r3, [pc, #220]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001544:	4b35      	ldr	r3, [pc, #212]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 800154a:	4834      	ldr	r0, [pc, #208]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 800154c:	f002 fae4 	bl	8003b18 <HAL_DMA_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_TIM_Base_MspInit+0x116>
      Error_Handler();
 8001556:	f7ff fd9d 	bl	8001094 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a2f      	ldr	r2, [pc, #188]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 800155e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001560:	4a2e      	ldr	r2, [pc, #184]	@ (800161c <HAL_TIM_Base_MspInit+0x1d8>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001566:	e04f      	b.n	8001608 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM4)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a2d      	ldr	r2, [pc, #180]	@ (8001624 <HAL_TIM_Base_MspInit+0x1e0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d114      	bne.n	800159c <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001572:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	4a27      	ldr	r2, [pc, #156]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6593      	str	r3, [r2, #88]	@ 0x58
 800157e:	4b25      	ldr	r3, [pc, #148]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	201e      	movs	r0, #30
 8001590:	f002 fa8d 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001594:	201e      	movs	r0, #30
 8001596:	f002 faa4 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
}
 800159a:	e035      	b.n	8001608 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM15)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <HAL_TIM_Base_MspInit+0x1e4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d130      	bne.n	8001608 <HAL_TIM_Base_MspInit+0x1c4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80015a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015b2:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a14      	ldr	r2, [pc, #80]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_TIM_Base_MspInit+0x1d0>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015d6:	2304      	movs	r3, #4
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80015e6:	2309      	movs	r3, #9
 80015e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f4:	f002 fd02 	bl	8003ffc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2018      	movs	r0, #24
 80015fe:	f002 fa56 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001602:	2018      	movs	r0, #24
 8001604:	f002 fa6d 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
}
 8001608:	bf00      	nop
 800160a:	3738      	adds	r7, #56	@ 0x38
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40012c00 	.word	0x40012c00
 8001614:	40021000 	.word	0x40021000
 8001618:	40000400 	.word	0x40000400
 800161c:	20000648 	.word	0x20000648
 8001620:	40020008 	.word	0x40020008
 8001624:	40000800 	.word	0x40000800
 8001628:	40014000 	.word	0x40014000

0800162c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a33      	ldr	r2, [pc, #204]	@ (8001718 <HAL_TIM_MspPostInit+0xec>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d11c      	bne.n	8001688 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b33      	ldr	r3, [pc, #204]	@ (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	4a32      	ldr	r2, [pc, #200]	@ (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165a:	4b30      	ldr	r3, [pc, #192]	@ (800171c <HAL_TIM_MspPostInit+0xf0>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001666:	230f      	movs	r3, #15
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001676:	2302      	movs	r3, #2
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4827      	ldr	r0, [pc, #156]	@ (8001720 <HAL_TIM_MspPostInit+0xf4>)
 8001682:	f002 fcbb 	bl	8003ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001686:	e043      	b.n	8001710 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001690:	d11d      	bne.n	80016ce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b22      	ldr	r3, [pc, #136]	@ (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a21      	ldr	r2, [pc, #132]	@ (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016bc:	2301      	movs	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4817      	ldr	r0, [pc, #92]	@ (8001724 <HAL_TIM_MspPostInit+0xf8>)
 80016c8:	f002 fc98 	bl	8003ffc <HAL_GPIO_Init>
}
 80016cc:	e020      	b.n	8001710 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a15      	ldr	r2, [pc, #84]	@ (8001728 <HAL_TIM_MspPostInit+0xfc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d11b      	bne.n	8001710 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016dc:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e4:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8001700:	230a      	movs	r3, #10
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	@ (8001724 <HAL_TIM_MspPostInit+0xf8>)
 800170c:	f002 fc76 	bl	8003ffc <HAL_GPIO_Init>
}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	@ 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40021000 	.word	0x40021000
 8001720:	48000800 	.word	0x48000800
 8001724:	48000400 	.word	0x48000400
 8001728:	40000400 	.word	0x40000400

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <NMI_Handler+0x4>

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <MemManage_Handler+0x4>

08001744 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <UsageFault_Handler+0x4>

08001754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001782:	f000 fa0b 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <DMA1_Channel1_IRQHandler+0x10>)
 8001792:	f002 fae4 	bl	8003d5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000648 	.word	0x20000648

080017a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <DMA1_Channel2_IRQHandler+0x10>)
 80017a6:	f002 fada 	bl	8003d5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000334 	.word	0x20000334

080017b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <DMA1_Channel3_IRQHandler+0x10>)
 80017ba:	f002 fad0 	bl	8003d5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000394 	.word	0x20000394

080017c8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <DMA1_Channel4_IRQHandler+0x10>)
 80017ce:	f002 fac6 	bl	8003d5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200003f4 	.word	0x200003f4

080017dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <ADC1_2_IRQHandler+0x14>)
 80017e2:	f000 ff4b 	bl	800267c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80017e6:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <ADC1_2_IRQHandler+0x18>)
 80017e8:	f000 ff48 	bl	800267c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200001f0 	.word	0x200001f0
 80017f4:	2000025c 	.word	0x2000025c

080017f8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <USB_LP_IRQHandler+0x10>)
 80017fe:	f002 ffac 	bl	800475a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200046d0 	.word	0x200046d0

0800180c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	BOOT0_BTN_COUNT=BOOT0_BTN_COUNT+1;
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <EXTI9_5_IRQHandler+0x1c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <EXTI9_5_IRQHandler+0x1c>)
 8001818:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800181a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800181e:	f002 fd87 	bl	8004330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20002630 	.word	0x20002630

0800182c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001832:	f006 fbd3 	bl	8007fdc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001836:	4803      	ldr	r0, [pc, #12]	@ (8001844 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001838:	f006 fbd0 	bl	8007fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200004cc 	.word	0x200004cc
 8001844:	200005fc 	.word	0x200005fc

08001848 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	USER_CounterTicks= TIM2->CNT;
 800184c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <TIM4_IRQHandler+0x20>)
 8001854:	6013      	str	r3, [r2, #0]
  	TIM2->CNT=0;
 8001856:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
//	  sprintf(&CDC_BUFFER,"FRRQ: %d \r\n",USER_CounterTicks);
//	  CDC_Transmit_FS(&CDC_BUFFER, 50);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800185e:	4803      	ldr	r0, [pc, #12]	@ (800186c <TIM4_IRQHandler+0x24>)
 8001860:	f006 fbbc 	bl	8007fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200006b4 	.word	0x200006b4
 800186c:	200005b0 	.word	0x200005b0

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	@ (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f00c feca 	bl	800e638 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20020000 	.word	0x20020000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	20002638 	.word	0x20002638
 80018d8:	20004d18 	.word	0x20004d18

080018dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <ws2812_update_force>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update_force(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001906:	2300      	movs	r3, #0
 8001908:	71fb      	strb	r3, [r7, #7]
 800190a:	e060      	b.n	80019ce <ws2812_update_force+0xce>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4936      	ldr	r1, [pc, #216]	@ (80019ec <ws2812_update_force+0xec>)
 8001912:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001916:	4936      	ldr	r1, [pc, #216]	@ (80019f0 <ws2812_update_force+0xf0>)
 8001918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4a34      	ldr	r2, [pc, #208]	@ (80019f0 <ws2812_update_force+0xf0>)
 8001920:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001924:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <ws2812_update_force+0xf4>)
 8001926:	4a34      	ldr	r2, [pc, #208]	@ (80019f8 <ws2812_update_force+0xf8>)
 8001928:	4934      	ldr	r1, [pc, #208]	@ (80019fc <ws2812_update_force+0xfc>)
 800192a:	f000 f89f 	bl	8001a6c <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 800192e:	79fa      	ldrb	r2, [r7, #7]
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	33c8      	adds	r3, #200	@ 0xc8
 800193a:	4a31      	ldr	r2, [pc, #196]	@ (8001a00 <ws2812_update_force+0x100>)
 800193c:	4413      	add	r3, r2
 800193e:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 8001940:	2300      	movs	r3, #0
 8001942:	71bb      	strb	r3, [r7, #6]
 8001944:	e03d      	b.n	80019c2 <ws2812_update_force+0xc2>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8001946:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <ws2812_update_force+0xfc>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <ws2812_update_force+0x5e>
 800195a:	2164      	movs	r1, #100	@ 0x64
 800195c:	e000      	b.n	8001960 <ws2812_update_force+0x60>
 800195e:	2132      	movs	r1, #50	@ 0x32
 8001960:	79bb      	ldrb	r3, [r7, #6]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	4413      	add	r3, r2
 8001968:	460a      	mov	r2, r1
 800196a:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <ws2812_update_force+0xf8>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <ws2812_update_force+0x84>
 8001980:	2164      	movs	r1, #100	@ 0x64
 8001982:	e000      	b.n	8001986 <ws2812_update_force+0x86>
 8001984:	2132      	movs	r1, #50	@ 0x32
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	3308      	adds	r3, #8
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	4413      	add	r3, r2
 8001990:	460a      	mov	r2, r1
 8001992:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8001994:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <ws2812_update_force+0xf4>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <ws2812_update_force+0xac>
 80019a8:	2164      	movs	r1, #100	@ 0x64
 80019aa:	e000      	b.n	80019ae <ws2812_update_force+0xae>
 80019ac:	2132      	movs	r1, #50	@ 0x32
 80019ae:	79bb      	ldrb	r3, [r7, #6]
 80019b0:	3310      	adds	r3, #16
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	460a      	mov	r2, r1
 80019ba:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	3301      	adds	r3, #1
 80019c0:	71bb      	strb	r3, [r7, #6]
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	2b07      	cmp	r3, #7
 80019c6:	d9be      	bls.n	8001946 <ws2812_update_force+0x46>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	3301      	adds	r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b31      	cmp	r3, #49	@ 0x31
 80019d2:	d99b      	bls.n	800190c <ws2812_update_force+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&WS2812TIM, TIM_CHANNEL_4, (uint32_t *)ws2812_data,
 80019d4:	f240 5314 	movw	r3, #1300	@ 0x514
 80019d8:	4a09      	ldr	r2, [pc, #36]	@ (8001a00 <ws2812_update_force+0x100>)
 80019da:	210c      	movs	r1, #12
 80019dc:	4809      	ldr	r0, [pc, #36]	@ (8001a04 <ws2812_update_force+0x104>)
 80019de:	f005 ff1f 	bl	8007820 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000263c 	.word	0x2000263c
 80019f0:	20002704 	.word	0x20002704
 80019f4:	200027ce 	.word	0x200027ce
 80019f8:	200027cd 	.word	0x200027cd
 80019fc:	200027cc 	.word	0x200027cc
 8001a00:	200027d0 	.word	0x200027d0
 8001a04:	20000564 	.word	0x20000564

08001a08 <ws2812_set_all>:
/**
 * @brief  设置所有LED颜色（24bit颜色格式）
 * @param  color: 24bit颜色
 */
void ws2812_set_all(uint32_t color)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	e007      	b.n	8001a26 <ws2812_set_all+0x1e>
	{
		ws2812_color[led_id] = color;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <ws2812_set_all+0x34>)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	3301      	adds	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	2b31      	cmp	r3, #49	@ 0x31
 8001a2a:	d9f4      	bls.n	8001a16 <ws2812_set_all+0xe>
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000263c 	.word	0x2000263c

08001a40 <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	71bb      	strb	r3, [r7, #6]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	797b      	ldrb	r3, [r7, #5]
 8001a5e:	4313      	orrs	r3, r2
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	0c1b      	lsrs	r3, r3, #16
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	701a      	strb	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aa4:	480d      	ldr	r0, [pc, #52]	@ (8001adc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aa6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa8:	f7ff ff18 	bl	80018dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	@ (8001ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <LoopForever+0xe>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8001af0 <LoopForever+0x16>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f00c fdb7 	bl	800e644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ad6:	f7fe fbff 	bl	80002d8 <main>

08001ada <LoopForever>:

LoopForever:
    b LoopForever
 8001ada:	e7fe      	b.n	8001ada <LoopForever>
  ldr   r0, =_estack
 8001adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ae8:	0800effc 	.word	0x0800effc
  ldr r2, =_sbss
 8001aec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001af0:	20004d14 	.word	0x20004d14

08001af4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC3_IRQHandler>

08001af6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f001 ffc9 	bl	8003a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b06:	200f      	movs	r0, #15
 8001b08:	f000 f80e 	bl	8001b28 <HAL_InitTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	71fb      	strb	r3, [r7, #7]
 8001b16:	e001      	b.n	8001b1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b18:	f7ff fac6 	bl	80010a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]

}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <HAL_InitTick+0x68>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d022      	beq.n	8001b82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b3c:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_InitTick+0x6c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <HAL_InitTick+0x68>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 ffd4 	bl	8003afe <HAL_SYSTICK_Config>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10f      	bne.n	8001b7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	d809      	bhi.n	8001b76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b62:	2200      	movs	r2, #0
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6a:	f001 ffa0 	bl	8003aae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <HAL_InitTick+0x70>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e004      	b.n	8001b86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e001      	b.n	8001b86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_IncTick+0x1c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_IncTick+0x20>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a03      	ldr	r2, [pc, #12]	@ (8001bb8 <HAL_IncTick+0x1c>)
 8001bac:	6013      	str	r3, [r2, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	200031f8 	.word	0x200031f8
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200031f8 	.word	0x200031f8

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d004      	beq.n	8001bfc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_Delay+0x40>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfc:	bf00      	nop
 8001bfe:	f7ff ffdf 	bl	8001bc0 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d8f7      	bhi.n	8001bfe <HAL_Delay+0x26>
  {
  }
}
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000008 	.word	0x20000008

08001c1c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001c2c:	4904      	ldr	r1, [pc, #16]	@ (8001c40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40010030 	.word	0x40010030

08001c44 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 0202 	bic.w	r2, r3, #2
 8001c54:	4904      	ldr	r1, [pc, #16]	@ (8001c68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40010030 	.word	0x40010030

08001c6c <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
  * @param TrimmingValue specifies trimming code for VREFBUF calibration
  *        This parameter can be a number between Min_Data = 0x00 and Max_Data = 0x3F
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001c7c:	4904      	ldr	r1, [pc, #16]	@ (8001c90 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40010030 	.word	0x40010030

08001c94 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ca6:	f7ff ff8b 	bl	8001bc0 <HAL_GetTick>
 8001caa:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001cac:	e008      	b.n	8001cc0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001cae:	f7ff ff87 	bl	8001bc0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b0a      	cmp	r3, #10
 8001cba:	d901      	bls.n	8001cc0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e006      	b.n	8001cce <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40010030 	.word	0x40010030

08001cdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3360      	adds	r3, #96	@ 0x60
 8001d56:	461a      	mov	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <LL_ADC_SetOffset+0x44>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	03fff000 	.word	0x03fff000

08001d8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3360      	adds	r3, #96	@ 0x60
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3360      	adds	r3, #96	@ 0x60
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b087      	sub	sp, #28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3360      	adds	r3, #96	@ 0x60
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3360      	adds	r3, #96	@ 0x60
 8001e34:	461a      	mov	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	615a      	str	r2, [r3, #20]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3330      	adds	r3, #48	@ 0x30
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	4413      	add	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	211f      	movs	r1, #31
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	401a      	ands	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	f003 011f 	and.w	r1, r3, #31
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	431a      	orrs	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3314      	adds	r3, #20
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	0e5b      	lsrs	r3, r3, #25
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	4413      	add	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	0d1b      	lsrs	r3, r3, #20
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2107      	movs	r1, #7
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	401a      	ands	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	0d1b      	lsrs	r3, r3, #20
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0318 	and.w	r3, r3, #24
 8001f9e:	4908      	ldr	r1, [pc, #32]	@ (8001fc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fa0:	40d9      	lsrs	r1, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	400b      	ands	r3, r1
 8001fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001faa:	431a      	orrs	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	0007ffff 	.word	0x0007ffff

08001fc4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800200c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6093      	str	r3, [r2, #8]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002034:	d101      	bne.n	800203a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002058:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800205c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002084:	d101      	bne.n	800208a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <LL_ADC_IsEnabled+0x18>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <LL_ADC_IsEnabled+0x1a>
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020fa:	f043 0204 	orr.w	r2, r3, #4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b04      	cmp	r3, #4
 8002120:	d101      	bne.n	8002126 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b08      	cmp	r3, #8
 8002146:	d101      	bne.n	800214c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b089      	sub	sp, #36	@ 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e1a9      	b.n	80024ca <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fe ffbd 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff3f 	bl	8002020 <LL_ADC_IsDeepPowerDownEnabled>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff25 	bl	8001ffc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff5a 	bl	8002070 <LL_ADC_IsInternalRegulatorEnabled>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d115      	bne.n	80021ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff3e 	bl	8002048 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002440 <HAL_ADC_Init+0x2e4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	4a9c      	ldr	r2, [pc, #624]	@ (8002444 <HAL_ADC_Init+0x2e8>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	3301      	adds	r3, #1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f9      	bne.n	80021e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff3c 	bl	8002070 <LL_ADC_IsInternalRegulatorEnabled>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10d      	bne.n	800221a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff75 	bl	800210e <LL_ADC_REG_IsConversionOngoing>
 8002224:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 8142 	bne.w	80024b8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 813e 	bne.w	80024b8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002240:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002244:	f043 0202 	orr.w	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff35 	bl	80020c0 <LL_ADC_IsEnabled>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d141      	bne.n	80022e0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002264:	d004      	beq.n	8002270 <HAL_ADC_Init+0x114>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a77      	ldr	r2, [pc, #476]	@ (8002448 <HAL_ADC_Init+0x2ec>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d10f      	bne.n	8002290 <HAL_ADC_Init+0x134>
 8002270:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002274:	f7ff ff24 	bl	80020c0 <LL_ADC_IsEnabled>
 8002278:	4604      	mov	r4, r0
 800227a:	4873      	ldr	r0, [pc, #460]	@ (8002448 <HAL_ADC_Init+0x2ec>)
 800227c:	f7ff ff20 	bl	80020c0 <LL_ADC_IsEnabled>
 8002280:	4603      	mov	r3, r0
 8002282:	4323      	orrs	r3, r4
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e012      	b.n	80022b6 <HAL_ADC_Init+0x15a>
 8002290:	486e      	ldr	r0, [pc, #440]	@ (800244c <HAL_ADC_Init+0x2f0>)
 8002292:	f7ff ff15 	bl	80020c0 <LL_ADC_IsEnabled>
 8002296:	4604      	mov	r4, r0
 8002298:	486d      	ldr	r0, [pc, #436]	@ (8002450 <HAL_ADC_Init+0x2f4>)
 800229a:	f7ff ff11 	bl	80020c0 <LL_ADC_IsEnabled>
 800229e:	4603      	mov	r3, r0
 80022a0:	431c      	orrs	r4, r3
 80022a2:	486c      	ldr	r0, [pc, #432]	@ (8002454 <HAL_ADC_Init+0x2f8>)
 80022a4:	f7ff ff0c 	bl	80020c0 <LL_ADC_IsEnabled>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4323      	orrs	r3, r4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d012      	beq.n	80022e0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022c2:	d004      	beq.n	80022ce <HAL_ADC_Init+0x172>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a5f      	ldr	r2, [pc, #380]	@ (8002448 <HAL_ADC_Init+0x2ec>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_Init+0x176>
 80022ce:	4a62      	ldr	r2, [pc, #392]	@ (8002458 <HAL_ADC_Init+0x2fc>)
 80022d0:	e000      	b.n	80022d4 <HAL_ADC_Init+0x178>
 80022d2:	4a62      	ldr	r2, [pc, #392]	@ (800245c <HAL_ADC_Init+0x300>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f7ff fcfe 	bl	8001cdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7f5b      	ldrb	r3, [r3, #29]
 80022e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	045b      	lsls	r3, r3, #17
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002328:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	4b48      	ldr	r3, [pc, #288]	@ (8002460 <HAL_ADC_Init+0x304>)
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	430b      	orrs	r3, r1
 800234a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fee4 	bl	8002134 <LL_ADC_INJ_IsConversionOngoing>
 800236c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d17f      	bne.n	8002474 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d17c      	bne.n	8002474 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800237e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002386:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002396:	f023 0302 	bic.w	r3, r3, #2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d017      	beq.n	80023dc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80023ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6911      	ldr	r1, [r2, #16]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80023da:	e013      	b.n	8002404 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80023ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002400:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800240a:	2b01      	cmp	r3, #1
 800240c:	d12a      	bne.n	8002464 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002424:	4311      	orrs	r1, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800242a:	4311      	orrs	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002430:	430a      	orrs	r2, r1
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	611a      	str	r2, [r3, #16]
 800243e:	e019      	b.n	8002474 <HAL_ADC_Init+0x318>
 8002440:	20000000 	.word	0x20000000
 8002444:	053e2d63 	.word	0x053e2d63
 8002448:	50000100 	.word	0x50000100
 800244c:	50000400 	.word	0x50000400
 8002450:	50000500 	.word	0x50000500
 8002454:	50000600 	.word	0x50000600
 8002458:	50000300 	.word	0x50000300
 800245c:	50000700 	.word	0x50000700
 8002460:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10c      	bne.n	8002496 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f023 010f 	bic.w	r1, r3, #15
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	1e5a      	subs	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	631a      	str	r2, [r3, #48]	@ 0x30
 8002494:	e007      	b.n	80024a6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 020f 	bic.w	r2, r2, #15
 80024a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024b6:	e007      	b.n	80024c8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024bc:	f043 0210 	orr.w	r2, r3, #16
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	@ 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	bf00      	nop

080024d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024e8:	d004      	beq.n	80024f4 <HAL_ADC_Start_DMA+0x20>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002658 <HAL_ADC_Start_DMA+0x184>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_Start_DMA+0x24>
 80024f4:	4b59      	ldr	r3, [pc, #356]	@ (800265c <HAL_ADC_Start_DMA+0x188>)
 80024f6:	e000      	b.n	80024fa <HAL_ADC_Start_DMA+0x26>
 80024f8:	4b59      	ldr	r3, [pc, #356]	@ (8002660 <HAL_ADC_Start_DMA+0x18c>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fd62 	bl	8001fc4 <LL_ADC_GetMultimode>
 8002500:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fe01 	bl	800210e <LL_ADC_REG_IsConversionOngoing>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 809b 	bne.w	800264a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Start_DMA+0x4e>
 800251e:	2302      	movs	r3, #2
 8002520:	e096      	b.n	8002650 <HAL_ADC_Start_DMA+0x17c>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a4d      	ldr	r2, [pc, #308]	@ (8002664 <HAL_ADC_Start_DMA+0x190>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d008      	beq.n	8002546 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d002      	beq.n	8002546 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b09      	cmp	r3, #9
 8002544:	d17a      	bne.n	800263c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 ff4c 	bl	80033e4 <ADC_Enable>
 800254c:	4603      	mov	r3, r0
 800254e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d16d      	bne.n	8002632 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a3a      	ldr	r2, [pc, #232]	@ (8002658 <HAL_ADC_Start_DMA+0x184>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_ADC_Start_DMA+0xb4>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a3b      	ldr	r2, [pc, #236]	@ (8002668 <HAL_ADC_Start_DMA+0x194>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d002      	beq.n	8002584 <HAL_ADC_Start_DMA+0xb0>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	e003      	b.n	800258c <HAL_ADC_Start_DMA+0xb8>
 8002584:	4b39      	ldr	r3, [pc, #228]	@ (800266c <HAL_ADC_Start_DMA+0x198>)
 8002586:	e001      	b.n	800258c <HAL_ADC_Start_DMA+0xb8>
 8002588:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4293      	cmp	r3, r2
 8002592:	d002      	beq.n	800259a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b6:	f023 0206 	bic.w	r2, r3, #6
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80025be:	e002      	b.n	80025c6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ca:	4a29      	ldr	r2, [pc, #164]	@ (8002670 <HAL_ADC_Start_DMA+0x19c>)
 80025cc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d2:	4a28      	ldr	r2, [pc, #160]	@ (8002674 <HAL_ADC_Start_DMA+0x1a0>)
 80025d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025da:	4a27      	ldr	r2, [pc, #156]	@ (8002678 <HAL_ADC_Start_DMA+0x1a4>)
 80025dc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	221c      	movs	r2, #28
 80025e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0210 	orr.w	r2, r2, #16
 80025fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3340      	adds	r3, #64	@ 0x40
 8002618:	4619      	mov	r1, r3
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f001 fb23 	bl	8003c68 <HAL_DMA_Start_IT>
 8002622:	4603      	mov	r3, r0
 8002624:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fd5b 	bl	80020e6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002630:	e00d      	b.n	800264e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800263a:	e008      	b.n	800264e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002648:	e001      	b.n	800264e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	50000100 	.word	0x50000100
 800265c:	50000300 	.word	0x50000300
 8002660:	50000700 	.word	0x50000700
 8002664:	50000600 	.word	0x50000600
 8002668:	50000500 	.word	0x50000500
 800266c:	50000400 	.word	0x50000400
 8002670:	08003511 	.word	0x08003511
 8002674:	080035e9 	.word	0x080035e9
 8002678:	08003605 	.word	0x08003605

0800267c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	@ 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026a0:	d004      	beq.n	80026ac <HAL_ADC_IRQHandler+0x30>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a8e      	ldr	r2, [pc, #568]	@ (80028e0 <HAL_ADC_IRQHandler+0x264>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x34>
 80026ac:	4b8d      	ldr	r3, [pc, #564]	@ (80028e4 <HAL_ADC_IRQHandler+0x268>)
 80026ae:	e000      	b.n	80026b2 <HAL_ADC_IRQHandler+0x36>
 80026b0:	4b8d      	ldr	r3, [pc, #564]	@ (80028e8 <HAL_ADC_IRQHandler+0x26c>)
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fc86 	bl	8001fc4 <LL_ADC_GetMultimode>
 80026b8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d017      	beq.n	80026f4 <HAL_ADC_IRQHandler+0x78>
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d105      	bne.n	80026e6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026de:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fff4 	bl	80036d4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2202      	movs	r2, #2
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d004      	beq.n	8002708 <HAL_ADC_IRQHandler+0x8c>
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10b      	bne.n	8002720 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8094 	beq.w	800283c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 808e 	beq.w	800283c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002730:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fb9f 	bl	8001e80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d072      	beq.n	800282e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a64      	ldr	r2, [pc, #400]	@ (80028e0 <HAL_ADC_IRQHandler+0x264>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_ADC_IRQHandler+0xea>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a65      	ldr	r2, [pc, #404]	@ (80028ec <HAL_ADC_IRQHandler+0x270>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d002      	beq.n	8002762 <HAL_ADC_IRQHandler+0xe6>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	e003      	b.n	800276a <HAL_ADC_IRQHandler+0xee>
 8002762:	4b63      	ldr	r3, [pc, #396]	@ (80028f0 <HAL_ADC_IRQHandler+0x274>)
 8002764:	e001      	b.n	800276a <HAL_ADC_IRQHandler+0xee>
 8002766:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	4293      	cmp	r3, r2
 8002770:	d008      	beq.n	8002784 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b05      	cmp	r3, #5
 800277c:	d002      	beq.n	8002784 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b09      	cmp	r3, #9
 8002782:	d104      	bne.n	800278e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	623b      	str	r3, [r7, #32]
 800278c:	e014      	b.n	80027b8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a53      	ldr	r2, [pc, #332]	@ (80028e0 <HAL_ADC_IRQHandler+0x264>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d009      	beq.n	80027ac <HAL_ADC_IRQHandler+0x130>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a53      	ldr	r2, [pc, #332]	@ (80028ec <HAL_ADC_IRQHandler+0x270>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d002      	beq.n	80027a8 <HAL_ADC_IRQHandler+0x12c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	e003      	b.n	80027b0 <HAL_ADC_IRQHandler+0x134>
 80027a8:	4b51      	ldr	r3, [pc, #324]	@ (80028f0 <HAL_ADC_IRQHandler+0x274>)
 80027aa:	e001      	b.n	80027b0 <HAL_ADC_IRQHandler+0x134>
 80027ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027b0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d135      	bne.n	800282e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d12e      	bne.n	800282e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fc9a 	bl	800210e <LL_ADC_REG_IsConversionOngoing>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11a      	bne.n	8002816 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020c 	bic.w	r2, r2, #12
 80027ee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002800:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d112      	bne.n	800282e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002814:	e00b      	b.n	800282e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281a:	f043 0210 	orr.w	r2, r3, #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fbc2 	bl	8000fb8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	220c      	movs	r2, #12
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d004      	beq.n	8002850 <HAL_ADC_IRQHandler+0x1d4>
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80b3 	beq.w	80029c2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80ad 	beq.w	80029c2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002878:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fb3a 	bl	8001efe <LL_ADC_INJ_IsTriggerSourceSWStart>
 800288a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff faf5 	bl	8001e80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002896:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a10      	ldr	r2, [pc, #64]	@ (80028e0 <HAL_ADC_IRQHandler+0x264>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_ADC_IRQHandler+0x23a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a11      	ldr	r2, [pc, #68]	@ (80028ec <HAL_ADC_IRQHandler+0x270>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d002      	beq.n	80028b2 <HAL_ADC_IRQHandler+0x236>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	e003      	b.n	80028ba <HAL_ADC_IRQHandler+0x23e>
 80028b2:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <HAL_ADC_IRQHandler+0x274>)
 80028b4:	e001      	b.n	80028ba <HAL_ADC_IRQHandler+0x23e>
 80028b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	4293      	cmp	r3, r2
 80028c0:	d008      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d002      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b07      	cmp	r3, #7
 80028d2:	d10f      	bne.n	80028f4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	e01f      	b.n	800291e <HAL_ADC_IRQHandler+0x2a2>
 80028de:	bf00      	nop
 80028e0:	50000100 	.word	0x50000100
 80028e4:	50000300 	.word	0x50000300
 80028e8:	50000700 	.word	0x50000700
 80028ec:	50000500 	.word	0x50000500
 80028f0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a8b      	ldr	r2, [pc, #556]	@ (8002b28 <HAL_ADC_IRQHandler+0x4ac>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_ADC_IRQHandler+0x296>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a8a      	ldr	r2, [pc, #552]	@ (8002b2c <HAL_ADC_IRQHandler+0x4b0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d002      	beq.n	800290e <HAL_ADC_IRQHandler+0x292>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	e003      	b.n	8002916 <HAL_ADC_IRQHandler+0x29a>
 800290e:	4b88      	ldr	r3, [pc, #544]	@ (8002b30 <HAL_ADC_IRQHandler+0x4b4>)
 8002910:	e001      	b.n	8002916 <HAL_ADC_IRQHandler+0x29a>
 8002912:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002916:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d047      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <HAL_ADC_IRQHandler+0x2c2>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d03f      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800293a:	2b00      	cmp	r3, #0
 800293c:	d13a      	bne.n	80029b4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002948:	2b40      	cmp	r3, #64	@ 0x40
 800294a:	d133      	bne.n	80029b4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d12e      	bne.n	80029b4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fbea 	bl	8002134 <LL_ADC_INJ_IsConversionOngoing>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d11a      	bne.n	800299c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002974:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d112      	bne.n	80029b4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	65da      	str	r2, [r3, #92]	@ 0x5c
 800299a:	e00b      	b.n	80029b4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	f043 0210 	orr.w	r2, r3, #16
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fe65 	bl	8003684 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2260      	movs	r2, #96	@ 0x60
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d011      	beq.n	80029f0 <HAL_ADC_IRQHandler+0x374>
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f8aa 	bl	8002b3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d012      	beq.n	8002a20 <HAL_ADC_IRQHandler+0x3a4>
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00d      	beq.n	8002a20 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fe4b 	bl	80036ac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d012      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x3d4>
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00d      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fe3d 	bl	80036c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d043      	beq.n	8002ae2 <HAL_ADC_IRQHandler+0x466>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d03e      	beq.n	8002ae2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a70:	e021      	b.n	8002ab6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a80:	d004      	beq.n	8002a8c <HAL_ADC_IRQHandler+0x410>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a28      	ldr	r2, [pc, #160]	@ (8002b28 <HAL_ADC_IRQHandler+0x4ac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_IRQHandler+0x414>
 8002a8c:	4b29      	ldr	r3, [pc, #164]	@ (8002b34 <HAL_ADC_IRQHandler+0x4b8>)
 8002a8e:	e000      	b.n	8002a92 <HAL_ADC_IRQHandler+0x416>
 8002a90:	4b29      	ldr	r3, [pc, #164]	@ (8002b38 <HAL_ADC_IRQHandler+0x4bc>)
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff faa4 	bl	8001fe0 <LL_ADC_GetMultiDMATransfer>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa2:	e008      	b.n	8002ab6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d10e      	bne.n	8002ada <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002acc:	f043 0202 	orr.w	r2, r3, #2
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f83b 	bl	8002b50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2210      	movs	r2, #16
 8002ae0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d018      	beq.n	8002b1e <HAL_ADC_IRQHandler+0x4a2>
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d013      	beq.n	8002b1e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b06:	f043 0208 	orr.w	r2, r3, #8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b16:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fdbd 	bl	8003698 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b1e:	bf00      	nop
 8002b20:	3728      	adds	r7, #40	@ 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	50000100 	.word	0x50000100
 8002b2c:	50000500 	.word	0x50000500
 8002b30:	50000400 	.word	0x50000400
 8002b34:	50000300 	.word	0x50000300
 8002b38:	50000700 	.word	0x50000700

08002b3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0b6      	sub	sp, #216	@ 0xd8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d102      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x24>
 8002b82:	2302      	movs	r3, #2
 8002b84:	f000 bc13 	b.w	80033ae <HAL_ADC_ConfigChannel+0x84a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff faba 	bl	800210e <LL_ADC_REG_IsConversionOngoing>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 83f3 	bne.w	8003388 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f7ff f979 	bl	8001ea6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff faa8 	bl	800210e <LL_ADC_REG_IsConversionOngoing>
 8002bbe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fab4 	bl	8002134 <LL_ADC_INJ_IsConversionOngoing>
 8002bcc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 81d9 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 81d4 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bec:	d10f      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7ff f993 	bl	8001f24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f927 	bl	8001e5a <LL_ADC_SetSamplingTimeCommonConfig>
 8002c0c:	e00e      	b.n	8002c2c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f7ff f982 	bl	8001f24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f917 	bl	8001e5a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d022      	beq.n	8002c94 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6919      	ldr	r1, [r3, #16]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c5e:	f7ff f871 	bl	8001d44 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f7ff f8bd 	bl	8001dee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d102      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x126>
 8002c84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c88:	e000      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x128>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f7ff f8c9 	bl	8001e24 <LL_ADC_SetOffsetSaturation>
 8002c92:	e17b      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff f876 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x15c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f86b 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	e01e      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x19a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff f860 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e004      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d105      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x1b2>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	e018      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x1e4>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e004      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d106      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f82f 	bl	8001db8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f813 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x222>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f808 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	e01e      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x260>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fffd 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e004      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x278>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	e018      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x2aa>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e004      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe ffcc 	bl	8001db8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2102      	movs	r1, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ffb0 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x2e8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe ffa5 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	e01e      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x326>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2102      	movs	r1, #2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe ff9a 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	e004      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x33e>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	e016      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x36c>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002eb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	e004      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d106      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2102      	movs	r1, #2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe ff6b 	bl	8001db8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe ff4f 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x3aa>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2103      	movs	r1, #3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe ff44 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002f04:	4603      	mov	r3, r0
 8002f06:	0e9b      	lsrs	r3, r3, #26
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	e017      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x3da>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2103      	movs	r1, #3
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe ff39 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f28:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e003      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x3f2>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0e9b      	lsrs	r3, r3, #26
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	e011      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x416>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f6e:	2320      	movs	r3, #32
 8002f70:	e003      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d106      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2103      	movs	r1, #3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe ff16 	bl	8001db8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff f895 	bl	80020c0 <LL_ADC_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f040 813d 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f7fe ffe6 	bl	8001f7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4aa2      	ldr	r2, [pc, #648]	@ (8003240 <HAL_ADC_ConfigChannel+0x6dc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	f040 812e 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x480>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0e9b      	lsrs	r3, r3, #26
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2b09      	cmp	r3, #9
 8002fda:	bf94      	ite	ls
 8002fdc:	2301      	movls	r3, #1
 8002fde:	2300      	movhi	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e019      	b.n	8003018 <HAL_ADC_ConfigChannel+0x4b4>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ff4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e003      	b.n	8003008 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2b09      	cmp	r3, #9
 8003010:	bf94      	ite	ls
 8003012:	2301      	movls	r3, #1
 8003014:	2300      	movhi	r3, #0
 8003016:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003018:	2b00      	cmp	r3, #0
 800301a:	d079      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x4d4>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	3301      	adds	r3, #1
 8003030:	069b      	lsls	r3, r3, #26
 8003032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003036:	e015      	b.n	8003064 <HAL_ADC_ConfigChannel+0x500>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003048:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800304a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	e003      	b.n	800305c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3301      	adds	r3, #1
 800305e:	069b      	lsls	r3, r3, #26
 8003060:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x520>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	e017      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x550>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003094:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800309c:	2320      	movs	r3, #32
 800309e:	e003      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80030a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	ea42 0103 	orr.w	r1, r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_ADC_ConfigChannel+0x576>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	3301      	adds	r3, #1
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	051b      	lsls	r3, r3, #20
 80030d8:	e018      	b.n	800310c <HAL_ADC_ConfigChannel+0x5a8>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80030ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e003      	b.n	80030fe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80030f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800310c:	430b      	orrs	r3, r1
 800310e:	e07e      	b.n	800320e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <HAL_ADC_ConfigChannel+0x5c8>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	0e9b      	lsrs	r3, r3, #26
 8003122:	3301      	adds	r3, #1
 8003124:	069b      	lsls	r3, r3, #26
 8003126:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800312a:	e015      	b.n	8003158 <HAL_ADC_ConfigChannel+0x5f4>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800313a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800313e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003144:	2320      	movs	r3, #32
 8003146:	e003      	b.n	8003150 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	069b      	lsls	r3, r3, #26
 8003154:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x614>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e9b      	lsrs	r3, r3, #26
 800316a:	3301      	adds	r3, #1
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	e017      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x644>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	61fb      	str	r3, [r7, #28]
  return result;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003190:	2320      	movs	r3, #32
 8003192:	e003      	b.n	800319c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	ea42 0103 	orr.w	r1, r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10d      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x670>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	0e9b      	lsrs	r3, r3, #26
 80031be:	3301      	adds	r3, #1
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	3b1e      	subs	r3, #30
 80031cc:	051b      	lsls	r3, r3, #20
 80031ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	e01b      	b.n	800320c <HAL_ADC_ConfigChannel+0x6a8>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	613b      	str	r3, [r7, #16]
  return result;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e003      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	f003 021f 	and.w	r2, r3, #31
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	3b1e      	subs	r3, #30
 8003206:	051b      	lsls	r3, r3, #20
 8003208:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800320c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003212:	4619      	mov	r1, r3
 8003214:	f7fe fe86 	bl	8001f24 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <HAL_ADC_ConfigChannel+0x6e0>)
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80be 	beq.w	80033a2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800322e:	d004      	beq.n	800323a <HAL_ADC_ConfigChannel+0x6d6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <HAL_ADC_ConfigChannel+0x6e4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d10a      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x6ec>
 800323a:	4b04      	ldr	r3, [pc, #16]	@ (800324c <HAL_ADC_ConfigChannel+0x6e8>)
 800323c:	e009      	b.n	8003252 <HAL_ADC_ConfigChannel+0x6ee>
 800323e:	bf00      	nop
 8003240:	407f0000 	.word	0x407f0000
 8003244:	80080000 	.word	0x80080000
 8003248:	50000100 	.word	0x50000100
 800324c:	50000300 	.word	0x50000300
 8003250:	4b59      	ldr	r3, [pc, #356]	@ (80033b8 <HAL_ADC_ConfigChannel+0x854>)
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fd68 	bl	8001d28 <LL_ADC_GetCommonPathInternalCh>
 8003258:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a56      	ldr	r2, [pc, #344]	@ (80033bc <HAL_ADC_ConfigChannel+0x858>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_ADC_ConfigChannel+0x70c>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a55      	ldr	r2, [pc, #340]	@ (80033c0 <HAL_ADC_ConfigChannel+0x85c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d13a      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003270:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003274:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d134      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003284:	d005      	beq.n	8003292 <HAL_ADC_ConfigChannel+0x72e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a4e      	ldr	r2, [pc, #312]	@ (80033c4 <HAL_ADC_ConfigChannel+0x860>)
 800328c:	4293      	cmp	r3, r2
 800328e:	f040 8085 	bne.w	800339c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800329a:	d004      	beq.n	80032a6 <HAL_ADC_ConfigChannel+0x742>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a49      	ldr	r2, [pc, #292]	@ (80033c8 <HAL_ADC_ConfigChannel+0x864>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x746>
 80032a6:	4a49      	ldr	r2, [pc, #292]	@ (80033cc <HAL_ADC_ConfigChannel+0x868>)
 80032a8:	e000      	b.n	80032ac <HAL_ADC_ConfigChannel+0x748>
 80032aa:	4a43      	ldr	r2, [pc, #268]	@ (80033b8 <HAL_ADC_ConfigChannel+0x854>)
 80032ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7fe fd23 	bl	8001d02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032bc:	4b44      	ldr	r3, [pc, #272]	@ (80033d0 <HAL_ADC_ConfigChannel+0x86c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	4a44      	ldr	r2, [pc, #272]	@ (80033d4 <HAL_ADC_ConfigChannel+0x870>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032d6:	e002      	b.n	80032de <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3b01      	subs	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f9      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032e4:	e05a      	b.n	800339c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a3b      	ldr	r2, [pc, #236]	@ (80033d8 <HAL_ADC_ConfigChannel+0x874>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d125      	bne.n	800333c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11f      	bne.n	800333c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a31      	ldr	r2, [pc, #196]	@ (80033c8 <HAL_ADC_ConfigChannel+0x864>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d104      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x7ac>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a34      	ldr	r2, [pc, #208]	@ (80033dc <HAL_ADC_ConfigChannel+0x878>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d047      	beq.n	80033a0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003318:	d004      	beq.n	8003324 <HAL_ADC_ConfigChannel+0x7c0>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2a      	ldr	r2, [pc, #168]	@ (80033c8 <HAL_ADC_ConfigChannel+0x864>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x7c4>
 8003324:	4a29      	ldr	r2, [pc, #164]	@ (80033cc <HAL_ADC_ConfigChannel+0x868>)
 8003326:	e000      	b.n	800332a <HAL_ADC_ConfigChannel+0x7c6>
 8003328:	4a23      	ldr	r2, [pc, #140]	@ (80033b8 <HAL_ADC_ConfigChannel+0x854>)
 800332a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f7fe fce4 	bl	8001d02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800333a:	e031      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a27      	ldr	r2, [pc, #156]	@ (80033e0 <HAL_ADC_ConfigChannel+0x87c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d12d      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800334a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d127      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1c      	ldr	r2, [pc, #112]	@ (80033c8 <HAL_ADC_ConfigChannel+0x864>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d022      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003364:	d004      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x80c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a17      	ldr	r2, [pc, #92]	@ (80033c8 <HAL_ADC_ConfigChannel+0x864>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x810>
 8003370:	4a16      	ldr	r2, [pc, #88]	@ (80033cc <HAL_ADC_ConfigChannel+0x868>)
 8003372:	e000      	b.n	8003376 <HAL_ADC_ConfigChannel+0x812>
 8003374:	4a10      	ldr	r2, [pc, #64]	@ (80033b8 <HAL_ADC_ConfigChannel+0x854>)
 8003376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800337a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7fe fcbe 	bl	8001d02 <LL_ADC_SetCommonPathInternalCh>
 8003386:	e00c      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800339a:	e002      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80033aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	37d8      	adds	r7, #216	@ 0xd8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	50000700 	.word	0x50000700
 80033bc:	c3210000 	.word	0xc3210000
 80033c0:	90c00010 	.word	0x90c00010
 80033c4:	50000600 	.word	0x50000600
 80033c8:	50000100 	.word	0x50000100
 80033cc:	50000300 	.word	0x50000300
 80033d0:	20000000 	.word	0x20000000
 80033d4:	053e2d63 	.word	0x053e2d63
 80033d8:	c7520000 	.word	0xc7520000
 80033dc:	50000500 	.word	0x50000500
 80033e0:	cb840000 	.word	0xcb840000

080033e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fe63 	bl	80020c0 <LL_ADC_IsEnabled>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d176      	bne.n	80034ee <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	4b3c      	ldr	r3, [pc, #240]	@ (80034f8 <ADC_Enable+0x114>)
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	f043 0210 	orr.w	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341e:	f043 0201 	orr.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e062      	b.n	80034f0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fe32 	bl	8002098 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800343c:	d004      	beq.n	8003448 <ADC_Enable+0x64>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2e      	ldr	r2, [pc, #184]	@ (80034fc <ADC_Enable+0x118>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d101      	bne.n	800344c <ADC_Enable+0x68>
 8003448:	4b2d      	ldr	r3, [pc, #180]	@ (8003500 <ADC_Enable+0x11c>)
 800344a:	e000      	b.n	800344e <ADC_Enable+0x6a>
 800344c:	4b2d      	ldr	r3, [pc, #180]	@ (8003504 <ADC_Enable+0x120>)
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe fc6a 	bl	8001d28 <LL_ADC_GetCommonPathInternalCh>
 8003454:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800345a:	2b00      	cmp	r3, #0
 800345c:	d013      	beq.n	8003486 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800345e:	4b2a      	ldr	r3, [pc, #168]	@ (8003508 <ADC_Enable+0x124>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	099b      	lsrs	r3, r3, #6
 8003464:	4a29      	ldr	r2, [pc, #164]	@ (800350c <ADC_Enable+0x128>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003478:	e002      	b.n	8003480 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3b01      	subs	r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f9      	bne.n	800347a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003486:	f7fe fb9b 	bl	8001bc0 <HAL_GetTick>
 800348a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800348c:	e028      	b.n	80034e0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe fe14 	bl	80020c0 <LL_ADC_IsEnabled>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fdf8 	bl	8002098 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034a8:	f7fe fb8a 	bl	8001bc0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d914      	bls.n	80034e0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d00d      	beq.n	80034e0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c8:	f043 0210 	orr.w	r2, r3, #16
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e007      	b.n	80034f0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d1cf      	bne.n	800348e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	8000003f 	.word	0x8000003f
 80034fc:	50000100 	.word	0x50000100
 8003500:	50000300 	.word	0x50000300
 8003504:	50000700 	.word	0x50000700
 8003508:	20000000 	.word	0x20000000
 800350c:	053e2d63 	.word	0x053e2d63

08003510 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	d14b      	bne.n	80035c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d021      	beq.n	8003588 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fc99 	bl	8001e80 <LL_ADC_REG_IsTriggerSourceSWStart>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d032      	beq.n	80035ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d12b      	bne.n	80035ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003566:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d11f      	bne.n	80035ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003586:	e018      	b.n	80035ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d111      	bne.n	80035ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d105      	bne.n	80035ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b2:	f043 0201 	orr.w	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7fd fcfc 	bl	8000fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035c0:	e00e      	b.n	80035e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff fabe 	bl	8002b50 <HAL_ADC_ErrorCallback>
}
 80035d4:	e004      	b.n	80035e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f7fd fcb4 	bl	8000f64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003616:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003622:	f043 0204 	orr.w	r2, r3, #4
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f7ff fa90 	bl	8002b50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <LL_ADC_IsEnabled>:
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <LL_ADC_IsEnabled+0x18>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <LL_ADC_IsEnabled+0x1a>
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_ADC_REG_IsConversionOngoing>:
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d101      	bne.n	8003676 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b0a1      	sub	sp, #132	@ 0x84
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003702:	2302      	movs	r3, #2
 8003704:	e0e7      	b.n	80038d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800370e:	2300      	movs	r3, #0
 8003710:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003712:	2300      	movs	r3, #0
 8003714:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800371e:	d102      	bne.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003720:	4b6f      	ldr	r3, [pc, #444]	@ (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	e009      	b.n	800373a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6e      	ldr	r2, [pc, #440]	@ (80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d102      	bne.n	8003736 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003730:	4b6d      	ldr	r3, [pc, #436]	@ (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	e001      	b.n	800373a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10b      	bne.n	8003758 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0be      	b.n	80038d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff ff7f 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 8003760:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff79 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	f040 80a0 	bne.w	80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003776:	2b00      	cmp	r3, #0
 8003778:	f040 809c 	bne.w	80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003784:	d004      	beq.n	8003790 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a55      	ldr	r2, [pc, #340]	@ (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d101      	bne.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003790:	4b56      	ldr	r3, [pc, #344]	@ (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003792:	e000      	b.n	8003796 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003794:	4b56      	ldr	r3, [pc, #344]	@ (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003796:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d04b      	beq.n	8003838 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037b2:	035b      	lsls	r3, r3, #13
 80037b4:	430b      	orrs	r3, r1
 80037b6:	431a      	orrs	r2, r3
 80037b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c4:	d004      	beq.n	80037d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a45      	ldr	r2, [pc, #276]	@ (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10f      	bne.n	80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80037d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80037d4:	f7ff ff30 	bl	8003638 <LL_ADC_IsEnabled>
 80037d8:	4604      	mov	r4, r0
 80037da:	4841      	ldr	r0, [pc, #260]	@ (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037dc:	f7ff ff2c 	bl	8003638 <LL_ADC_IsEnabled>
 80037e0:	4603      	mov	r3, r0
 80037e2:	4323      	orrs	r3, r4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e012      	b.n	8003816 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80037f0:	483c      	ldr	r0, [pc, #240]	@ (80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037f2:	f7ff ff21 	bl	8003638 <LL_ADC_IsEnabled>
 80037f6:	4604      	mov	r4, r0
 80037f8:	483b      	ldr	r0, [pc, #236]	@ (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037fa:	f7ff ff1d 	bl	8003638 <LL_ADC_IsEnabled>
 80037fe:	4603      	mov	r3, r0
 8003800:	431c      	orrs	r4, r3
 8003802:	483c      	ldr	r0, [pc, #240]	@ (80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003804:	f7ff ff18 	bl	8003638 <LL_ADC_IsEnabled>
 8003808:	4603      	mov	r3, r0
 800380a:	4323      	orrs	r3, r4
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d056      	beq.n	80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800381a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003822:	f023 030f 	bic.w	r3, r3, #15
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	6811      	ldr	r1, [r2, #0]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	430a      	orrs	r2, r1
 8003830:	431a      	orrs	r2, r3
 8003832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003834:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003836:	e047      	b.n	80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003842:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800384c:	d004      	beq.n	8003858 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a23      	ldr	r2, [pc, #140]	@ (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d10f      	bne.n	8003878 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003858:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800385c:	f7ff feec 	bl	8003638 <LL_ADC_IsEnabled>
 8003860:	4604      	mov	r4, r0
 8003862:	481f      	ldr	r0, [pc, #124]	@ (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003864:	f7ff fee8 	bl	8003638 <LL_ADC_IsEnabled>
 8003868:	4603      	mov	r3, r0
 800386a:	4323      	orrs	r3, r4
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e012      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003878:	481a      	ldr	r0, [pc, #104]	@ (80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800387a:	f7ff fedd 	bl	8003638 <LL_ADC_IsEnabled>
 800387e:	4604      	mov	r4, r0
 8003880:	4819      	ldr	r0, [pc, #100]	@ (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003882:	f7ff fed9 	bl	8003638 <LL_ADC_IsEnabled>
 8003886:	4603      	mov	r3, r0
 8003888:	431c      	orrs	r4, r3
 800388a:	481a      	ldr	r0, [pc, #104]	@ (80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800388c:	f7ff fed4 	bl	8003638 <LL_ADC_IsEnabled>
 8003890:	4603      	mov	r3, r0
 8003892:	4323      	orrs	r3, r4
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d012      	beq.n	80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038aa:	f023 030f 	bic.w	r3, r3, #15
 80038ae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038b2:	e009      	b.n	80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80038c6:	e000      	b.n	80038ca <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038d2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3784      	adds	r7, #132	@ 0x84
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd90      	pop	{r4, r7, pc}
 80038de:	bf00      	nop
 80038e0:	50000100 	.word	0x50000100
 80038e4:	50000400 	.word	0x50000400
 80038e8:	50000500 	.word	0x50000500
 80038ec:	50000300 	.word	0x50000300
 80038f0:	50000700 	.word	0x50000700
 80038f4:	50000600 	.word	0x50000600

080038f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003908:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003914:	4013      	ands	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392a:	4a04      	ldr	r2, [pc, #16]	@ (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	60d3      	str	r3, [r2, #12]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003944:	4b04      	ldr	r3, [pc, #16]	@ (8003958 <__NVIC_GetPriorityGrouping+0x18>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	f003 0307 	and.w	r3, r3, #7
}
 800394e:	4618      	mov	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	2b00      	cmp	r3, #0
 800396c:	db0b      	blt.n	8003986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	4907      	ldr	r1, [pc, #28]	@ (8003994 <__NVIC_EnableIRQ+0x38>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2001      	movs	r0, #1
 800397e:	fa00 f202 	lsl.w	r2, r0, r2
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	e000e100 	.word	0xe000e100

08003998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	db0a      	blt.n	80039c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	490c      	ldr	r1, [pc, #48]	@ (80039e4 <__NVIC_SetPriority+0x4c>)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	0112      	lsls	r2, r2, #4
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	440b      	add	r3, r1
 80039bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c0:	e00a      	b.n	80039d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4908      	ldr	r1, [pc, #32]	@ (80039e8 <__NVIC_SetPriority+0x50>)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	3b04      	subs	r3, #4
 80039d0:	0112      	lsls	r2, r2, #4
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	440b      	add	r3, r1
 80039d6:	761a      	strb	r2, [r3, #24]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000e100 	.word	0xe000e100
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	@ 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f1c3 0307 	rsb	r3, r3, #7
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	bf28      	it	cs
 8003a0a:	2304      	movcs	r3, #4
 8003a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d902      	bls.n	8003a1c <NVIC_EncodePriority+0x30>
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3b03      	subs	r3, #3
 8003a1a:	e000      	b.n	8003a1e <NVIC_EncodePriority+0x32>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43da      	mvns	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	401a      	ands	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a34:	f04f 31ff 	mov.w	r1, #4294967295
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	43d9      	mvns	r1, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a44:	4313      	orrs	r3, r2
         );
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3724      	adds	r7, #36	@ 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a64:	d301      	bcc.n	8003a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a66:	2301      	movs	r3, #1
 8003a68:	e00f      	b.n	8003a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a94 <SysTick_Config+0x40>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a72:	210f      	movs	r1, #15
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	f7ff ff8e 	bl	8003998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a7c:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <SysTick_Config+0x40>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a82:	4b04      	ldr	r3, [pc, #16]	@ (8003a94 <SysTick_Config+0x40>)
 8003a84:	2207      	movs	r2, #7
 8003a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	e000e010 	.word	0xe000e010

08003a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff29 	bl	80038f8 <__NVIC_SetPriorityGrouping>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b086      	sub	sp, #24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
 8003aba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003abc:	f7ff ff40 	bl	8003940 <__NVIC_GetPriorityGrouping>
 8003ac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	6978      	ldr	r0, [r7, #20]
 8003ac8:	f7ff ff90 	bl	80039ec <NVIC_EncodePriority>
 8003acc:	4602      	mov	r2, r0
 8003ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff5f 	bl	8003998 <__NVIC_SetPriority>
}
 8003ada:	bf00      	nop
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	4603      	mov	r3, r0
 8003aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff33 	bl	800395c <__NVIC_EnableIRQ>
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ffa4 	bl	8003a54 <SysTick_Config>
 8003b0c:	4603      	mov	r3, r0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e08d      	b.n	8003c46 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <HAL_DMA_Init+0x138>)
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d80f      	bhi.n	8003b56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b45      	ldr	r3, [pc, #276]	@ (8003c54 <HAL_DMA_Init+0x13c>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a45      	ldr	r2, [pc, #276]	@ (8003c58 <HAL_DMA_Init+0x140>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	009a      	lsls	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a42      	ldr	r2, [pc, #264]	@ (8003c5c <HAL_DMA_Init+0x144>)
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b54:	e00e      	b.n	8003b74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4b40      	ldr	r3, [pc, #256]	@ (8003c60 <HAL_DMA_Init+0x148>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	4a3d      	ldr	r2, [pc, #244]	@ (8003c58 <HAL_DMA_Init+0x140>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	009a      	lsls	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a3c      	ldr	r2, [pc, #240]	@ (8003c64 <HAL_DMA_Init+0x14c>)
 8003b72:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f9b6 	bl	8003f38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bd4:	d102      	bne.n	8003bdc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bf0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_DMA_Init+0x104>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d80c      	bhi.n	8003c1c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9d6 	bl	8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	e008      	b.n	8003c2e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40020407 	.word	0x40020407
 8003c54:	bffdfff8 	.word	0xbffdfff8
 8003c58:	cccccccd 	.word	0xcccccccd
 8003c5c:	40020000 	.word	0x40020000
 8003c60:	bffdfbf8 	.word	0xbffdfbf8
 8003c64:	40020400 	.word	0x40020400

08003c68 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_DMA_Start_IT+0x20>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e066      	b.n	8003d56 <HAL_DMA_Start_IT+0xee>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d155      	bne.n	8003d48 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f8fb 	bl	8003ebc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 020e 	orr.w	r2, r2, #14
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e00f      	b.n	8003d00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 020a 	orr.w	r2, r2, #10
 8003cfe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d1c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e005      	b.n	8003d54 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
 8003d52:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2204      	movs	r2, #4
 8003d80:	409a      	lsls	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d026      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x7a>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d021      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d107      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0204 	bic.w	r2, r2, #4
 8003db0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	f003 021f 	and.w	r2, r3, #31
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	2104      	movs	r1, #4
 8003dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d071      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dd6:	e06c      	b.n	8003eb2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2202      	movs	r2, #2
 8003de2:	409a      	lsls	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02e      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d029      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 020a 	bic.w	r2, r2, #10
 8003e12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e20:	f003 021f 	and.w	r2, r3, #31
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	2102      	movs	r1, #2
 8003e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d038      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e48:	e033      	b.n	8003eb2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2208      	movs	r2, #8
 8003e54:	409a      	lsls	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d02a      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d025      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 020e 	bic.w	r2, r2, #14
 8003e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7c:	f003 021f 	and.w	r2, r3, #31
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	2101      	movs	r1, #1
 8003e86:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
}
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ed2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ee4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	f003 021f 	and.w	r2, r3, #31
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d108      	bne.n	8003f1c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f1a:	e007      	b.n	8003f2c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	60da      	str	r2, [r3, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b16      	ldr	r3, [pc, #88]	@ (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d802      	bhi.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f4c:	4b15      	ldr	r3, [pc, #84]	@ (8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e001      	b.n	8003f56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f52:	4b15      	ldr	r3, [pc, #84]	@ (8003fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f54:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	3b08      	subs	r3, #8
 8003f62:	4a12      	ldr	r2, [pc, #72]	@ (8003fac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f70:	089b      	lsrs	r3, r3, #2
 8003f72:	009a      	lsls	r2, r3, #2
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4413      	add	r3, r2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40020407 	.word	0x40020407
 8003fa4:	40020800 	.word	0x40020800
 8003fa8:	40020820 	.word	0x40020820
 8003fac:	cccccccd 	.word	0xcccccccd
 8003fb0:	40020880 	.word	0x40020880

08003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a08      	ldr	r2, [pc, #32]	@ (8003ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fd6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	1000823f 	.word	0x1000823f
 8003ff8:	40020940 	.word	0x40020940

08003ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800400a:	e15a      	b.n	80042c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2101      	movs	r1, #1
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	4013      	ands	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 814c 	beq.w	80042bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d005      	beq.n	800403c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004038:	2b02      	cmp	r3, #2
 800403a:	d130      	bne.n	800409e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	2203      	movs	r2, #3
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004072:	2201      	movs	r2, #1
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 0201 	and.w	r2, r3, #1
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d017      	beq.n	80040da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	2203      	movs	r2, #3
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d123      	bne.n	800412e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	08da      	lsrs	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3208      	adds	r2, #8
 80040ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	220f      	movs	r2, #15
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	08da      	lsrs	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3208      	adds	r2, #8
 8004128:	6939      	ldr	r1, [r7, #16]
 800412a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	2203      	movs	r2, #3
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0203 	and.w	r2, r3, #3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80a6 	beq.w	80042bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004170:	4b5b      	ldr	r3, [pc, #364]	@ (80042e0 <HAL_GPIO_Init+0x2e4>)
 8004172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004174:	4a5a      	ldr	r2, [pc, #360]	@ (80042e0 <HAL_GPIO_Init+0x2e4>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6613      	str	r3, [r2, #96]	@ 0x60
 800417c:	4b58      	ldr	r3, [pc, #352]	@ (80042e0 <HAL_GPIO_Init+0x2e4>)
 800417e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004188:	4a56      	ldr	r2, [pc, #344]	@ (80042e4 <HAL_GPIO_Init+0x2e8>)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	089b      	lsrs	r3, r3, #2
 800418e:	3302      	adds	r3, #2
 8004190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	220f      	movs	r2, #15
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041b2:	d01f      	beq.n	80041f4 <HAL_GPIO_Init+0x1f8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a4c      	ldr	r2, [pc, #304]	@ (80042e8 <HAL_GPIO_Init+0x2ec>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d019      	beq.n	80041f0 <HAL_GPIO_Init+0x1f4>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a4b      	ldr	r2, [pc, #300]	@ (80042ec <HAL_GPIO_Init+0x2f0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <HAL_GPIO_Init+0x1f0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a4a      	ldr	r2, [pc, #296]	@ (80042f0 <HAL_GPIO_Init+0x2f4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00d      	beq.n	80041e8 <HAL_GPIO_Init+0x1ec>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a49      	ldr	r2, [pc, #292]	@ (80042f4 <HAL_GPIO_Init+0x2f8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <HAL_GPIO_Init+0x1e8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a48      	ldr	r2, [pc, #288]	@ (80042f8 <HAL_GPIO_Init+0x2fc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d101      	bne.n	80041e0 <HAL_GPIO_Init+0x1e4>
 80041dc:	2305      	movs	r3, #5
 80041de:	e00a      	b.n	80041f6 <HAL_GPIO_Init+0x1fa>
 80041e0:	2306      	movs	r3, #6
 80041e2:	e008      	b.n	80041f6 <HAL_GPIO_Init+0x1fa>
 80041e4:	2304      	movs	r3, #4
 80041e6:	e006      	b.n	80041f6 <HAL_GPIO_Init+0x1fa>
 80041e8:	2303      	movs	r3, #3
 80041ea:	e004      	b.n	80041f6 <HAL_GPIO_Init+0x1fa>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e002      	b.n	80041f6 <HAL_GPIO_Init+0x1fa>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <HAL_GPIO_Init+0x1fa>
 80041f4:	2300      	movs	r3, #0
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	f002 0203 	and.w	r2, r2, #3
 80041fc:	0092      	lsls	r2, r2, #2
 80041fe:	4093      	lsls	r3, r2
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004206:	4937      	ldr	r1, [pc, #220]	@ (80042e4 <HAL_GPIO_Init+0x2e8>)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	3302      	adds	r3, #2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004214:	4b39      	ldr	r3, [pc, #228]	@ (80042fc <HAL_GPIO_Init+0x300>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	43db      	mvns	r3, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4013      	ands	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004238:	4a30      	ldr	r2, [pc, #192]	@ (80042fc <HAL_GPIO_Init+0x300>)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800423e:	4b2f      	ldr	r3, [pc, #188]	@ (80042fc <HAL_GPIO_Init+0x300>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	43db      	mvns	r3, r3
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4013      	ands	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004262:	4a26      	ldr	r2, [pc, #152]	@ (80042fc <HAL_GPIO_Init+0x300>)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004268:	4b24      	ldr	r3, [pc, #144]	@ (80042fc <HAL_GPIO_Init+0x300>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	43db      	mvns	r3, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800428c:	4a1b      	ldr	r2, [pc, #108]	@ (80042fc <HAL_GPIO_Init+0x300>)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004292:	4b1a      	ldr	r3, [pc, #104]	@ (80042fc <HAL_GPIO_Init+0x300>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	43db      	mvns	r3, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042b6:	4a11      	ldr	r2, [pc, #68]	@ (80042fc <HAL_GPIO_Init+0x300>)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	3301      	adds	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f47f ae9d 	bne.w	800400c <HAL_GPIO_Init+0x10>
  }
}
 80042d2:	bf00      	nop
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40010000 	.word	0x40010000
 80042e8:	48000400 	.word	0x48000400
 80042ec:	48000800 	.word	0x48000800
 80042f0:	48000c00 	.word	0x48000c00
 80042f4:	48001000 	.word	0x48001000
 80042f8:	48001400 	.word	0x48001400
 80042fc:	40010400 	.word	0x40010400

08004300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	807b      	strh	r3, [r7, #2]
 800430c:	4613      	mov	r3, r2
 800430e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004310:	787b      	ldrb	r3, [r7, #1]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004316:	887a      	ldrh	r2, [r7, #2]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800431c:	e002      	b.n	8004324 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800431e:	887a      	ldrh	r2, [r7, #2]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800433a:	4b08      	ldr	r3, [pc, #32]	@ (800435c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d006      	beq.n	8004354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004346:	4a05      	ldr	r2, [pc, #20]	@ (800435c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f806 	bl	8004360 <HAL_GPIO_EXTI_Callback>
  }
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40010400 	.word	0x40010400

08004360 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0bb      	b.n	8004506 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b05      	cmp	r3, #5
 8004398:	d101      	bne.n	800439e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e0b3      	b.n	8004506 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d101      	bne.n	80043ae <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e0ab      	b.n	8004506 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ae:	4b58      	ldr	r3, [pc, #352]	@ (8004510 <HAL_OPAMP_Init+0x198>)
 80043b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b2:	4a57      	ldr	r2, [pc, #348]	@ (8004510 <HAL_OPAMP_Init+0x198>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80043ba:	4b55      	ldr	r3, [pc, #340]	@ (8004510 <HAL_OPAMP_Init+0x198>)
 80043bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fc ffde 	bl	800139c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b40      	cmp	r3, #64	@ 0x40
 80043e6:	d003      	beq.n	80043f0 <HAL_OPAMP_Init+0x78>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b60      	cmp	r3, #96	@ 0x60
 80043ee:	d133      	bne.n	8004458 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 0110 	bic.w	r1, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b41      	ldr	r3, [pc, #260]	@ (8004514 <HAL_OPAMP_Init+0x19c>)
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6851      	ldr	r1, [r2, #4]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6892      	ldr	r2, [r2, #8]
 8004418:	4311      	orrs	r1, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6912      	ldr	r2, [r2, #16]
 800441e:	430a      	orrs	r2, r1
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	7d09      	ldrb	r1, [r1, #20]
 8004424:	2901      	cmp	r1, #1
 8004426:	d102      	bne.n	800442e <HAL_OPAMP_Init+0xb6>
 8004428:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800442c:	e000      	b.n	8004430 <HAL_OPAMP_Init+0xb8>
 800442e:	2100      	movs	r1, #0
 8004430:	4311      	orrs	r1, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004436:	4311      	orrs	r1, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800443c:	4311      	orrs	r1, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004442:	04d2      	lsls	r2, r2, #19
 8004444:	4311      	orrs	r1, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800444a:	0612      	lsls	r2, r2, #24
 800444c:	4311      	orrs	r1, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	430b      	orrs	r3, r1
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e035      	b.n	80044c4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 0110 	bic.w	r1, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b27      	ldr	r3, [pc, #156]	@ (8004514 <HAL_OPAMP_Init+0x19c>)
 8004476:	4013      	ands	r3, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6851      	ldr	r1, [r2, #4]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6892      	ldr	r2, [r2, #8]
 8004480:	4311      	orrs	r1, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68d2      	ldr	r2, [r2, #12]
 8004486:	4311      	orrs	r1, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6912      	ldr	r2, [r2, #16]
 800448c:	430a      	orrs	r2, r1
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	7d09      	ldrb	r1, [r1, #20]
 8004492:	2901      	cmp	r1, #1
 8004494:	d102      	bne.n	800449c <HAL_OPAMP_Init+0x124>
 8004496:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800449a:	e000      	b.n	800449e <HAL_OPAMP_Init+0x126>
 800449c:	2100      	movs	r1, #0
 800449e:	4311      	orrs	r1, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044a4:	4311      	orrs	r1, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80044aa:	4311      	orrs	r1, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80044b0:	04d2      	lsls	r2, r2, #19
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044b8:	0612      	lsls	r2, r2, #24
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	db10      	blt.n	80044f0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	e0003e11 	.word	0xe0003e11

08004518 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	e01d      	b.n	800456c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b05      	cmp	r3, #5
 800453a:	d102      	bne.n	8004542 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e014      	b.n	800456c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10c      	bne.n	8004568 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0201 	orr.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2204      	movs	r2, #4
 8004562:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004566:	e001      	b.n	800456c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0c0      	b.n	800470e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f009 fd1d 	bl	800dfe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2203      	movs	r2, #3
 80045aa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f005 fb67 	bl	8009c86 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
 80045bc:	e03e      	b.n	800463c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	440b      	add	r3, r1
 80045cc:	3311      	adds	r3, #17
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045d2:	7bfa      	ldrb	r2, [r7, #15]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	440b      	add	r3, r1
 80045e0:	3310      	adds	r3, #16
 80045e2:	7bfa      	ldrb	r2, [r7, #15]
 80045e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	440b      	add	r3, r1
 80045f4:	3313      	adds	r3, #19
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	440b      	add	r3, r1
 8004608:	3320      	adds	r3, #32
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800460e:	7bfa      	ldrb	r2, [r7, #15]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	440b      	add	r3, r1
 800461c:	3324      	adds	r3, #36	@ 0x24
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	440b      	add	r3, r1
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	3301      	adds	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	791b      	ldrb	r3, [r3, #4]
 8004640:	7bfa      	ldrb	r2, [r7, #15]
 8004642:	429a      	cmp	r2, r3
 8004644:	d3bb      	bcc.n	80045be <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	e044      	b.n	80046d6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	440b      	add	r3, r1
 800465a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004662:	7bfa      	ldrb	r2, [r7, #15]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	440b      	add	r3, r1
 8004670:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004678:	7bfa      	ldrb	r2, [r7, #15]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	440b      	add	r3, r1
 8004686:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800468e:	7bfa      	ldrb	r2, [r7, #15]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	440b      	add	r3, r1
 800469c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	440b      	add	r3, r1
 80046b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046ba:	7bfa      	ldrb	r2, [r7, #15]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	440b      	add	r3, r1
 80046c8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	3301      	adds	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	791b      	ldrb	r3, [r3, #4]
 80046da:	7bfa      	ldrb	r2, [r7, #15]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d3b5      	bcc.n	800464c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3304      	adds	r3, #4
 80046e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80046ec:	f005 fae6 	bl	8009cbc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	7a9b      	ldrb	r3, [r3, #10]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d102      	bne.n	800470c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f001 fc40 	bl	8005f8c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_PCD_Start+0x16>
 8004728:	2302      	movs	r3, #2
 800472a:	e012      	b.n	8004752 <HAL_PCD_Start+0x3c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f005 fa8d 	bl	8009c58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f007 fd4d 	bl	800c1e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f007 fd52 	bl	800c210 <USB_ReadInterrupts>
 800476c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fb04 	bl	8004d86 <PCD_EP_ISR_Handler>

    return;
 800477e:	e110      	b.n	80049a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004786:	2b00      	cmp	r3, #0
 8004788:	d013      	beq.n	80047b2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004792:	b29a      	uxth	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800479c:	b292      	uxth	r2, r2
 800479e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f009 fcad 	bl	800e102 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80047a8:	2100      	movs	r1, #0
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8fc 	bl	80049a8 <HAL_PCD_SetAddress>

    return;
 80047b0:	e0f7      	b.n	80049a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00c      	beq.n	80047d6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047ce:	b292      	uxth	r2, r2
 80047d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80047d4:	e0e5      	b.n	80049a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00c      	beq.n	80047fa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047f2:	b292      	uxth	r2, r2
 80047f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80047f8:	e0d3      	b.n	80049a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d034      	beq.n	800486e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800480c:	b29a      	uxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	b292      	uxth	r2, r2
 8004818:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004824:	b29a      	uxth	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0208 	bic.w	r2, r2, #8
 800482e:	b292      	uxth	r2, r2
 8004830:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004846:	2100      	movs	r1, #0
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f009 fe4d 	bl	800e4e8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f009 fc90 	bl	800e174 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004866:	b292      	uxth	r2, r2
 8004868:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800486c:	e099      	b.n	80049a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004874:	2b00      	cmp	r3, #0
 8004876:	d027      	beq.n	80048c8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0208 	orr.w	r2, r2, #8
 800488a:	b292      	uxth	r2, r2
 800488c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048a2:	b292      	uxth	r2, r2
 80048a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0204 	orr.w	r2, r2, #4
 80048ba:	b292      	uxth	r2, r2
 80048bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f009 fc3d 	bl	800e140 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80048c6:	e06c      	b.n	80049a2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d040      	beq.n	8004954 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048da:	b29a      	uxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048e4:	b292      	uxth	r2, r2
 80048e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d12b      	bne.n	800494c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0204 	orr.w	r2, r2, #4
 8004906:	b292      	uxth	r2, r2
 8004908:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	b292      	uxth	r2, r2
 8004920:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004934:	b29b      	uxth	r3, r3
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004942:	2101      	movs	r1, #1
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f009 fdcf 	bl	800e4e8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800494a:	e02a      	b.n	80049a2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f009 fbf7 	bl	800e140 <HAL_PCD_SuspendCallback>
    return;
 8004952:	e026      	b.n	80049a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00f      	beq.n	800497e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004970:	b292      	uxth	r2, r2
 8004972:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f009 fbb5 	bl	800e0e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800497c:	e011      	b.n	80049a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00c      	beq.n	80049a2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800499a:	b292      	uxth	r2, r2
 800499c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80049a0:	bf00      	nop
  }
}
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_PCD_SetAddress+0x1a>
 80049be:	2302      	movs	r3, #2
 80049c0:	e012      	b.n	80049e8 <HAL_PCD_SetAddress+0x40>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f007 fbee 	bl	800c1ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	4608      	mov	r0, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	461a      	mov	r2, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	70fb      	strb	r3, [r7, #3]
 8004a02:	460b      	mov	r3, r1
 8004a04:	803b      	strh	r3, [r7, #0]
 8004a06:	4613      	mov	r3, r2
 8004a08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da0e      	bge.n	8004a34 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	f003 0207 	and.w	r2, r3, #7
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	3310      	adds	r3, #16
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	705a      	strb	r2, [r3, #1]
 8004a32:	e00e      	b.n	8004a52 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	f003 0207 	and.w	r2, r3, #7
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a5e:	883a      	ldrh	r2, [r7, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	78ba      	ldrb	r2, [r7, #2]
 8004a68:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a6a:	78bb      	ldrb	r3, [r7, #2]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d102      	bne.n	8004a76 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_PCD_EP_Open+0x94>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e00e      	b.n	8004aa2 <HAL_PCD_EP_Open+0xb2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68f9      	ldr	r1, [r7, #12]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f005 f930 	bl	8009cf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	da0e      	bge.n	8004adc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	f003 0207 	and.w	r2, r3, #7
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	3310      	adds	r3, #16
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	705a      	strb	r2, [r3, #1]
 8004ada:	e00e      	b.n	8004afa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 0207 	and.w	r2, r3, #7
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_PCD_EP_Close+0x6a>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e00e      	b.n	8004b32 <HAL_PCD_EP_Close+0x88>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68f9      	ldr	r1, [r7, #12]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f005 fcac 	bl	800a480 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b086      	sub	sp, #24
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	460b      	mov	r3, r1
 8004b48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b4a:	7afb      	ldrb	r3, [r7, #11]
 8004b4c:	f003 0207 	and.w	r2, r3, #7
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2200      	movs	r2, #0
 8004b78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b7a:	7afb      	ldrb	r3, [r7, #11]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6979      	ldr	r1, [r7, #20]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f005 fe64 	bl	800a85a <USB_EPStartXfer>

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	f003 0207 	and.w	r2, r3, #7
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	440b      	add	r3, r1
 8004bba:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	f003 0207 	and.w	r2, r3, #7
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	3310      	adds	r3, #16
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2201      	movs	r2, #1
 8004c16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c18:	7afb      	ldrb	r3, [r7, #11]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6979      	ldr	r1, [r7, #20]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f005 fe15 	bl	800a85a <USB_EPStartXfer>

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	7912      	ldrb	r2, [r2, #4]
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e03e      	b.n	8004cd6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da0e      	bge.n	8004c7e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 0207 	and.w	r2, r3, #7
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	3310      	adds	r3, #16
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	705a      	strb	r2, [r3, #1]
 8004c7c:	e00c      	b.n	8004c98 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	4413      	add	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_PCD_EP_SetStall+0x7e>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e00e      	b.n	8004cd6 <HAL_PCD_EP_SetStall+0x9c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68f9      	ldr	r1, [r7, #12]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f007 f978 	bl	800bfbc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	7912      	ldrb	r2, [r2, #4]
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e040      	b.n	8004d7e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	da0e      	bge.n	8004d22 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	f003 0207 	and.w	r2, r3, #7
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	3310      	adds	r3, #16
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	4413      	add	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	705a      	strb	r2, [r3, #1]
 8004d20:	e00e      	b.n	8004d40 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 0207 	and.w	r2, r3, #7
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4413      	add	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_PCD_EP_ClrStall+0x82>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e00e      	b.n	8004d7e <HAL_PCD_EP_ClrStall+0xa0>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68f9      	ldr	r1, [r7, #12]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f007 f975 	bl	800c05e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b096      	sub	sp, #88	@ 0x58
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d8e:	e3ad      	b.n	80054ec <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d98:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004daa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f040 816f 	bne.w	8005092 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004db4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d14c      	bne.n	8004e5a <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd0:	81fb      	strh	r3, [r7, #14]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	89fb      	ldrh	r3, [r7, #14]
 8004dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3310      	adds	r3, #16
 8004de8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	4413      	add	r3, r2
 8004e04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	441a      	add	r2, r3
 8004e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e20:	2100      	movs	r1, #0
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f009 f945 	bl	800e0b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	7b1b      	ldrb	r3, [r3, #12]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 835c 	beq.w	80054ec <PCD_EP_ISR_Handler+0x766>
 8004e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 8357 	bne.w	80054ec <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	7b1b      	ldrb	r3, [r3, #12]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	731a      	strb	r2, [r3, #12]
 8004e58:	e348      	b.n	80054ec <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e60:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d032      	beq.n	8004ede <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	4413      	add	r3, r2
 8004e92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e9e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f007 f9fe 	bl	800c2b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	823b      	strh	r3, [r7, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	8a3a      	ldrh	r2, [r7, #16]
 8004ece:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ed2:	b292      	uxth	r2, r2
 8004ed4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f009 f8be 	bl	800e058 <HAL_PCD_SetupStageCallback>
 8004edc:	e306      	b.n	80054ec <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ede:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f280 8302 	bge.w	80054ec <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	83fb      	strh	r3, [r7, #30]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	8bfa      	ldrh	r2, [r7, #30]
 8004efe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f02:	b292      	uxth	r2, r2
 8004f04:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f2c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d019      	beq.n	8004f6a <PCD_EP_ISR_Handler+0x1e4>
 8004f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d015      	beq.n	8004f6a <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f44:	6959      	ldr	r1, [r3, #20]
 8004f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f48:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f4c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f007 f9b0 	bl	800c2b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	441a      	add	r2, r3
 8004f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f60:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f62:	2100      	movs	r1, #0
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f009 f889 	bl	800e07c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004f74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 82b5 	bne.w	80054ec <PCD_EP_ISR_Handler+0x766>
 8004f82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004f86:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f8e:	f000 82ad 	beq.w	80054ec <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	801a      	strh	r2, [r3, #0]
 8004fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fc8:	d91d      	bls.n	8005006 <PCD_EP_ISR_Handler+0x280>
 8004fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <PCD_EP_ISR_Handler+0x25e>
 8004fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	029b      	lsls	r3, r3, #10
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	e026      	b.n	8005054 <PCD_EP_ISR_Handler+0x2ce>
 8005006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <PCD_EP_ISR_Handler+0x29e>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501c:	b29a      	uxth	r2, r3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	801a      	strh	r2, [r3, #0]
 8005022:	e017      	b.n	8005054 <PCD_EP_ISR_Handler+0x2ce>
 8005024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	085b      	lsrs	r3, r3, #1
 800502a:	647b      	str	r3, [r7, #68]	@ 0x44
 800502c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <PCD_EP_ISR_Handler+0x2b8>
 8005038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800503a:	3301      	adds	r3, #1
 800503c:	647b      	str	r3, [r7, #68]	@ 0x44
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29a      	uxth	r2, r3
 8005044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005046:	b29b      	uxth	r3, r3
 8005048:	029b      	lsls	r3, r3, #10
 800504a:	b29b      	uxth	r3, r3
 800504c:	4313      	orrs	r3, r2
 800504e:	b29a      	uxth	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005064:	827b      	strh	r3, [r7, #18]
 8005066:	8a7b      	ldrh	r3, [r7, #18]
 8005068:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800506c:	827b      	strh	r3, [r7, #18]
 800506e:	8a7b      	ldrh	r3, [r7, #18]
 8005070:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005074:	827b      	strh	r3, [r7, #18]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	8a7b      	ldrh	r3, [r7, #18]
 800507c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]
 8005090:	e22c      	b.n	80054ec <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050a6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f280 80f6 	bge.w	800529c <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80050c6:	4013      	ands	r3, r2
 80050c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80050de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80050e2:	b292      	uxth	r2, r2
 80050e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80050e6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80050fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fe:	7b1b      	ldrb	r3, [r3, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d123      	bne.n	800514c <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800510c:	b29b      	uxth	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4413      	add	r3, r2
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	4413      	add	r3, r2
 800511e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005128:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800512c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 808e 	beq.w	8005252 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513c:	6959      	ldr	r1, [r3, #20]
 800513e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005140:	88da      	ldrh	r2, [r3, #6]
 8005142:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005146:	f007 f8b5 	bl	800c2b4 <USB_ReadPMA>
 800514a:	e082      	b.n	8005252 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800514c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514e:	78db      	ldrb	r3, [r3, #3]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d10a      	bne.n	800516a <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005154:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005158:	461a      	mov	r2, r3
 800515a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f9d3 	bl	8005508 <HAL_PCD_EP_DB_Receive>
 8005162:	4603      	mov	r3, r0
 8005164:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005168:	e073      	b.n	8005252 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005184:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800519a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800519e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d022      	beq.n	800520e <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	4413      	add	r3, r2
 80051e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80051f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d02c      	beq.n	8005252 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051fe:	6959      	ldr	r1, [r3, #20]
 8005200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005202:	891a      	ldrh	r2, [r3, #8]
 8005204:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005208:	f007 f854 	bl	800c2b4 <USB_ReadPMA>
 800520c:	e021      	b.n	8005252 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005216:	b29b      	uxth	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	4413      	add	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	4413      	add	r3, r2
 8005228:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005232:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005236:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005244:	6959      	ldr	r1, [r3, #20]
 8005246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005248:	895a      	ldrh	r2, [r3, #10]
 800524a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800524e:	f007 f831 	bl	800c2b4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005254:	69da      	ldr	r2, [r3, #28]
 8005256:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800525a:	441a      	add	r2, r3
 800525c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800525e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005268:	441a      	add	r2, r3
 800526a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800526c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800526e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <PCD_EP_ISR_Handler+0x4fc>
 8005276:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800527a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	429a      	cmp	r2, r3
 8005280:	d206      	bcs.n	8005290 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	4619      	mov	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f008 fef7 	bl	800e07c <HAL_PCD_DataOutStageCallback>
 800528e:	e005      	b.n	800529c <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005296:	4618      	mov	r0, r3
 8005298:	f005 fadf 	bl	800a85a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800529c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80052a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 8121 	beq.w	80054ec <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80052aa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	3310      	adds	r3, #16
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	4413      	add	r3, r2
 80052bc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80052d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	441a      	add	r2, r3
 80052ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80052ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80052fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fc:	78db      	ldrb	r3, [r3, #3]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	f040 80a2 	bne.w	8005448 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005306:	2200      	movs	r2, #0
 8005308:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800530a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800530c:	7b1b      	ldrb	r3, [r3, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8093 	beq.w	800543a <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005314:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d046      	beq.n	80053ae <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d126      	bne.n	8005376 <PCD_EP_ISR_Handler+0x5f0>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005336:	b29b      	uxth	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	4413      	add	r3, r2
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	00da      	lsls	r2, r3, #3
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	4413      	add	r3, r2
 800534a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800534e:	623b      	str	r3, [r7, #32]
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800535a:	b29a      	uxth	r2, r3
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800536a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536e:	b29a      	uxth	r2, r3
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	e061      	b.n	800543a <PCD_EP_ISR_Handler+0x6b4>
 8005376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005378:	785b      	ldrb	r3, [r3, #1]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d15d      	bne.n	800543a <PCD_EP_ISR_Handler+0x6b4>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800538c:	b29b      	uxth	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005392:	4413      	add	r3, r2
 8005394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	00da      	lsls	r2, r3, #3
 800539c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539e:	4413      	add	r3, r2
 80053a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	2200      	movs	r2, #0
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e045      	b.n	800543a <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d126      	bne.n	800540a <PCD_EP_ISR_Handler+0x684>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d0:	4413      	add	r3, r2
 80053d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	00da      	lsls	r2, r3, #3
 80053da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053dc:	4413      	add	r3, r2
 80053de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005402:	b29a      	uxth	r2, r3
 8005404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	e017      	b.n	800543a <PCD_EP_ISR_Handler+0x6b4>
 800540a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d113      	bne.n	800543a <PCD_EP_ISR_Handler+0x6b4>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800541a:	b29b      	uxth	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005420:	4413      	add	r3, r2
 8005422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	00da      	lsls	r2, r3, #3
 800542a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542c:	4413      	add	r3, r2
 800542e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005432:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005436:	2200      	movs	r2, #0
 8005438:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800543a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f008 fe36 	bl	800e0b2 <HAL_PCD_DataInStageCallback>
 8005446:	e051      	b.n	80054ec <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005448:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800544c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d144      	bne.n	80054de <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800545c:	b29b      	uxth	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4413      	add	r3, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	4413      	add	r3, r2
 800546e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005478:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800547c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800547e:	699a      	ldr	r2, [r3, #24]
 8005480:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005484:	429a      	cmp	r2, r3
 8005486:	d907      	bls.n	8005498 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800548a:	699a      	ldr	r2, [r3, #24]
 800548c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005490:	1ad2      	subs	r2, r2, r3
 8005492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005494:	619a      	str	r2, [r3, #24]
 8005496:	e002      	b.n	800549e <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800549a:	2200      	movs	r2, #0
 800549c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800549e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f008 fe00 	bl	800e0b2 <HAL_PCD_DataInStageCallback>
 80054b2:	e01b      	b.n	80054ec <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80054b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80054bc:	441a      	add	r2, r3
 80054be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80054c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80054ca:	441a      	add	r2, r3
 80054cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ce:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054d6:	4618      	mov	r0, r3
 80054d8:	f005 f9bf 	bl	800a85a <USB_EPStartXfer>
 80054dc:	e006      	b.n	80054ec <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80054de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80054e2:	461a      	mov	r2, r3
 80054e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f917 	bl	800571a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	b21b      	sxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f6ff ac49 	blt.w	8004d90 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3758      	adds	r7, #88	@ 0x58
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d07c      	beq.n	800561a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005528:	b29b      	uxth	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4413      	add	r3, r2
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	4413      	add	r3, r2
 800553a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005544:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	8b7b      	ldrh	r3, [r7, #26]
 800554c:	429a      	cmp	r2, r3
 800554e:	d306      	bcc.n	800555e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	8b7b      	ldrh	r3, [r7, #26]
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	619a      	str	r2, [r3, #24]
 800555c:	e002      	b.n	8005564 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2200      	movs	r2, #0
 8005562:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d123      	bne.n	80055b4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005586:	833b      	strh	r3, [r7, #24]
 8005588:	8b3b      	ldrh	r3, [r7, #24]
 800558a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800558e:	833b      	strh	r3, [r7, #24]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	441a      	add	r2, r3
 800559e:	8b3b      	ldrh	r3, [r7, #24]
 80055a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80055b4:	88fb      	ldrh	r3, [r7, #6]
 80055b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01f      	beq.n	80055fe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d8:	82fb      	strh	r3, [r7, #22]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	441a      	add	r2, r3
 80055e8:	8afb      	ldrh	r3, [r7, #22]
 80055ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80055fe:	8b7b      	ldrh	r3, [r7, #26]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8085 	beq.w	8005710 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6959      	ldr	r1, [r3, #20]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	891a      	ldrh	r2, [r3, #8]
 8005612:	8b7b      	ldrh	r3, [r7, #26]
 8005614:	f006 fe4e 	bl	800c2b4 <USB_ReadPMA>
 8005618:	e07a      	b.n	8005710 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	4413      	add	r3, r2
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	4413      	add	r3, r2
 8005634:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800563e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	8b7b      	ldrh	r3, [r7, #26]
 8005646:	429a      	cmp	r2, r3
 8005648:	d306      	bcc.n	8005658 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	8b7b      	ldrh	r3, [r7, #26]
 8005650:	1ad2      	subs	r2, r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	619a      	str	r2, [r3, #24]
 8005656:	e002      	b.n	800565e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2200      	movs	r2, #0
 800565c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d123      	bne.n	80056ae <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800567c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005680:	83fb      	strh	r3, [r7, #30]
 8005682:	8bfb      	ldrh	r3, [r7, #30]
 8005684:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005688:	83fb      	strh	r3, [r7, #30]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	8bfb      	ldrh	r3, [r7, #30]
 800569a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80056ae:	88fb      	ldrh	r3, [r7, #6]
 80056b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11f      	bne.n	80056f8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d2:	83bb      	strh	r3, [r7, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	8bbb      	ldrh	r3, [r7, #28]
 80056e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80056f8:	8b7b      	ldrh	r3, [r7, #26]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d008      	beq.n	8005710 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6959      	ldr	r1, [r3, #20]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	895a      	ldrh	r2, [r3, #10]
 800570a:	8b7b      	ldrh	r3, [r7, #26]
 800570c:	f006 fdd2 	bl	800c2b4 <USB_ReadPMA>
    }
  }

  return count;
 8005710:	8b7b      	ldrh	r3, [r7, #26]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b0a4      	sub	sp, #144	@ 0x90
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	4613      	mov	r3, r2
 8005726:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 81db 	beq.w	8005aea <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800573c:	b29b      	uxth	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	4413      	add	r3, r2
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	4413      	add	r3, r2
 800574e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005758:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005764:	429a      	cmp	r2, r3
 8005766:	d907      	bls.n	8005778 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	699a      	ldr	r2, [r3, #24]
 800576c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005770:	1ad2      	subs	r2, r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	619a      	str	r2, [r3, #24]
 8005776:	e002      	b.n	800577e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 80b9 	bne.w	80058fa <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d126      	bne.n	80057de <HAL_PCD_EP_DB_Transmit+0xc4>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800579e:	b29b      	uxth	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a4:	4413      	add	r3, r2
 80057a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	00da      	lsls	r2, r3, #3
 80057ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b0:	4413      	add	r3, r2
 80057b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	e01a      	b.n	8005814 <HAL_PCD_EP_DB_Transmit+0xfa>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d116      	bne.n	8005814 <HAL_PCD_EP_DB_Transmit+0xfa>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fa:	4413      	add	r3, r2
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	00da      	lsls	r2, r3, #3
 8005804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005806:	4413      	add	r3, r2
 8005808:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800580c:	633b      	str	r3, [r7, #48]	@ 0x30
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	2200      	movs	r2, #0
 8005812:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d126      	bne.n	8005870 <HAL_PCD_EP_DB_Transmit+0x156>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005830:	b29b      	uxth	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	00da      	lsls	r2, r3, #3
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	4413      	add	r3, r2
 8005844:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005854:	b29a      	uxth	r2, r3
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005868:	b29a      	uxth	r2, r3
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e017      	b.n	80058a0 <HAL_PCD_EP_DB_Transmit+0x186>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d113      	bne.n	80058a0 <HAL_PCD_EP_DB_Transmit+0x186>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005880:	b29b      	uxth	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	4413      	add	r3, r2
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	00da      	lsls	r2, r3, #3
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	4413      	add	r3, r2
 8005894:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005898:	623b      	str	r3, [r7, #32]
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	2200      	movs	r2, #0
 800589e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	4619      	mov	r1, r3
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f008 fc03 	bl	800e0b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058ac:	88fb      	ldrh	r3, [r7, #6]
 80058ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 82fa 	beq.w	8005eac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d2:	82fb      	strh	r3, [r7, #22]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	8afb      	ldrh	r3, [r7, #22]
 80058e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	8013      	strh	r3, [r2, #0]
 80058f8:	e2d8      	b.n	8005eac <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d021      	beq.n	8005948 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800591a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005944:	b29b      	uxth	r3, r3
 8005946:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800594e:	2b01      	cmp	r3, #1
 8005950:	f040 82ac 	bne.w	8005eac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800595c:	441a      	add	r2, r3
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	69da      	ldr	r2, [r3, #28]
 8005966:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800596a:	441a      	add	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	429a      	cmp	r2, r3
 800597a:	d30b      	bcc.n	8005994 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	6a1a      	ldr	r2, [r3, #32]
 8005988:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800598c:	1ad2      	subs	r2, r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	621a      	str	r2, [r3, #32]
 8005992:	e017      	b.n	80059c4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d108      	bne.n	80059ae <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800599c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80059a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80059ac:	e00a      	b.n	80059c4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2200      	movs	r2, #0
 80059c2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d165      	bne.n	8005a98 <HAL_PCD_EP_DB_Transmit+0x37e>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059da:	b29b      	uxth	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e0:	4413      	add	r3, r2
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	00da      	lsls	r2, r3, #3
 80059ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ec:	4413      	add	r3, r2
 80059ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a08:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a0a:	d91d      	bls.n	8005a48 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a22:	3b01      	subs	r3, #1
 8005a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	029b      	lsls	r3, r3, #10
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	4313      	orrs	r3, r2
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	e044      	b.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <HAL_PCD_EP_DB_Transmit+0x34c>
 8005a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	e035      	b.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_PCD_EP_DB_Transmit+0x366>
 8005a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	029b      	lsls	r3, r3, #10
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	e01c      	b.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d118      	bne.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab4:	4413      	add	r3, r2
 8005ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	00da      	lsls	r2, r3, #3
 8005abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ac6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6959      	ldr	r1, [r3, #20]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	891a      	ldrh	r2, [r3, #8]
 8005ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f006 fba4 	bl	800c230 <USB_WritePMA>
 8005ae8:	e1e0      	b.n	8005eac <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4413      	add	r3, r2
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	4413      	add	r3, r2
 8005b04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b0e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d307      	bcc.n	8005b2e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005b26:	1ad2      	subs	r2, r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	619a      	str	r2, [r3, #24]
 8005b2c:	e002      	b.n	8005b34 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2200      	movs	r2, #0
 8005b32:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f040 80c0 	bne.w	8005cbe <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d126      	bne.n	8005b94 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b5a:	4413      	add	r3, r2
 8005b5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	00da      	lsls	r2, r3, #3
 8005b64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b66:	4413      	add	r3, r2
 8005b68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b90:	801a      	strh	r2, [r3, #0]
 8005b92:	e01a      	b.n	8005bca <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d116      	bne.n	8005bca <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bb0:	4413      	add	r3, r2
 8005bb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	00da      	lsls	r2, r3, #3
 8005bba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d12b      	bne.n	8005c30 <HAL_PCD_EP_DB_Transmit+0x516>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bec:	4413      	add	r3, r2
 8005bee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	00da      	lsls	r2, r3, #3
 8005bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	e017      	b.n	8005c60 <HAL_PCD_EP_DB_Transmit+0x546>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d113      	bne.n	8005c60 <HAL_PCD_EP_DB_Transmit+0x546>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c46:	4413      	add	r3, r2
 8005c48:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	00da      	lsls	r2, r3, #3
 8005c50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c52:	4413      	add	r3, r2
 8005c54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c58:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	4619      	mov	r1, r3
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f008 fa23 	bl	800e0b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f040 811a 	bne.w	8005eac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c92:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8013      	strh	r3, [r2, #0]
 8005cbc:	e0f6      	b.n	8005eac <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d121      	bne.n	8005d0c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	f040 80ca 	bne.w	8005eac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d20:	441a      	add	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d2e:	441a      	add	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d30b      	bcc.n	8005d58 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6a1a      	ldr	r2, [r3, #32]
 8005d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d50:	1ad2      	subs	r2, r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	621a      	str	r2, [r3, #32]
 8005d56:	e017      	b.n	8005d88 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d108      	bne.n	8005d72 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005d60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005d70:	e00a      	b.n	8005d88 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	785b      	ldrb	r3, [r3, #1]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d165      	bne.n	8005e62 <HAL_PCD_EP_DB_Transmit+0x748>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005daa:	4413      	add	r3, r2
 8005dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	00da      	lsls	r2, r3, #3
 8005db4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005db6:	4413      	add	r3, r2
 8005db8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dd4:	d91d      	bls.n	8005e12 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d102      	bne.n	8005df0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005dea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dec:	3b01      	subs	r3, #1
 8005dee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005df0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	029b      	lsls	r3, r3, #10
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	e041      	b.n	8005e96 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <HAL_PCD_EP_DB_Transmit+0x716>
 8005e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	e032      	b.n	8005e96 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_PCD_EP_DB_Transmit+0x730>
 8005e44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e46:	3301      	adds	r3, #1
 8005e48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	029b      	lsls	r3, r3, #10
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	e019      	b.n	8005e96 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d115      	bne.n	8005e96 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e78:	4413      	add	r3, r2
 8005e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	00da      	lsls	r2, r3, #3
 8005e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e94:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6959      	ldr	r1, [r3, #20]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	895a      	ldrh	r2, [r3, #10]
 8005ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f006 f9c2 	bl	800c230 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec6:	82bb      	strh	r3, [r7, #20]
 8005ec8:	8abb      	ldrh	r3, [r7, #20]
 8005eca:	f083 0310 	eor.w	r3, r3, #16
 8005ece:	82bb      	strh	r3, [r7, #20]
 8005ed0:	8abb      	ldrh	r3, [r7, #20]
 8005ed2:	f083 0320 	eor.w	r3, r3, #32
 8005ed6:	82bb      	strh	r3, [r7, #20]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	441a      	add	r2, r3
 8005ee6:	8abb      	ldrh	r3, [r7, #20]
 8005ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3790      	adds	r7, #144	@ 0x90
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b087      	sub	sp, #28
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	817b      	strh	r3, [r7, #10]
 8005f14:	4613      	mov	r3, r2
 8005f16:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005f18:	897b      	ldrh	r3, [r7, #10]
 8005f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f24:	897b      	ldrh	r3, [r7, #10]
 8005f26:	f003 0207 	and.w	r2, r3, #7
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	3310      	adds	r3, #16
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	e009      	b.n	8005f50 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f3c:	897a      	ldrh	r2, [r7, #10]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005f50:	893b      	ldrh	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d107      	bne.n	8005f66 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	80da      	strh	r2, [r3, #6]
 8005f64:	e00b      	b.n	8005f7e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	0c1b      	lsrs	r3, r3, #16
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f043 0302 	orr.w	r3, r3, #2
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d141      	bne.n	8006072 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fee:	4b4b      	ldr	r3, [pc, #300]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffa:	d131      	bne.n	8006060 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ffc:	4b47      	ldr	r3, [pc, #284]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006002:	4a46      	ldr	r2, [pc, #280]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006008:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800600c:	4b43      	ldr	r3, [pc, #268]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006014:	4a41      	ldr	r2, [pc, #260]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800601a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800601c:	4b40      	ldr	r3, [pc, #256]	@ (8006120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2232      	movs	r2, #50	@ 0x32
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	4a3f      	ldr	r2, [pc, #252]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006028:	fba2 2303 	umull	r2, r3, r2, r3
 800602c:	0c9b      	lsrs	r3, r3, #18
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006032:	e002      	b.n	800603a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3b01      	subs	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800603a:	4b38      	ldr	r3, [pc, #224]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006046:	d102      	bne.n	800604e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1f2      	bne.n	8006034 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800604e:	4b33      	ldr	r3, [pc, #204]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800605a:	d158      	bne.n	800610e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e057      	b.n	8006110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006060:	4b2e      	ldr	r3, [pc, #184]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006066:	4a2d      	ldr	r2, [pc, #180]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800606c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006070:	e04d      	b.n	800610e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006078:	d141      	bne.n	80060fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800607a:	4b28      	ldr	r3, [pc, #160]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006086:	d131      	bne.n	80060ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006088:	4b24      	ldr	r3, [pc, #144]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800608a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800608e:	4a23      	ldr	r2, [pc, #140]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006094:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006098:	4b20      	ldr	r3, [pc, #128]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060a0:	4a1e      	ldr	r2, [pc, #120]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2232      	movs	r2, #50	@ 0x32
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	0c9b      	lsrs	r3, r3, #18
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060be:	e002      	b.n	80060c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060c6:	4b15      	ldr	r3, [pc, #84]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d2:	d102      	bne.n	80060da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f2      	bne.n	80060c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060da:	4b10      	ldr	r3, [pc, #64]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e6:	d112      	bne.n	800610e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e011      	b.n	8006110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060ec:	4b0b      	ldr	r3, [pc, #44]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060f2:	4a0a      	ldr	r2, [pc, #40]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80060fc:	e007      	b.n	800610e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060fe:	4b07      	ldr	r3, [pc, #28]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006106:	4a05      	ldr	r2, [pc, #20]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006108:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800610c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40007000 	.word	0x40007000
 8006120:	20000000 	.word	0x20000000
 8006124:	431bde83 	.word	0x431bde83

08006128 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800612c:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4a04      	ldr	r2, [pc, #16]	@ (8006144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006136:	6093      	str	r3, [r2, #8]
}
 8006138:	bf00      	nop
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40007000 	.word	0x40007000

08006148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e2fe      	b.n	8006758 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d075      	beq.n	8006252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006166:	4b97      	ldr	r3, [pc, #604]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 030c 	and.w	r3, r3, #12
 800616e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006170:	4b94      	ldr	r3, [pc, #592]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0303 	and.w	r3, r3, #3
 8006178:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d102      	bne.n	8006186 <HAL_RCC_OscConfig+0x3e>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d002      	beq.n	800618c <HAL_RCC_OscConfig+0x44>
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d10b      	bne.n	80061a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800618c:	4b8d      	ldr	r3, [pc, #564]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d05b      	beq.n	8006250 <HAL_RCC_OscConfig+0x108>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d157      	bne.n	8006250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e2d9      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ac:	d106      	bne.n	80061bc <HAL_RCC_OscConfig+0x74>
 80061ae:	4b85      	ldr	r3, [pc, #532]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a84      	ldr	r2, [pc, #528]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	e01d      	b.n	80061f8 <HAL_RCC_OscConfig+0xb0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061c4:	d10c      	bne.n	80061e0 <HAL_RCC_OscConfig+0x98>
 80061c6:	4b7f      	ldr	r3, [pc, #508]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a7e      	ldr	r2, [pc, #504]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	4b7c      	ldr	r3, [pc, #496]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a7b      	ldr	r2, [pc, #492]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	e00b      	b.n	80061f8 <HAL_RCC_OscConfig+0xb0>
 80061e0:	4b78      	ldr	r3, [pc, #480]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a77      	ldr	r2, [pc, #476]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	4b75      	ldr	r3, [pc, #468]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a74      	ldr	r2, [pc, #464]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d013      	beq.n	8006228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006200:	f7fb fcde 	bl	8001bc0 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006208:	f7fb fcda 	bl	8001bc0 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b64      	cmp	r3, #100	@ 0x64
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e29e      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800621a:	4b6a      	ldr	r3, [pc, #424]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0f0      	beq.n	8006208 <HAL_RCC_OscConfig+0xc0>
 8006226:	e014      	b.n	8006252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fb fcca 	bl	8001bc0 <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006230:	f7fb fcc6 	bl	8001bc0 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b64      	cmp	r3, #100	@ 0x64
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e28a      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006242:	4b60      	ldr	r3, [pc, #384]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f0      	bne.n	8006230 <HAL_RCC_OscConfig+0xe8>
 800624e:	e000      	b.n	8006252 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d075      	beq.n	800634a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800625e:	4b59      	ldr	r3, [pc, #356]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
 8006266:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006268:	4b56      	ldr	r3, [pc, #344]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	2b0c      	cmp	r3, #12
 8006276:	d102      	bne.n	800627e <HAL_RCC_OscConfig+0x136>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d002      	beq.n	8006284 <HAL_RCC_OscConfig+0x13c>
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b04      	cmp	r3, #4
 8006282:	d11f      	bne.n	80062c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006284:	4b4f      	ldr	r3, [pc, #316]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_RCC_OscConfig+0x154>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e25d      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800629c:	4b49      	ldr	r3, [pc, #292]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	061b      	lsls	r3, r3, #24
 80062aa:	4946      	ldr	r1, [pc, #280]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80062b0:	4b45      	ldr	r3, [pc, #276]	@ (80063c8 <HAL_RCC_OscConfig+0x280>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fb fc37 	bl	8001b28 <HAL_InitTick>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d043      	beq.n	8006348 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e249      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d023      	beq.n	8006314 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062cc:	4b3d      	ldr	r3, [pc, #244]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3c      	ldr	r2, [pc, #240]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80062d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d8:	f7fb fc72 	bl	8001bc0 <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e0:	f7fb fc6e 	bl	8001bc0 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e232      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062f2:	4b34      	ldr	r3, [pc, #208]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0f0      	beq.n	80062e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fe:	4b31      	ldr	r3, [pc, #196]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	061b      	lsls	r3, r3, #24
 800630c:	492d      	ldr	r1, [pc, #180]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800630e:	4313      	orrs	r3, r2
 8006310:	604b      	str	r3, [r1, #4]
 8006312:	e01a      	b.n	800634a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006314:	4b2b      	ldr	r3, [pc, #172]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a2a      	ldr	r2, [pc, #168]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800631a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800631e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fb fc4e 	bl	8001bc0 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006328:	f7fb fc4a 	bl	8001bc0 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e20e      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800633a:	4b22      	ldr	r3, [pc, #136]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0x1e0>
 8006346:	e000      	b.n	800634a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d041      	beq.n	80063da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01c      	beq.n	8006398 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800635e:	4b19      	ldr	r3, [pc, #100]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006364:	4a17      	ldr	r2, [pc, #92]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636e:	f7fb fc27 	bl	8001bc0 <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006376:	f7fb fc23 	bl	8001bc0 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e1e7      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006388:	4b0e      	ldr	r3, [pc, #56]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800638a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0ef      	beq.n	8006376 <HAL_RCC_OscConfig+0x22e>
 8006396:	e020      	b.n	80063da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006398:	4b0a      	ldr	r3, [pc, #40]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800639a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800639e:	4a09      	ldr	r2, [pc, #36]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a8:	f7fb fc0a 	bl	8001bc0 <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063ae:	e00d      	b.n	80063cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b0:	f7fb fc06 	bl	8001bc0 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d906      	bls.n	80063cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e1ca      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
 80063c2:	bf00      	nop
 80063c4:	40021000 	.word	0x40021000
 80063c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80063ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ea      	bne.n	80063b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80a6 	beq.w	8006534 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063ec:	4b84      	ldr	r3, [pc, #528]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_RCC_OscConfig+0x2b4>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x2b6>
 80063fc:	2300      	movs	r3, #0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00d      	beq.n	800641e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006402:	4b7f      	ldr	r3, [pc, #508]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006406:	4a7e      	ldr	r2, [pc, #504]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800640c:	6593      	str	r3, [r2, #88]	@ 0x58
 800640e:	4b7c      	ldr	r3, [pc, #496]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800641a:	2301      	movs	r3, #1
 800641c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800641e:	4b79      	ldr	r3, [pc, #484]	@ (8006604 <HAL_RCC_OscConfig+0x4bc>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d118      	bne.n	800645c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800642a:	4b76      	ldr	r3, [pc, #472]	@ (8006604 <HAL_RCC_OscConfig+0x4bc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a75      	ldr	r2, [pc, #468]	@ (8006604 <HAL_RCC_OscConfig+0x4bc>)
 8006430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006436:	f7fb fbc3 	bl	8001bc0 <HAL_GetTick>
 800643a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800643e:	f7fb fbbf 	bl	8001bc0 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e183      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006450:	4b6c      	ldr	r3, [pc, #432]	@ (8006604 <HAL_RCC_OscConfig+0x4bc>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d108      	bne.n	8006476 <HAL_RCC_OscConfig+0x32e>
 8006464:	4b66      	ldr	r3, [pc, #408]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646a:	4a65      	ldr	r2, [pc, #404]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006474:	e024      	b.n	80064c0 <HAL_RCC_OscConfig+0x378>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	2b05      	cmp	r3, #5
 800647c:	d110      	bne.n	80064a0 <HAL_RCC_OscConfig+0x358>
 800647e:	4b60      	ldr	r3, [pc, #384]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006484:	4a5e      	ldr	r2, [pc, #376]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006486:	f043 0304 	orr.w	r3, r3, #4
 800648a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800648e:	4b5c      	ldr	r3, [pc, #368]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006494:	4a5a      	ldr	r2, [pc, #360]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800649e:	e00f      	b.n	80064c0 <HAL_RCC_OscConfig+0x378>
 80064a0:	4b57      	ldr	r3, [pc, #348]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a6:	4a56      	ldr	r2, [pc, #344]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064b0:	4b53      	ldr	r3, [pc, #332]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b6:	4a52      	ldr	r2, [pc, #328]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80064b8:	f023 0304 	bic.w	r3, r3, #4
 80064bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d016      	beq.n	80064f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c8:	f7fb fb7a 	bl	8001bc0 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ce:	e00a      	b.n	80064e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d0:	f7fb fb76 	bl	8001bc0 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e138      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064e6:	4b46      	ldr	r3, [pc, #280]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80064e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0ed      	beq.n	80064d0 <HAL_RCC_OscConfig+0x388>
 80064f4:	e015      	b.n	8006522 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f6:	f7fb fb63 	bl	8001bc0 <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064fc:	e00a      	b.n	8006514 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064fe:	f7fb fb5f 	bl	8001bc0 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800650c:	4293      	cmp	r3, r2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e121      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006514:	4b3a      	ldr	r3, [pc, #232]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1ed      	bne.n	80064fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006522:	7ffb      	ldrb	r3, [r7, #31]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d105      	bne.n	8006534 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006528:	4b35      	ldr	r3, [pc, #212]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 800652a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800652c:	4a34      	ldr	r2, [pc, #208]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 800652e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006532:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d03c      	beq.n	80065ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01c      	beq.n	8006582 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006548:	4b2d      	ldr	r3, [pc, #180]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 800654a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800654e:	4a2c      	ldr	r2, [pc, #176]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006558:	f7fb fb32 	bl	8001bc0 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006560:	f7fb fb2e 	bl	8001bc0 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e0f2      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006572:	4b23      	ldr	r3, [pc, #140]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006574:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0ef      	beq.n	8006560 <HAL_RCC_OscConfig+0x418>
 8006580:	e01b      	b.n	80065ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006582:	4b1f      	ldr	r3, [pc, #124]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006584:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006588:	4a1d      	ldr	r2, [pc, #116]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006592:	f7fb fb15 	bl	8001bc0 <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800659a:	f7fb fb11 	bl	8001bc0 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e0d5      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065ac:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80065ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1ef      	bne.n	800659a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80c9 	beq.w	8006756 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 030c 	and.w	r3, r3, #12
 80065cc:	2b0c      	cmp	r3, #12
 80065ce:	f000 8083 	beq.w	80066d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d15e      	bne.n	8006698 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065da:	4b09      	ldr	r3, [pc, #36]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a08      	ldr	r2, [pc, #32]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80065e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e6:	f7fb faeb 	bl	8001bc0 <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065ec:	e00c      	b.n	8006608 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ee:	f7fb fae7 	bl	8001bc0 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d905      	bls.n	8006608 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0ab      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
 8006600:	40021000 	.word	0x40021000
 8006604:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006608:	4b55      	ldr	r3, [pc, #340]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ec      	bne.n	80065ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006614:	4b52      	ldr	r3, [pc, #328]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	4b52      	ldr	r3, [pc, #328]	@ (8006764 <HAL_RCC_OscConfig+0x61c>)
 800661a:	4013      	ands	r3, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6a11      	ldr	r1, [r2, #32]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006624:	3a01      	subs	r2, #1
 8006626:	0112      	lsls	r2, r2, #4
 8006628:	4311      	orrs	r1, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800662e:	0212      	lsls	r2, r2, #8
 8006630:	4311      	orrs	r1, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006636:	0852      	lsrs	r2, r2, #1
 8006638:	3a01      	subs	r2, #1
 800663a:	0552      	lsls	r2, r2, #21
 800663c:	4311      	orrs	r1, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006642:	0852      	lsrs	r2, r2, #1
 8006644:	3a01      	subs	r2, #1
 8006646:	0652      	lsls	r2, r2, #25
 8006648:	4311      	orrs	r1, r2
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800664e:	06d2      	lsls	r2, r2, #27
 8006650:	430a      	orrs	r2, r1
 8006652:	4943      	ldr	r1, [pc, #268]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 8006654:	4313      	orrs	r3, r2
 8006656:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006658:	4b41      	ldr	r3, [pc, #260]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a40      	ldr	r2, [pc, #256]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800665e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006662:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006664:	4b3e      	ldr	r3, [pc, #248]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	4a3d      	ldr	r2, [pc, #244]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800666a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800666e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fb faa6 	bl	8001bc0 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006678:	f7fb faa2 	bl	8001bc0 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e066      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800668a:	4b35      	ldr	r3, [pc, #212]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0f0      	beq.n	8006678 <HAL_RCC_OscConfig+0x530>
 8006696:	e05e      	b.n	8006756 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006698:	4b31      	ldr	r3, [pc, #196]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a30      	ldr	r2, [pc, #192]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800669e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fb fa8c 	bl	8001bc0 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ac:	f7fb fa88 	bl	8001bc0 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e04c      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066be:	4b28      	ldr	r3, [pc, #160]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80066ca:	4b25      	ldr	r3, [pc, #148]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	4924      	ldr	r1, [pc, #144]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 80066d0:	4b25      	ldr	r3, [pc, #148]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	60cb      	str	r3, [r1, #12]
 80066d6:	e03e      	b.n	8006756 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e039      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80066e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f003 0203 	and.w	r2, r3, #3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d12c      	bne.n	8006752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006702:	3b01      	subs	r3, #1
 8006704:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006706:	429a      	cmp	r2, r3
 8006708:	d123      	bne.n	8006752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006716:	429a      	cmp	r2, r3
 8006718:	d11b      	bne.n	8006752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006724:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006726:	429a      	cmp	r2, r3
 8006728:	d113      	bne.n	8006752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	3b01      	subs	r3, #1
 8006738:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800673a:	429a      	cmp	r2, r3
 800673c:	d109      	bne.n	8006752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	3b01      	subs	r3, #1
 800674c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800674e:	429a      	cmp	r2, r3
 8006750:	d001      	beq.n	8006756 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40021000 	.word	0x40021000
 8006764:	019f800c 	.word	0x019f800c
 8006768:	feeefffc 	.word	0xfeeefffc

0800676c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e11e      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006784:	4b91      	ldr	r3, [pc, #580]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d910      	bls.n	80067b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006792:	4b8e      	ldr	r3, [pc, #568]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f023 020f 	bic.w	r2, r3, #15
 800679a:	498c      	ldr	r1, [pc, #560]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	4313      	orrs	r3, r2
 80067a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a2:	4b8a      	ldr	r3, [pc, #552]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d001      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e106      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d073      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d129      	bne.n	800681c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067c8:	4b81      	ldr	r3, [pc, #516]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e0f4      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80067d8:	f000 f966 	bl	8006aa8 <RCC_GetSysClockFreqFromPLLSource>
 80067dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	4a7c      	ldr	r2, [pc, #496]	@ (80069d4 <HAL_RCC_ClockConfig+0x268>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d93f      	bls.n	8006866 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80067e6:	4b7a      	ldr	r3, [pc, #488]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d033      	beq.n	8006866 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006802:	2b00      	cmp	r3, #0
 8006804:	d12f      	bne.n	8006866 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006806:	4b72      	ldr	r3, [pc, #456]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800680e:	4a70      	ldr	r2, [pc, #448]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006814:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006816:	2380      	movs	r3, #128	@ 0x80
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	e024      	b.n	8006866 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d107      	bne.n	8006834 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006824:	4b6a      	ldr	r3, [pc, #424]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e0c6      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006834:	4b66      	ldr	r3, [pc, #408]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e0be      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006844:	f000 f8ce 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 8006848:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	4a61      	ldr	r2, [pc, #388]	@ (80069d4 <HAL_RCC_ClockConfig+0x268>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d909      	bls.n	8006866 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006852:	4b5f      	ldr	r3, [pc, #380]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800685a:	4a5d      	ldr	r2, [pc, #372]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 800685c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006860:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006862:	2380      	movs	r3, #128	@ 0x80
 8006864:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006866:	4b5a      	ldr	r3, [pc, #360]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f023 0203 	bic.w	r2, r3, #3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4957      	ldr	r1, [pc, #348]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006874:	4313      	orrs	r3, r2
 8006876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006878:	f7fb f9a2 	bl	8001bc0 <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687e:	e00a      	b.n	8006896 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006880:	f7fb f99e 	bl	8001bc0 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800688e:	4293      	cmp	r3, r2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e095      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006896:	4b4e      	ldr	r3, [pc, #312]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 020c 	and.w	r2, r3, #12
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d1eb      	bne.n	8006880 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d023      	beq.n	80068fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068c0:	4b43      	ldr	r3, [pc, #268]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	4a42      	ldr	r2, [pc, #264]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80068ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d007      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80068d8:	4b3d      	ldr	r3, [pc, #244]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068e0:	4a3b      	ldr	r2, [pc, #236]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80068e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e8:	4b39      	ldr	r3, [pc, #228]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	4936      	ldr	r1, [pc, #216]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	608b      	str	r3, [r1, #8]
 80068fa:	e008      	b.n	800690e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2b80      	cmp	r3, #128	@ 0x80
 8006900:	d105      	bne.n	800690e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006902:	4b33      	ldr	r3, [pc, #204]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	4a32      	ldr	r2, [pc, #200]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006908:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800690c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800690e:	4b2f      	ldr	r3, [pc, #188]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d21d      	bcs.n	8006958 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691c:	4b2b      	ldr	r3, [pc, #172]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f023 020f 	bic.w	r2, r3, #15
 8006924:	4929      	ldr	r1, [pc, #164]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	4313      	orrs	r3, r2
 800692a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800692c:	f7fb f948 	bl	8001bc0 <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006932:	e00a      	b.n	800694a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006934:	f7fb f944 	bl	8001bc0 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e03b      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800694a:	4b20      	ldr	r3, [pc, #128]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d1ed      	bne.n	8006934 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006964:	4b1a      	ldr	r3, [pc, #104]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4917      	ldr	r1, [pc, #92]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006972:	4313      	orrs	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006982:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	490f      	ldr	r1, [pc, #60]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006992:	4313      	orrs	r3, r2
 8006994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006996:	f000 f825 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 800699a:	4602      	mov	r2, r0
 800699c:	4b0c      	ldr	r3, [pc, #48]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	091b      	lsrs	r3, r3, #4
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	490c      	ldr	r1, [pc, #48]	@ (80069d8 <HAL_RCC_ClockConfig+0x26c>)
 80069a8:	5ccb      	ldrb	r3, [r1, r3]
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	fa22 f303 	lsr.w	r3, r2, r3
 80069b2:	4a0a      	ldr	r2, [pc, #40]	@ (80069dc <HAL_RCC_ClockConfig+0x270>)
 80069b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80069b6:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <HAL_RCC_ClockConfig+0x274>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fb f8b4 	bl	8001b28 <HAL_InitTick>
 80069c0:	4603      	mov	r3, r0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40022000 	.word	0x40022000
 80069d0:	40021000 	.word	0x40021000
 80069d4:	04c4b400 	.word	0x04c4b400
 80069d8:	0800efa8 	.word	0x0800efa8
 80069dc:	20000000 	.word	0x20000000
 80069e0:	20000004 	.word	0x20000004

080069e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80069ea:	4b2c      	ldr	r3, [pc, #176]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d102      	bne.n	80069fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069f6:	4b2a      	ldr	r3, [pc, #168]	@ (8006aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	e047      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80069fc:	4b27      	ldr	r3, [pc, #156]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 030c 	and.w	r3, r3, #12
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d102      	bne.n	8006a0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a08:	4b26      	ldr	r3, [pc, #152]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	e03e      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006a0e:	4b23      	ldr	r3, [pc, #140]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f003 030c 	and.w	r3, r3, #12
 8006a16:	2b0c      	cmp	r3, #12
 8006a18:	d136      	bne.n	8006a88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a1a:	4b20      	ldr	r3, [pc, #128]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a24:	4b1d      	ldr	r3, [pc, #116]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	091b      	lsrs	r3, r3, #4
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d10c      	bne.n	8006a52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a38:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	4a16      	ldr	r2, [pc, #88]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a42:	68d2      	ldr	r2, [r2, #12]
 8006a44:	0a12      	lsrs	r2, r2, #8
 8006a46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a4a:	fb02 f303 	mul.w	r3, r2, r3
 8006a4e:	617b      	str	r3, [r7, #20]
      break;
 8006a50:	e00c      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a52:	4a13      	ldr	r2, [pc, #76]	@ (8006aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	4a10      	ldr	r2, [pc, #64]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a5c:	68d2      	ldr	r2, [r2, #12]
 8006a5e:	0a12      	lsrs	r2, r2, #8
 8006a60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a64:	fb02 f303 	mul.w	r3, r2, r3
 8006a68:	617b      	str	r3, [r7, #20]
      break;
 8006a6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	0e5b      	lsrs	r3, r3, #25
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	3301      	adds	r3, #1
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	e001      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006a8c:	693b      	ldr	r3, [r7, #16]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40021000 	.word	0x40021000
 8006aa0:	00f42400 	.word	0x00f42400
 8006aa4:	007a1200 	.word	0x007a1200

08006aa8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006aae:	4b1e      	ldr	r3, [pc, #120]	@ (8006b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	091b      	lsrs	r3, r3, #4
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d10c      	bne.n	8006ae6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006acc:	4a17      	ldr	r2, [pc, #92]	@ (8006b2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	4a14      	ldr	r2, [pc, #80]	@ (8006b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ad6:	68d2      	ldr	r2, [r2, #12]
 8006ad8:	0a12      	lsrs	r2, r2, #8
 8006ada:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ade:	fb02 f303 	mul.w	r3, r2, r3
 8006ae2:	617b      	str	r3, [r7, #20]
    break;
 8006ae4:	e00c      	b.n	8006b00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ae6:	4a12      	ldr	r2, [pc, #72]	@ (8006b30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aee:	4a0e      	ldr	r2, [pc, #56]	@ (8006b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006af0:	68d2      	ldr	r2, [r2, #12]
 8006af2:	0a12      	lsrs	r2, r2, #8
 8006af4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006af8:	fb02 f303 	mul.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]
    break;
 8006afe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b00:	4b09      	ldr	r3, [pc, #36]	@ (8006b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	0e5b      	lsrs	r3, r3, #25
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006b1a:	687b      	ldr	r3, [r7, #4]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	007a1200 	.word	0x007a1200
 8006b30:	00f42400 	.word	0x00f42400

08006b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b40:	2300      	movs	r3, #0
 8006b42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8098 	beq.w	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b52:	2300      	movs	r3, #0
 8006b54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b56:	4b43      	ldr	r3, [pc, #268]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10d      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b62:	4b40      	ldr	r3, [pc, #256]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b66:	4a3f      	ldr	r2, [pc, #252]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b76:	60bb      	str	r3, [r7, #8]
 8006b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a39      	ldr	r2, [pc, #228]	@ (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b8a:	f7fb f819 	bl	8001bc0 <HAL_GetTick>
 8006b8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b90:	e009      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b92:	f7fb f815 	bl	8001bc0 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d902      	bls.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	74fb      	strb	r3, [r7, #19]
        break;
 8006ba4:	e005      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ba6:	4b30      	ldr	r3, [pc, #192]	@ (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0ef      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006bb2:	7cfb      	ldrb	r3, [r7, #19]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d159      	bne.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d01e      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d019      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bd4:	4b23      	ldr	r3, [pc, #140]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006be0:	4b20      	ldr	r3, [pc, #128]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be6:	4a1f      	ldr	r2, [pc, #124]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c00:	4a18      	ldr	r2, [pc, #96]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d016      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c12:	f7fa ffd5 	bl	8001bc0 <HAL_GetTick>
 8006c16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c18:	e00b      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1a:	f7fa ffd1 	bl	8001bc0 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d902      	bls.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	74fb      	strb	r3, [r7, #19]
            break;
 8006c30:	e006      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c32:	4b0c      	ldr	r3, [pc, #48]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0ec      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006c40:	7cfb      	ldrb	r3, [r7, #19]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10b      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c46:	4b07      	ldr	r3, [pc, #28]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c54:	4903      	ldr	r1, [pc, #12]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c5c:	e008      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c5e:	7cfb      	ldrb	r3, [r7, #19]
 8006c60:	74bb      	strb	r3, [r7, #18]
 8006c62:	e005      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c64:	40021000 	.word	0x40021000
 8006c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6c:	7cfb      	ldrb	r3, [r7, #19]
 8006c6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c70:	7c7b      	ldrb	r3, [r7, #17]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d105      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c76:	4ba7      	ldr	r3, [pc, #668]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c7a:	4aa6      	ldr	r2, [pc, #664]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c8e:	4ba1      	ldr	r3, [pc, #644]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c94:	f023 0203 	bic.w	r2, r3, #3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	499d      	ldr	r1, [pc, #628]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cb0:	4b98      	ldr	r3, [pc, #608]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb6:	f023 020c 	bic.w	r2, r3, #12
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	4995      	ldr	r1, [pc, #596]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cd2:	4b90      	ldr	r3, [pc, #576]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	498c      	ldr	r1, [pc, #560]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cf4:	4b87      	ldr	r3, [pc, #540]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	4984      	ldr	r1, [pc, #528]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d16:	4b7f      	ldr	r3, [pc, #508]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	497b      	ldr	r1, [pc, #492]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0320 	and.w	r3, r3, #32
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d38:	4b76      	ldr	r3, [pc, #472]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	4973      	ldr	r1, [pc, #460]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	496a      	ldr	r1, [pc, #424]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d7c:	4b65      	ldr	r3, [pc, #404]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	4962      	ldr	r1, [pc, #392]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dac:	4959      	ldr	r1, [pc, #356]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dc0:	4b54      	ldr	r3, [pc, #336]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006dc6:	f023 0203 	bic.w	r2, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	4951      	ldr	r1, [pc, #324]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006de2:	4b4c      	ldr	r3, [pc, #304]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df0:	4948      	ldr	r1, [pc, #288]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d015      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e04:	4b43      	ldr	r3, [pc, #268]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e12:	4940      	ldr	r1, [pc, #256]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e22:	d105      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e24:	4b3b      	ldr	r3, [pc, #236]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4a3a      	ldr	r2, [pc, #232]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d015      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e3c:	4b35      	ldr	r3, [pc, #212]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4a:	4932      	ldr	r1, [pc, #200]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e5a:	d105      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4a2c      	ldr	r2, [pc, #176]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d015      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e74:	4b27      	ldr	r3, [pc, #156]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	4924      	ldr	r1, [pc, #144]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e92:	d105      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e94:	4b1f      	ldr	r3, [pc, #124]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4a1e      	ldr	r2, [pc, #120]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d015      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006eac:	4b19      	ldr	r3, [pc, #100]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eba:	4916      	ldr	r1, [pc, #88]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eca:	d105      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ecc:	4b11      	ldr	r3, [pc, #68]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4a10      	ldr	r2, [pc, #64]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ed6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d019      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef2:	4908      	ldr	r1, [pc, #32]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f02:	d109      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f04:	4b03      	ldr	r3, [pc, #12]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	4a02      	ldr	r2, [pc, #8]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f0e:	60d3      	str	r3, [r2, #12]
 8006f10:	e002      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006f12:	bf00      	nop
 8006f14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d015      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006f24:	4b29      	ldr	r3, [pc, #164]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f32:	4926      	ldr	r1, [pc, #152]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f42:	d105      	bne.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f44:	4b21      	ldr	r3, [pc, #132]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4a20      	ldr	r2, [pc, #128]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d015      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f62:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f6a:	4918      	ldr	r1, [pc, #96]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7a:	d105      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f7c:	4b13      	ldr	r3, [pc, #76]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	4a12      	ldr	r2, [pc, #72]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d015      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f94:	4b0d      	ldr	r3, [pc, #52]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa2:	490a      	ldr	r1, [pc, #40]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fb2:	d105      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb4:	4b05      	ldr	r3, [pc, #20]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	4a04      	ldr	r2, [pc, #16]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006fc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40021000 	.word	0x40021000

08006fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e049      	b.n	8007076 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fa fa24 	bl	8001444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3304      	adds	r3, #4
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f001 fe08 	bl	8008c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d001      	beq.n	8007098 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e04c      	b.n	8007132 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a26      	ldr	r2, [pc, #152]	@ (8007140 <HAL_TIM_Base_Start+0xc0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d022      	beq.n	80070f0 <HAL_TIM_Base_Start+0x70>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b2:	d01d      	beq.n	80070f0 <HAL_TIM_Base_Start+0x70>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a22      	ldr	r2, [pc, #136]	@ (8007144 <HAL_TIM_Base_Start+0xc4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d018      	beq.n	80070f0 <HAL_TIM_Base_Start+0x70>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a21      	ldr	r2, [pc, #132]	@ (8007148 <HAL_TIM_Base_Start+0xc8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <HAL_TIM_Base_Start+0x70>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1f      	ldr	r2, [pc, #124]	@ (800714c <HAL_TIM_Base_Start+0xcc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00e      	beq.n	80070f0 <HAL_TIM_Base_Start+0x70>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007150 <HAL_TIM_Base_Start+0xd0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d009      	beq.n	80070f0 <HAL_TIM_Base_Start+0x70>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007154 <HAL_TIM_Base_Start+0xd4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <HAL_TIM_Base_Start+0x70>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007158 <HAL_TIM_Base_Start+0xd8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d115      	bne.n	800711c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	4b19      	ldr	r3, [pc, #100]	@ (800715c <HAL_TIM_Base_Start+0xdc>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b06      	cmp	r3, #6
 8007100:	d015      	beq.n	800712e <HAL_TIM_Base_Start+0xae>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007108:	d011      	beq.n	800712e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711a:	e008      	b.n	800712e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	e000      	b.n	8007130 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40013400 	.word	0x40013400
 8007154:	40014000 	.word	0x40014000
 8007158:	40015000 	.word	0x40015000
 800715c:	00010007 	.word	0x00010007

08007160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b01      	cmp	r3, #1
 8007172:	d001      	beq.n	8007178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e054      	b.n	8007222 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a26      	ldr	r2, [pc, #152]	@ (8007230 <HAL_TIM_Base_Start_IT+0xd0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d022      	beq.n	80071e0 <HAL_TIM_Base_Start_IT+0x80>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a2:	d01d      	beq.n	80071e0 <HAL_TIM_Base_Start_IT+0x80>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a22      	ldr	r2, [pc, #136]	@ (8007234 <HAL_TIM_Base_Start_IT+0xd4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d018      	beq.n	80071e0 <HAL_TIM_Base_Start_IT+0x80>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a21      	ldr	r2, [pc, #132]	@ (8007238 <HAL_TIM_Base_Start_IT+0xd8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d013      	beq.n	80071e0 <HAL_TIM_Base_Start_IT+0x80>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1f      	ldr	r2, [pc, #124]	@ (800723c <HAL_TIM_Base_Start_IT+0xdc>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00e      	beq.n	80071e0 <HAL_TIM_Base_Start_IT+0x80>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007240 <HAL_TIM_Base_Start_IT+0xe0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d009      	beq.n	80071e0 <HAL_TIM_Base_Start_IT+0x80>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007244 <HAL_TIM_Base_Start_IT+0xe4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d004      	beq.n	80071e0 <HAL_TIM_Base_Start_IT+0x80>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1b      	ldr	r2, [pc, #108]	@ (8007248 <HAL_TIM_Base_Start_IT+0xe8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d115      	bne.n	800720c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	4b19      	ldr	r3, [pc, #100]	@ (800724c <HAL_TIM_Base_Start_IT+0xec>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b06      	cmp	r3, #6
 80071f0:	d015      	beq.n	800721e <HAL_TIM_Base_Start_IT+0xbe>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f8:	d011      	beq.n	800721e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0201 	orr.w	r2, r2, #1
 8007208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720a:	e008      	b.n	800721e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	e000      	b.n	8007220 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800721e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	40012c00 	.word	0x40012c00
 8007234:	40000400 	.word	0x40000400
 8007238:	40000800 	.word	0x40000800
 800723c:	40000c00 	.word	0x40000c00
 8007240:	40013400 	.word	0x40013400
 8007244:	40014000 	.word	0x40014000
 8007248:	40015000 	.word	0x40015000
 800724c:	00010007 	.word	0x00010007

08007250 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e049      	b.n	80072f6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f841 	bl	80072fe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3304      	adds	r3, #4
 800728c:	4619      	mov	r1, r3
 800728e:	4610      	mov	r0, r2
 8007290:	f001 fcc8 	bl	8008c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
	...

08007314 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <HAL_TIM_OC_Start+0x24>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b01      	cmp	r3, #1
 800732e:	bf14      	ite	ne
 8007330:	2301      	movne	r3, #1
 8007332:	2300      	moveq	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	e03c      	b.n	80073b2 <HAL_TIM_OC_Start+0x9e>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b04      	cmp	r3, #4
 800733c:	d109      	bne.n	8007352 <HAL_TIM_OC_Start+0x3e>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b01      	cmp	r3, #1
 8007348:	bf14      	ite	ne
 800734a:	2301      	movne	r3, #1
 800734c:	2300      	moveq	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	e02f      	b.n	80073b2 <HAL_TIM_OC_Start+0x9e>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d109      	bne.n	800736c <HAL_TIM_OC_Start+0x58>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	bf14      	ite	ne
 8007364:	2301      	movne	r3, #1
 8007366:	2300      	moveq	r3, #0
 8007368:	b2db      	uxtb	r3, r3
 800736a:	e022      	b.n	80073b2 <HAL_TIM_OC_Start+0x9e>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b0c      	cmp	r3, #12
 8007370:	d109      	bne.n	8007386 <HAL_TIM_OC_Start+0x72>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b01      	cmp	r3, #1
 800737c:	bf14      	ite	ne
 800737e:	2301      	movne	r3, #1
 8007380:	2300      	moveq	r3, #0
 8007382:	b2db      	uxtb	r3, r3
 8007384:	e015      	b.n	80073b2 <HAL_TIM_OC_Start+0x9e>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b10      	cmp	r3, #16
 800738a:	d109      	bne.n	80073a0 <HAL_TIM_OC_Start+0x8c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b01      	cmp	r3, #1
 8007396:	bf14      	ite	ne
 8007398:	2301      	movne	r3, #1
 800739a:	2300      	moveq	r3, #0
 800739c:	b2db      	uxtb	r3, r3
 800739e:	e008      	b.n	80073b2 <HAL_TIM_OC_Start+0x9e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	bf14      	ite	ne
 80073ac:	2301      	movne	r3, #1
 80073ae:	2300      	moveq	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e0a6      	b.n	8007508 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <HAL_TIM_OC_Start+0xb6>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073c8:	e023      	b.n	8007412 <HAL_TIM_OC_Start+0xfe>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d104      	bne.n	80073da <HAL_TIM_OC_Start+0xc6>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073d8:	e01b      	b.n	8007412 <HAL_TIM_OC_Start+0xfe>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d104      	bne.n	80073ea <HAL_TIM_OC_Start+0xd6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073e8:	e013      	b.n	8007412 <HAL_TIM_OC_Start+0xfe>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b0c      	cmp	r3, #12
 80073ee:	d104      	bne.n	80073fa <HAL_TIM_OC_Start+0xe6>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073f8:	e00b      	b.n	8007412 <HAL_TIM_OC_Start+0xfe>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b10      	cmp	r3, #16
 80073fe:	d104      	bne.n	800740a <HAL_TIM_OC_Start+0xf6>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007408:	e003      	b.n	8007412 <HAL_TIM_OC_Start+0xfe>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2202      	movs	r2, #2
 800740e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2201      	movs	r2, #1
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f002 fa86 	bl	800992c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a3a      	ldr	r2, [pc, #232]	@ (8007510 <HAL_TIM_OC_Start+0x1fc>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d018      	beq.n	800745c <HAL_TIM_OC_Start+0x148>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a39      	ldr	r2, [pc, #228]	@ (8007514 <HAL_TIM_OC_Start+0x200>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d013      	beq.n	800745c <HAL_TIM_OC_Start+0x148>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a37      	ldr	r2, [pc, #220]	@ (8007518 <HAL_TIM_OC_Start+0x204>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00e      	beq.n	800745c <HAL_TIM_OC_Start+0x148>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a36      	ldr	r2, [pc, #216]	@ (800751c <HAL_TIM_OC_Start+0x208>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d009      	beq.n	800745c <HAL_TIM_OC_Start+0x148>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a34      	ldr	r2, [pc, #208]	@ (8007520 <HAL_TIM_OC_Start+0x20c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d004      	beq.n	800745c <HAL_TIM_OC_Start+0x148>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a33      	ldr	r2, [pc, #204]	@ (8007524 <HAL_TIM_OC_Start+0x210>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d101      	bne.n	8007460 <HAL_TIM_OC_Start+0x14c>
 800745c:	2301      	movs	r3, #1
 800745e:	e000      	b.n	8007462 <HAL_TIM_OC_Start+0x14e>
 8007460:	2300      	movs	r3, #0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007474:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a25      	ldr	r2, [pc, #148]	@ (8007510 <HAL_TIM_OC_Start+0x1fc>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d022      	beq.n	80074c6 <HAL_TIM_OC_Start+0x1b2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007488:	d01d      	beq.n	80074c6 <HAL_TIM_OC_Start+0x1b2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a26      	ldr	r2, [pc, #152]	@ (8007528 <HAL_TIM_OC_Start+0x214>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d018      	beq.n	80074c6 <HAL_TIM_OC_Start+0x1b2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a24      	ldr	r2, [pc, #144]	@ (800752c <HAL_TIM_OC_Start+0x218>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d013      	beq.n	80074c6 <HAL_TIM_OC_Start+0x1b2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a23      	ldr	r2, [pc, #140]	@ (8007530 <HAL_TIM_OC_Start+0x21c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d00e      	beq.n	80074c6 <HAL_TIM_OC_Start+0x1b2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a19      	ldr	r2, [pc, #100]	@ (8007514 <HAL_TIM_OC_Start+0x200>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d009      	beq.n	80074c6 <HAL_TIM_OC_Start+0x1b2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a18      	ldr	r2, [pc, #96]	@ (8007518 <HAL_TIM_OC_Start+0x204>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d004      	beq.n	80074c6 <HAL_TIM_OC_Start+0x1b2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a18      	ldr	r2, [pc, #96]	@ (8007524 <HAL_TIM_OC_Start+0x210>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d115      	bne.n	80074f2 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	4b19      	ldr	r3, [pc, #100]	@ (8007534 <HAL_TIM_OC_Start+0x220>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b06      	cmp	r3, #6
 80074d6:	d015      	beq.n	8007504 <HAL_TIM_OC_Start+0x1f0>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074de:	d011      	beq.n	8007504 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f0:	e008      	b.n	8007504 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0201 	orr.w	r2, r2, #1
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	e000      	b.n	8007506 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007504:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40012c00 	.word	0x40012c00
 8007514:	40013400 	.word	0x40013400
 8007518:	40014000 	.word	0x40014000
 800751c:	40014400 	.word	0x40014400
 8007520:	40014800 	.word	0x40014800
 8007524:	40015000 	.word	0x40015000
 8007528:	40000400 	.word	0x40000400
 800752c:	40000800 	.word	0x40000800
 8007530:	40000c00 	.word	0x40000c00
 8007534:	00010007 	.word	0x00010007

08007538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e049      	b.n	80075de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f841 	bl	80075e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3304      	adds	r3, #4
 8007574:	4619      	mov	r1, r3
 8007576:	4610      	mov	r0, r2
 8007578:	f001 fb54 	bl	8008c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d109      	bne.n	8007620 <HAL_TIM_PWM_Start+0x24>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b01      	cmp	r3, #1
 8007616:	bf14      	ite	ne
 8007618:	2301      	movne	r3, #1
 800761a:	2300      	moveq	r3, #0
 800761c:	b2db      	uxtb	r3, r3
 800761e:	e03c      	b.n	800769a <HAL_TIM_PWM_Start+0x9e>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2b04      	cmp	r3, #4
 8007624:	d109      	bne.n	800763a <HAL_TIM_PWM_Start+0x3e>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b01      	cmp	r3, #1
 8007630:	bf14      	ite	ne
 8007632:	2301      	movne	r3, #1
 8007634:	2300      	moveq	r3, #0
 8007636:	b2db      	uxtb	r3, r3
 8007638:	e02f      	b.n	800769a <HAL_TIM_PWM_Start+0x9e>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b08      	cmp	r3, #8
 800763e:	d109      	bne.n	8007654 <HAL_TIM_PWM_Start+0x58>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b01      	cmp	r3, #1
 800764a:	bf14      	ite	ne
 800764c:	2301      	movne	r3, #1
 800764e:	2300      	moveq	r3, #0
 8007650:	b2db      	uxtb	r3, r3
 8007652:	e022      	b.n	800769a <HAL_TIM_PWM_Start+0x9e>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b0c      	cmp	r3, #12
 8007658:	d109      	bne.n	800766e <HAL_TIM_PWM_Start+0x72>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b01      	cmp	r3, #1
 8007664:	bf14      	ite	ne
 8007666:	2301      	movne	r3, #1
 8007668:	2300      	moveq	r3, #0
 800766a:	b2db      	uxtb	r3, r3
 800766c:	e015      	b.n	800769a <HAL_TIM_PWM_Start+0x9e>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b10      	cmp	r3, #16
 8007672:	d109      	bne.n	8007688 <HAL_TIM_PWM_Start+0x8c>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b01      	cmp	r3, #1
 800767e:	bf14      	ite	ne
 8007680:	2301      	movne	r3, #1
 8007682:	2300      	moveq	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	e008      	b.n	800769a <HAL_TIM_PWM_Start+0x9e>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	bf14      	ite	ne
 8007694:	2301      	movne	r3, #1
 8007696:	2300      	moveq	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e0a6      	b.n	80077f0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <HAL_TIM_PWM_Start+0xb6>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076b0:	e023      	b.n	80076fa <HAL_TIM_PWM_Start+0xfe>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b04      	cmp	r3, #4
 80076b6:	d104      	bne.n	80076c2 <HAL_TIM_PWM_Start+0xc6>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076c0:	e01b      	b.n	80076fa <HAL_TIM_PWM_Start+0xfe>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d104      	bne.n	80076d2 <HAL_TIM_PWM_Start+0xd6>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076d0:	e013      	b.n	80076fa <HAL_TIM_PWM_Start+0xfe>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b0c      	cmp	r3, #12
 80076d6:	d104      	bne.n	80076e2 <HAL_TIM_PWM_Start+0xe6>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076e0:	e00b      	b.n	80076fa <HAL_TIM_PWM_Start+0xfe>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b10      	cmp	r3, #16
 80076e6:	d104      	bne.n	80076f2 <HAL_TIM_PWM_Start+0xf6>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076f0:	e003      	b.n	80076fa <HAL_TIM_PWM_Start+0xfe>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2201      	movs	r2, #1
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f002 f912 	bl	800992c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a3a      	ldr	r2, [pc, #232]	@ (80077f8 <HAL_TIM_PWM_Start+0x1fc>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d018      	beq.n	8007744 <HAL_TIM_PWM_Start+0x148>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a39      	ldr	r2, [pc, #228]	@ (80077fc <HAL_TIM_PWM_Start+0x200>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d013      	beq.n	8007744 <HAL_TIM_PWM_Start+0x148>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a37      	ldr	r2, [pc, #220]	@ (8007800 <HAL_TIM_PWM_Start+0x204>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00e      	beq.n	8007744 <HAL_TIM_PWM_Start+0x148>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a36      	ldr	r2, [pc, #216]	@ (8007804 <HAL_TIM_PWM_Start+0x208>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d009      	beq.n	8007744 <HAL_TIM_PWM_Start+0x148>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a34      	ldr	r2, [pc, #208]	@ (8007808 <HAL_TIM_PWM_Start+0x20c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d004      	beq.n	8007744 <HAL_TIM_PWM_Start+0x148>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a33      	ldr	r2, [pc, #204]	@ (800780c <HAL_TIM_PWM_Start+0x210>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d101      	bne.n	8007748 <HAL_TIM_PWM_Start+0x14c>
 8007744:	2301      	movs	r3, #1
 8007746:	e000      	b.n	800774a <HAL_TIM_PWM_Start+0x14e>
 8007748:	2300      	movs	r3, #0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d007      	beq.n	800775e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800775c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a25      	ldr	r2, [pc, #148]	@ (80077f8 <HAL_TIM_PWM_Start+0x1fc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d022      	beq.n	80077ae <HAL_TIM_PWM_Start+0x1b2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007770:	d01d      	beq.n	80077ae <HAL_TIM_PWM_Start+0x1b2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a26      	ldr	r2, [pc, #152]	@ (8007810 <HAL_TIM_PWM_Start+0x214>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d018      	beq.n	80077ae <HAL_TIM_PWM_Start+0x1b2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a24      	ldr	r2, [pc, #144]	@ (8007814 <HAL_TIM_PWM_Start+0x218>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_TIM_PWM_Start+0x1b2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a23      	ldr	r2, [pc, #140]	@ (8007818 <HAL_TIM_PWM_Start+0x21c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <HAL_TIM_PWM_Start+0x1b2>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a19      	ldr	r2, [pc, #100]	@ (80077fc <HAL_TIM_PWM_Start+0x200>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_TIM_PWM_Start+0x1b2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a18      	ldr	r2, [pc, #96]	@ (8007800 <HAL_TIM_PWM_Start+0x204>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_TIM_PWM_Start+0x1b2>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a18      	ldr	r2, [pc, #96]	@ (800780c <HAL_TIM_PWM_Start+0x210>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d115      	bne.n	80077da <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	4b19      	ldr	r3, [pc, #100]	@ (800781c <HAL_TIM_PWM_Start+0x220>)
 80077b6:	4013      	ands	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b06      	cmp	r3, #6
 80077be:	d015      	beq.n	80077ec <HAL_TIM_PWM_Start+0x1f0>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077c6:	d011      	beq.n	80077ec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d8:	e008      	b.n	80077ec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f042 0201 	orr.w	r2, r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	e000      	b.n	80077ee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	40012c00 	.word	0x40012c00
 80077fc:	40013400 	.word	0x40013400
 8007800:	40014000 	.word	0x40014000
 8007804:	40014400 	.word	0x40014400
 8007808:	40014800 	.word	0x40014800
 800780c:	40015000 	.word	0x40015000
 8007810:	40000400 	.word	0x40000400
 8007814:	40000800 	.word	0x40000800
 8007818:	40000c00 	.word	0x40000c00
 800781c:	00010007 	.word	0x00010007

08007820 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d109      	bne.n	800784c <HAL_TIM_PWM_Start_DMA+0x2c>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	bf0c      	ite	eq
 8007844:	2301      	moveq	r3, #1
 8007846:	2300      	movne	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	e03c      	b.n	80078c6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b04      	cmp	r3, #4
 8007850:	d109      	bne.n	8007866 <HAL_TIM_PWM_Start_DMA+0x46>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	bf0c      	ite	eq
 800785e:	2301      	moveq	r3, #1
 8007860:	2300      	movne	r3, #0
 8007862:	b2db      	uxtb	r3, r3
 8007864:	e02f      	b.n	80078c6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b08      	cmp	r3, #8
 800786a:	d109      	bne.n	8007880 <HAL_TIM_PWM_Start_DMA+0x60>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	bf0c      	ite	eq
 8007878:	2301      	moveq	r3, #1
 800787a:	2300      	movne	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	e022      	b.n	80078c6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b0c      	cmp	r3, #12
 8007884:	d109      	bne.n	800789a <HAL_TIM_PWM_Start_DMA+0x7a>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	bf0c      	ite	eq
 8007892:	2301      	moveq	r3, #1
 8007894:	2300      	movne	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	e015      	b.n	80078c6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b10      	cmp	r3, #16
 800789e:	d109      	bne.n	80078b4 <HAL_TIM_PWM_Start_DMA+0x94>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	bf0c      	ite	eq
 80078ac:	2301      	moveq	r3, #1
 80078ae:	2300      	movne	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	e008      	b.n	80078c6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80078ca:	2302      	movs	r3, #2
 80078cc:	e1b5      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d109      	bne.n	80078e8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b01      	cmp	r3, #1
 80078de:	bf0c      	ite	eq
 80078e0:	2301      	moveq	r3, #1
 80078e2:	2300      	movne	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	e03c      	b.n	8007962 <HAL_TIM_PWM_Start_DMA+0x142>
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d109      	bne.n	8007902 <HAL_TIM_PWM_Start_DMA+0xe2>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	bf0c      	ite	eq
 80078fa:	2301      	moveq	r3, #1
 80078fc:	2300      	movne	r3, #0
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	e02f      	b.n	8007962 <HAL_TIM_PWM_Start_DMA+0x142>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b08      	cmp	r3, #8
 8007906:	d109      	bne.n	800791c <HAL_TIM_PWM_Start_DMA+0xfc>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b01      	cmp	r3, #1
 8007912:	bf0c      	ite	eq
 8007914:	2301      	moveq	r3, #1
 8007916:	2300      	movne	r3, #0
 8007918:	b2db      	uxtb	r3, r3
 800791a:	e022      	b.n	8007962 <HAL_TIM_PWM_Start_DMA+0x142>
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b0c      	cmp	r3, #12
 8007920:	d109      	bne.n	8007936 <HAL_TIM_PWM_Start_DMA+0x116>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b01      	cmp	r3, #1
 800792c:	bf0c      	ite	eq
 800792e:	2301      	moveq	r3, #1
 8007930:	2300      	movne	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	e015      	b.n	8007962 <HAL_TIM_PWM_Start_DMA+0x142>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b10      	cmp	r3, #16
 800793a:	d109      	bne.n	8007950 <HAL_TIM_PWM_Start_DMA+0x130>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b01      	cmp	r3, #1
 8007946:	bf0c      	ite	eq
 8007948:	2301      	moveq	r3, #1
 800794a:	2300      	movne	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	e008      	b.n	8007962 <HAL_TIM_PWM_Start_DMA+0x142>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	bf0c      	ite	eq
 800795c:	2301      	moveq	r3, #1
 800795e:	2300      	movne	r3, #0
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d034      	beq.n	80079d0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_TIM_PWM_Start_DMA+0x152>
 800796c:	887b      	ldrh	r3, [r7, #2]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e161      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <HAL_TIM_PWM_Start_DMA+0x166>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007984:	e026      	b.n	80079d4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b04      	cmp	r3, #4
 800798a:	d104      	bne.n	8007996 <HAL_TIM_PWM_Start_DMA+0x176>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007994:	e01e      	b.n	80079d4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b08      	cmp	r3, #8
 800799a:	d104      	bne.n	80079a6 <HAL_TIM_PWM_Start_DMA+0x186>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079a4:	e016      	b.n	80079d4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b0c      	cmp	r3, #12
 80079aa:	d104      	bne.n	80079b6 <HAL_TIM_PWM_Start_DMA+0x196>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079b4:	e00e      	b.n	80079d4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b10      	cmp	r3, #16
 80079ba:	d104      	bne.n	80079c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079c4:	e006      	b.n	80079d4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2202      	movs	r2, #2
 80079ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079ce:	e001      	b.n	80079d4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e132      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b0c      	cmp	r3, #12
 80079d8:	f200 80ae 	bhi.w	8007b38 <HAL_TIM_PWM_Start_DMA+0x318>
 80079dc:	a201      	add	r2, pc, #4	@ (adr r2, 80079e4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	08007a19 	.word	0x08007a19
 80079e8:	08007b39 	.word	0x08007b39
 80079ec:	08007b39 	.word	0x08007b39
 80079f0:	08007b39 	.word	0x08007b39
 80079f4:	08007a61 	.word	0x08007a61
 80079f8:	08007b39 	.word	0x08007b39
 80079fc:	08007b39 	.word	0x08007b39
 8007a00:	08007b39 	.word	0x08007b39
 8007a04:	08007aa9 	.word	0x08007aa9
 8007a08:	08007b39 	.word	0x08007b39
 8007a0c:	08007b39 	.word	0x08007b39
 8007a10:	08007b39 	.word	0x08007b39
 8007a14:	08007af1 	.word	0x08007af1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1c:	4a89      	ldr	r2, [pc, #548]	@ (8007c44 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a24:	4a88      	ldr	r2, [pc, #544]	@ (8007c48 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007a26:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2c:	4a87      	ldr	r2, [pc, #540]	@ (8007c4c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007a2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3334      	adds	r3, #52	@ 0x34
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	887b      	ldrh	r3, [r7, #2]
 8007a40:	f7fc f912 	bl	8003c68 <HAL_DMA_Start_IT>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e0f5      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a5c:	60da      	str	r2, [r3, #12]
      break;
 8007a5e:	e06e      	b.n	8007b3e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a64:	4a77      	ldr	r2, [pc, #476]	@ (8007c44 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007a66:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6c:	4a76      	ldr	r2, [pc, #472]	@ (8007c48 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007a6e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a74:	4a75      	ldr	r2, [pc, #468]	@ (8007c4c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007a76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007a7c:	6879      	ldr	r1, [r7, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3338      	adds	r3, #56	@ 0x38
 8007a84:	461a      	mov	r2, r3
 8007a86:	887b      	ldrh	r3, [r7, #2]
 8007a88:	f7fc f8ee 	bl	8003c68 <HAL_DMA_Start_IT>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e0d1      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007aa4:	60da      	str	r2, [r3, #12]
      break;
 8007aa6:	e04a      	b.n	8007b3e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aac:	4a65      	ldr	r2, [pc, #404]	@ (8007c44 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007aae:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	4a64      	ldr	r2, [pc, #400]	@ (8007c48 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007ab6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abc:	4a63      	ldr	r2, [pc, #396]	@ (8007c4c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007abe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	333c      	adds	r3, #60	@ 0x3c
 8007acc:	461a      	mov	r2, r3
 8007ace:	887b      	ldrh	r3, [r7, #2]
 8007ad0:	f7fc f8ca 	bl	8003c68 <HAL_DMA_Start_IT>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e0ad      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007aec:	60da      	str	r2, [r3, #12]
      break;
 8007aee:	e026      	b.n	8007b3e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af4:	4a53      	ldr	r2, [pc, #332]	@ (8007c44 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007af6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afc:	4a52      	ldr	r2, [pc, #328]	@ (8007c48 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007afe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b04:	4a51      	ldr	r2, [pc, #324]	@ (8007c4c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007b06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3340      	adds	r3, #64	@ 0x40
 8007b14:	461a      	mov	r2, r3
 8007b16:	887b      	ldrh	r3, [r7, #2]
 8007b18:	f7fc f8a6 	bl	8003c68 <HAL_DMA_Start_IT>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e089      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b34:	60da      	str	r2, [r3, #12]
      break;
 8007b36:	e002      	b.n	8007b3e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d179      	bne.n	8007c38 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 feed 	bl	800992c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a3e      	ldr	r2, [pc, #248]	@ (8007c50 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d018      	beq.n	8007b8e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a3c      	ldr	r2, [pc, #240]	@ (8007c54 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d013      	beq.n	8007b8e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a3b      	ldr	r2, [pc, #236]	@ (8007c58 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00e      	beq.n	8007b8e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a39      	ldr	r2, [pc, #228]	@ (8007c5c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d009      	beq.n	8007b8e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a38      	ldr	r2, [pc, #224]	@ (8007c60 <HAL_TIM_PWM_Start_DMA+0x440>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d004      	beq.n	8007b8e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a36      	ldr	r2, [pc, #216]	@ (8007c64 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_PWM_Start_DMA+0x372>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <HAL_TIM_PWM_Start_DMA+0x374>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ba6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a28      	ldr	r2, [pc, #160]	@ (8007c50 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d022      	beq.n	8007bf8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bba:	d01d      	beq.n	8007bf8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a29      	ldr	r2, [pc, #164]	@ (8007c68 <HAL_TIM_PWM_Start_DMA+0x448>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d018      	beq.n	8007bf8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a28      	ldr	r2, [pc, #160]	@ (8007c6c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d013      	beq.n	8007bf8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a26      	ldr	r2, [pc, #152]	@ (8007c70 <HAL_TIM_PWM_Start_DMA+0x450>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00e      	beq.n	8007bf8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a1d      	ldr	r2, [pc, #116]	@ (8007c54 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d009      	beq.n	8007bf8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1b      	ldr	r2, [pc, #108]	@ (8007c58 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d004      	beq.n	8007bf8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8007c64 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d115      	bne.n	8007c24 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8007c74 <HAL_TIM_PWM_Start_DMA+0x454>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b06      	cmp	r3, #6
 8007c08:	d015      	beq.n	8007c36 <HAL_TIM_PWM_Start_DMA+0x416>
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c10:	d011      	beq.n	8007c36 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0201 	orr.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c22:	e008      	b.n	8007c36 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e000      	b.n	8007c38 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c36:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	08008b13 	.word	0x08008b13
 8007c48:	08008bbb 	.word	0x08008bbb
 8007c4c:	08008a81 	.word	0x08008a81
 8007c50:	40012c00 	.word	0x40012c00
 8007c54:	40013400 	.word	0x40013400
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	40014400 	.word	0x40014400
 8007c60:	40014800 	.word	0x40014800
 8007c64:	40015000 	.word	0x40015000
 8007c68:	40000400 	.word	0x40000400
 8007c6c:	40000800 	.word	0x40000800
 8007c70:	40000c00 	.word	0x40000c00
 8007c74:	00010007 	.word	0x00010007

08007c78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e049      	b.n	8007d1e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f841 	bl	8007d26 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f000 ffb4 	bl	8008c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
	...

08007d3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <HAL_TIM_IC_Start_IT+0x1e>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	e023      	b.n	8007da2 <HAL_TIM_IC_Start_IT+0x66>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d104      	bne.n	8007d6a <HAL_TIM_IC_Start_IT+0x2e>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	e01b      	b.n	8007da2 <HAL_TIM_IC_Start_IT+0x66>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d104      	bne.n	8007d7a <HAL_TIM_IC_Start_IT+0x3e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	e013      	b.n	8007da2 <HAL_TIM_IC_Start_IT+0x66>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b0c      	cmp	r3, #12
 8007d7e:	d104      	bne.n	8007d8a <HAL_TIM_IC_Start_IT+0x4e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	e00b      	b.n	8007da2 <HAL_TIM_IC_Start_IT+0x66>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b10      	cmp	r3, #16
 8007d8e:	d104      	bne.n	8007d9a <HAL_TIM_IC_Start_IT+0x5e>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	e003      	b.n	8007da2 <HAL_TIM_IC_Start_IT+0x66>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <HAL_TIM_IC_Start_IT+0x78>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	e013      	b.n	8007ddc <HAL_TIM_IC_Start_IT+0xa0>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d104      	bne.n	8007dc4 <HAL_TIM_IC_Start_IT+0x88>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	e00b      	b.n	8007ddc <HAL_TIM_IC_Start_IT+0xa0>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b08      	cmp	r3, #8
 8007dc8:	d104      	bne.n	8007dd4 <HAL_TIM_IC_Start_IT+0x98>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	e003      	b.n	8007ddc <HAL_TIM_IC_Start_IT+0xa0>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d102      	bne.n	8007dea <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007de4:	7b7b      	ldrb	r3, [r7, #13]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d001      	beq.n	8007dee <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e0e2      	b.n	8007fb4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <HAL_TIM_IC_Start_IT+0xc2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dfc:	e023      	b.n	8007e46 <HAL_TIM_IC_Start_IT+0x10a>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d104      	bne.n	8007e0e <HAL_TIM_IC_Start_IT+0xd2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e0c:	e01b      	b.n	8007e46 <HAL_TIM_IC_Start_IT+0x10a>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d104      	bne.n	8007e1e <HAL_TIM_IC_Start_IT+0xe2>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e1c:	e013      	b.n	8007e46 <HAL_TIM_IC_Start_IT+0x10a>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_IC_Start_IT+0xf2>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e2c:	e00b      	b.n	8007e46 <HAL_TIM_IC_Start_IT+0x10a>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_IC_Start_IT+0x102>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e3c:	e003      	b.n	8007e46 <HAL_TIM_IC_Start_IT+0x10a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2202      	movs	r2, #2
 8007e42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_IC_Start_IT+0x11a>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e54:	e013      	b.n	8007e7e <HAL_TIM_IC_Start_IT+0x142>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_IC_Start_IT+0x12a>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e64:	e00b      	b.n	8007e7e <HAL_TIM_IC_Start_IT+0x142>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIM_IC_Start_IT+0x13a>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e74:	e003      	b.n	8007e7e <HAL_TIM_IC_Start_IT+0x142>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b0c      	cmp	r3, #12
 8007e82:	d841      	bhi.n	8007f08 <HAL_TIM_IC_Start_IT+0x1cc>
 8007e84:	a201      	add	r2, pc, #4	@ (adr r2, 8007e8c <HAL_TIM_IC_Start_IT+0x150>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007ec1 	.word	0x08007ec1
 8007e90:	08007f09 	.word	0x08007f09
 8007e94:	08007f09 	.word	0x08007f09
 8007e98:	08007f09 	.word	0x08007f09
 8007e9c:	08007ed3 	.word	0x08007ed3
 8007ea0:	08007f09 	.word	0x08007f09
 8007ea4:	08007f09 	.word	0x08007f09
 8007ea8:	08007f09 	.word	0x08007f09
 8007eac:	08007ee5 	.word	0x08007ee5
 8007eb0:	08007f09 	.word	0x08007f09
 8007eb4:	08007f09 	.word	0x08007f09
 8007eb8:	08007f09 	.word	0x08007f09
 8007ebc:	08007ef7 	.word	0x08007ef7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 0202 	orr.w	r2, r2, #2
 8007ece:	60da      	str	r2, [r3, #12]
      break;
 8007ed0:	e01d      	b.n	8007f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0204 	orr.w	r2, r2, #4
 8007ee0:	60da      	str	r2, [r3, #12]
      break;
 8007ee2:	e014      	b.n	8007f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0208 	orr.w	r2, r2, #8
 8007ef2:	60da      	str	r2, [r3, #12]
      break;
 8007ef4:	e00b      	b.n	8007f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0210 	orr.w	r2, r2, #16
 8007f04:	60da      	str	r2, [r3, #12]
      break;
 8007f06:	e002      	b.n	8007f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d14e      	bne.n	8007fb2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 fd05 	bl	800992c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a25      	ldr	r2, [pc, #148]	@ (8007fbc <HAL_TIM_IC_Start_IT+0x280>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d022      	beq.n	8007f72 <HAL_TIM_IC_Start_IT+0x236>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f34:	d01d      	beq.n	8007f72 <HAL_TIM_IC_Start_IT+0x236>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a21      	ldr	r2, [pc, #132]	@ (8007fc0 <HAL_TIM_IC_Start_IT+0x284>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d018      	beq.n	8007f72 <HAL_TIM_IC_Start_IT+0x236>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1f      	ldr	r2, [pc, #124]	@ (8007fc4 <HAL_TIM_IC_Start_IT+0x288>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d013      	beq.n	8007f72 <HAL_TIM_IC_Start_IT+0x236>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8007fc8 <HAL_TIM_IC_Start_IT+0x28c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d00e      	beq.n	8007f72 <HAL_TIM_IC_Start_IT+0x236>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a1c      	ldr	r2, [pc, #112]	@ (8007fcc <HAL_TIM_IC_Start_IT+0x290>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d009      	beq.n	8007f72 <HAL_TIM_IC_Start_IT+0x236>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a1b      	ldr	r2, [pc, #108]	@ (8007fd0 <HAL_TIM_IC_Start_IT+0x294>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d004      	beq.n	8007f72 <HAL_TIM_IC_Start_IT+0x236>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a19      	ldr	r2, [pc, #100]	@ (8007fd4 <HAL_TIM_IC_Start_IT+0x298>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d115      	bne.n	8007f9e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	4b17      	ldr	r3, [pc, #92]	@ (8007fd8 <HAL_TIM_IC_Start_IT+0x29c>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2b06      	cmp	r3, #6
 8007f82:	d015      	beq.n	8007fb0 <HAL_TIM_IC_Start_IT+0x274>
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f8a:	d011      	beq.n	8007fb0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9c:	e008      	b.n	8007fb0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0201 	orr.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	e000      	b.n	8007fb2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	40012c00 	.word	0x40012c00
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40000800 	.word	0x40000800
 8007fc8:	40000c00 	.word	0x40000c00
 8007fcc:	40013400 	.word	0x40013400
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40015000 	.word	0x40015000
 8007fd8:	00010007 	.word	0x00010007

08007fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d020      	beq.n	8008040 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01b      	beq.n	8008040 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0202 	mvn.w	r2, #2
 8008010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7f8 fff0 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 800802c:	e005      	b.n	800803a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fcf4 	bl	8008a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fcfb 	bl	8008a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f003 0304 	and.w	r3, r3, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	d020      	beq.n	800808c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01b      	beq.n	800808c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f06f 0204 	mvn.w	r2, #4
 800805c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2202      	movs	r2, #2
 8008062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7f8 ffca 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 8008078:	e005      	b.n	8008086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fcce 	bl	8008a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fcd5 	bl	8008a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f003 0308 	and.w	r3, r3, #8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d020      	beq.n	80080d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f003 0308 	and.w	r3, r3, #8
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01b      	beq.n	80080d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0208 	mvn.w	r2, #8
 80080a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2204      	movs	r2, #4
 80080ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7f8 ffa4 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 80080c4:	e005      	b.n	80080d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fca8 	bl	8008a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fcaf 	bl	8008a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 0310 	and.w	r3, r3, #16
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d020      	beq.n	8008124 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01b      	beq.n	8008124 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f06f 0210 	mvn.w	r2, #16
 80080f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2208      	movs	r2, #8
 80080fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7f8 ff7e 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 8008110:	e005      	b.n	800811e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fc82 	bl	8008a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fc89 	bl	8008a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0201 	mvn.w	r2, #1
 8008140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fc60 	bl	8008a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800814e:	2b00      	cmp	r3, #0
 8008150:	d104      	bne.n	800815c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00c      	beq.n	8008176 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800816e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 fd35 	bl	8009be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00c      	beq.n	800819a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 fd2d 	bl	8009bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00c      	beq.n	80081be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d007      	beq.n	80081be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fc4d 	bl	8008a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00c      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d007      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f06f 0220 	mvn.w	r2, #32
 80081da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fcf5 	bl	8009bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00c      	beq.n	8008206 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80081fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 fd01 	bl	8009c08 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00c      	beq.n	800822a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 fcf9 	bl	8009c1c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00c      	beq.n	800824e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d007      	beq.n	800824e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 fcf1 	bl	8009c30 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00c      	beq.n	8008272 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d007      	beq.n	8008272 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800826a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 fce9 	bl	8009c44 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008272:	bf00      	nop
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008292:	2b01      	cmp	r3, #1
 8008294:	d101      	bne.n	800829a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008296:	2302      	movs	r3, #2
 8008298:	e066      	b.n	8008368 <HAL_TIM_OC_ConfigChannel+0xec>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b14      	cmp	r3, #20
 80082a6:	d857      	bhi.n	8008358 <HAL_TIM_OC_ConfigChannel+0xdc>
 80082a8:	a201      	add	r2, pc, #4	@ (adr r2, 80082b0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	08008305 	.word	0x08008305
 80082b4:	08008359 	.word	0x08008359
 80082b8:	08008359 	.word	0x08008359
 80082bc:	08008359 	.word	0x08008359
 80082c0:	08008313 	.word	0x08008313
 80082c4:	08008359 	.word	0x08008359
 80082c8:	08008359 	.word	0x08008359
 80082cc:	08008359 	.word	0x08008359
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008359 	.word	0x08008359
 80082d8:	08008359 	.word	0x08008359
 80082dc:	08008359 	.word	0x08008359
 80082e0:	0800832f 	.word	0x0800832f
 80082e4:	08008359 	.word	0x08008359
 80082e8:	08008359 	.word	0x08008359
 80082ec:	08008359 	.word	0x08008359
 80082f0:	0800833d 	.word	0x0800833d
 80082f4:	08008359 	.word	0x08008359
 80082f8:	08008359 	.word	0x08008359
 80082fc:	08008359 	.word	0x08008359
 8008300:	0800834b 	.word	0x0800834b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68b9      	ldr	r1, [r7, #8]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fd3e 	bl	8008d8c <TIM_OC1_SetConfig>
      break;
 8008310:	e025      	b.n	800835e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68b9      	ldr	r1, [r7, #8]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fdd1 	bl	8008ec0 <TIM_OC2_SetConfig>
      break;
 800831e:	e01e      	b.n	800835e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fe5e 	bl	8008fe8 <TIM_OC3_SetConfig>
      break;
 800832c:	e017      	b.n	800835e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fee9 	bl	800910c <TIM_OC4_SetConfig>
      break;
 800833a:	e010      	b.n	800835e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68b9      	ldr	r1, [r7, #8]
 8008342:	4618      	mov	r0, r3
 8008344:	f000 ff76 	bl	8009234 <TIM_OC5_SetConfig>
      break;
 8008348:	e009      	b.n	800835e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	4618      	mov	r0, r3
 8008352:	f000 ffd9 	bl	8009308 <TIM_OC6_SetConfig>
      break;
 8008356:	e002      	b.n	800835e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	75fb      	strb	r3, [r7, #23]
      break;
 800835c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008366:	7dfb      	ldrb	r3, [r7, #23]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <HAL_TIM_IC_ConfigChannel+0x1e>
 800838a:	2302      	movs	r3, #2
 800838c:	e088      	b.n	80084a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d11b      	bne.n	80083d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80083ac:	f001 f8f8 	bl	80095a0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 020c 	bic.w	r2, r2, #12
 80083be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6999      	ldr	r1, [r3, #24]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	689a      	ldr	r2, [r3, #8]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	619a      	str	r2, [r3, #24]
 80083d2:	e060      	b.n	8008496 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d11c      	bne.n	8008414 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80083ea:	f001 f97c 	bl	80096e6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	699a      	ldr	r2, [r3, #24]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80083fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6999      	ldr	r1, [r3, #24]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	021a      	lsls	r2, r3, #8
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	619a      	str	r2, [r3, #24]
 8008412:	e040      	b.n	8008496 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b08      	cmp	r3, #8
 8008418:	d11b      	bne.n	8008452 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800842a:	f001 f9c9 	bl	80097c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 020c 	bic.w	r2, r2, #12
 800843c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69d9      	ldr	r1, [r3, #28]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	61da      	str	r2, [r3, #28]
 8008450:	e021      	b.n	8008496 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b0c      	cmp	r3, #12
 8008456:	d11c      	bne.n	8008492 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008468:	f001 f9e6 	bl	8009838 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	69da      	ldr	r2, [r3, #28]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800847a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	69d9      	ldr	r1, [r3, #28]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	021a      	lsls	r2, r3, #8
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	61da      	str	r2, [r3, #28]
 8008490:	e001      	b.n	8008496 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800849e:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d101      	bne.n	80084c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084c2:	2302      	movs	r3, #2
 80084c4:	e0ff      	b.n	80086c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b14      	cmp	r3, #20
 80084d2:	f200 80f0 	bhi.w	80086b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80084d6:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	08008531 	.word	0x08008531
 80084e0:	080086b7 	.word	0x080086b7
 80084e4:	080086b7 	.word	0x080086b7
 80084e8:	080086b7 	.word	0x080086b7
 80084ec:	08008571 	.word	0x08008571
 80084f0:	080086b7 	.word	0x080086b7
 80084f4:	080086b7 	.word	0x080086b7
 80084f8:	080086b7 	.word	0x080086b7
 80084fc:	080085b3 	.word	0x080085b3
 8008500:	080086b7 	.word	0x080086b7
 8008504:	080086b7 	.word	0x080086b7
 8008508:	080086b7 	.word	0x080086b7
 800850c:	080085f3 	.word	0x080085f3
 8008510:	080086b7 	.word	0x080086b7
 8008514:	080086b7 	.word	0x080086b7
 8008518:	080086b7 	.word	0x080086b7
 800851c:	08008635 	.word	0x08008635
 8008520:	080086b7 	.word	0x080086b7
 8008524:	080086b7 	.word	0x080086b7
 8008528:	080086b7 	.word	0x080086b7
 800852c:	08008675 	.word	0x08008675
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68b9      	ldr	r1, [r7, #8]
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fc28 	bl	8008d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699a      	ldr	r2, [r3, #24]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0208 	orr.w	r2, r2, #8
 800854a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	699a      	ldr	r2, [r3, #24]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 0204 	bic.w	r2, r2, #4
 800855a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6999      	ldr	r1, [r3, #24]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	691a      	ldr	r2, [r3, #16]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	619a      	str	r2, [r3, #24]
      break;
 800856e:	e0a5      	b.n	80086bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fca2 	bl	8008ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800858a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699a      	ldr	r2, [r3, #24]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800859a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6999      	ldr	r1, [r3, #24]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	021a      	lsls	r2, r3, #8
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	619a      	str	r2, [r3, #24]
      break;
 80085b0:	e084      	b.n	80086bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fd15 	bl	8008fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	69da      	ldr	r2, [r3, #28]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f042 0208 	orr.w	r2, r2, #8
 80085cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	69da      	ldr	r2, [r3, #28]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0204 	bic.w	r2, r2, #4
 80085dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	69d9      	ldr	r1, [r3, #28]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	691a      	ldr	r2, [r3, #16]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	61da      	str	r2, [r3, #28]
      break;
 80085f0:	e064      	b.n	80086bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fd87 	bl	800910c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69da      	ldr	r2, [r3, #28]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800860c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69da      	ldr	r2, [r3, #28]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800861c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69d9      	ldr	r1, [r3, #28]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	021a      	lsls	r2, r3, #8
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	61da      	str	r2, [r3, #28]
      break;
 8008632:	e043      	b.n	80086bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68b9      	ldr	r1, [r7, #8]
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fdfa 	bl	8009234 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0208 	orr.w	r2, r2, #8
 800864e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 0204 	bic.w	r2, r2, #4
 800865e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	691a      	ldr	r2, [r3, #16]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008672:	e023      	b.n	80086bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	4618      	mov	r0, r3
 800867c:	f000 fe44 	bl	8009308 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800868e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800869e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	021a      	lsls	r2, r3, #8
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80086b4:	e002      	b.n	80086bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	75fb      	strb	r3, [r7, #23]
      break;
 80086ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop

080086d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_TIM_ConfigClockSource+0x1c>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e0f6      	b.n	80088da <HAL_TIM_ConfigClockSource+0x20a>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800870a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800870e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a6f      	ldr	r2, [pc, #444]	@ (80088e4 <HAL_TIM_ConfigClockSource+0x214>)
 8008726:	4293      	cmp	r3, r2
 8008728:	f000 80c1 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 800872c:	4a6d      	ldr	r2, [pc, #436]	@ (80088e4 <HAL_TIM_ConfigClockSource+0x214>)
 800872e:	4293      	cmp	r3, r2
 8008730:	f200 80c6 	bhi.w	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008734:	4a6c      	ldr	r2, [pc, #432]	@ (80088e8 <HAL_TIM_ConfigClockSource+0x218>)
 8008736:	4293      	cmp	r3, r2
 8008738:	f000 80b9 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 800873c:	4a6a      	ldr	r2, [pc, #424]	@ (80088e8 <HAL_TIM_ConfigClockSource+0x218>)
 800873e:	4293      	cmp	r3, r2
 8008740:	f200 80be 	bhi.w	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008744:	4a69      	ldr	r2, [pc, #420]	@ (80088ec <HAL_TIM_ConfigClockSource+0x21c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	f000 80b1 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 800874c:	4a67      	ldr	r2, [pc, #412]	@ (80088ec <HAL_TIM_ConfigClockSource+0x21c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	f200 80b6 	bhi.w	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008754:	4a66      	ldr	r2, [pc, #408]	@ (80088f0 <HAL_TIM_ConfigClockSource+0x220>)
 8008756:	4293      	cmp	r3, r2
 8008758:	f000 80a9 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 800875c:	4a64      	ldr	r2, [pc, #400]	@ (80088f0 <HAL_TIM_ConfigClockSource+0x220>)
 800875e:	4293      	cmp	r3, r2
 8008760:	f200 80ae 	bhi.w	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008764:	4a63      	ldr	r2, [pc, #396]	@ (80088f4 <HAL_TIM_ConfigClockSource+0x224>)
 8008766:	4293      	cmp	r3, r2
 8008768:	f000 80a1 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 800876c:	4a61      	ldr	r2, [pc, #388]	@ (80088f4 <HAL_TIM_ConfigClockSource+0x224>)
 800876e:	4293      	cmp	r3, r2
 8008770:	f200 80a6 	bhi.w	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008774:	4a60      	ldr	r2, [pc, #384]	@ (80088f8 <HAL_TIM_ConfigClockSource+0x228>)
 8008776:	4293      	cmp	r3, r2
 8008778:	f000 8099 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 800877c:	4a5e      	ldr	r2, [pc, #376]	@ (80088f8 <HAL_TIM_ConfigClockSource+0x228>)
 800877e:	4293      	cmp	r3, r2
 8008780:	f200 809e 	bhi.w	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008784:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008788:	f000 8091 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 800878c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008790:	f200 8096 	bhi.w	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008794:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008798:	f000 8089 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 800879c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087a0:	f200 808e 	bhi.w	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80087a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087a8:	d03e      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x158>
 80087aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ae:	f200 8087 	bhi.w	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80087b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087b6:	f000 8086 	beq.w	80088c6 <HAL_TIM_ConfigClockSource+0x1f6>
 80087ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087be:	d87f      	bhi.n	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80087c0:	2b70      	cmp	r3, #112	@ 0x70
 80087c2:	d01a      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x12a>
 80087c4:	2b70      	cmp	r3, #112	@ 0x70
 80087c6:	d87b      	bhi.n	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80087c8:	2b60      	cmp	r3, #96	@ 0x60
 80087ca:	d050      	beq.n	800886e <HAL_TIM_ConfigClockSource+0x19e>
 80087cc:	2b60      	cmp	r3, #96	@ 0x60
 80087ce:	d877      	bhi.n	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80087d0:	2b50      	cmp	r3, #80	@ 0x50
 80087d2:	d03c      	beq.n	800884e <HAL_TIM_ConfigClockSource+0x17e>
 80087d4:	2b50      	cmp	r3, #80	@ 0x50
 80087d6:	d873      	bhi.n	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80087d8:	2b40      	cmp	r3, #64	@ 0x40
 80087da:	d058      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x1be>
 80087dc:	2b40      	cmp	r3, #64	@ 0x40
 80087de:	d86f      	bhi.n	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80087e0:	2b30      	cmp	r3, #48	@ 0x30
 80087e2:	d064      	beq.n	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 80087e4:	2b30      	cmp	r3, #48	@ 0x30
 80087e6:	d86b      	bhi.n	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80087e8:	2b20      	cmp	r3, #32
 80087ea:	d060      	beq.n	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	d867      	bhi.n	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d05c      	beq.n	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	d05a      	beq.n	80088ae <HAL_TIM_ConfigClockSource+0x1de>
 80087f8:	e062      	b.n	80088c0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800880a:	f001 f86f 	bl	80098ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800881c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	609a      	str	r2, [r3, #8]
      break;
 8008826:	e04f      	b.n	80088c8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008838:	f001 f858 	bl	80098ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689a      	ldr	r2, [r3, #8]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800884a:	609a      	str	r2, [r3, #8]
      break;
 800884c:	e03c      	b.n	80088c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800885a:	461a      	mov	r2, r3
 800885c:	f000 ff14 	bl	8009688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2150      	movs	r1, #80	@ 0x50
 8008866:	4618      	mov	r0, r3
 8008868:	f001 f823 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 800886c:	e02c      	b.n	80088c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800887a:	461a      	mov	r2, r3
 800887c:	f000 ff70 	bl	8009760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2160      	movs	r1, #96	@ 0x60
 8008886:	4618      	mov	r0, r3
 8008888:	f001 f813 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 800888c:	e01c      	b.n	80088c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800889a:	461a      	mov	r2, r3
 800889c:	f000 fef4 	bl	8009688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2140      	movs	r1, #64	@ 0x40
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 f803 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 80088ac:	e00c      	b.n	80088c8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4619      	mov	r1, r3
 80088b8:	4610      	mov	r0, r2
 80088ba:	f000 fffa 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 80088be:	e003      	b.n	80088c8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	73fb      	strb	r3, [r7, #15]
      break;
 80088c4:	e000      	b.n	80088c8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80088c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	00100070 	.word	0x00100070
 80088e8:	00100060 	.word	0x00100060
 80088ec:	00100050 	.word	0x00100050
 80088f0:	00100040 	.word	0x00100040
 80088f4:	00100030 	.word	0x00100030
 80088f8:	00100020 	.word	0x00100020

080088fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800890c:	2b01      	cmp	r3, #1
 800890e:	d101      	bne.n	8008914 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008910:	2302      	movs	r3, #2
 8008912:	e031      	b.n	8008978 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fd5a 	bl	80093e0 <TIM_SlaveTimer_SetConfig>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d009      	beq.n	8008946 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e018      	b.n	8008978 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008954:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68da      	ldr	r2, [r3, #12]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008964:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b0c      	cmp	r3, #12
 8008992:	d831      	bhi.n	80089f8 <HAL_TIM_ReadCapturedValue+0x78>
 8008994:	a201      	add	r2, pc, #4	@ (adr r2, 800899c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	080089d1 	.word	0x080089d1
 80089a0:	080089f9 	.word	0x080089f9
 80089a4:	080089f9 	.word	0x080089f9
 80089a8:	080089f9 	.word	0x080089f9
 80089ac:	080089db 	.word	0x080089db
 80089b0:	080089f9 	.word	0x080089f9
 80089b4:	080089f9 	.word	0x080089f9
 80089b8:	080089f9 	.word	0x080089f9
 80089bc:	080089e5 	.word	0x080089e5
 80089c0:	080089f9 	.word	0x080089f9
 80089c4:	080089f9 	.word	0x080089f9
 80089c8:	080089f9 	.word	0x080089f9
 80089cc:	080089ef 	.word	0x080089ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d6:	60fb      	str	r3, [r7, #12]

      break;
 80089d8:	e00f      	b.n	80089fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e0:	60fb      	str	r3, [r7, #12]

      break;
 80089e2:	e00a      	b.n	80089fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ea:	60fb      	str	r3, [r7, #12]

      break;
 80089ec:	e005      	b.n	80089fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f4:	60fb      	str	r3, [r7, #12]

      break;
 80089f6:	e000      	b.n	80089fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80089f8:	bf00      	nop
  }

  return tmpreg;
 80089fa:	68fb      	ldr	r3, [r7, #12]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d107      	bne.n	8008aa8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008aa6:	e02a      	b.n	8008afe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d107      	bne.n	8008ac2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ac0:	e01d      	b.n	8008afe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d107      	bne.n	8008adc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2204      	movs	r2, #4
 8008ad0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ada:	e010      	b.n	8008afe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d107      	bne.n	8008af6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2208      	movs	r2, #8
 8008aea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008af4:	e003      	b.n	8008afe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f7ff ffb4 	bl	8008a6c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	771a      	strb	r2, [r3, #28]
}
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d10b      	bne.n	8008b42 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d136      	bne.n	8008ba6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b40:	e031      	b.n	8008ba6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d10b      	bne.n	8008b64 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d125      	bne.n	8008ba6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b62:	e020      	b.n	8008ba6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d10b      	bne.n	8008b86 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2204      	movs	r2, #4
 8008b72:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d114      	bne.n	8008ba6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b84:	e00f      	b.n	8008ba6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d10a      	bne.n	8008ba6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2208      	movs	r2, #8
 8008b94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d103      	bne.n	8008ba6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f7ff ff42 	bl	8008a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	771a      	strb	r2, [r3, #28]
}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d103      	bne.n	8008bda <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	771a      	strb	r2, [r3, #28]
 8008bd8:	e019      	b.n	8008c0e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d103      	bne.n	8008bec <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2202      	movs	r2, #2
 8008be8:	771a      	strb	r2, [r3, #28]
 8008bea:	e010      	b.n	8008c0e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d103      	bne.n	8008bfe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2204      	movs	r2, #4
 8008bfa:	771a      	strb	r2, [r3, #28]
 8008bfc:	e007      	b.n	8008c0e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d102      	bne.n	8008c0e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2208      	movs	r2, #8
 8008c0c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f7ff ff18 	bl	8008a44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	771a      	strb	r2, [r3, #28]
}
 8008c1a:	bf00      	nop
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a4c      	ldr	r2, [pc, #304]	@ (8008d68 <TIM_Base_SetConfig+0x144>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d017      	beq.n	8008c6c <TIM_Base_SetConfig+0x48>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c42:	d013      	beq.n	8008c6c <TIM_Base_SetConfig+0x48>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a49      	ldr	r2, [pc, #292]	@ (8008d6c <TIM_Base_SetConfig+0x148>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00f      	beq.n	8008c6c <TIM_Base_SetConfig+0x48>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a48      	ldr	r2, [pc, #288]	@ (8008d70 <TIM_Base_SetConfig+0x14c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d00b      	beq.n	8008c6c <TIM_Base_SetConfig+0x48>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a47      	ldr	r2, [pc, #284]	@ (8008d74 <TIM_Base_SetConfig+0x150>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d007      	beq.n	8008c6c <TIM_Base_SetConfig+0x48>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a46      	ldr	r2, [pc, #280]	@ (8008d78 <TIM_Base_SetConfig+0x154>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d003      	beq.n	8008c6c <TIM_Base_SetConfig+0x48>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a45      	ldr	r2, [pc, #276]	@ (8008d7c <TIM_Base_SetConfig+0x158>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d108      	bne.n	8008c7e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a39      	ldr	r2, [pc, #228]	@ (8008d68 <TIM_Base_SetConfig+0x144>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d023      	beq.n	8008cce <TIM_Base_SetConfig+0xaa>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c8c:	d01f      	beq.n	8008cce <TIM_Base_SetConfig+0xaa>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a36      	ldr	r2, [pc, #216]	@ (8008d6c <TIM_Base_SetConfig+0x148>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d01b      	beq.n	8008cce <TIM_Base_SetConfig+0xaa>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a35      	ldr	r2, [pc, #212]	@ (8008d70 <TIM_Base_SetConfig+0x14c>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d017      	beq.n	8008cce <TIM_Base_SetConfig+0xaa>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a34      	ldr	r2, [pc, #208]	@ (8008d74 <TIM_Base_SetConfig+0x150>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d013      	beq.n	8008cce <TIM_Base_SetConfig+0xaa>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a33      	ldr	r2, [pc, #204]	@ (8008d78 <TIM_Base_SetConfig+0x154>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00f      	beq.n	8008cce <TIM_Base_SetConfig+0xaa>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a33      	ldr	r2, [pc, #204]	@ (8008d80 <TIM_Base_SetConfig+0x15c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00b      	beq.n	8008cce <TIM_Base_SetConfig+0xaa>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a32      	ldr	r2, [pc, #200]	@ (8008d84 <TIM_Base_SetConfig+0x160>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d007      	beq.n	8008cce <TIM_Base_SetConfig+0xaa>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a31      	ldr	r2, [pc, #196]	@ (8008d88 <TIM_Base_SetConfig+0x164>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d003      	beq.n	8008cce <TIM_Base_SetConfig+0xaa>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8008d7c <TIM_Base_SetConfig+0x158>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d108      	bne.n	8008ce0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	689a      	ldr	r2, [r3, #8]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a18      	ldr	r2, [pc, #96]	@ (8008d68 <TIM_Base_SetConfig+0x144>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d013      	beq.n	8008d34 <TIM_Base_SetConfig+0x110>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8008d78 <TIM_Base_SetConfig+0x154>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00f      	beq.n	8008d34 <TIM_Base_SetConfig+0x110>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a1a      	ldr	r2, [pc, #104]	@ (8008d80 <TIM_Base_SetConfig+0x15c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00b      	beq.n	8008d34 <TIM_Base_SetConfig+0x110>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a19      	ldr	r2, [pc, #100]	@ (8008d84 <TIM_Base_SetConfig+0x160>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d007      	beq.n	8008d34 <TIM_Base_SetConfig+0x110>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a18      	ldr	r2, [pc, #96]	@ (8008d88 <TIM_Base_SetConfig+0x164>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d003      	beq.n	8008d34 <TIM_Base_SetConfig+0x110>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a13      	ldr	r2, [pc, #76]	@ (8008d7c <TIM_Base_SetConfig+0x158>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d103      	bne.n	8008d3c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d105      	bne.n	8008d5a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f023 0201 	bic.w	r2, r3, #1
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	611a      	str	r2, [r3, #16]
  }
}
 8008d5a:	bf00      	nop
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	40012c00 	.word	0x40012c00
 8008d6c:	40000400 	.word	0x40000400
 8008d70:	40000800 	.word	0x40000800
 8008d74:	40000c00 	.word	0x40000c00
 8008d78:	40013400 	.word	0x40013400
 8008d7c:	40015000 	.word	0x40015000
 8008d80:	40014000 	.word	0x40014000
 8008d84:	40014400 	.word	0x40014400
 8008d88:	40014800 	.word	0x40014800

08008d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	f023 0201 	bic.w	r2, r3, #1
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f023 0302 	bic.w	r3, r3, #2
 8008dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a30      	ldr	r2, [pc, #192]	@ (8008ea8 <TIM_OC1_SetConfig+0x11c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d013      	beq.n	8008e14 <TIM_OC1_SetConfig+0x88>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a2f      	ldr	r2, [pc, #188]	@ (8008eac <TIM_OC1_SetConfig+0x120>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00f      	beq.n	8008e14 <TIM_OC1_SetConfig+0x88>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a2e      	ldr	r2, [pc, #184]	@ (8008eb0 <TIM_OC1_SetConfig+0x124>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00b      	beq.n	8008e14 <TIM_OC1_SetConfig+0x88>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8008eb4 <TIM_OC1_SetConfig+0x128>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d007      	beq.n	8008e14 <TIM_OC1_SetConfig+0x88>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a2c      	ldr	r2, [pc, #176]	@ (8008eb8 <TIM_OC1_SetConfig+0x12c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d003      	beq.n	8008e14 <TIM_OC1_SetConfig+0x88>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8008ebc <TIM_OC1_SetConfig+0x130>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d10c      	bne.n	8008e2e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f023 0308 	bic.w	r3, r3, #8
 8008e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f023 0304 	bic.w	r3, r3, #4
 8008e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea8 <TIM_OC1_SetConfig+0x11c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d013      	beq.n	8008e5e <TIM_OC1_SetConfig+0xd2>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a1c      	ldr	r2, [pc, #112]	@ (8008eac <TIM_OC1_SetConfig+0x120>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d00f      	beq.n	8008e5e <TIM_OC1_SetConfig+0xd2>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb0 <TIM_OC1_SetConfig+0x124>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d00b      	beq.n	8008e5e <TIM_OC1_SetConfig+0xd2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a1a      	ldr	r2, [pc, #104]	@ (8008eb4 <TIM_OC1_SetConfig+0x128>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d007      	beq.n	8008e5e <TIM_OC1_SetConfig+0xd2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a19      	ldr	r2, [pc, #100]	@ (8008eb8 <TIM_OC1_SetConfig+0x12c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d003      	beq.n	8008e5e <TIM_OC1_SetConfig+0xd2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a18      	ldr	r2, [pc, #96]	@ (8008ebc <TIM_OC1_SetConfig+0x130>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d111      	bne.n	8008e82 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	621a      	str	r2, [r3, #32]
}
 8008e9c:	bf00      	nop
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	40012c00 	.word	0x40012c00
 8008eac:	40013400 	.word	0x40013400
 8008eb0:	40014000 	.word	0x40014000
 8008eb4:	40014400 	.word	0x40014400
 8008eb8:	40014800 	.word	0x40014800
 8008ebc:	40015000 	.word	0x40015000

08008ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	f023 0210 	bic.w	r2, r3, #16
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	021b      	lsls	r3, r3, #8
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f023 0320 	bic.w	r3, r3, #32
 8008f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008fd0 <TIM_OC2_SetConfig+0x110>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d007      	beq.n	8008f34 <TIM_OC2_SetConfig+0x74>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a2b      	ldr	r2, [pc, #172]	@ (8008fd4 <TIM_OC2_SetConfig+0x114>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <TIM_OC2_SetConfig+0x74>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8008fd8 <TIM_OC2_SetConfig+0x118>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d10d      	bne.n	8008f50 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a1f      	ldr	r2, [pc, #124]	@ (8008fd0 <TIM_OC2_SetConfig+0x110>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d013      	beq.n	8008f80 <TIM_OC2_SetConfig+0xc0>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8008fd4 <TIM_OC2_SetConfig+0x114>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00f      	beq.n	8008f80 <TIM_OC2_SetConfig+0xc0>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a1e      	ldr	r2, [pc, #120]	@ (8008fdc <TIM_OC2_SetConfig+0x11c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d00b      	beq.n	8008f80 <TIM_OC2_SetConfig+0xc0>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe0 <TIM_OC2_SetConfig+0x120>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d007      	beq.n	8008f80 <TIM_OC2_SetConfig+0xc0>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a1c      	ldr	r2, [pc, #112]	@ (8008fe4 <TIM_OC2_SetConfig+0x124>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d003      	beq.n	8008f80 <TIM_OC2_SetConfig+0xc0>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a17      	ldr	r2, [pc, #92]	@ (8008fd8 <TIM_OC2_SetConfig+0x118>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d113      	bne.n	8008fa8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	621a      	str	r2, [r3, #32]
}
 8008fc2:	bf00      	nop
 8008fc4:	371c      	adds	r7, #28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	40012c00 	.word	0x40012c00
 8008fd4:	40013400 	.word	0x40013400
 8008fd8:	40015000 	.word	0x40015000
 8008fdc:	40014000 	.word	0x40014000
 8008fe0:	40014400 	.word	0x40014400
 8008fe4:	40014800 	.word	0x40014800

08008fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800901a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 0303 	bic.w	r3, r3, #3
 8009022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	021b      	lsls	r3, r3, #8
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a2b      	ldr	r2, [pc, #172]	@ (80090f4 <TIM_OC3_SetConfig+0x10c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d007      	beq.n	800905a <TIM_OC3_SetConfig+0x72>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a2a      	ldr	r2, [pc, #168]	@ (80090f8 <TIM_OC3_SetConfig+0x110>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d003      	beq.n	800905a <TIM_OC3_SetConfig+0x72>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a29      	ldr	r2, [pc, #164]	@ (80090fc <TIM_OC3_SetConfig+0x114>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d10d      	bne.n	8009076 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	021b      	lsls	r3, r3, #8
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	4313      	orrs	r3, r2
 800906c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a1e      	ldr	r2, [pc, #120]	@ (80090f4 <TIM_OC3_SetConfig+0x10c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d013      	beq.n	80090a6 <TIM_OC3_SetConfig+0xbe>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a1d      	ldr	r2, [pc, #116]	@ (80090f8 <TIM_OC3_SetConfig+0x110>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d00f      	beq.n	80090a6 <TIM_OC3_SetConfig+0xbe>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <TIM_OC3_SetConfig+0x118>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d00b      	beq.n	80090a6 <TIM_OC3_SetConfig+0xbe>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a1c      	ldr	r2, [pc, #112]	@ (8009104 <TIM_OC3_SetConfig+0x11c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d007      	beq.n	80090a6 <TIM_OC3_SetConfig+0xbe>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a1b      	ldr	r2, [pc, #108]	@ (8009108 <TIM_OC3_SetConfig+0x120>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d003      	beq.n	80090a6 <TIM_OC3_SetConfig+0xbe>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a16      	ldr	r2, [pc, #88]	@ (80090fc <TIM_OC3_SetConfig+0x114>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d113      	bne.n	80090ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	4313      	orrs	r3, r2
 80090c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	621a      	str	r2, [r3, #32]
}
 80090e8:	bf00      	nop
 80090ea:	371c      	adds	r7, #28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	40012c00 	.word	0x40012c00
 80090f8:	40013400 	.word	0x40013400
 80090fc:	40015000 	.word	0x40015000
 8009100:	40014000 	.word	0x40014000
 8009104:	40014400 	.word	0x40014400
 8009108:	40014800 	.word	0x40014800

0800910c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800913a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800913e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	4313      	orrs	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800915a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	031b      	lsls	r3, r3, #12
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a2c      	ldr	r2, [pc, #176]	@ (800921c <TIM_OC4_SetConfig+0x110>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d007      	beq.n	8009180 <TIM_OC4_SetConfig+0x74>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a2b      	ldr	r2, [pc, #172]	@ (8009220 <TIM_OC4_SetConfig+0x114>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d003      	beq.n	8009180 <TIM_OC4_SetConfig+0x74>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a2a      	ldr	r2, [pc, #168]	@ (8009224 <TIM_OC4_SetConfig+0x118>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d10d      	bne.n	800919c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	031b      	lsls	r3, r3, #12
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	4313      	orrs	r3, r2
 8009192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800919a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a1f      	ldr	r2, [pc, #124]	@ (800921c <TIM_OC4_SetConfig+0x110>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d013      	beq.n	80091cc <TIM_OC4_SetConfig+0xc0>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009220 <TIM_OC4_SetConfig+0x114>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00f      	beq.n	80091cc <TIM_OC4_SetConfig+0xc0>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009228 <TIM_OC4_SetConfig+0x11c>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00b      	beq.n	80091cc <TIM_OC4_SetConfig+0xc0>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a1d      	ldr	r2, [pc, #116]	@ (800922c <TIM_OC4_SetConfig+0x120>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <TIM_OC4_SetConfig+0xc0>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a1c      	ldr	r2, [pc, #112]	@ (8009230 <TIM_OC4_SetConfig+0x124>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d003      	beq.n	80091cc <TIM_OC4_SetConfig+0xc0>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a17      	ldr	r2, [pc, #92]	@ (8009224 <TIM_OC4_SetConfig+0x118>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d113      	bne.n	80091f4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80091da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	019b      	lsls	r3, r3, #6
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	019b      	lsls	r3, r3, #6
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	621a      	str	r2, [r3, #32]
}
 800920e:	bf00      	nop
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	40012c00 	.word	0x40012c00
 8009220:	40013400 	.word	0x40013400
 8009224:	40015000 	.word	0x40015000
 8009228:	40014000 	.word	0x40014000
 800922c:	40014400 	.word	0x40014400
 8009230:	40014800 	.word	0x40014800

08009234 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009234:	b480      	push	{r7}
 8009236:	b087      	sub	sp, #28
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800925a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	041b      	lsls	r3, r3, #16
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	4313      	orrs	r3, r2
 8009284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a19      	ldr	r2, [pc, #100]	@ (80092f0 <TIM_OC5_SetConfig+0xbc>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d013      	beq.n	80092b6 <TIM_OC5_SetConfig+0x82>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a18      	ldr	r2, [pc, #96]	@ (80092f4 <TIM_OC5_SetConfig+0xc0>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d00f      	beq.n	80092b6 <TIM_OC5_SetConfig+0x82>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a17      	ldr	r2, [pc, #92]	@ (80092f8 <TIM_OC5_SetConfig+0xc4>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d00b      	beq.n	80092b6 <TIM_OC5_SetConfig+0x82>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a16      	ldr	r2, [pc, #88]	@ (80092fc <TIM_OC5_SetConfig+0xc8>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d007      	beq.n	80092b6 <TIM_OC5_SetConfig+0x82>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a15      	ldr	r2, [pc, #84]	@ (8009300 <TIM_OC5_SetConfig+0xcc>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d003      	beq.n	80092b6 <TIM_OC5_SetConfig+0x82>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a14      	ldr	r2, [pc, #80]	@ (8009304 <TIM_OC5_SetConfig+0xd0>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d109      	bne.n	80092ca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	021b      	lsls	r3, r3, #8
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	685a      	ldr	r2, [r3, #4]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	621a      	str	r2, [r3, #32]
}
 80092e4:	bf00      	nop
 80092e6:	371c      	adds	r7, #28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	40012c00 	.word	0x40012c00
 80092f4:	40013400 	.word	0x40013400
 80092f8:	40014000 	.word	0x40014000
 80092fc:	40014400 	.word	0x40014400
 8009300:	40014800 	.word	0x40014800
 8009304:	40015000 	.word	0x40015000

08009308 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800933a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	4313      	orrs	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800934e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	051b      	lsls	r3, r3, #20
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	4313      	orrs	r3, r2
 800935a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a1a      	ldr	r2, [pc, #104]	@ (80093c8 <TIM_OC6_SetConfig+0xc0>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d013      	beq.n	800938c <TIM_OC6_SetConfig+0x84>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a19      	ldr	r2, [pc, #100]	@ (80093cc <TIM_OC6_SetConfig+0xc4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00f      	beq.n	800938c <TIM_OC6_SetConfig+0x84>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a18      	ldr	r2, [pc, #96]	@ (80093d0 <TIM_OC6_SetConfig+0xc8>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d00b      	beq.n	800938c <TIM_OC6_SetConfig+0x84>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a17      	ldr	r2, [pc, #92]	@ (80093d4 <TIM_OC6_SetConfig+0xcc>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d007      	beq.n	800938c <TIM_OC6_SetConfig+0x84>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a16      	ldr	r2, [pc, #88]	@ (80093d8 <TIM_OC6_SetConfig+0xd0>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d003      	beq.n	800938c <TIM_OC6_SetConfig+0x84>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a15      	ldr	r2, [pc, #84]	@ (80093dc <TIM_OC6_SetConfig+0xd4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d109      	bne.n	80093a0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009392:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	029b      	lsls	r3, r3, #10
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	4313      	orrs	r3, r2
 800939e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	621a      	str	r2, [r3, #32]
}
 80093ba:	bf00      	nop
 80093bc:	371c      	adds	r7, #28
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	40012c00 	.word	0x40012c00
 80093cc:	40013400 	.word	0x40013400
 80093d0:	40014000 	.word	0x40014000
 80093d4:	40014400 	.word	0x40014400
 80093d8:	40014800 	.word	0x40014800
 80093dc:	40015000 	.word	0x40015000

080093e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80093fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009400:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	4313      	orrs	r3, r2
 800940a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009412:	f023 0307 	bic.w	r3, r3, #7
 8009416:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	4313      	orrs	r3, r2
 8009420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	4a56      	ldr	r2, [pc, #344]	@ (8009588 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009430:	4293      	cmp	r3, r2
 8009432:	f000 80a2 	beq.w	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 8009436:	4a54      	ldr	r2, [pc, #336]	@ (8009588 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009438:	4293      	cmp	r3, r2
 800943a:	f200 809b 	bhi.w	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 800943e:	4a53      	ldr	r2, [pc, #332]	@ (800958c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009440:	4293      	cmp	r3, r2
 8009442:	f000 809a 	beq.w	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 8009446:	4a51      	ldr	r2, [pc, #324]	@ (800958c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009448:	4293      	cmp	r3, r2
 800944a:	f200 8093 	bhi.w	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 800944e:	4a50      	ldr	r2, [pc, #320]	@ (8009590 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009450:	4293      	cmp	r3, r2
 8009452:	f000 8092 	beq.w	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 8009456:	4a4e      	ldr	r2, [pc, #312]	@ (8009590 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009458:	4293      	cmp	r3, r2
 800945a:	f200 808b 	bhi.w	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 800945e:	4a4d      	ldr	r2, [pc, #308]	@ (8009594 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009460:	4293      	cmp	r3, r2
 8009462:	f000 808a 	beq.w	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 8009466:	4a4b      	ldr	r2, [pc, #300]	@ (8009594 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009468:	4293      	cmp	r3, r2
 800946a:	f200 8083 	bhi.w	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 800946e:	4a4a      	ldr	r2, [pc, #296]	@ (8009598 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009470:	4293      	cmp	r3, r2
 8009472:	f000 8082 	beq.w	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 8009476:	4a48      	ldr	r2, [pc, #288]	@ (8009598 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d87b      	bhi.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 800947c:	4a47      	ldr	r2, [pc, #284]	@ (800959c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d07b      	beq.n	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 8009482:	4a46      	ldr	r2, [pc, #280]	@ (800959c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d875      	bhi.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 8009488:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800948c:	d075      	beq.n	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 800948e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009492:	d86f      	bhi.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 8009494:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009498:	d06f      	beq.n	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 800949a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800949e:	d869      	bhi.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 80094a0:	2b70      	cmp	r3, #112	@ 0x70
 80094a2:	d01a      	beq.n	80094da <TIM_SlaveTimer_SetConfig+0xfa>
 80094a4:	2b70      	cmp	r3, #112	@ 0x70
 80094a6:	d865      	bhi.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 80094a8:	2b60      	cmp	r3, #96	@ 0x60
 80094aa:	d059      	beq.n	8009560 <TIM_SlaveTimer_SetConfig+0x180>
 80094ac:	2b60      	cmp	r3, #96	@ 0x60
 80094ae:	d861      	bhi.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 80094b0:	2b50      	cmp	r3, #80	@ 0x50
 80094b2:	d04b      	beq.n	800954c <TIM_SlaveTimer_SetConfig+0x16c>
 80094b4:	2b50      	cmp	r3, #80	@ 0x50
 80094b6:	d85d      	bhi.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 80094b8:	2b40      	cmp	r3, #64	@ 0x40
 80094ba:	d019      	beq.n	80094f0 <TIM_SlaveTimer_SetConfig+0x110>
 80094bc:	2b40      	cmp	r3, #64	@ 0x40
 80094be:	d859      	bhi.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 80094c0:	2b30      	cmp	r3, #48	@ 0x30
 80094c2:	d05a      	beq.n	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 80094c4:	2b30      	cmp	r3, #48	@ 0x30
 80094c6:	d855      	bhi.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 80094c8:	2b20      	cmp	r3, #32
 80094ca:	d056      	beq.n	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 80094cc:	2b20      	cmp	r3, #32
 80094ce:	d851      	bhi.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d052      	beq.n	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 80094d4:	2b10      	cmp	r3, #16
 80094d6:	d050      	beq.n	800957a <TIM_SlaveTimer_SetConfig+0x19a>
 80094d8:	e04c      	b.n	8009574 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80094ea:	f000 f9ff 	bl	80098ec <TIM_ETR_SetConfig>
      break;
 80094ee:	e045      	b.n	800957c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b05      	cmp	r3, #5
 80094f6:	d004      	beq.n	8009502 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80094fc:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009500:	d101      	bne.n	8009506 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e03b      	b.n	800957e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6a1a      	ldr	r2, [r3, #32]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0201 	bic.w	r2, r2, #1
 800951c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800952c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	011b      	lsls	r3, r3, #4
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	4313      	orrs	r3, r2
 8009538:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	621a      	str	r2, [r3, #32]
      break;
 800954a:	e017      	b.n	800957c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009558:	461a      	mov	r2, r3
 800955a:	f000 f895 	bl	8009688 <TIM_TI1_ConfigInputStage>
      break;
 800955e:	e00d      	b.n	800957c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800956c:	461a      	mov	r2, r3
 800956e:	f000 f8f7 	bl	8009760 <TIM_TI2_ConfigInputStage>
      break;
 8009572:	e003      	b.n	800957c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	75fb      	strb	r3, [r7, #23]
      break;
 8009578:	e000      	b.n	800957c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800957a:	bf00      	nop
  }

  return status;
 800957c:	7dfb      	ldrb	r3, [r7, #23]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	00100070 	.word	0x00100070
 800958c:	00100060 	.word	0x00100060
 8009590:	00100050 	.word	0x00100050
 8009594:	00100040 	.word	0x00100040
 8009598:	00100030 	.word	0x00100030
 800959c:	00100020 	.word	0x00100020

080095a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	f023 0201 	bic.w	r2, r3, #1
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	4a28      	ldr	r2, [pc, #160]	@ (800966c <TIM_TI1_SetConfig+0xcc>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d01b      	beq.n	8009606 <TIM_TI1_SetConfig+0x66>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095d4:	d017      	beq.n	8009606 <TIM_TI1_SetConfig+0x66>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4a25      	ldr	r2, [pc, #148]	@ (8009670 <TIM_TI1_SetConfig+0xd0>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d013      	beq.n	8009606 <TIM_TI1_SetConfig+0x66>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4a24      	ldr	r2, [pc, #144]	@ (8009674 <TIM_TI1_SetConfig+0xd4>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d00f      	beq.n	8009606 <TIM_TI1_SetConfig+0x66>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4a23      	ldr	r2, [pc, #140]	@ (8009678 <TIM_TI1_SetConfig+0xd8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d00b      	beq.n	8009606 <TIM_TI1_SetConfig+0x66>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	4a22      	ldr	r2, [pc, #136]	@ (800967c <TIM_TI1_SetConfig+0xdc>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d007      	beq.n	8009606 <TIM_TI1_SetConfig+0x66>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4a21      	ldr	r2, [pc, #132]	@ (8009680 <TIM_TI1_SetConfig+0xe0>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d003      	beq.n	8009606 <TIM_TI1_SetConfig+0x66>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	4a20      	ldr	r2, [pc, #128]	@ (8009684 <TIM_TI1_SetConfig+0xe4>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d101      	bne.n	800960a <TIM_TI1_SetConfig+0x6a>
 8009606:	2301      	movs	r3, #1
 8009608:	e000      	b.n	800960c <TIM_TI1_SetConfig+0x6c>
 800960a:	2300      	movs	r3, #0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d008      	beq.n	8009622 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f023 0303 	bic.w	r3, r3, #3
 8009616:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4313      	orrs	r3, r2
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	e003      	b.n	800962a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f043 0301 	orr.w	r3, r3, #1
 8009628:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	b2db      	uxtb	r3, r3
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	4313      	orrs	r3, r2
 800963c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f023 030a 	bic.w	r3, r3, #10
 8009644:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	f003 030a 	and.w	r3, r3, #10
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	4313      	orrs	r3, r2
 8009650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	697a      	ldr	r2, [r7, #20]
 8009656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	621a      	str	r2, [r3, #32]
}
 800965e:	bf00      	nop
 8009660:	371c      	adds	r7, #28
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	40012c00 	.word	0x40012c00
 8009670:	40000400 	.word	0x40000400
 8009674:	40000800 	.word	0x40000800
 8009678:	40000c00 	.word	0x40000c00
 800967c:	40013400 	.word	0x40013400
 8009680:	40014000 	.word	0x40014000
 8009684:	40015000 	.word	0x40015000

08009688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	f023 0201 	bic.w	r2, r3, #1
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	011b      	lsls	r3, r3, #4
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f023 030a 	bic.w	r3, r3, #10
 80096c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	621a      	str	r2, [r3, #32]
}
 80096da:	bf00      	nop
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b087      	sub	sp, #28
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	607a      	str	r2, [r7, #4]
 80096f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	f023 0210 	bic.w	r2, r3, #16
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	021b      	lsls	r3, r3, #8
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	4313      	orrs	r3, r2
 800971c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	031b      	lsls	r3, r3, #12
 800972a:	b29b      	uxth	r3, r3
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	4313      	orrs	r3, r2
 8009730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009738:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	011b      	lsls	r3, r3, #4
 800973e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	4313      	orrs	r3, r2
 8009746:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	621a      	str	r2, [r3, #32]
}
 8009754:	bf00      	nop
 8009756:	371c      	adds	r7, #28
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	f023 0210 	bic.w	r2, r3, #16
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800978a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	031b      	lsls	r3, r3, #12
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	4313      	orrs	r3, r2
 8009794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800979c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	621a      	str	r2, [r3, #32]
}
 80097b4:	bf00      	nop
 80097b6:	371c      	adds	r7, #28
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	011b      	lsls	r3, r3, #4
 8009802:	b2db      	uxtb	r3, r3
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	4313      	orrs	r3, r2
 8009808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009810:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	4313      	orrs	r3, r2
 800981e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	621a      	str	r2, [r3, #32]
}
 800982c:	bf00      	nop
 800982e:	371c      	adds	r7, #28
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009864:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	021b      	lsls	r3, r3, #8
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	4313      	orrs	r3, r2
 800986e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009876:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	031b      	lsls	r3, r3, #12
 800987c:	b29b      	uxth	r3, r3
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	4313      	orrs	r3, r2
 8009882:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800988a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	031b      	lsls	r3, r3, #12
 8009890:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	621a      	str	r2, [r3, #32]
}
 80098a6:	bf00      	nop
 80098a8:	371c      	adds	r7, #28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80098c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	f043 0307 	orr.w	r3, r3, #7
 80098d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	609a      	str	r2, [r3, #8]
}
 80098e0:	bf00      	nop
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	021a      	lsls	r2, r3, #8
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	431a      	orrs	r2, r3
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	4313      	orrs	r3, r2
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	4313      	orrs	r3, r2
 8009918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	609a      	str	r2, [r3, #8]
}
 8009920:	bf00      	nop
 8009922:	371c      	adds	r7, #28
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f003 031f 	and.w	r3, r3, #31
 800993e:	2201      	movs	r2, #1
 8009940:	fa02 f303 	lsl.w	r3, r2, r3
 8009944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a1a      	ldr	r2, [r3, #32]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	43db      	mvns	r3, r3
 800994e:	401a      	ands	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a1a      	ldr	r2, [r3, #32]
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f003 031f 	and.w	r3, r3, #31
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	fa01 f303 	lsl.w	r3, r1, r3
 8009964:	431a      	orrs	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	621a      	str	r2, [r3, #32]
}
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
	...

08009978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009988:	2b01      	cmp	r3, #1
 800998a:	d101      	bne.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800998c:	2302      	movs	r3, #2
 800998e:	e074      	b.n	8009a7a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a34      	ldr	r2, [pc, #208]	@ (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d009      	beq.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a33      	ldr	r2, [pc, #204]	@ (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d004      	beq.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a31      	ldr	r2, [pc, #196]	@ (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d108      	bne.n	80099e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80099d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	4313      	orrs	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80099e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a21      	ldr	r2, [pc, #132]	@ (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d022      	beq.n	8009a4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a10:	d01d      	beq.n	8009a4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1f      	ldr	r2, [pc, #124]	@ (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d018      	beq.n	8009a4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1d      	ldr	r2, [pc, #116]	@ (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d013      	beq.n	8009a4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8009a9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d00e      	beq.n	8009a4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a15      	ldr	r2, [pc, #84]	@ (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d009      	beq.n	8009a4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a18      	ldr	r2, [pc, #96]	@ (8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d004      	beq.n	8009a4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a11      	ldr	r2, [pc, #68]	@ (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d10c      	bne.n	8009a68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	40012c00 	.word	0x40012c00
 8009a8c:	40013400 	.word	0x40013400
 8009a90:	40015000 	.word	0x40015000
 8009a94:	40000400 	.word	0x40000400
 8009a98:	40000800 	.word	0x40000800
 8009a9c:	40000c00 	.word	0x40000c00
 8009aa0:	40014000 	.word	0x40014000

08009aa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d101      	bne.n	8009ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009abc:	2302      	movs	r3, #2
 8009abe:	e078      	b.n	8009bb2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	041b      	lsls	r3, r3, #16
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	69db      	ldr	r3, [r3, #28]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8009bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d009      	beq.n	8009b66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a1b      	ldr	r2, [pc, #108]	@ (8009bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d004      	beq.n	8009b66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a19      	ldr	r2, [pc, #100]	@ (8009bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d11c      	bne.n	8009ba0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	051b      	lsls	r3, r3, #20
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3714      	adds	r7, #20
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	40012c00 	.word	0x40012c00
 8009bc4:	40013400 	.word	0x40013400
 8009bc8:	40015000 	.word	0x40015000

08009bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009c68:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009c6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b085      	sub	sp, #20
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009c8e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009c92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	43db      	mvns	r3, r3
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	1d3b      	adds	r3, r7, #4
 8009cc6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b09d      	sub	sp, #116	@ 0x74
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d1e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	78db      	ldrb	r3, [r3, #3]
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d81f      	bhi.n	8009d6a <USB_ActivateEndpoint+0x72>
 8009d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <USB_ActivateEndpoint+0x38>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d41 	.word	0x08009d41
 8009d34:	08009d5d 	.word	0x08009d5d
 8009d38:	08009d73 	.word	0x08009d73
 8009d3c:	08009d4f 	.word	0x08009d4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009d40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009d44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009d48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009d4c:	e012      	b.n	8009d74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009d4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009d52:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009d56:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009d5a:	e00b      	b.n	8009d74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009d5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009d64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009d68:	e004      	b.n	8009d74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009d70:	e000      	b.n	8009d74 <USB_ActivateEndpoint+0x7c>
      break;
 8009d72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	441a      	add	r2, r3
 8009d7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	b21b      	sxth	r3, r3
 8009da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dae:	b21a      	sxth	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	b21b      	sxth	r3, r3
 8009db6:	4313      	orrs	r3, r2
 8009db8:	b21b      	sxth	r3, r3
 8009dba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	441a      	add	r2, r3
 8009dc8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	7b1b      	ldrb	r3, [r3, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f040 8178 	bne.w	800a0da <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f000 8084 	beq.w	8009efc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	61bb      	str	r3, [r7, #24]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	461a      	mov	r2, r3
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	4413      	add	r3, r2
 8009e06:	61bb      	str	r3, [r7, #24]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	00da      	lsls	r2, r3, #3
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e16:	617b      	str	r3, [r7, #20]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	88db      	ldrh	r3, [r3, #6]
 8009e1c:	085b      	lsrs	r3, r3, #1
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4413      	add	r3, r2
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	827b      	strh	r3, [r7, #18]
 8009e36:	8a7b      	ldrh	r3, [r7, #18]
 8009e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01b      	beq.n	8009e78 <USB_ActivateEndpoint+0x180>
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e56:	823b      	strh	r3, [r7, #16]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	441a      	add	r2, r3
 8009e62:	8a3b      	ldrh	r3, [r7, #16]
 8009e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	78db      	ldrb	r3, [r3, #3]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d020      	beq.n	8009ec2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	881b      	ldrh	r3, [r3, #0]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e96:	81bb      	strh	r3, [r7, #12]
 8009e98:	89bb      	ldrh	r3, [r7, #12]
 8009e9a:	f083 0320 	eor.w	r3, r3, #32
 8009e9e:	81bb      	strh	r3, [r7, #12]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	441a      	add	r2, r3
 8009eaa:	89bb      	ldrh	r3, [r7, #12]
 8009eac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009eb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	8013      	strh	r3, [r2, #0]
 8009ec0:	e2d5      	b.n	800a46e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ed8:	81fb      	strh	r3, [r7, #14]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	441a      	add	r2, r3
 8009ee4:	89fb      	ldrh	r3, [r7, #14]
 8009ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	8013      	strh	r3, [r2, #0]
 8009efa:	e2b8      	b.n	800a46e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	461a      	mov	r2, r3
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0c:	4413      	add	r3, r2
 8009f0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	00da      	lsls	r2, r3, #3
 8009f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f18:	4413      	add	r3, r2
 8009f1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	88db      	ldrh	r3, [r3, #6]
 8009f24:	085b      	lsrs	r3, r3, #1
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f40:	4413      	add	r3, r2
 8009f42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	00da      	lsls	r2, r3, #3
 8009f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f62:	801a      	strh	r2, [r3, #0]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f6a:	d91d      	bls.n	8009fa8 <USB_ActivateEndpoint+0x2b0>
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	095b      	lsrs	r3, r3, #5
 8009f72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	f003 031f 	and.w	r3, r3, #31
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d102      	bne.n	8009f86 <USB_ActivateEndpoint+0x28e>
 8009f80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f82:	3b01      	subs	r3, #1
 8009f84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	029b      	lsls	r3, r3, #10
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	4313      	orrs	r3, r2
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa4:	801a      	strh	r2, [r3, #0]
 8009fa6:	e026      	b.n	8009ff6 <USB_ActivateEndpoint+0x2fe>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <USB_ActivateEndpoint+0x2ce>
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc2:	801a      	strh	r2, [r3, #0]
 8009fc4:	e017      	b.n	8009ff6 <USB_ActivateEndpoint+0x2fe>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	085b      	lsrs	r3, r3, #1
 8009fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d002      	beq.n	8009fe0 <USB_ActivateEndpoint+0x2e8>
 8009fda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fdc:	3301      	adds	r3, #1
 8009fde:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe2:	881b      	ldrh	r3, [r3, #0]
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	029b      	lsls	r3, r3, #10
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d01b      	beq.n	800a046 <USB_ActivateEndpoint+0x34e>
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a024:	843b      	strh	r3, [r7, #32]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	441a      	add	r2, r3
 800a030:	8c3b      	ldrh	r3, [r7, #32]
 800a032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a03a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a03e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a042:	b29b      	uxth	r3, r3
 800a044:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d124      	bne.n	800a098 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a064:	83bb      	strh	r3, [r7, #28]
 800a066:	8bbb      	ldrh	r3, [r7, #28]
 800a068:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a06c:	83bb      	strh	r3, [r7, #28]
 800a06e:	8bbb      	ldrh	r3, [r7, #28]
 800a070:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a074:	83bb      	strh	r3, [r7, #28]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	441a      	add	r2, r3
 800a080:	8bbb      	ldrh	r3, [r7, #28]
 800a082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a08a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a08e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a092:	b29b      	uxth	r3, r3
 800a094:	8013      	strh	r3, [r2, #0]
 800a096:	e1ea      	b.n	800a46e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0ae:	83fb      	strh	r3, [r7, #30]
 800a0b0:	8bfb      	ldrh	r3, [r7, #30]
 800a0b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a0b6:	83fb      	strh	r3, [r7, #30]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	441a      	add	r2, r3
 800a0c2:	8bfb      	ldrh	r3, [r7, #30]
 800a0c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	8013      	strh	r3, [r2, #0]
 800a0d8:	e1c9      	b.n	800a46e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	78db      	ldrb	r3, [r3, #3]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d11e      	bne.n	800a120 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0f8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	441a      	add	r2, r3
 800a106:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a10a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a10e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a112:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	8013      	strh	r3, [r2, #0]
 800a11e:	e01d      	b.n	800a15c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a136:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	441a      	add	r2, r3
 800a144:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a14c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a158:	b29b      	uxth	r3, r3
 800a15a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a166:	b29b      	uxth	r3, r3
 800a168:	461a      	mov	r2, r3
 800a16a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a16c:	4413      	add	r3, r2
 800a16e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	00da      	lsls	r2, r3, #3
 800a176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a178:	4413      	add	r3, r2
 800a17a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a17e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	891b      	ldrh	r3, [r3, #8]
 800a184:	085b      	lsrs	r3, r3, #1
 800a186:	b29b      	uxth	r3, r3
 800a188:	005b      	lsls	r3, r3, #1
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a18e:	801a      	strh	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	657b      	str	r3, [r7, #84]	@ 0x54
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	461a      	mov	r2, r3
 800a19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1a0:	4413      	add	r3, r2
 800a1a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	00da      	lsls	r2, r3, #3
 800a1aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a1b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	895b      	ldrh	r3, [r3, #10]
 800a1b8:	085b      	lsrs	r3, r3, #1
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	785b      	ldrb	r3, [r3, #1]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f040 8093 	bne.w	800a2f4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a1de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a1e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d01b      	beq.n	800a222 <USB_ActivateEndpoint+0x52a>
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a200:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	441a      	add	r2, r3
 800a20c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a20e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a216:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a21a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a21e:	b29b      	uxth	r3, r3
 800a220:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a230:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a236:	2b00      	cmp	r3, #0
 800a238:	d01b      	beq.n	800a272 <USB_ActivateEndpoint+0x57a>
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	b29b      	uxth	r3, r3
 800a248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a24c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a250:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	441a      	add	r2, r3
 800a25c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a25e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a26a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a26e:	b29b      	uxth	r3, r3
 800a270:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	b29b      	uxth	r3, r3
 800a280:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a288:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a28a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a28c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a290:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a292:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a294:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a298:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	441a      	add	r2, r3
 800a2a4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a2a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	441a      	add	r2, r3
 800a2dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a2de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	8013      	strh	r3, [r2, #0]
 800a2f2:	e0bc      	b.n	800a46e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a304:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d01d      	beq.n	800a34c <USB_ActivateEndpoint+0x654>
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4413      	add	r3, r2
 800a31a:	881b      	ldrh	r3, [r3, #0]
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a326:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	441a      	add	r2, r3
 800a334:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a338:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a33c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a340:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a348:	b29b      	uxth	r3, r3
 800a34a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a35c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	d01d      	beq.n	800a3a4 <USB_ActivateEndpoint+0x6ac>
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	b29b      	uxth	r3, r3
 800a376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a37a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a37e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	441a      	add	r2, r3
 800a38c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a39c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	78db      	ldrb	r3, [r3, #3]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d024      	beq.n	800a3f6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	881b      	ldrh	r3, [r3, #0]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a3c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a3ca:	f083 0320 	eor.w	r3, r3, #32
 800a3ce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	441a      	add	r2, r3
 800a3dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a3e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	8013      	strh	r3, [r2, #0]
 800a3f4:	e01d      	b.n	800a432 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	b29b      	uxth	r3, r3
 800a404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a40c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	441a      	add	r2, r3
 800a41a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a41e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a42e:	b29b      	uxth	r3, r3
 800a430:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	b29b      	uxth	r3, r3
 800a440:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a448:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	441a      	add	r2, r3
 800a456:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a45a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a45e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a46e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a472:	4618      	mov	r0, r3
 800a474:	3774      	adds	r7, #116	@ 0x74
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop

0800a480 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a480:	b480      	push	{r7}
 800a482:	b08d      	sub	sp, #52	@ 0x34
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	7b1b      	ldrb	r3, [r3, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f040 808e 	bne.w	800a5b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	785b      	ldrb	r3, [r3, #1]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d044      	beq.n	800a526 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	881b      	ldrh	r3, [r3, #0]
 800a4a8:	81bb      	strh	r3, [r7, #12]
 800a4aa:	89bb      	ldrh	r3, [r7, #12]
 800a4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d01b      	beq.n	800a4ec <USB_DeactivateEndpoint+0x6c>
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ca:	817b      	strh	r3, [r7, #10]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	441a      	add	r2, r3
 800a4d6:	897b      	ldrh	r3, [r7, #10]
 800a4d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a502:	813b      	strh	r3, [r7, #8]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	441a      	add	r2, r3
 800a50e:	893b      	ldrh	r3, [r7, #8]
 800a510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a51c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a520:	b29b      	uxth	r3, r3
 800a522:	8013      	strh	r3, [r2, #0]
 800a524:	e192      	b.n	800a84c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	827b      	strh	r3, [r7, #18]
 800a534:	8a7b      	ldrh	r3, [r7, #18]
 800a536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d01b      	beq.n	800a576 <USB_DeactivateEndpoint+0xf6>
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	881b      	ldrh	r3, [r3, #0]
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a554:	823b      	strh	r3, [r7, #16]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	441a      	add	r2, r3
 800a560:	8a3b      	ldrh	r3, [r7, #16]
 800a562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a56a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a56e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a572:	b29b      	uxth	r3, r3
 800a574:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	b29b      	uxth	r3, r3
 800a584:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a58c:	81fb      	strh	r3, [r7, #14]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	441a      	add	r2, r3
 800a598:	89fb      	ldrh	r3, [r7, #14]
 800a59a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a59e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	8013      	strh	r3, [r2, #0]
 800a5ae:	e14d      	b.n	800a84c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	785b      	ldrb	r3, [r3, #1]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f040 80a5 	bne.w	800a704 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	843b      	strh	r3, [r7, #32]
 800a5c8:	8c3b      	ldrh	r3, [r7, #32]
 800a5ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d01b      	beq.n	800a60a <USB_DeactivateEndpoint+0x18a>
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	881b      	ldrh	r3, [r3, #0]
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5e8:	83fb      	strh	r3, [r7, #30]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	441a      	add	r2, r3
 800a5f4:	8bfb      	ldrh	r3, [r7, #30]
 800a5f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a606:	b29b      	uxth	r3, r3
 800a608:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	83bb      	strh	r3, [r7, #28]
 800a618:	8bbb      	ldrh	r3, [r7, #28]
 800a61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d01b      	beq.n	800a65a <USB_DeactivateEndpoint+0x1da>
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	b29b      	uxth	r3, r3
 800a630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a638:	837b      	strh	r3, [r7, #26]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	441a      	add	r2, r3
 800a644:	8b7b      	ldrh	r3, [r7, #26]
 800a646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a64a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a64e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a652:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a656:	b29b      	uxth	r3, r3
 800a658:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	881b      	ldrh	r3, [r3, #0]
 800a666:	b29b      	uxth	r3, r3
 800a668:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a66c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a670:	833b      	strh	r3, [r7, #24]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	441a      	add	r2, r3
 800a67c:	8b3b      	ldrh	r3, [r7, #24]
 800a67e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a68a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a68e:	b29b      	uxth	r3, r3
 800a690:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	881b      	ldrh	r3, [r3, #0]
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6a8:	82fb      	strh	r3, [r7, #22]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	441a      	add	r2, r3
 800a6b4:	8afb      	ldrh	r3, [r7, #22]
 800a6b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6e0:	82bb      	strh	r3, [r7, #20]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	441a      	add	r2, r3
 800a6ec:	8abb      	ldrh	r3, [r7, #20]
 800a6ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	8013      	strh	r3, [r2, #0]
 800a702:	e0a3      	b.n	800a84c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	4413      	add	r3, r2
 800a70e:	881b      	ldrh	r3, [r3, #0]
 800a710:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a712:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d01b      	beq.n	800a754 <USB_DeactivateEndpoint+0x2d4>
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4413      	add	r3, r2
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	b29b      	uxth	r3, r3
 800a72a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a72e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a732:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	441a      	add	r2, r3
 800a73e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a748:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a74c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a750:	b29b      	uxth	r3, r3
 800a752:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a762:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01b      	beq.n	800a7a4 <USB_DeactivateEndpoint+0x324>
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a77e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a782:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	441a      	add	r2, r3
 800a78e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a79c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	881b      	ldrh	r3, [r3, #0]
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	441a      	add	r2, r3
 800a7c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a7c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a7d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	441a      	add	r2, r3
 800a7fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a80c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a810:	b29b      	uxth	r3, r3
 800a812:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	b29b      	uxth	r3, r3
 800a822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a82a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	441a      	add	r2, r3
 800a836:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a83c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a848:	b29b      	uxth	r3, r3
 800a84a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3734      	adds	r7, #52	@ 0x34
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b0c2      	sub	sp, #264	@ 0x108
 800a85e:	af00      	add	r7, sp, #0
 800a860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a864:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a868:	6018      	str	r0, [r3, #0]
 800a86a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a86e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a872:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	785b      	ldrb	r3, [r3, #1]
 800a880:	2b01      	cmp	r3, #1
 800a882:	f040 86b7 	bne.w	800b5f4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a88a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	699a      	ldr	r2, [r3, #24]
 800a892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d908      	bls.n	800a8b4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a8a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a8b2:	e007      	b.n	800a8c4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a8b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a8c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	7b1b      	ldrb	r3, [r3, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d13a      	bne.n	800a94a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6959      	ldr	r1, [r3, #20]
 800a8e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	88da      	ldrh	r2, [r3, #6]
 800a8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a8f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a8fa:	6800      	ldr	r0, [r0, #0]
 800a8fc:	f001 fc98 	bl	800c230 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	613b      	str	r3, [r7, #16]
 800a90c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	461a      	mov	r2, r3
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	4413      	add	r3, r2
 800a922:	613b      	str	r3, [r7, #16]
 800a924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	00da      	lsls	r2, r3, #3
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	4413      	add	r3, r2
 800a936:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a940:	b29a      	uxth	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	801a      	strh	r2, [r3, #0]
 800a946:	f000 be1f 	b.w	800b588 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a94e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	78db      	ldrb	r3, [r3, #3]
 800a956:	2b02      	cmp	r3, #2
 800a958:	f040 8462 	bne.w	800b220 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a95c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6a1a      	ldr	r2, [r3, #32]
 800a968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a96c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	429a      	cmp	r2, r3
 800a976:	f240 83df 	bls.w	800b138 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a97a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a97e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4413      	add	r3, r2
 800a994:	881b      	ldrh	r3, [r3, #0]
 800a996:	b29b      	uxth	r3, r3
 800a998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a99c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9a0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a9a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	441a      	add	r2, r3
 800a9be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a9ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a9d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6a1a      	ldr	r2, [r3, #32]
 800a9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9e6:	1ad2      	subs	r2, r2, r3
 800a9e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 81c7 	beq.w	800adaa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	785b      	ldrb	r3, [r3, #1]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d177      	bne.n	800ab28 <USB_EPStartXfer+0x2ce>
 800aa38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	461a      	mov	r2, r3
 800aa56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa58:	4413      	add	r3, r2
 800aa5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	00da      	lsls	r2, r3, #3
 800aa6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa72:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa76:	881b      	ldrh	r3, [r3, #0]
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa82:	801a      	strh	r2, [r3, #0]
 800aa84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa88:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa8a:	d921      	bls.n	800aad0 <USB_EPStartXfer+0x276>
 800aa8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa90:	095b      	lsrs	r3, r3, #5
 800aa92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aa96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa9a:	f003 031f 	and.w	r3, r3, #31
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d104      	bne.n	800aaac <USB_EPStartXfer+0x252>
 800aaa2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	029b      	lsls	r3, r3, #10
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	4313      	orrs	r3, r2
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aacc:	801a      	strh	r2, [r3, #0]
 800aace:	e050      	b.n	800ab72 <USB_EPStartXfer+0x318>
 800aad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <USB_EPStartXfer+0x294>
 800aad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	b29b      	uxth	r3, r3
 800aade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaea:	801a      	strh	r2, [r3, #0]
 800aaec:	e041      	b.n	800ab72 <USB_EPStartXfer+0x318>
 800aaee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaf2:	085b      	lsrs	r3, r3, #1
 800aaf4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d004      	beq.n	800ab0e <USB_EPStartXfer+0x2b4>
 800ab04:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ab08:	3301      	adds	r3, #1
 800ab0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	029b      	lsls	r3, r3, #10
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab24:	801a      	strh	r2, [r3, #0]
 800ab26:	e024      	b.n	800ab72 <USB_EPStartXfer+0x318>
 800ab28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	785b      	ldrb	r3, [r3, #1]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d11c      	bne.n	800ab72 <USB_EPStartXfer+0x318>
 800ab38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	461a      	mov	r2, r3
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4c:	4413      	add	r3, r2
 800ab4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	00da      	lsls	r2, r3, #3
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab60:	4413      	add	r3, r2
 800ab62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ab72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	895b      	ldrh	r3, [r3, #10]
 800ab7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6959      	ldr	r1, [r3, #20]
 800ab8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ab98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ab9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aba0:	6800      	ldr	r0, [r0, #0]
 800aba2:	f001 fb45 	bl	800c230 <USB_WritePMA>
            ep->xfer_buff += len;
 800aba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	695a      	ldr	r2, [r3, #20]
 800abb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abb6:	441a      	add	r2, r3
 800abb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800abc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6a1a      	ldr	r2, [r3, #32]
 800abd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d90f      	bls.n	800ac00 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800abe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6a1a      	ldr	r2, [r3, #32]
 800abec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abf0:	1ad2      	subs	r2, r2, r3
 800abf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	621a      	str	r2, [r3, #32]
 800abfe:	e00e      	b.n	800ac1e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ac00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ac10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	785b      	ldrb	r3, [r3, #1]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d177      	bne.n	800ad1e <USB_EPStartXfer+0x4c4>
 800ac2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	61bb      	str	r3, [r7, #24]
 800ac3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	4413      	add	r3, r2
 800ac50:	61bb      	str	r3, [r7, #24]
 800ac52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	00da      	lsls	r2, r3, #3
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	4413      	add	r3, r2
 800ac64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac68:	617b      	str	r3, [r7, #20]
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	801a      	strh	r2, [r3, #0]
 800ac7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac7e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac80:	d921      	bls.n	800acc6 <USB_EPStartXfer+0x46c>
 800ac82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac86:	095b      	lsrs	r3, r3, #5
 800ac88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ac8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac90:	f003 031f 	and.w	r3, r3, #31
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d104      	bne.n	800aca2 <USB_EPStartXfer+0x448>
 800ac98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acac:	b29b      	uxth	r3, r3
 800acae:	029b      	lsls	r3, r3, #10
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	4313      	orrs	r3, r2
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	801a      	strh	r2, [r3, #0]
 800acc4:	e056      	b.n	800ad74 <USB_EPStartXfer+0x51a>
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10a      	bne.n	800ace4 <USB_EPStartXfer+0x48a>
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	881b      	ldrh	r3, [r3, #0]
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acdc:	b29a      	uxth	r2, r3
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	801a      	strh	r2, [r3, #0]
 800ace2:	e047      	b.n	800ad74 <USB_EPStartXfer+0x51a>
 800ace4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ace8:	085b      	lsrs	r3, r3, #1
 800acea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800acee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d004      	beq.n	800ad04 <USB_EPStartXfer+0x4aa>
 800acfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acfe:	3301      	adds	r3, #1
 800ad00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	029b      	lsls	r3, r3, #10
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	4313      	orrs	r3, r2
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	801a      	strh	r2, [r3, #0]
 800ad1c:	e02a      	b.n	800ad74 <USB_EPStartXfer+0x51a>
 800ad1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	785b      	ldrb	r3, [r3, #1]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d122      	bne.n	800ad74 <USB_EPStartXfer+0x51a>
 800ad2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	623b      	str	r3, [r7, #32]
 800ad3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	6a3b      	ldr	r3, [r7, #32]
 800ad4e:	4413      	add	r3, r2
 800ad50:	623b      	str	r3, [r7, #32]
 800ad52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	00da      	lsls	r2, r3, #3
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	4413      	add	r3, r2
 800ad64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad68:	61fb      	str	r3, [r7, #28]
 800ad6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ad74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	891b      	ldrh	r3, [r3, #8]
 800ad80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	6959      	ldr	r1, [r3, #20]
 800ad90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ad9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ad9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ada2:	6800      	ldr	r0, [r0, #0]
 800ada4:	f001 fa44 	bl	800c230 <USB_WritePMA>
 800ada8:	e3ee      	b.n	800b588 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800adaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	785b      	ldrb	r3, [r3, #1]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d177      	bne.n	800aeaa <USB_EPStartXfer+0x650>
 800adba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800add4:	b29b      	uxth	r3, r3
 800add6:	461a      	mov	r2, r3
 800add8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adda:	4413      	add	r3, r2
 800addc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ade2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	00da      	lsls	r2, r3, #3
 800adec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adee:	4413      	add	r3, r2
 800adf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800adf4:	647b      	str	r3, [r7, #68]	@ 0x44
 800adf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae04:	801a      	strh	r2, [r3, #0]
 800ae06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae0a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae0c:	d921      	bls.n	800ae52 <USB_EPStartXfer+0x5f8>
 800ae0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ae18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae1c:	f003 031f 	and.w	r3, r3, #31
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d104      	bne.n	800ae2e <USB_EPStartXfer+0x5d4>
 800ae24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ae2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	029b      	lsls	r3, r3, #10
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae4e:	801a      	strh	r2, [r3, #0]
 800ae50:	e056      	b.n	800af00 <USB_EPStartXfer+0x6a6>
 800ae52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10a      	bne.n	800ae70 <USB_EPStartXfer+0x616>
 800ae5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae6c:	801a      	strh	r2, [r3, #0]
 800ae6e:	e047      	b.n	800af00 <USB_EPStartXfer+0x6a6>
 800ae70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae74:	085b      	lsrs	r3, r3, #1
 800ae76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ae7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d004      	beq.n	800ae90 <USB_EPStartXfer+0x636>
 800ae86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ae90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	029b      	lsls	r3, r3, #10
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	4313      	orrs	r3, r2
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aea6:	801a      	strh	r2, [r3, #0]
 800aea8:	e02a      	b.n	800af00 <USB_EPStartXfer+0x6a6>
 800aeaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	785b      	ldrb	r3, [r3, #1]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d122      	bne.n	800af00 <USB_EPStartXfer+0x6a6>
 800aeba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	653b      	str	r3, [r7, #80]	@ 0x50
 800aec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	461a      	mov	r2, r3
 800aed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeda:	4413      	add	r3, r2
 800aedc:	653b      	str	r3, [r7, #80]	@ 0x50
 800aede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	00da      	lsls	r2, r3, #3
 800aeec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeee:	4413      	add	r3, r2
 800aef0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aefe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800af00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	891b      	ldrh	r3, [r3, #8]
 800af0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	6959      	ldr	r1, [r3, #20]
 800af1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af20:	b29b      	uxth	r3, r3
 800af22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800af26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800af2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800af2e:	6800      	ldr	r0, [r0, #0]
 800af30:	f001 f97e 	bl	800c230 <USB_WritePMA>
            ep->xfer_buff += len;
 800af34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	695a      	ldr	r2, [r3, #20]
 800af40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af44:	441a      	add	r2, r3
 800af46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800af52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6a1a      	ldr	r2, [r3, #32]
 800af5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d90f      	bls.n	800af8e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800af6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6a1a      	ldr	r2, [r3, #32]
 800af7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af7e:	1ad2      	subs	r2, r2, r3
 800af80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	621a      	str	r2, [r3, #32]
 800af8c:	e00e      	b.n	800afac <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800af8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800af9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2200      	movs	r2, #0
 800afaa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800afac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	643b      	str	r3, [r7, #64]	@ 0x40
 800afb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	785b      	ldrb	r3, [r3, #1]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d177      	bne.n	800b0b8 <USB_EPStartXfer+0x85e>
 800afc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	461a      	mov	r2, r3
 800afe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe8:	4413      	add	r3, r2
 800afea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	00da      	lsls	r2, r3, #3
 800affa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affc:	4413      	add	r3, r2
 800affe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b002:	637b      	str	r3, [r7, #52]	@ 0x34
 800b004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	b29b      	uxth	r3, r3
 800b00a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b00e:	b29a      	uxth	r2, r3
 800b010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b012:	801a      	strh	r2, [r3, #0]
 800b014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b018:	2b3e      	cmp	r3, #62	@ 0x3e
 800b01a:	d921      	bls.n	800b060 <USB_EPStartXfer+0x806>
 800b01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b020:	095b      	lsrs	r3, r3, #5
 800b022:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b02a:	f003 031f 	and.w	r3, r3, #31
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d104      	bne.n	800b03c <USB_EPStartXfer+0x7e2>
 800b032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b036:	3b01      	subs	r3, #1
 800b038:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b03c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b03e:	881b      	ldrh	r3, [r3, #0]
 800b040:	b29a      	uxth	r2, r3
 800b042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b046:	b29b      	uxth	r3, r3
 800b048:	029b      	lsls	r3, r3, #10
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4313      	orrs	r3, r2
 800b04e:	b29b      	uxth	r3, r3
 800b050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b058:	b29a      	uxth	r2, r3
 800b05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b05c:	801a      	strh	r2, [r3, #0]
 800b05e:	e050      	b.n	800b102 <USB_EPStartXfer+0x8a8>
 800b060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10a      	bne.n	800b07e <USB_EPStartXfer+0x824>
 800b068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b06a:	881b      	ldrh	r3, [r3, #0]
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b076:	b29a      	uxth	r2, r3
 800b078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07a:	801a      	strh	r2, [r3, #0]
 800b07c:	e041      	b.n	800b102 <USB_EPStartXfer+0x8a8>
 800b07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b082:	085b      	lsrs	r3, r3, #1
 800b084:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <USB_EPStartXfer+0x844>
 800b094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b098:	3301      	adds	r3, #1
 800b09a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	029b      	lsls	r3, r3, #10
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b4:	801a      	strh	r2, [r3, #0]
 800b0b6:	e024      	b.n	800b102 <USB_EPStartXfer+0x8a8>
 800b0b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	785b      	ldrb	r3, [r3, #1]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d11c      	bne.n	800b102 <USB_EPStartXfer+0x8a8>
 800b0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	461a      	mov	r2, r3
 800b0da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0dc:	4413      	add	r3, r2
 800b0de:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	00da      	lsls	r2, r3, #3
 800b0ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0f0:	4413      	add	r3, r2
 800b0f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b100:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	895b      	ldrh	r3, [r3, #10]
 800b10e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6959      	ldr	r1, [r3, #20]
 800b11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b122:	b29b      	uxth	r3, r3
 800b124:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b128:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b12c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b130:	6800      	ldr	r0, [r0, #0]
 800b132:	f001 f87d 	bl	800c230 <USB_WritePMA>
 800b136:	e227      	b.n	800b588 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b13c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6a1b      	ldr	r3, [r3, #32]
 800b144:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b14c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	881b      	ldrh	r3, [r3, #0]
 800b164:	b29b      	uxth	r3, r3
 800b166:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b16a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b16e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	441a      	add	r2, r3
 800b18c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b19c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1c4:	4413      	add	r3, r2
 800b1c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	00da      	lsls	r2, r3, #3
 800b1d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1d8:	4413      	add	r3, r2
 800b1da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b1de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	891b      	ldrh	r3, [r3, #8]
 800b1f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	6959      	ldr	r1, [r3, #20]
 800b206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b210:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b214:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b218:	6800      	ldr	r0, [r0, #0]
 800b21a:	f001 f809 	bl	800c230 <USB_WritePMA>
 800b21e:	e1b3      	b.n	800b588 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	6a1a      	ldr	r2, [r3, #32]
 800b22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b230:	1ad2      	subs	r2, r2, r3
 800b232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b24c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4413      	add	r3, r2
 800b258:	881b      	ldrh	r3, [r3, #0]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 80c6 	beq.w	800b3f2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b26a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	673b      	str	r3, [r7, #112]	@ 0x70
 800b272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	785b      	ldrb	r3, [r3, #1]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d177      	bne.n	800b372 <USB_EPStartXfer+0xb18>
 800b282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	461a      	mov	r2, r3
 800b2a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b2a2:	4413      	add	r3, r2
 800b2a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	00da      	lsls	r2, r3, #3
 800b2b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b2bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800b2be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2cc:	801a      	strh	r2, [r3, #0]
 800b2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800b2d4:	d921      	bls.n	800b31a <USB_EPStartXfer+0xac0>
 800b2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2da:	095b      	lsrs	r3, r3, #5
 800b2dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2e4:	f003 031f 	and.w	r3, r3, #31
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d104      	bne.n	800b2f6 <USB_EPStartXfer+0xa9c>
 800b2ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b2f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2f8:	881b      	ldrh	r3, [r3, #0]
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b300:	b29b      	uxth	r3, r3
 800b302:	029b      	lsls	r3, r3, #10
 800b304:	b29b      	uxth	r3, r3
 800b306:	4313      	orrs	r3, r2
 800b308:	b29b      	uxth	r3, r3
 800b30a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b30e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b312:	b29a      	uxth	r2, r3
 800b314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b316:	801a      	strh	r2, [r3, #0]
 800b318:	e050      	b.n	800b3bc <USB_EPStartXfer+0xb62>
 800b31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10a      	bne.n	800b338 <USB_EPStartXfer+0xade>
 800b322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	b29b      	uxth	r3, r3
 800b328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b32c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b330:	b29a      	uxth	r2, r3
 800b332:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b334:	801a      	strh	r2, [r3, #0]
 800b336:	e041      	b.n	800b3bc <USB_EPStartXfer+0xb62>
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b33c:	085b      	lsrs	r3, r3, #1
 800b33e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d004      	beq.n	800b358 <USB_EPStartXfer+0xafe>
 800b34e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b352:	3301      	adds	r3, #1
 800b354:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b358:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b362:	b29b      	uxth	r3, r3
 800b364:	029b      	lsls	r3, r3, #10
 800b366:	b29b      	uxth	r3, r3
 800b368:	4313      	orrs	r3, r2
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b36e:	801a      	strh	r2, [r3, #0]
 800b370:	e024      	b.n	800b3bc <USB_EPStartXfer+0xb62>
 800b372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	785b      	ldrb	r3, [r3, #1]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d11c      	bne.n	800b3bc <USB_EPStartXfer+0xb62>
 800b382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b390:	b29b      	uxth	r3, r3
 800b392:	461a      	mov	r2, r3
 800b394:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b396:	4413      	add	r3, r2
 800b398:	673b      	str	r3, [r7, #112]	@ 0x70
 800b39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b39e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	00da      	lsls	r2, r3, #3
 800b3a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3aa:	4413      	add	r3, r2
 800b3ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b3b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b3bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	895b      	ldrh	r3, [r3, #10]
 800b3c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b3cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6959      	ldr	r1, [r3, #20]
 800b3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b3e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b3e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b3ea:	6800      	ldr	r0, [r0, #0]
 800b3ec:	f000 ff20 	bl	800c230 <USB_WritePMA>
 800b3f0:	e0ca      	b.n	800b588 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	785b      	ldrb	r3, [r3, #1]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d177      	bne.n	800b4f2 <USB_EPStartXfer+0xc98>
 800b402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	461a      	mov	r2, r3
 800b420:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b422:	4413      	add	r3, r2
 800b424:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b42a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	00da      	lsls	r2, r3, #3
 800b434:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b436:	4413      	add	r3, r2
 800b438:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b43c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b43e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	b29b      	uxth	r3, r3
 800b444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b448:	b29a      	uxth	r2, r3
 800b44a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b44c:	801a      	strh	r2, [r3, #0]
 800b44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b452:	2b3e      	cmp	r3, #62	@ 0x3e
 800b454:	d921      	bls.n	800b49a <USB_EPStartXfer+0xc40>
 800b456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b45a:	095b      	lsrs	r3, r3, #5
 800b45c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b464:	f003 031f 	and.w	r3, r3, #31
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <USB_EPStartXfer+0xc1c>
 800b46c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b470:	3b01      	subs	r3, #1
 800b472:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b476:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b480:	b29b      	uxth	r3, r3
 800b482:	029b      	lsls	r3, r3, #10
 800b484:	b29b      	uxth	r3, r3
 800b486:	4313      	orrs	r3, r2
 800b488:	b29b      	uxth	r3, r3
 800b48a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b48e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b492:	b29a      	uxth	r2, r3
 800b494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b496:	801a      	strh	r2, [r3, #0]
 800b498:	e05c      	b.n	800b554 <USB_EPStartXfer+0xcfa>
 800b49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10a      	bne.n	800b4b8 <USB_EPStartXfer+0xc5e>
 800b4a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4b4:	801a      	strh	r2, [r3, #0]
 800b4b6:	e04d      	b.n	800b554 <USB_EPStartXfer+0xcfa>
 800b4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4bc:	085b      	lsrs	r3, r3, #1
 800b4be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4c6:	f003 0301 	and.w	r3, r3, #1
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d004      	beq.n	800b4d8 <USB_EPStartXfer+0xc7e>
 800b4ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b4d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	029b      	lsls	r3, r3, #10
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4ee:	801a      	strh	r2, [r3, #0]
 800b4f0:	e030      	b.n	800b554 <USB_EPStartXfer+0xcfa>
 800b4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	785b      	ldrb	r3, [r3, #1]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d128      	bne.n	800b554 <USB_EPStartXfer+0xcfa>
 800b502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b51e:	b29b      	uxth	r3, r3
 800b520:	461a      	mov	r2, r3
 800b522:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b526:	4413      	add	r3, r2
 800b528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	00da      	lsls	r2, r3, #3
 800b53a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b53e:	4413      	add	r3, r2
 800b540:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b544:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b552:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	891b      	ldrh	r3, [r3, #8]
 800b560:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	6959      	ldr	r1, [r3, #20]
 800b570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b574:	b29b      	uxth	r3, r3
 800b576:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b57a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b57e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b582:	6800      	ldr	r0, [r0, #0]
 800b584:	f000 fe54 	bl	800c230 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b58c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	881b      	ldrh	r3, [r3, #0]
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5ae:	817b      	strh	r3, [r7, #10]
 800b5b0:	897b      	ldrh	r3, [r7, #10]
 800b5b2:	f083 0310 	eor.w	r3, r3, #16
 800b5b6:	817b      	strh	r3, [r7, #10]
 800b5b8:	897b      	ldrh	r3, [r7, #10]
 800b5ba:	f083 0320 	eor.w	r3, r3, #32
 800b5be:	817b      	strh	r3, [r7, #10]
 800b5c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	441a      	add	r2, r3
 800b5da:	897b      	ldrh	r3, [r7, #10]
 800b5dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	8013      	strh	r3, [r2, #0]
 800b5f0:	f000 bcde 	b.w	800bfb0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b5f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	7b1b      	ldrb	r3, [r3, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	f040 80bb 	bne.w	800b77c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b60a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	699a      	ldr	r2, [r3, #24]
 800b612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d917      	bls.n	800b652 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	699a      	ldr	r2, [r3, #24]
 800b63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b642:	1ad2      	subs	r2, r2, r3
 800b644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	619a      	str	r2, [r3, #24]
 800b650:	e00e      	b.n	800b670 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2200      	movs	r2, #0
 800b66e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b67e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	461a      	mov	r2, r3
 800b690:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b694:	4413      	add	r3, r2
 800b696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b69a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b69e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	00da      	lsls	r2, r3, #3
 800b6a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b6ac:	4413      	add	r3, r2
 800b6ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b6b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b6b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b6c8:	801a      	strh	r2, [r3, #0]
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800b6d0:	d924      	bls.n	800b71c <USB_EPStartXfer+0xec2>
 800b6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6d6:	095b      	lsrs	r3, r3, #5
 800b6d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6e0:	f003 031f 	and.w	r3, r3, #31
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d104      	bne.n	800b6f2 <USB_EPStartXfer+0xe98>
 800b6e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b6f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	029b      	lsls	r3, r3, #10
 800b702:	b29b      	uxth	r3, r3
 800b704:	4313      	orrs	r3, r2
 800b706:	b29b      	uxth	r3, r3
 800b708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b70c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b710:	b29a      	uxth	r2, r3
 800b712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b716:	801a      	strh	r2, [r3, #0]
 800b718:	f000 bc10 	b.w	800bf3c <USB_EPStartXfer+0x16e2>
 800b71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10c      	bne.n	800b73e <USB_EPStartXfer+0xee4>
 800b724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b728:	881b      	ldrh	r3, [r3, #0]
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b734:	b29a      	uxth	r2, r3
 800b736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b73a:	801a      	strh	r2, [r3, #0]
 800b73c:	e3fe      	b.n	800bf3c <USB_EPStartXfer+0x16e2>
 800b73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b742:	085b      	lsrs	r3, r3, #1
 800b744:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b74c:	f003 0301 	and.w	r3, r3, #1
 800b750:	2b00      	cmp	r3, #0
 800b752:	d004      	beq.n	800b75e <USB_EPStartXfer+0xf04>
 800b754:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b758:	3301      	adds	r3, #1
 800b75a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b75e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	b29a      	uxth	r2, r3
 800b766:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	029b      	lsls	r3, r3, #10
 800b76e:	b29b      	uxth	r3, r3
 800b770:	4313      	orrs	r3, r2
 800b772:	b29a      	uxth	r2, r3
 800b774:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b778:	801a      	strh	r2, [r3, #0]
 800b77a:	e3df      	b.n	800bf3c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b77c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	78db      	ldrb	r3, [r3, #3]
 800b788:	2b02      	cmp	r3, #2
 800b78a:	f040 8218 	bne.w	800bbbe <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f040 809d 	bne.w	800b8da <USB_EPStartXfer+0x1080>
 800b7a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b7ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	00da      	lsls	r2, r3, #3
 800b7d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7dc:	4413      	add	r3, r2
 800b7de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b7e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b7e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b7ea:	881b      	ldrh	r3, [r3, #0]
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b7f8:	801a      	strh	r2, [r3, #0]
 800b7fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	2b3e      	cmp	r3, #62	@ 0x3e
 800b808:	d92b      	bls.n	800b862 <USB_EPStartXfer+0x1008>
 800b80a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b80e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	095b      	lsrs	r3, r3, #5
 800b818:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b81c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	f003 031f 	and.w	r3, r3, #31
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d104      	bne.n	800b83a <USB_EPStartXfer+0xfe0>
 800b830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b834:	3b01      	subs	r3, #1
 800b836:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b83a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	b29a      	uxth	r2, r3
 800b842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b846:	b29b      	uxth	r3, r3
 800b848:	029b      	lsls	r3, r3, #10
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	4313      	orrs	r3, r2
 800b84e:	b29b      	uxth	r3, r3
 800b850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b858:	b29a      	uxth	r2, r3
 800b85a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b85e:	801a      	strh	r2, [r3, #0]
 800b860:	e070      	b.n	800b944 <USB_EPStartXfer+0x10ea>
 800b862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10c      	bne.n	800b88c <USB_EPStartXfer+0x1032>
 800b872:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	b29b      	uxth	r3, r3
 800b87a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b87e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b882:	b29a      	uxth	r2, r3
 800b884:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b888:	801a      	strh	r2, [r3, #0]
 800b88a:	e05b      	b.n	800b944 <USB_EPStartXfer+0x10ea>
 800b88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	085b      	lsrs	r3, r3, #1
 800b89a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b89e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	f003 0301 	and.w	r3, r3, #1
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d004      	beq.n	800b8bc <USB_EPStartXfer+0x1062>
 800b8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b8bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	029b      	lsls	r3, r3, #10
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b8d6:	801a      	strh	r2, [r3, #0]
 800b8d8:	e034      	b.n	800b944 <USB_EPStartXfer+0x10ea>
 800b8da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	785b      	ldrb	r3, [r3, #1]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d12c      	bne.n	800b944 <USB_EPStartXfer+0x10ea>
 800b8ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b8f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b906:	b29b      	uxth	r3, r3
 800b908:	461a      	mov	r2, r3
 800b90a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b90e:	4413      	add	r3, r2
 800b910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	00da      	lsls	r2, r3, #3
 800b922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b926:	4413      	add	r3, r2
 800b928:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b92c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b942:	801a      	strh	r2, [r3, #0]
 800b944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	785b      	ldrb	r3, [r3, #1]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f040 809d 	bne.w	800ba9e <USB_EPStartXfer+0x1244>
 800b964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b980:	b29b      	uxth	r3, r3
 800b982:	461a      	mov	r2, r3
 800b984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b988:	4413      	add	r3, r2
 800b98a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	00da      	lsls	r2, r3, #3
 800b99c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b9a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b9aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b9ae:	881b      	ldrh	r3, [r3, #0]
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b9bc:	801a      	strh	r2, [r3, #0]
 800b9be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800b9cc:	d92b      	bls.n	800ba26 <USB_EPStartXfer+0x11cc>
 800b9ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	095b      	lsrs	r3, r3, #5
 800b9dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b9e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	691b      	ldr	r3, [r3, #16]
 800b9ec:	f003 031f 	and.w	r3, r3, #31
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d104      	bne.n	800b9fe <USB_EPStartXfer+0x11a4>
 800b9f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b9fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba02:	881b      	ldrh	r3, [r3, #0]
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	029b      	lsls	r3, r3, #10
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	4313      	orrs	r3, r2
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba22:	801a      	strh	r2, [r3, #0]
 800ba24:	e069      	b.n	800bafa <USB_EPStartXfer+0x12a0>
 800ba26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10c      	bne.n	800ba50 <USB_EPStartXfer+0x11f6>
 800ba36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba3a:	881b      	ldrh	r3, [r3, #0]
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba4c:	801a      	strh	r2, [r3, #0]
 800ba4e:	e054      	b.n	800bafa <USB_EPStartXfer+0x12a0>
 800ba50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ba62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d004      	beq.n	800ba80 <USB_EPStartXfer+0x1226>
 800ba76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ba80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	029b      	lsls	r3, r3, #10
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	4313      	orrs	r3, r2
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba9a:	801a      	strh	r2, [r3, #0]
 800ba9c:	e02d      	b.n	800bafa <USB_EPStartXfer+0x12a0>
 800ba9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	785b      	ldrb	r3, [r3, #1]
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d125      	bne.n	800bafa <USB_EPStartXfer+0x12a0>
 800baae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800babc:	b29b      	uxth	r3, r3
 800babe:	461a      	mov	r2, r3
 800bac0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bac4:	4413      	add	r3, r2
 800bac6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800baca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	00da      	lsls	r2, r3, #3
 800bad8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800badc:	4413      	add	r3, r2
 800bade:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800baf8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bafa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bafe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f000 8218 	beq.w	800bf3c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bb0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	881b      	ldrh	r3, [r3, #0]
 800bb28:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bb2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bb30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d005      	beq.n	800bb44 <USB_EPStartXfer+0x12ea>
 800bb38:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bb3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10d      	bne.n	800bb60 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bb44:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bb48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f040 81f5 	bne.w	800bf3c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bb52:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bb56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f040 81ee 	bne.w	800bf3c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bb60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	881b      	ldrh	r3, [r3, #0]
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb86:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800bb8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	441a      	add	r2, r3
 800bba4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	8013      	strh	r3, [r2, #0]
 800bbbc:	e1be      	b.n	800bf3c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bbbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	78db      	ldrb	r3, [r3, #3]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	f040 81b4 	bne.w	800bf38 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bbd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	699a      	ldr	r2, [r3, #24]
 800bbdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d917      	bls.n	800bc1c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800bbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800bbfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	699a      	ldr	r2, [r3, #24]
 800bc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc0c:	1ad2      	subs	r2, r2, r3
 800bc0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	619a      	str	r2, [r3, #24]
 800bc1a:	e00e      	b.n	800bc3a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800bc1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800bc2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2200      	movs	r2, #0
 800bc38:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bc3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	785b      	ldrb	r3, [r3, #1]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f040 8085 	bne.w	800bd56 <USB_EPStartXfer+0x14fc>
 800bc4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bc5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bc70:	4413      	add	r3, r2
 800bc72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bc76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	00da      	lsls	r2, r3, #3
 800bc84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bc88:	4413      	add	r3, r2
 800bc8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bc92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bca4:	801a      	strh	r2, [r3, #0]
 800bca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800bcac:	d923      	bls.n	800bcf6 <USB_EPStartXfer+0x149c>
 800bcae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcb2:	095b      	lsrs	r3, r3, #5
 800bcb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bcb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcbc:	f003 031f 	and.w	r3, r3, #31
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d104      	bne.n	800bcce <USB_EPStartXfer+0x1474>
 800bcc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bcce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bcd2:	881b      	ldrh	r3, [r3, #0]
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	029b      	lsls	r3, r3, #10
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	4313      	orrs	r3, r2
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bcf2:	801a      	strh	r2, [r3, #0]
 800bcf4:	e060      	b.n	800bdb8 <USB_EPStartXfer+0x155e>
 800bcf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10c      	bne.n	800bd18 <USB_EPStartXfer+0x14be>
 800bcfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd14:	801a      	strh	r2, [r3, #0]
 800bd16:	e04f      	b.n	800bdb8 <USB_EPStartXfer+0x155e>
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd1c:	085b      	lsrs	r3, r3, #1
 800bd1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bd22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd26:	f003 0301 	and.w	r3, r3, #1
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d004      	beq.n	800bd38 <USB_EPStartXfer+0x14de>
 800bd2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd32:	3301      	adds	r3, #1
 800bd34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bd38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd3c:	881b      	ldrh	r3, [r3, #0]
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	029b      	lsls	r3, r3, #10
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd52:	801a      	strh	r2, [r3, #0]
 800bd54:	e030      	b.n	800bdb8 <USB_EPStartXfer+0x155e>
 800bd56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	785b      	ldrb	r3, [r3, #1]
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d128      	bne.n	800bdb8 <USB_EPStartXfer+0x155e>
 800bd66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	461a      	mov	r2, r3
 800bd86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	00da      	lsls	r2, r3, #3
 800bd9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bda2:	4413      	add	r3, r2
 800bda4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bda8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bdac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bdb6:	801a      	strh	r2, [r3, #0]
 800bdb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bdc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	785b      	ldrb	r3, [r3, #1]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f040 8085 	bne.w	800bee2 <USB_EPStartXfer+0x1688>
 800bdd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bddc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bde6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bdfc:	4413      	add	r3, r2
 800bdfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800be02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	00da      	lsls	r2, r3, #3
 800be10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800be14:	4413      	add	r3, r2
 800be16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be22:	881b      	ldrh	r3, [r3, #0]
 800be24:	b29b      	uxth	r3, r3
 800be26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be30:	801a      	strh	r2, [r3, #0]
 800be32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be36:	2b3e      	cmp	r3, #62	@ 0x3e
 800be38:	d923      	bls.n	800be82 <USB_EPStartXfer+0x1628>
 800be3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be3e:	095b      	lsrs	r3, r3, #5
 800be40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800be44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be48:	f003 031f 	and.w	r3, r3, #31
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d104      	bne.n	800be5a <USB_EPStartXfer+0x1600>
 800be50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800be54:	3b01      	subs	r3, #1
 800be56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800be5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	b29a      	uxth	r2, r3
 800be62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800be66:	b29b      	uxth	r3, r3
 800be68:	029b      	lsls	r3, r3, #10
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	4313      	orrs	r3, r2
 800be6e:	b29b      	uxth	r3, r3
 800be70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be78:	b29a      	uxth	r2, r3
 800be7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be7e:	801a      	strh	r2, [r3, #0]
 800be80:	e05c      	b.n	800bf3c <USB_EPStartXfer+0x16e2>
 800be82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10c      	bne.n	800bea4 <USB_EPStartXfer+0x164a>
 800be8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	b29b      	uxth	r3, r3
 800be92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bea0:	801a      	strh	r2, [r3, #0]
 800bea2:	e04b      	b.n	800bf3c <USB_EPStartXfer+0x16e2>
 800bea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bea8:	085b      	lsrs	r3, r3, #1
 800beaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800beae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beb2:	f003 0301 	and.w	r3, r3, #1
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d004      	beq.n	800bec4 <USB_EPStartXfer+0x166a>
 800beba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bebe:	3301      	adds	r3, #1
 800bec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bec4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bec8:	881b      	ldrh	r3, [r3, #0]
 800beca:	b29a      	uxth	r2, r3
 800becc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	029b      	lsls	r3, r3, #10
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	4313      	orrs	r3, r2
 800bed8:	b29a      	uxth	r2, r3
 800beda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bede:	801a      	strh	r2, [r3, #0]
 800bee0:	e02c      	b.n	800bf3c <USB_EPStartXfer+0x16e2>
 800bee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	785b      	ldrb	r3, [r3, #1]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d124      	bne.n	800bf3c <USB_EPStartXfer+0x16e2>
 800bef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	461a      	mov	r2, r3
 800bf04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf08:	4413      	add	r3, r2
 800bf0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bf0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	00da      	lsls	r2, r3, #3
 800bf1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf20:	4413      	add	r3, r2
 800bf22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bf2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bf34:	801a      	strh	r2, [r3, #0]
 800bf36:	e001      	b.n	800bf3c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e03a      	b.n	800bfb2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bf3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf62:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bf66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bf6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bf6e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bf72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bf76:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bf7a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bf7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	441a      	add	r2, r3
 800bf98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bf9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	785b      	ldrb	r3, [r3, #1]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d020      	beq.n	800c010 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfe4:	81bb      	strh	r3, [r7, #12]
 800bfe6:	89bb      	ldrh	r3, [r7, #12]
 800bfe8:	f083 0310 	eor.w	r3, r3, #16
 800bfec:	81bb      	strh	r3, [r7, #12]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	441a      	add	r2, r3
 800bff8:	89bb      	ldrh	r3, [r7, #12]
 800bffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	8013      	strh	r3, [r2, #0]
 800c00e:	e01f      	b.n	800c050 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	881b      	ldrh	r3, [r3, #0]
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c026:	81fb      	strh	r3, [r7, #14]
 800c028:	89fb      	ldrh	r3, [r7, #14]
 800c02a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c02e:	81fb      	strh	r3, [r7, #14]
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	441a      	add	r2, r3
 800c03a:	89fb      	ldrh	r3, [r7, #14]
 800c03c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c05e:	b480      	push	{r7}
 800c060:	b087      	sub	sp, #28
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	7b1b      	ldrb	r3, [r3, #12]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f040 809d 	bne.w	800c1ac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	785b      	ldrb	r3, [r3, #1]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d04c      	beq.n	800c114 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	823b      	strh	r3, [r7, #16]
 800c088:	8a3b      	ldrh	r3, [r7, #16]
 800c08a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d01b      	beq.n	800c0ca <USB_EPClearStall+0x6c>
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0a8:	81fb      	strh	r3, [r7, #14]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	441a      	add	r2, r3
 800c0b4:	89fb      	ldrh	r3, [r7, #14]
 800c0b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	78db      	ldrb	r3, [r3, #3]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d06c      	beq.n	800c1ac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0e8:	81bb      	strh	r3, [r7, #12]
 800c0ea:	89bb      	ldrh	r3, [r7, #12]
 800c0ec:	f083 0320 	eor.w	r3, r3, #32
 800c0f0:	81bb      	strh	r3, [r7, #12]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	441a      	add	r2, r3
 800c0fc:	89bb      	ldrh	r3, [r7, #12]
 800c0fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c10a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c10e:	b29b      	uxth	r3, r3
 800c110:	8013      	strh	r3, [r2, #0]
 800c112:	e04b      	b.n	800c1ac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4413      	add	r3, r2
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	82fb      	strh	r3, [r7, #22]
 800c122:	8afb      	ldrh	r3, [r7, #22]
 800c124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d01b      	beq.n	800c164 <USB_EPClearStall+0x106>
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4413      	add	r3, r2
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	b29b      	uxth	r3, r3
 800c13a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c13e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c142:	82bb      	strh	r3, [r7, #20]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	441a      	add	r2, r3
 800c14e:	8abb      	ldrh	r3, [r7, #20]
 800c150:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c154:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c158:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c15c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c160:	b29b      	uxth	r3, r3
 800c162:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	881b      	ldrh	r3, [r3, #0]
 800c170:	b29b      	uxth	r3, r3
 800c172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c17a:	827b      	strh	r3, [r7, #18]
 800c17c:	8a7b      	ldrh	r3, [r7, #18]
 800c17e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c182:	827b      	strh	r3, [r7, #18]
 800c184:	8a7b      	ldrh	r3, [r7, #18]
 800c186:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c18a:	827b      	strh	r3, [r7, #18]
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	441a      	add	r2, r3
 800c196:	8a7b      	ldrh	r3, [r7, #18]
 800c198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c19c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	371c      	adds	r7, #28
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c1c6:	78fb      	ldrb	r3, [r7, #3]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2280      	movs	r2, #128	@ 0x80
 800c1d0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b083      	sub	sp, #12
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c21e:	b29b      	uxth	r3, r3
 800c220:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c222:	68fb      	ldr	r3, [r7, #12]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3714      	adds	r7, #20
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c230:	b480      	push	{r7}
 800c232:	b08b      	sub	sp, #44	@ 0x2c
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	4611      	mov	r1, r2
 800c23c:	461a      	mov	r2, r3
 800c23e:	460b      	mov	r3, r1
 800c240:	80fb      	strh	r3, [r7, #6]
 800c242:	4613      	mov	r3, r2
 800c244:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c246:	88bb      	ldrh	r3, [r7, #4]
 800c248:	3301      	adds	r3, #1
 800c24a:	085b      	lsrs	r3, r3, #1
 800c24c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c256:	88fa      	ldrh	r2, [r7, #6]
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	4413      	add	r3, r2
 800c25c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c260:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	627b      	str	r3, [r7, #36]	@ 0x24
 800c266:	e01b      	b.n	800c2a0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	3301      	adds	r3, #1
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	021b      	lsls	r3, r3, #8
 800c276:	b21a      	sxth	r2, r3
 800c278:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c27c:	4313      	orrs	r3, r2
 800c27e:	b21b      	sxth	r3, r3
 800c280:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c282:	6a3b      	ldr	r3, [r7, #32]
 800c284:	8a7a      	ldrh	r2, [r7, #18]
 800c286:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c288:	6a3b      	ldr	r3, [r7, #32]
 800c28a:	3302      	adds	r3, #2
 800c28c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	3301      	adds	r3, #1
 800c292:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	3301      	adds	r3, #1
 800c298:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29c:	3b01      	subs	r3, #1
 800c29e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1e0      	bne.n	800c268 <USB_WritePMA+0x38>
  }
}
 800c2a6:	bf00      	nop
 800c2a8:	bf00      	nop
 800c2aa:	372c      	adds	r7, #44	@ 0x2c
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b08b      	sub	sp, #44	@ 0x2c
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	4611      	mov	r1, r2
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	80fb      	strh	r3, [r7, #6]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c2ca:	88bb      	ldrh	r3, [r7, #4]
 800c2cc:	085b      	lsrs	r3, r3, #1
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c2da:	88fa      	ldrh	r2, [r7, #6]
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c2e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2ea:	e018      	b.n	800c31e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	881b      	ldrh	r3, [r3, #0]
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c2f4:	6a3b      	ldr	r3, [r7, #32]
 800c2f6:	3302      	adds	r3, #2
 800c2f8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	b2da      	uxtb	r2, r3
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	3301      	adds	r3, #1
 800c306:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	0a1b      	lsrs	r3, r3, #8
 800c30c:	b2da      	uxtb	r2, r3
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	3301      	adds	r3, #1
 800c316:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31a:	3b01      	subs	r3, #1
 800c31c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1e3      	bne.n	800c2ec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c324:	88bb      	ldrh	r3, [r7, #4]
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d007      	beq.n	800c340 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c330:	6a3b      	ldr	r3, [r7, #32]
 800c332:	881b      	ldrh	r3, [r3, #0]
 800c334:	b29b      	uxth	r3, r3
 800c336:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	701a      	strb	r2, [r3, #0]
  }
}
 800c340:	bf00      	nop
 800c342:	372c      	adds	r7, #44	@ 0x2c
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	460b      	mov	r3, r1
 800c356:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c358:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c35c:	f002 f8fa 	bl	800e554 <USBD_static_malloc>
 800c360:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d105      	bne.n	800c374 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800c370:	2302      	movs	r3, #2
 800c372:	e066      	b.n	800c442 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	7c1b      	ldrb	r3, [r3, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d119      	bne.n	800c3b8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c384:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c388:	2202      	movs	r2, #2
 800c38a:	2181      	movs	r1, #129	@ 0x81
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f001 ff88 	bl	800e2a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2201      	movs	r2, #1
 800c396:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c39c:	2202      	movs	r2, #2
 800c39e:	2101      	movs	r1, #1
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f001 ff7e 	bl	800e2a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2210      	movs	r2, #16
 800c3b2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800c3b6:	e016      	b.n	800c3e6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c3b8:	2340      	movs	r3, #64	@ 0x40
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	2181      	movs	r1, #129	@ 0x81
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f001 ff6f 	bl	800e2a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c3ca:	2340      	movs	r3, #64	@ 0x40
 800c3cc:	2202      	movs	r2, #2
 800c3ce:	2101      	movs	r1, #1
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f001 ff66 	bl	800e2a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2210      	movs	r2, #16
 800c3e2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c3e6:	2308      	movs	r3, #8
 800c3e8:	2203      	movs	r2, #3
 800c3ea:	2182      	movs	r1, #130	@ 0x82
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f001 ff58 	bl	800e2a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2200      	movs	r2, #0
 800c410:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	7c1b      	ldrb	r3, [r3, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d109      	bne.n	800c430 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c426:	2101      	movs	r1, #1
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f002 f829 	bl	800e480 <USBD_LL_PrepareReceive>
 800c42e:	e007      	b.n	800c440 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c436:	2340      	movs	r3, #64	@ 0x40
 800c438:	2101      	movs	r1, #1
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f002 f820 	bl	800e480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	460b      	mov	r3, r1
 800c454:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c456:	2181      	movs	r1, #129	@ 0x81
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f001 ff48 	bl	800e2ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c464:	2101      	movs	r1, #1
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f001 ff41 	bl	800e2ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c474:	2182      	movs	r1, #130	@ 0x82
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f001 ff39 	bl	800e2ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00e      	beq.n	800c4b4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f002 f862 	bl	800e570 <USBD_static_free>
    pdev->pClassData = NULL;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
	...

0800c4c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c4d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e0af      	b.n	800c648 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d03f      	beq.n	800c574 <USBD_CDC_Setup+0xb4>
 800c4f4:	2b20      	cmp	r3, #32
 800c4f6:	f040 809f 	bne.w	800c638 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	88db      	ldrh	r3, [r3, #6]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d02e      	beq.n	800c560 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	b25b      	sxtb	r3, r3
 800c508:	2b00      	cmp	r3, #0
 800c50a:	da16      	bge.n	800c53a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	683a      	ldr	r2, [r7, #0]
 800c516:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c518:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	88d2      	ldrh	r2, [r2, #6]
 800c51e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	88db      	ldrh	r3, [r3, #6]
 800c524:	2b07      	cmp	r3, #7
 800c526:	bf28      	it	cs
 800c528:	2307      	movcs	r3, #7
 800c52a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	89fa      	ldrh	r2, [r7, #14]
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f001 facd 	bl	800dad2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c538:	e085      	b.n	800c646 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	785a      	ldrb	r2, [r3, #1]
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	88db      	ldrh	r3, [r3, #6]
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c550:	6939      	ldr	r1, [r7, #16]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	88db      	ldrh	r3, [r3, #6]
 800c556:	461a      	mov	r2, r3
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f001 fae6 	bl	800db2a <USBD_CtlPrepareRx>
      break;
 800c55e:	e072      	b.n	800c646 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	7850      	ldrb	r0, [r2, #1]
 800c56c:	2200      	movs	r2, #0
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	4798      	blx	r3
      break;
 800c572:	e068      	b.n	800c646 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	785b      	ldrb	r3, [r3, #1]
 800c578:	2b0b      	cmp	r3, #11
 800c57a:	d852      	bhi.n	800c622 <USBD_CDC_Setup+0x162>
 800c57c:	a201      	add	r2, pc, #4	@ (adr r2, 800c584 <USBD_CDC_Setup+0xc4>)
 800c57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c582:	bf00      	nop
 800c584:	0800c5b5 	.word	0x0800c5b5
 800c588:	0800c631 	.word	0x0800c631
 800c58c:	0800c623 	.word	0x0800c623
 800c590:	0800c623 	.word	0x0800c623
 800c594:	0800c623 	.word	0x0800c623
 800c598:	0800c623 	.word	0x0800c623
 800c59c:	0800c623 	.word	0x0800c623
 800c5a0:	0800c623 	.word	0x0800c623
 800c5a4:	0800c623 	.word	0x0800c623
 800c5a8:	0800c623 	.word	0x0800c623
 800c5ac:	0800c5df 	.word	0x0800c5df
 800c5b0:	0800c609 	.word	0x0800c609
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b03      	cmp	r3, #3
 800c5be:	d107      	bne.n	800c5d0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c5c0:	f107 030a 	add.w	r3, r7, #10
 800c5c4:	2202      	movs	r2, #2
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f001 fa82 	bl	800dad2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c5ce:	e032      	b.n	800c636 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f001 fa0c 	bl	800d9f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	75fb      	strb	r3, [r7, #23]
          break;
 800c5dc:	e02b      	b.n	800c636 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d107      	bne.n	800c5fa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c5ea:	f107 030d 	add.w	r3, r7, #13
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f001 fa6d 	bl	800dad2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c5f8:	e01d      	b.n	800c636 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c5fa:	6839      	ldr	r1, [r7, #0]
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f001 f9f7 	bl	800d9f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800c602:	2303      	movs	r3, #3
 800c604:	75fb      	strb	r3, [r7, #23]
          break;
 800c606:	e016      	b.n	800c636 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b03      	cmp	r3, #3
 800c612:	d00f      	beq.n	800c634 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f001 f9ea 	bl	800d9f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800c61c:	2303      	movs	r3, #3
 800c61e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c620:	e008      	b.n	800c634 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f001 f9e3 	bl	800d9f0 <USBD_CtlError>
          ret = USBD_FAIL;
 800c62a:	2303      	movs	r3, #3
 800c62c:	75fb      	strb	r3, [r7, #23]
          break;
 800c62e:	e002      	b.n	800c636 <USBD_CDC_Setup+0x176>
          break;
 800c630:	bf00      	nop
 800c632:	e008      	b.n	800c646 <USBD_CDC_Setup+0x186>
          break;
 800c634:	bf00      	nop
      }
      break;
 800c636:	e006      	b.n	800c646 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f001 f9d8 	bl	800d9f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800c640:	2303      	movs	r3, #3
 800c642:	75fb      	strb	r3, [r7, #23]
      break;
 800c644:	bf00      	nop
  }

  return (uint8_t)ret;
 800c646:	7dfb      	ldrb	r3, [r7, #23]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c662:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c66e:	2303      	movs	r3, #3
 800c670:	e04f      	b.n	800c712 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c678:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c67a:	78fa      	ldrb	r2, [r7, #3]
 800c67c:	6879      	ldr	r1, [r7, #4]
 800c67e:	4613      	mov	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	440b      	add	r3, r1
 800c688:	3318      	adds	r3, #24
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d029      	beq.n	800c6e4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c690:	78fa      	ldrb	r2, [r7, #3]
 800c692:	6879      	ldr	r1, [r7, #4]
 800c694:	4613      	mov	r3, r2
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	4413      	add	r3, r2
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	440b      	add	r3, r1
 800c69e:	3318      	adds	r3, #24
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	78f9      	ldrb	r1, [r7, #3]
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	440b      	add	r3, r1
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	4403      	add	r3, r0
 800c6b0:	3320      	adds	r3, #32
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800c6b8:	fb01 f303 	mul.w	r3, r1, r3
 800c6bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d110      	bne.n	800c6e4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c6c2:	78fa      	ldrb	r2, [r7, #3]
 800c6c4:	6879      	ldr	r1, [r7, #4]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	440b      	add	r3, r1
 800c6d0:	3318      	adds	r3, #24
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c6d6:	78f9      	ldrb	r1, [r7, #3]
 800c6d8:	2300      	movs	r3, #0
 800c6da:	2200      	movs	r2, #0
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f001 feae 	bl	800e43e <USBD_LL_Transmit>
 800c6e2:	e015      	b.n	800c710 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00b      	beq.n	800c710 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c70c:	78fa      	ldrb	r2, [r7, #3]
 800c70e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b084      	sub	sp, #16
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	460b      	mov	r3, r1
 800c724:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c72c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c738:	2303      	movs	r3, #3
 800c73a:	e015      	b.n	800c768 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c73c:	78fb      	ldrb	r3, [r7, #3]
 800c73e:	4619      	mov	r1, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f001 febe 	bl	800e4c2 <USBD_LL_GetRxDataSize>
 800c746:	4602      	mov	r2, r0
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c762:	4611      	mov	r1, r2
 800c764:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c77e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c786:	2303      	movs	r3, #3
 800c788:	e01a      	b.n	800c7c0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d014      	beq.n	800c7be <USBD_CDC_EP0_RxReady+0x4e>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c79a:	2bff      	cmp	r3, #255	@ 0xff
 800c79c:	d00f      	beq.n	800c7be <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800c7ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c7b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	22ff      	movs	r2, #255	@ 0xff
 800c7ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2243      	movs	r2, #67	@ 0x43
 800c7d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c7d6:	4b03      	ldr	r3, [pc, #12]	@ (800c7e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	20000094 	.word	0x20000094

0800c7e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2243      	movs	r2, #67	@ 0x43
 800c7f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c7f6:	4b03      	ldr	r3, [pc, #12]	@ (800c804 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr
 800c804:	20000050 	.word	0x20000050

0800c808 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2243      	movs	r2, #67	@ 0x43
 800c814:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c816:	4b03      	ldr	r3, [pc, #12]	@ (800c824 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c818:	4618      	mov	r0, r3
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	200000d8 	.word	0x200000d8

0800c828 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	220a      	movs	r2, #10
 800c834:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c836:	4b03      	ldr	r3, [pc, #12]	@ (800c844 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c838:	4618      	mov	r0, r3
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	2000000c 	.word	0x2000000c

0800c848 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d101      	bne.n	800c85c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c858:	2303      	movs	r3, #3
 800c85a:	e004      	b.n	800c866 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	683a      	ldr	r2, [r7, #0]
 800c860:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr

0800c872 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c872:	b480      	push	{r7}
 800c874:	b087      	sub	sp, #28
 800c876:	af00      	add	r7, sp, #0
 800c878:	60f8      	str	r0, [r7, #12]
 800c87a:	60b9      	str	r1, [r7, #8]
 800c87c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c884:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c88c:	2303      	movs	r3, #3
 800c88e:	e008      	b.n	800c8a2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	371c      	adds	r7, #28
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c8ae:	b480      	push	{r7}
 800c8b0:	b085      	sub	sp, #20
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c8be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d101      	bne.n	800c8ca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c8c6:	2303      	movs	r3, #3
 800c8c8:	e004      	b.n	800c8d4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	683a      	ldr	r2, [r7, #0]
 800c8ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c8ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c8fe:	2303      	movs	r3, #3
 800c900:	e01a      	b.n	800c938 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d114      	bne.n	800c936 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	2201      	movs	r2, #1
 800c910:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c92a:	2181      	movs	r1, #129	@ 0x81
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f001 fd86 	bl	800e43e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c936:	7bfb      	ldrb	r3, [r7, #15]
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c94e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c95a:	2303      	movs	r3, #3
 800c95c:	e016      	b.n	800c98c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	7c1b      	ldrb	r3, [r3, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d109      	bne.n	800c97a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c96c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c970:	2101      	movs	r1, #1
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f001 fd84 	bl	800e480 <USBD_LL_PrepareReceive>
 800c978:	e007      	b.n	800c98a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c980:	2340      	movs	r3, #64	@ 0x40
 800c982:	2101      	movs	r1, #1
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f001 fd7b 	bl	800e480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	e01f      	b.n	800c9ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d003      	beq.n	800c9d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	79fa      	ldrb	r2, [r7, #7]
 800c9de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f001 fbe3 	bl	800e1ac <USBD_LL_Init>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c9ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d101      	bne.n	800ca0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	e016      	b.n	800ca3a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00b      	beq.n	800ca38 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca28:	f107 020e 	add.w	r2, r7, #14
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	4798      	blx	r3
 800ca30:	4602      	mov	r2, r0
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b082      	sub	sp, #8
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f001 fc0e 	bl	800e26c <USBD_LL_Start>
 800ca50:	4603      	mov	r3, r0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ca5a:	b480      	push	{r7}
 800ca5c:	b083      	sub	sp, #12
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d009      	beq.n	800ca9e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	78fa      	ldrb	r2, [r7, #3]
 800ca94:	4611      	mov	r1, r2
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	4798      	blx	r3
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d007      	beq.n	800cace <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	78fa      	ldrb	r2, [r7, #3]
 800cac8:	4611      	mov	r1, r2
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	4798      	blx	r3
  }

  return USBD_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	4618      	mov	r0, r3
 800caec:	f000 ff46 	bl	800d97c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cafe:	461a      	mov	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cb0c:	f003 031f 	and.w	r3, r3, #31
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d01a      	beq.n	800cb4a <USBD_LL_SetupStage+0x72>
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d822      	bhi.n	800cb5e <USBD_LL_SetupStage+0x86>
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <USBD_LL_SetupStage+0x4a>
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d00a      	beq.n	800cb36 <USBD_LL_SetupStage+0x5e>
 800cb20:	e01d      	b.n	800cb5e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f9ee 	bl	800cf0c <USBD_StdDevReq>
 800cb30:	4603      	mov	r3, r0
 800cb32:	73fb      	strb	r3, [r7, #15]
      break;
 800cb34:	e020      	b.n	800cb78 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fa52 	bl	800cfe8 <USBD_StdItfReq>
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]
      break;
 800cb48:	e016      	b.n	800cb78 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cb50:	4619      	mov	r1, r3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fa91 	bl	800d07a <USBD_StdEPReq>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb5c:	e00c      	b.n	800cb78 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cb64:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f001 fbdd 	bl	800e32c <USBD_LL_StallEP>
 800cb72:	4603      	mov	r3, r0
 800cb74:	73fb      	strb	r3, [r7, #15]
      break;
 800cb76:	bf00      	nop
  }

  return ret;
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b086      	sub	sp, #24
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	607a      	str	r2, [r7, #4]
 800cb8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cb90:	7afb      	ldrb	r3, [r7, #11]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d138      	bne.n	800cc08 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cb9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cba4:	2b03      	cmp	r3, #3
 800cba6:	d14a      	bne.n	800cc3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	689a      	ldr	r2, [r3, #8]
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d913      	bls.n	800cbdc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	689a      	ldr	r2, [r3, #8]
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	1ad2      	subs	r2, r2, r3
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	68da      	ldr	r2, [r3, #12]
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	bf28      	it	cs
 800cbce:	4613      	movcs	r3, r2
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	6879      	ldr	r1, [r7, #4]
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 ffc5 	bl	800db64 <USBD_CtlContinueRx>
 800cbda:	e030      	b.n	800cc3e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	2b03      	cmp	r3, #3
 800cbe6:	d10b      	bne.n	800cc00 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbee:	691b      	ldr	r3, [r3, #16]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d005      	beq.n	800cc00 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f000 ffc0 	bl	800db86 <USBD_CtlSendStatus>
 800cc06:	e01a      	b.n	800cc3e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b03      	cmp	r3, #3
 800cc12:	d114      	bne.n	800cc3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc1a:	699b      	ldr	r3, [r3, #24]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00e      	beq.n	800cc3e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc26:	699b      	ldr	r3, [r3, #24]
 800cc28:	7afa      	ldrb	r2, [r7, #11]
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	4798      	blx	r3
 800cc30:	4603      	mov	r3, r0
 800cc32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d001      	beq.n	800cc3e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cc3a:	7dfb      	ldrb	r3, [r7, #23]
 800cc3c:	e000      	b.n	800cc40 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3718      	adds	r7, #24
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	460b      	mov	r3, r1
 800cc52:	607a      	str	r2, [r7, #4]
 800cc54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cc56:	7afb      	ldrb	r3, [r7, #11]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d16b      	bne.n	800cd34 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	3314      	adds	r3, #20
 800cc60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d156      	bne.n	800cd1a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	689a      	ldr	r2, [r3, #8]
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d914      	bls.n	800cca2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	689a      	ldr	r2, [r3, #8]
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	1ad2      	subs	r2, r2, r3
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f000 ff3a 	bl	800db08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc94:	2300      	movs	r3, #0
 800cc96:	2200      	movs	r2, #0
 800cc98:	2100      	movs	r1, #0
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f001 fbf0 	bl	800e480 <USBD_LL_PrepareReceive>
 800cca0:	e03b      	b.n	800cd1a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	68da      	ldr	r2, [r3, #12]
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d11c      	bne.n	800cce8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d316      	bcc.n	800cce8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d20f      	bcs.n	800cce8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ccc8:	2200      	movs	r2, #0
 800ccca:	2100      	movs	r1, #0
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f000 ff1b 	bl	800db08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccda:	2300      	movs	r3, #0
 800ccdc:	2200      	movs	r2, #0
 800ccde:	2100      	movs	r1, #0
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f001 fbcd 	bl	800e480 <USBD_LL_PrepareReceive>
 800cce6:	e018      	b.n	800cd1a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	d10b      	bne.n	800cd0c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d005      	beq.n	800cd0c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd0c:	2180      	movs	r1, #128	@ 0x80
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f001 fb0c 	bl	800e32c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f000 ff49 	bl	800dbac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d122      	bne.n	800cd6a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f7ff fe98 	bl	800ca5a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cd32:	e01a      	b.n	800cd6a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	2b03      	cmp	r3, #3
 800cd3e:	d114      	bne.n	800cd6a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd46:	695b      	ldr	r3, [r3, #20]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00e      	beq.n	800cd6a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd52:	695b      	ldr	r3, [r3, #20]
 800cd54:	7afa      	ldrb	r2, [r7, #11]
 800cd56:	4611      	mov	r1, r2
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	4798      	blx	r3
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cd60:	7dfb      	ldrb	r3, [r7, #23]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800cd66:	7dfb      	ldrb	r3, [r7, #23]
 800cd68:	e000      	b.n	800cd6c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3718      	adds	r7, #24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e02f      	b.n	800ce08 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00f      	beq.n	800cdd2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d009      	beq.n	800cdd2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	6852      	ldr	r2, [r2, #4]
 800cdca:	b2d2      	uxtb	r2, r2
 800cdcc:	4611      	mov	r1, r2
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cdd2:	2340      	movs	r3, #64	@ 0x40
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f001 fa62 	bl	800e2a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2201      	movs	r2, #1
 800cde2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2240      	movs	r2, #64	@ 0x40
 800cdea:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cdee:	2340      	movs	r3, #64	@ 0x40
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2180      	movs	r1, #128	@ 0x80
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f001 fa54 	bl	800e2a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2240      	movs	r2, #64	@ 0x40
 800ce04:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	78fa      	ldrb	r2, [r7, #3]
 800ce20:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2204      	movs	r2, #4
 800ce4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ce4e:	2300      	movs	r3, #0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b04      	cmp	r3, #4
 800ce6e:	d106      	bne.n	800ce7e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d101      	bne.n	800cea2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	e012      	b.n	800cec8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	d10b      	bne.n	800cec6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ceb4:	69db      	ldr	r3, [r3, #28]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d005      	beq.n	800cec6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cec0:	69db      	ldr	r3, [r3, #28]
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b087      	sub	sp, #28
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	3301      	adds	r3, #1
 800cee6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ceee:	8a3b      	ldrh	r3, [r7, #16]
 800cef0:	021b      	lsls	r3, r3, #8
 800cef2:	b21a      	sxth	r2, r3
 800cef4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	b21b      	sxth	r3, r3
 800cefc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cefe:	89fb      	ldrh	r3, [r7, #14]
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	371c      	adds	r7, #28
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf22:	2b40      	cmp	r3, #64	@ 0x40
 800cf24:	d005      	beq.n	800cf32 <USBD_StdDevReq+0x26>
 800cf26:	2b40      	cmp	r3, #64	@ 0x40
 800cf28:	d853      	bhi.n	800cfd2 <USBD_StdDevReq+0xc6>
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00b      	beq.n	800cf46 <USBD_StdDevReq+0x3a>
 800cf2e:	2b20      	cmp	r3, #32
 800cf30:	d14f      	bne.n	800cfd2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	4798      	blx	r3
 800cf40:	4603      	mov	r3, r0
 800cf42:	73fb      	strb	r3, [r7, #15]
      break;
 800cf44:	e04a      	b.n	800cfdc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	785b      	ldrb	r3, [r3, #1]
 800cf4a:	2b09      	cmp	r3, #9
 800cf4c:	d83b      	bhi.n	800cfc6 <USBD_StdDevReq+0xba>
 800cf4e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf54 <USBD_StdDevReq+0x48>)
 800cf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf54:	0800cfa9 	.word	0x0800cfa9
 800cf58:	0800cfbd 	.word	0x0800cfbd
 800cf5c:	0800cfc7 	.word	0x0800cfc7
 800cf60:	0800cfb3 	.word	0x0800cfb3
 800cf64:	0800cfc7 	.word	0x0800cfc7
 800cf68:	0800cf87 	.word	0x0800cf87
 800cf6c:	0800cf7d 	.word	0x0800cf7d
 800cf70:	0800cfc7 	.word	0x0800cfc7
 800cf74:	0800cf9f 	.word	0x0800cf9f
 800cf78:	0800cf91 	.word	0x0800cf91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 f9de 	bl	800d340 <USBD_GetDescriptor>
          break;
 800cf84:	e024      	b.n	800cfd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fb6d 	bl	800d668 <USBD_SetAddress>
          break;
 800cf8e:	e01f      	b.n	800cfd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fbac 	bl	800d6f0 <USBD_SetConfig>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73fb      	strb	r3, [r7, #15]
          break;
 800cf9c:	e018      	b.n	800cfd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf9e:	6839      	ldr	r1, [r7, #0]
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fc4b 	bl	800d83c <USBD_GetConfig>
          break;
 800cfa6:	e013      	b.n	800cfd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fc7c 	bl	800d8a8 <USBD_GetStatus>
          break;
 800cfb0:	e00e      	b.n	800cfd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fcab 	bl	800d910 <USBD_SetFeature>
          break;
 800cfba:	e009      	b.n	800cfd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cfbc:	6839      	ldr	r1, [r7, #0]
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fcba 	bl	800d938 <USBD_ClrFeature>
          break;
 800cfc4:	e004      	b.n	800cfd0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fd11 	bl	800d9f0 <USBD_CtlError>
          break;
 800cfce:	bf00      	nop
      }
      break;
 800cfd0:	e004      	b.n	800cfdc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cfd2:	6839      	ldr	r1, [r7, #0]
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 fd0b 	bl	800d9f0 <USBD_CtlError>
      break;
 800cfda:	bf00      	nop
  }

  return ret;
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop

0800cfe8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cffe:	2b40      	cmp	r3, #64	@ 0x40
 800d000:	d005      	beq.n	800d00e <USBD_StdItfReq+0x26>
 800d002:	2b40      	cmp	r3, #64	@ 0x40
 800d004:	d82f      	bhi.n	800d066 <USBD_StdItfReq+0x7e>
 800d006:	2b00      	cmp	r3, #0
 800d008:	d001      	beq.n	800d00e <USBD_StdItfReq+0x26>
 800d00a:	2b20      	cmp	r3, #32
 800d00c:	d12b      	bne.n	800d066 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d014:	b2db      	uxtb	r3, r3
 800d016:	3b01      	subs	r3, #1
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d81d      	bhi.n	800d058 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	889b      	ldrh	r3, [r3, #4]
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b01      	cmp	r3, #1
 800d024:	d813      	bhi.n	800d04e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	6839      	ldr	r1, [r7, #0]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	4798      	blx	r3
 800d034:	4603      	mov	r3, r0
 800d036:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	88db      	ldrh	r3, [r3, #6]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d110      	bne.n	800d062 <USBD_StdItfReq+0x7a>
 800d040:	7bfb      	ldrb	r3, [r7, #15]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10d      	bne.n	800d062 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fd9d 	bl	800db86 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d04c:	e009      	b.n	800d062 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fccd 	bl	800d9f0 <USBD_CtlError>
          break;
 800d056:	e004      	b.n	800d062 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fcc8 	bl	800d9f0 <USBD_CtlError>
          break;
 800d060:	e000      	b.n	800d064 <USBD_StdItfReq+0x7c>
          break;
 800d062:	bf00      	nop
      }
      break;
 800d064:	e004      	b.n	800d070 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 fcc1 	bl	800d9f0 <USBD_CtlError>
      break;
 800d06e:	bf00      	nop
  }

  return ret;
 800d070:	7bfb      	ldrb	r3, [r7, #15]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b084      	sub	sp, #16
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d084:	2300      	movs	r3, #0
 800d086:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	889b      	ldrh	r3, [r3, #4]
 800d08c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d096:	2b40      	cmp	r3, #64	@ 0x40
 800d098:	d007      	beq.n	800d0aa <USBD_StdEPReq+0x30>
 800d09a:	2b40      	cmp	r3, #64	@ 0x40
 800d09c:	f200 8145 	bhi.w	800d32a <USBD_StdEPReq+0x2b0>
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d00c      	beq.n	800d0be <USBD_StdEPReq+0x44>
 800d0a4:	2b20      	cmp	r3, #32
 800d0a6:	f040 8140 	bne.w	800d32a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	6839      	ldr	r1, [r7, #0]
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	4798      	blx	r3
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d0bc:	e13a      	b.n	800d334 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	785b      	ldrb	r3, [r3, #1]
 800d0c2:	2b03      	cmp	r3, #3
 800d0c4:	d007      	beq.n	800d0d6 <USBD_StdEPReq+0x5c>
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	f300 8129 	bgt.w	800d31e <USBD_StdEPReq+0x2a4>
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d07f      	beq.n	800d1d0 <USBD_StdEPReq+0x156>
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d03c      	beq.n	800d14e <USBD_StdEPReq+0xd4>
 800d0d4:	e123      	b.n	800d31e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d002      	beq.n	800d0e8 <USBD_StdEPReq+0x6e>
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d016      	beq.n	800d114 <USBD_StdEPReq+0x9a>
 800d0e6:	e02c      	b.n	800d142 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0e8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00d      	beq.n	800d10a <USBD_StdEPReq+0x90>
 800d0ee:	7bbb      	ldrb	r3, [r7, #14]
 800d0f0:	2b80      	cmp	r3, #128	@ 0x80
 800d0f2:	d00a      	beq.n	800d10a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d0f4:	7bbb      	ldrb	r3, [r7, #14]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f001 f917 	bl	800e32c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0fe:	2180      	movs	r1, #128	@ 0x80
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f001 f913 	bl	800e32c <USBD_LL_StallEP>
 800d106:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d108:	e020      	b.n	800d14c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d10a:	6839      	ldr	r1, [r7, #0]
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fc6f 	bl	800d9f0 <USBD_CtlError>
              break;
 800d112:	e01b      	b.n	800d14c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	885b      	ldrh	r3, [r3, #2]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10e      	bne.n	800d13a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d11c:	7bbb      	ldrb	r3, [r7, #14]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00b      	beq.n	800d13a <USBD_StdEPReq+0xc0>
 800d122:	7bbb      	ldrb	r3, [r7, #14]
 800d124:	2b80      	cmp	r3, #128	@ 0x80
 800d126:	d008      	beq.n	800d13a <USBD_StdEPReq+0xc0>
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	88db      	ldrh	r3, [r3, #6]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d104      	bne.n	800d13a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d130:	7bbb      	ldrb	r3, [r7, #14]
 800d132:	4619      	mov	r1, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f001 f8f9 	bl	800e32c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 fd23 	bl	800db86 <USBD_CtlSendStatus>

              break;
 800d140:	e004      	b.n	800d14c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d142:	6839      	ldr	r1, [r7, #0]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 fc53 	bl	800d9f0 <USBD_CtlError>
              break;
 800d14a:	bf00      	nop
          }
          break;
 800d14c:	e0ec      	b.n	800d328 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2b02      	cmp	r3, #2
 800d158:	d002      	beq.n	800d160 <USBD_StdEPReq+0xe6>
 800d15a:	2b03      	cmp	r3, #3
 800d15c:	d016      	beq.n	800d18c <USBD_StdEPReq+0x112>
 800d15e:	e030      	b.n	800d1c2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d160:	7bbb      	ldrb	r3, [r7, #14]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00d      	beq.n	800d182 <USBD_StdEPReq+0x108>
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	2b80      	cmp	r3, #128	@ 0x80
 800d16a:	d00a      	beq.n	800d182 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d16c:	7bbb      	ldrb	r3, [r7, #14]
 800d16e:	4619      	mov	r1, r3
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f001 f8db 	bl	800e32c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d176:	2180      	movs	r1, #128	@ 0x80
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f001 f8d7 	bl	800e32c <USBD_LL_StallEP>
 800d17e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d180:	e025      	b.n	800d1ce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fc33 	bl	800d9f0 <USBD_CtlError>
              break;
 800d18a:	e020      	b.n	800d1ce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	885b      	ldrh	r3, [r3, #2]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d11b      	bne.n	800d1cc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d194:	7bbb      	ldrb	r3, [r7, #14]
 800d196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d004      	beq.n	800d1a8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d19e:	7bbb      	ldrb	r3, [r7, #14]
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f001 f8e1 	bl	800e36a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fcec 	bl	800db86 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	4798      	blx	r3
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d1c0:	e004      	b.n	800d1cc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d1c2:	6839      	ldr	r1, [r7, #0]
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 fc13 	bl	800d9f0 <USBD_CtlError>
              break;
 800d1ca:	e000      	b.n	800d1ce <USBD_StdEPReq+0x154>
              break;
 800d1cc:	bf00      	nop
          }
          break;
 800d1ce:	e0ab      	b.n	800d328 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d002      	beq.n	800d1e2 <USBD_StdEPReq+0x168>
 800d1dc:	2b03      	cmp	r3, #3
 800d1de:	d032      	beq.n	800d246 <USBD_StdEPReq+0x1cc>
 800d1e0:	e097      	b.n	800d312 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1e2:	7bbb      	ldrb	r3, [r7, #14]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d007      	beq.n	800d1f8 <USBD_StdEPReq+0x17e>
 800d1e8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ea:	2b80      	cmp	r3, #128	@ 0x80
 800d1ec:	d004      	beq.n	800d1f8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fbfd 	bl	800d9f0 <USBD_CtlError>
                break;
 800d1f6:	e091      	b.n	800d31c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	da0b      	bge.n	800d218 <USBD_StdEPReq+0x19e>
 800d200:	7bbb      	ldrb	r3, [r7, #14]
 800d202:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d206:	4613      	mov	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	4413      	add	r3, r2
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	3310      	adds	r3, #16
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	4413      	add	r3, r2
 800d214:	3304      	adds	r3, #4
 800d216:	e00b      	b.n	800d230 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d218:	7bbb      	ldrb	r3, [r7, #14]
 800d21a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d21e:	4613      	mov	r3, r2
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	4413      	add	r3, r2
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	4413      	add	r3, r2
 800d22e:	3304      	adds	r3, #4
 800d230:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	2200      	movs	r2, #0
 800d236:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	2202      	movs	r2, #2
 800d23c:	4619      	mov	r1, r3
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fc47 	bl	800dad2 <USBD_CtlSendData>
              break;
 800d244:	e06a      	b.n	800d31c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	da11      	bge.n	800d272 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d24e:	7bbb      	ldrb	r3, [r7, #14]
 800d250:	f003 020f 	and.w	r2, r3, #15
 800d254:	6879      	ldr	r1, [r7, #4]
 800d256:	4613      	mov	r3, r2
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4413      	add	r3, r2
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	440b      	add	r3, r1
 800d260:	3324      	adds	r3, #36	@ 0x24
 800d262:	881b      	ldrh	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d117      	bne.n	800d298 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d268:	6839      	ldr	r1, [r7, #0]
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fbc0 	bl	800d9f0 <USBD_CtlError>
                  break;
 800d270:	e054      	b.n	800d31c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d272:	7bbb      	ldrb	r3, [r7, #14]
 800d274:	f003 020f 	and.w	r2, r3, #15
 800d278:	6879      	ldr	r1, [r7, #4]
 800d27a:	4613      	mov	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	440b      	add	r3, r1
 800d284:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d104      	bne.n	800d298 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d28e:	6839      	ldr	r1, [r7, #0]
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 fbad 	bl	800d9f0 <USBD_CtlError>
                  break;
 800d296:	e041      	b.n	800d31c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	da0b      	bge.n	800d2b8 <USBD_StdEPReq+0x23e>
 800d2a0:	7bbb      	ldrb	r3, [r7, #14]
 800d2a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4413      	add	r3, r2
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	3310      	adds	r3, #16
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	e00b      	b.n	800d2d0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2b8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2be:	4613      	mov	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d2d2:	7bbb      	ldrb	r3, [r7, #14]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <USBD_StdEPReq+0x264>
 800d2d8:	7bbb      	ldrb	r3, [r7, #14]
 800d2da:	2b80      	cmp	r3, #128	@ 0x80
 800d2dc:	d103      	bne.n	800d2e6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	e00e      	b.n	800d304 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d2e6:	7bbb      	ldrb	r3, [r7, #14]
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f001 f85c 	bl	800e3a8 <USBD_LL_IsStallEP>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d003      	beq.n	800d2fe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	e002      	b.n	800d304 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	2200      	movs	r2, #0
 800d302:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	2202      	movs	r2, #2
 800d308:	4619      	mov	r1, r3
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 fbe1 	bl	800dad2 <USBD_CtlSendData>
              break;
 800d310:	e004      	b.n	800d31c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d312:	6839      	ldr	r1, [r7, #0]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 fb6b 	bl	800d9f0 <USBD_CtlError>
              break;
 800d31a:	bf00      	nop
          }
          break;
 800d31c:	e004      	b.n	800d328 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 fb65 	bl	800d9f0 <USBD_CtlError>
          break;
 800d326:	bf00      	nop
      }
      break;
 800d328:	e004      	b.n	800d334 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d32a:	6839      	ldr	r1, [r7, #0]
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 fb5f 	bl	800d9f0 <USBD_CtlError>
      break;
 800d332:	bf00      	nop
  }

  return ret;
 800d334:	7bfb      	ldrb	r3, [r7, #15]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
	...

0800d340 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d34a:	2300      	movs	r3, #0
 800d34c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d34e:	2300      	movs	r3, #0
 800d350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d352:	2300      	movs	r3, #0
 800d354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	885b      	ldrh	r3, [r3, #2]
 800d35a:	0a1b      	lsrs	r3, r3, #8
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	3b01      	subs	r3, #1
 800d360:	2b0e      	cmp	r3, #14
 800d362:	f200 8152 	bhi.w	800d60a <USBD_GetDescriptor+0x2ca>
 800d366:	a201      	add	r2, pc, #4	@ (adr r2, 800d36c <USBD_GetDescriptor+0x2c>)
 800d368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36c:	0800d3dd 	.word	0x0800d3dd
 800d370:	0800d3f5 	.word	0x0800d3f5
 800d374:	0800d435 	.word	0x0800d435
 800d378:	0800d60b 	.word	0x0800d60b
 800d37c:	0800d60b 	.word	0x0800d60b
 800d380:	0800d5ab 	.word	0x0800d5ab
 800d384:	0800d5d7 	.word	0x0800d5d7
 800d388:	0800d60b 	.word	0x0800d60b
 800d38c:	0800d60b 	.word	0x0800d60b
 800d390:	0800d60b 	.word	0x0800d60b
 800d394:	0800d60b 	.word	0x0800d60b
 800d398:	0800d60b 	.word	0x0800d60b
 800d39c:	0800d60b 	.word	0x0800d60b
 800d3a0:	0800d60b 	.word	0x0800d60b
 800d3a4:	0800d3a9 	.word	0x0800d3a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3ae:	69db      	ldr	r3, [r3, #28]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00b      	beq.n	800d3cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3ba:	69db      	ldr	r3, [r3, #28]
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	7c12      	ldrb	r2, [r2, #16]
 800d3c0:	f107 0108 	add.w	r1, r7, #8
 800d3c4:	4610      	mov	r0, r2
 800d3c6:	4798      	blx	r3
 800d3c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d3ca:	e126      	b.n	800d61a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 fb0e 	bl	800d9f0 <USBD_CtlError>
        err++;
 800d3d4:	7afb      	ldrb	r3, [r7, #11]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	72fb      	strb	r3, [r7, #11]
      break;
 800d3da:	e11e      	b.n	800d61a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	7c12      	ldrb	r2, [r2, #16]
 800d3e8:	f107 0108 	add.w	r1, r7, #8
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	4798      	blx	r3
 800d3f0:	60f8      	str	r0, [r7, #12]
      break;
 800d3f2:	e112      	b.n	800d61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7c1b      	ldrb	r3, [r3, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10d      	bne.n	800d418 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d404:	f107 0208 	add.w	r2, r7, #8
 800d408:	4610      	mov	r0, r2
 800d40a:	4798      	blx	r3
 800d40c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	3301      	adds	r3, #1
 800d412:	2202      	movs	r2, #2
 800d414:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d416:	e100      	b.n	800d61a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d420:	f107 0208 	add.w	r2, r7, #8
 800d424:	4610      	mov	r0, r2
 800d426:	4798      	blx	r3
 800d428:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	3301      	adds	r3, #1
 800d42e:	2202      	movs	r2, #2
 800d430:	701a      	strb	r2, [r3, #0]
      break;
 800d432:	e0f2      	b.n	800d61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	885b      	ldrh	r3, [r3, #2]
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b05      	cmp	r3, #5
 800d43c:	f200 80ac 	bhi.w	800d598 <USBD_GetDescriptor+0x258>
 800d440:	a201      	add	r2, pc, #4	@ (adr r2, 800d448 <USBD_GetDescriptor+0x108>)
 800d442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d446:	bf00      	nop
 800d448:	0800d461 	.word	0x0800d461
 800d44c:	0800d495 	.word	0x0800d495
 800d450:	0800d4c9 	.word	0x0800d4c9
 800d454:	0800d4fd 	.word	0x0800d4fd
 800d458:	0800d531 	.word	0x0800d531
 800d45c:	0800d565 	.word	0x0800d565
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00b      	beq.n	800d484 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	7c12      	ldrb	r2, [r2, #16]
 800d478:	f107 0108 	add.w	r1, r7, #8
 800d47c:	4610      	mov	r0, r2
 800d47e:	4798      	blx	r3
 800d480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d482:	e091      	b.n	800d5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d484:	6839      	ldr	r1, [r7, #0]
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fab2 	bl	800d9f0 <USBD_CtlError>
            err++;
 800d48c:	7afb      	ldrb	r3, [r7, #11]
 800d48e:	3301      	adds	r3, #1
 800d490:	72fb      	strb	r3, [r7, #11]
          break;
 800d492:	e089      	b.n	800d5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00b      	beq.n	800d4b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	7c12      	ldrb	r2, [r2, #16]
 800d4ac:	f107 0108 	add.w	r1, r7, #8
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	4798      	blx	r3
 800d4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4b6:	e077      	b.n	800d5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d4b8:	6839      	ldr	r1, [r7, #0]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 fa98 	bl	800d9f0 <USBD_CtlError>
            err++;
 800d4c0:	7afb      	ldrb	r3, [r7, #11]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800d4c6:	e06f      	b.n	800d5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00b      	beq.n	800d4ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	7c12      	ldrb	r2, [r2, #16]
 800d4e0:	f107 0108 	add.w	r1, r7, #8
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	4798      	blx	r3
 800d4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4ea:	e05d      	b.n	800d5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 fa7e 	bl	800d9f0 <USBD_CtlError>
            err++;
 800d4f4:	7afb      	ldrb	r3, [r7, #11]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4fa:	e055      	b.n	800d5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00b      	beq.n	800d520 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d50e:	691b      	ldr	r3, [r3, #16]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	7c12      	ldrb	r2, [r2, #16]
 800d514:	f107 0108 	add.w	r1, r7, #8
 800d518:	4610      	mov	r0, r2
 800d51a:	4798      	blx	r3
 800d51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d51e:	e043      	b.n	800d5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fa64 	bl	800d9f0 <USBD_CtlError>
            err++;
 800d528:	7afb      	ldrb	r3, [r7, #11]
 800d52a:	3301      	adds	r3, #1
 800d52c:	72fb      	strb	r3, [r7, #11]
          break;
 800d52e:	e03b      	b.n	800d5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00b      	beq.n	800d554 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d542:	695b      	ldr	r3, [r3, #20]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	7c12      	ldrb	r2, [r2, #16]
 800d548:	f107 0108 	add.w	r1, r7, #8
 800d54c:	4610      	mov	r0, r2
 800d54e:	4798      	blx	r3
 800d550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d552:	e029      	b.n	800d5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 fa4a 	bl	800d9f0 <USBD_CtlError>
            err++;
 800d55c:	7afb      	ldrb	r3, [r7, #11]
 800d55e:	3301      	adds	r3, #1
 800d560:	72fb      	strb	r3, [r7, #11]
          break;
 800d562:	e021      	b.n	800d5a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d56a:	699b      	ldr	r3, [r3, #24]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00b      	beq.n	800d588 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d576:	699b      	ldr	r3, [r3, #24]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	7c12      	ldrb	r2, [r2, #16]
 800d57c:	f107 0108 	add.w	r1, r7, #8
 800d580:	4610      	mov	r0, r2
 800d582:	4798      	blx	r3
 800d584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d586:	e00f      	b.n	800d5a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 fa30 	bl	800d9f0 <USBD_CtlError>
            err++;
 800d590:	7afb      	ldrb	r3, [r7, #11]
 800d592:	3301      	adds	r3, #1
 800d594:	72fb      	strb	r3, [r7, #11]
          break;
 800d596:	e007      	b.n	800d5a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d598:	6839      	ldr	r1, [r7, #0]
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 fa28 	bl	800d9f0 <USBD_CtlError>
          err++;
 800d5a0:	7afb      	ldrb	r3, [r7, #11]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d5a6:	bf00      	nop
      }
      break;
 800d5a8:	e037      	b.n	800d61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	7c1b      	ldrb	r3, [r3, #16]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d109      	bne.n	800d5c6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5ba:	f107 0208 	add.w	r2, r7, #8
 800d5be:	4610      	mov	r0, r2
 800d5c0:	4798      	blx	r3
 800d5c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5c4:	e029      	b.n	800d61a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fa11 	bl	800d9f0 <USBD_CtlError>
        err++;
 800d5ce:	7afb      	ldrb	r3, [r7, #11]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	72fb      	strb	r3, [r7, #11]
      break;
 800d5d4:	e021      	b.n	800d61a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	7c1b      	ldrb	r3, [r3, #16]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10d      	bne.n	800d5fa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5e6:	f107 0208 	add.w	r2, r7, #8
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	4798      	blx	r3
 800d5ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	2207      	movs	r2, #7
 800d5f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5f8:	e00f      	b.n	800d61a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d5fa:	6839      	ldr	r1, [r7, #0]
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 f9f7 	bl	800d9f0 <USBD_CtlError>
        err++;
 800d602:	7afb      	ldrb	r3, [r7, #11]
 800d604:	3301      	adds	r3, #1
 800d606:	72fb      	strb	r3, [r7, #11]
      break;
 800d608:	e007      	b.n	800d61a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d60a:	6839      	ldr	r1, [r7, #0]
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 f9ef 	bl	800d9f0 <USBD_CtlError>
      err++;
 800d612:	7afb      	ldrb	r3, [r7, #11]
 800d614:	3301      	adds	r3, #1
 800d616:	72fb      	strb	r3, [r7, #11]
      break;
 800d618:	bf00      	nop
  }

  if (err != 0U)
 800d61a:	7afb      	ldrb	r3, [r7, #11]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d11e      	bne.n	800d65e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	88db      	ldrh	r3, [r3, #6]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d016      	beq.n	800d656 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d628:	893b      	ldrh	r3, [r7, #8]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00e      	beq.n	800d64c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	88da      	ldrh	r2, [r3, #6]
 800d632:	893b      	ldrh	r3, [r7, #8]
 800d634:	4293      	cmp	r3, r2
 800d636:	bf28      	it	cs
 800d638:	4613      	movcs	r3, r2
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d63e:	893b      	ldrh	r3, [r7, #8]
 800d640:	461a      	mov	r2, r3
 800d642:	68f9      	ldr	r1, [r7, #12]
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 fa44 	bl	800dad2 <USBD_CtlSendData>
 800d64a:	e009      	b.n	800d660 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f9ce 	bl	800d9f0 <USBD_CtlError>
 800d654:	e004      	b.n	800d660 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 fa95 	bl	800db86 <USBD_CtlSendStatus>
 800d65c:	e000      	b.n	800d660 <USBD_GetDescriptor+0x320>
    return;
 800d65e:	bf00      	nop
  }
}
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop

0800d668 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	889b      	ldrh	r3, [r3, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d131      	bne.n	800d6de <USBD_SetAddress+0x76>
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	88db      	ldrh	r3, [r3, #6]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d12d      	bne.n	800d6de <USBD_SetAddress+0x76>
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	885b      	ldrh	r3, [r3, #2]
 800d686:	2b7f      	cmp	r3, #127	@ 0x7f
 800d688:	d829      	bhi.n	800d6de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	885b      	ldrh	r3, [r3, #2]
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d694:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	2b03      	cmp	r3, #3
 800d6a0:	d104      	bne.n	800d6ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d6a2:	6839      	ldr	r1, [r7, #0]
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 f9a3 	bl	800d9f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6aa:	e01d      	b.n	800d6e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	7bfa      	ldrb	r2, [r7, #15]
 800d6b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d6b4:	7bfb      	ldrb	r3, [r7, #15]
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 fea1 	bl	800e400 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fa61 	bl	800db86 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d6c4:	7bfb      	ldrb	r3, [r7, #15]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d004      	beq.n	800d6d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6d2:	e009      	b.n	800d6e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6dc:	e004      	b.n	800d6e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 f985 	bl	800d9f0 <USBD_CtlError>
  }
}
 800d6e6:	bf00      	nop
 800d6e8:	bf00      	nop
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	885b      	ldrh	r3, [r3, #2]
 800d702:	b2da      	uxtb	r2, r3
 800d704:	4b4c      	ldr	r3, [pc, #304]	@ (800d838 <USBD_SetConfig+0x148>)
 800d706:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d708:	4b4b      	ldr	r3, [pc, #300]	@ (800d838 <USBD_SetConfig+0x148>)
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d905      	bls.n	800d71c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d710:	6839      	ldr	r1, [r7, #0]
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f96c 	bl	800d9f0 <USBD_CtlError>
    return USBD_FAIL;
 800d718:	2303      	movs	r3, #3
 800d71a:	e088      	b.n	800d82e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d722:	b2db      	uxtb	r3, r3
 800d724:	2b02      	cmp	r3, #2
 800d726:	d002      	beq.n	800d72e <USBD_SetConfig+0x3e>
 800d728:	2b03      	cmp	r3, #3
 800d72a:	d025      	beq.n	800d778 <USBD_SetConfig+0x88>
 800d72c:	e071      	b.n	800d812 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d72e:	4b42      	ldr	r3, [pc, #264]	@ (800d838 <USBD_SetConfig+0x148>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d01c      	beq.n	800d770 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d736:	4b40      	ldr	r3, [pc, #256]	@ (800d838 <USBD_SetConfig+0x148>)
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	461a      	mov	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d740:	4b3d      	ldr	r3, [pc, #244]	@ (800d838 <USBD_SetConfig+0x148>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff f992 	bl	800ca70 <USBD_SetClassConfig>
 800d74c:	4603      	mov	r3, r0
 800d74e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d750:	7bfb      	ldrb	r3, [r7, #15]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d004      	beq.n	800d760 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d756:	6839      	ldr	r1, [r7, #0]
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 f949 	bl	800d9f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d75e:	e065      	b.n	800d82c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fa10 	bl	800db86 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2203      	movs	r2, #3
 800d76a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d76e:	e05d      	b.n	800d82c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 fa08 	bl	800db86 <USBD_CtlSendStatus>
      break;
 800d776:	e059      	b.n	800d82c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d778:	4b2f      	ldr	r3, [pc, #188]	@ (800d838 <USBD_SetConfig+0x148>)
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d112      	bne.n	800d7a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2202      	movs	r2, #2
 800d784:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d788:	4b2b      	ldr	r3, [pc, #172]	@ (800d838 <USBD_SetConfig+0x148>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	461a      	mov	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d792:	4b29      	ldr	r3, [pc, #164]	@ (800d838 <USBD_SetConfig+0x148>)
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	4619      	mov	r1, r3
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff f985 	bl	800caa8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 f9f1 	bl	800db86 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d7a4:	e042      	b.n	800d82c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d7a6:	4b24      	ldr	r3, [pc, #144]	@ (800d838 <USBD_SetConfig+0x148>)
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d02a      	beq.n	800d80a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff f973 	bl	800caa8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d7c2:	4b1d      	ldr	r3, [pc, #116]	@ (800d838 <USBD_SetConfig+0x148>)
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800d838 <USBD_SetConfig+0x148>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff f94c 	bl	800ca70 <USBD_SetClassConfig>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00f      	beq.n	800d802 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d7e2:	6839      	ldr	r1, [r7, #0]
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f000 f903 	bl	800d9f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7ff f958 	bl	800caa8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d800:	e014      	b.n	800d82c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f9bf 	bl	800db86 <USBD_CtlSendStatus>
      break;
 800d808:	e010      	b.n	800d82c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 f9bb 	bl	800db86 <USBD_CtlSendStatus>
      break;
 800d810:	e00c      	b.n	800d82c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d812:	6839      	ldr	r1, [r7, #0]
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f8eb 	bl	800d9f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d81a:	4b07      	ldr	r3, [pc, #28]	@ (800d838 <USBD_SetConfig+0x148>)
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	4619      	mov	r1, r3
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f7ff f941 	bl	800caa8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d826:	2303      	movs	r3, #3
 800d828:	73fb      	strb	r3, [r7, #15]
      break;
 800d82a:	bf00      	nop
  }

  return ret;
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	200031fc 	.word	0x200031fc

0800d83c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	88db      	ldrh	r3, [r3, #6]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d004      	beq.n	800d858 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d84e:	6839      	ldr	r1, [r7, #0]
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f000 f8cd 	bl	800d9f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d856:	e023      	b.n	800d8a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	2b02      	cmp	r3, #2
 800d862:	dc02      	bgt.n	800d86a <USBD_GetConfig+0x2e>
 800d864:	2b00      	cmp	r3, #0
 800d866:	dc03      	bgt.n	800d870 <USBD_GetConfig+0x34>
 800d868:	e015      	b.n	800d896 <USBD_GetConfig+0x5a>
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d00b      	beq.n	800d886 <USBD_GetConfig+0x4a>
 800d86e:	e012      	b.n	800d896 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	3308      	adds	r3, #8
 800d87a:	2201      	movs	r2, #1
 800d87c:	4619      	mov	r1, r3
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 f927 	bl	800dad2 <USBD_CtlSendData>
        break;
 800d884:	e00c      	b.n	800d8a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	3304      	adds	r3, #4
 800d88a:	2201      	movs	r2, #1
 800d88c:	4619      	mov	r1, r3
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 f91f 	bl	800dad2 <USBD_CtlSendData>
        break;
 800d894:	e004      	b.n	800d8a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d896:	6839      	ldr	r1, [r7, #0]
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f8a9 	bl	800d9f0 <USBD_CtlError>
        break;
 800d89e:	bf00      	nop
}
 800d8a0:	bf00      	nop
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d81e      	bhi.n	800d8fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	88db      	ldrh	r3, [r3, #6]
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d004      	beq.n	800d8d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d8c8:	6839      	ldr	r1, [r7, #0]
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f890 	bl	800d9f0 <USBD_CtlError>
        break;
 800d8d0:	e01a      	b.n	800d908 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d005      	beq.n	800d8ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	f043 0202 	orr.w	r2, r3, #2
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	330c      	adds	r3, #12
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f8eb 	bl	800dad2 <USBD_CtlSendData>
      break;
 800d8fc:	e004      	b.n	800d908 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d8fe:	6839      	ldr	r1, [r7, #0]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 f875 	bl	800d9f0 <USBD_CtlError>
      break;
 800d906:	bf00      	nop
  }
}
 800d908:	bf00      	nop
 800d90a:	3708      	adds	r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	885b      	ldrh	r3, [r3, #2]
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d106      	bne.n	800d930 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2201      	movs	r2, #1
 800d926:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f92b 	bl	800db86 <USBD_CtlSendStatus>
  }
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	3b01      	subs	r3, #1
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d80b      	bhi.n	800d968 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	885b      	ldrh	r3, [r3, #2]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d10c      	bne.n	800d972 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 f910 	bl	800db86 <USBD_CtlSendStatus>
      }
      break;
 800d966:	e004      	b.n	800d972 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d968:	6839      	ldr	r1, [r7, #0]
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 f840 	bl	800d9f0 <USBD_CtlError>
      break;
 800d970:	e000      	b.n	800d974 <USBD_ClrFeature+0x3c>
      break;
 800d972:	bf00      	nop
  }
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	781a      	ldrb	r2, [r3, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	3301      	adds	r3, #1
 800d996:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	781a      	ldrb	r2, [r3, #0]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f7ff fa92 	bl	800ced0 <SWAPBYTE>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f7ff fa85 	bl	800ced0 <SWAPBYTE>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f7ff fa78 	bl	800ced0 <SWAPBYTE>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	80da      	strh	r2, [r3, #6]
}
 800d9e8:	bf00      	nop
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9fa:	2180      	movs	r1, #128	@ 0x80
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 fc95 	bl	800e32c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800da02:	2100      	movs	r1, #0
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 fc91 	bl	800e32c <USBD_LL_StallEP>
}
 800da0a:	bf00      	nop
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b086      	sub	sp, #24
 800da16:	af00      	add	r7, sp, #0
 800da18:	60f8      	str	r0, [r7, #12]
 800da1a:	60b9      	str	r1, [r7, #8]
 800da1c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800da1e:	2300      	movs	r3, #0
 800da20:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d036      	beq.n	800da96 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800da2c:	6938      	ldr	r0, [r7, #16]
 800da2e:	f000 f836 	bl	800da9e <USBD_GetLen>
 800da32:	4603      	mov	r3, r0
 800da34:	3301      	adds	r3, #1
 800da36:	b29b      	uxth	r3, r3
 800da38:	005b      	lsls	r3, r3, #1
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800da40:	7dfb      	ldrb	r3, [r7, #23]
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	4413      	add	r3, r2
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	7812      	ldrb	r2, [r2, #0]
 800da4a:	701a      	strb	r2, [r3, #0]
  idx++;
 800da4c:	7dfb      	ldrb	r3, [r7, #23]
 800da4e:	3301      	adds	r3, #1
 800da50:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800da52:	7dfb      	ldrb	r3, [r7, #23]
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	4413      	add	r3, r2
 800da58:	2203      	movs	r2, #3
 800da5a:	701a      	strb	r2, [r3, #0]
  idx++;
 800da5c:	7dfb      	ldrb	r3, [r7, #23]
 800da5e:	3301      	adds	r3, #1
 800da60:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800da62:	e013      	b.n	800da8c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800da64:	7dfb      	ldrb	r3, [r7, #23]
 800da66:	68ba      	ldr	r2, [r7, #8]
 800da68:	4413      	add	r3, r2
 800da6a:	693a      	ldr	r2, [r7, #16]
 800da6c:	7812      	ldrb	r2, [r2, #0]
 800da6e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	3301      	adds	r3, #1
 800da74:	613b      	str	r3, [r7, #16]
    idx++;
 800da76:	7dfb      	ldrb	r3, [r7, #23]
 800da78:	3301      	adds	r3, #1
 800da7a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800da7c:	7dfb      	ldrb	r3, [r7, #23]
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	4413      	add	r3, r2
 800da82:	2200      	movs	r2, #0
 800da84:	701a      	strb	r2, [r3, #0]
    idx++;
 800da86:	7dfb      	ldrb	r3, [r7, #23]
 800da88:	3301      	adds	r3, #1
 800da8a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d1e7      	bne.n	800da64 <USBD_GetString+0x52>
 800da94:	e000      	b.n	800da98 <USBD_GetString+0x86>
    return;
 800da96:	bf00      	nop
  }
}
 800da98:	3718      	adds	r7, #24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da9e:	b480      	push	{r7}
 800daa0:	b085      	sub	sp, #20
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800daa6:	2300      	movs	r3, #0
 800daa8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800daae:	e005      	b.n	800dabc <USBD_GetLen+0x1e>
  {
    len++;
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
 800dab2:	3301      	adds	r3, #1
 800dab4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	3301      	adds	r3, #1
 800daba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1f5      	bne.n	800dab0 <USBD_GetLen+0x12>
  }

  return len;
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr

0800dad2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dad2:	b580      	push	{r7, lr}
 800dad4:	b084      	sub	sp, #16
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	60f8      	str	r0, [r7, #12]
 800dada:	60b9      	str	r1, [r7, #8]
 800dadc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2202      	movs	r2, #2
 800dae2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	2100      	movs	r1, #0
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f000 fca0 	bl	800e43e <USBD_LL_Transmit>

  return USBD_OK;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	4618      	mov	r0, r3
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	2100      	movs	r1, #0
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f000 fc8f 	bl	800e43e <USBD_LL_Transmit>

  return USBD_OK;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b084      	sub	sp, #16
 800db2e:	af00      	add	r7, sp, #0
 800db30:	60f8      	str	r0, [r7, #12]
 800db32:	60b9      	str	r1, [r7, #8]
 800db34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2203      	movs	r2, #3
 800db3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	2100      	movs	r1, #0
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f000 fc93 	bl	800e480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	68ba      	ldr	r2, [r7, #8]
 800db74:	2100      	movs	r1, #0
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f000 fc82 	bl	800e480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2204      	movs	r2, #4
 800db92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800db96:	2300      	movs	r3, #0
 800db98:	2200      	movs	r2, #0
 800db9a:	2100      	movs	r1, #0
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 fc4e 	bl	800e43e <USBD_LL_Transmit>

  return USBD_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2205      	movs	r2, #5
 800dbb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fc5c 	bl	800e480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
	...

0800dbd4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dbd8:	2200      	movs	r2, #0
 800dbda:	4912      	ldr	r1, [pc, #72]	@ (800dc24 <MX_USB_Device_Init+0x50>)
 800dbdc:	4812      	ldr	r0, [pc, #72]	@ (800dc28 <MX_USB_Device_Init+0x54>)
 800dbde:	f7fe fed9 	bl	800c994 <USBD_Init>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d001      	beq.n	800dbec <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dbe8:	f7f3 fa54 	bl	8001094 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800dbec:	490f      	ldr	r1, [pc, #60]	@ (800dc2c <MX_USB_Device_Init+0x58>)
 800dbee:	480e      	ldr	r0, [pc, #56]	@ (800dc28 <MX_USB_Device_Init+0x54>)
 800dbf0:	f7fe ff00 	bl	800c9f4 <USBD_RegisterClass>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dbfa:	f7f3 fa4b 	bl	8001094 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800dbfe:	490c      	ldr	r1, [pc, #48]	@ (800dc30 <MX_USB_Device_Init+0x5c>)
 800dc00:	4809      	ldr	r0, [pc, #36]	@ (800dc28 <MX_USB_Device_Init+0x54>)
 800dc02:	f7fe fe21 	bl	800c848 <USBD_CDC_RegisterInterface>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d001      	beq.n	800dc10 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800dc0c:	f7f3 fa42 	bl	8001094 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dc10:	4805      	ldr	r0, [pc, #20]	@ (800dc28 <MX_USB_Device_Init+0x54>)
 800dc12:	f7fe ff16 	bl	800ca42 <USBD_Start>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d001      	beq.n	800dc20 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800dc1c:	f7f3 fa3a 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dc20:	bf00      	nop
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	20000130 	.word	0x20000130
 800dc28:	20003200 	.word	0x20003200
 800dc2c:	20000018 	.word	0x20000018
 800dc30:	2000011c 	.word	0x2000011c

0800dc34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dc38:	2200      	movs	r2, #0
 800dc3a:	4905      	ldr	r1, [pc, #20]	@ (800dc50 <CDC_Init_FS+0x1c>)
 800dc3c:	4805      	ldr	r0, [pc, #20]	@ (800dc54 <CDC_Init_FS+0x20>)
 800dc3e:	f7fe fe18 	bl	800c872 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dc42:	4905      	ldr	r1, [pc, #20]	@ (800dc58 <CDC_Init_FS+0x24>)
 800dc44:	4803      	ldr	r0, [pc, #12]	@ (800dc54 <CDC_Init_FS+0x20>)
 800dc46:	f7fe fe32 	bl	800c8ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dc4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	20003cd0 	.word	0x20003cd0
 800dc54:	20003200 	.word	0x20003200
 800dc58:	200034d0 	.word	0x200034d0

0800dc5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dc60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	6039      	str	r1, [r7, #0]
 800dc76:	71fb      	strb	r3, [r7, #7]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dc7c:	79fb      	ldrb	r3, [r7, #7]
 800dc7e:	2b23      	cmp	r3, #35	@ 0x23
 800dc80:	d84a      	bhi.n	800dd18 <CDC_Control_FS+0xac>
 800dc82:	a201      	add	r2, pc, #4	@ (adr r2, 800dc88 <CDC_Control_FS+0x1c>)
 800dc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc88:	0800dd19 	.word	0x0800dd19
 800dc8c:	0800dd19 	.word	0x0800dd19
 800dc90:	0800dd19 	.word	0x0800dd19
 800dc94:	0800dd19 	.word	0x0800dd19
 800dc98:	0800dd19 	.word	0x0800dd19
 800dc9c:	0800dd19 	.word	0x0800dd19
 800dca0:	0800dd19 	.word	0x0800dd19
 800dca4:	0800dd19 	.word	0x0800dd19
 800dca8:	0800dd19 	.word	0x0800dd19
 800dcac:	0800dd19 	.word	0x0800dd19
 800dcb0:	0800dd19 	.word	0x0800dd19
 800dcb4:	0800dd19 	.word	0x0800dd19
 800dcb8:	0800dd19 	.word	0x0800dd19
 800dcbc:	0800dd19 	.word	0x0800dd19
 800dcc0:	0800dd19 	.word	0x0800dd19
 800dcc4:	0800dd19 	.word	0x0800dd19
 800dcc8:	0800dd19 	.word	0x0800dd19
 800dccc:	0800dd19 	.word	0x0800dd19
 800dcd0:	0800dd19 	.word	0x0800dd19
 800dcd4:	0800dd19 	.word	0x0800dd19
 800dcd8:	0800dd19 	.word	0x0800dd19
 800dcdc:	0800dd19 	.word	0x0800dd19
 800dce0:	0800dd19 	.word	0x0800dd19
 800dce4:	0800dd19 	.word	0x0800dd19
 800dce8:	0800dd19 	.word	0x0800dd19
 800dcec:	0800dd19 	.word	0x0800dd19
 800dcf0:	0800dd19 	.word	0x0800dd19
 800dcf4:	0800dd19 	.word	0x0800dd19
 800dcf8:	0800dd19 	.word	0x0800dd19
 800dcfc:	0800dd19 	.word	0x0800dd19
 800dd00:	0800dd19 	.word	0x0800dd19
 800dd04:	0800dd19 	.word	0x0800dd19
 800dd08:	0800dd19 	.word	0x0800dd19
 800dd0c:	0800dd19 	.word	0x0800dd19
 800dd10:	0800dd19 	.word	0x0800dd19
 800dd14:	0800dd19 	.word	0x0800dd19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dd18:	bf00      	nop
  }

  return (USBD_OK);
 800dd1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dd32:	6879      	ldr	r1, [r7, #4]
 800dd34:	4805      	ldr	r0, [pc, #20]	@ (800dd4c <CDC_Receive_FS+0x24>)
 800dd36:	f7fe fdba 	bl	800c8ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dd3a:	4804      	ldr	r0, [pc, #16]	@ (800dd4c <CDC_Receive_FS+0x24>)
 800dd3c:	f7fe fe00 	bl	800c940 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dd40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	20003200 	.word	0x20003200

0800dd50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dd60:	4b0d      	ldr	r3, [pc, #52]	@ (800dd98 <CDC_Transmit_FS+0x48>)
 800dd62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d001      	beq.n	800dd76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e00b      	b.n	800dd8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dd76:	887b      	ldrh	r3, [r7, #2]
 800dd78:	461a      	mov	r2, r3
 800dd7a:	6879      	ldr	r1, [r7, #4]
 800dd7c:	4806      	ldr	r0, [pc, #24]	@ (800dd98 <CDC_Transmit_FS+0x48>)
 800dd7e:	f7fe fd78 	bl	800c872 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd82:	4805      	ldr	r0, [pc, #20]	@ (800dd98 <CDC_Transmit_FS+0x48>)
 800dd84:	f7fe fdac 	bl	800c8e0 <USBD_CDC_TransmitPacket>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20003200 	.word	0x20003200

0800dd9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b087      	sub	sp, #28
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	4613      	mov	r3, r2
 800dda8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ddae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	371c      	adds	r7, #28
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr
	...

0800ddc0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	6039      	str	r1, [r7, #0]
 800ddca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	2212      	movs	r2, #18
 800ddd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ddd2:	4b03      	ldr	r3, [pc, #12]	@ (800dde0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr
 800dde0:	20000150 	.word	0x20000150

0800dde4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	6039      	str	r1, [r7, #0]
 800ddee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	2204      	movs	r2, #4
 800ddf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ddf6:	4b03      	ldr	r3, [pc, #12]	@ (800de04 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	20000164 	.word	0x20000164

0800de08 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4603      	mov	r3, r0
 800de10:	6039      	str	r1, [r7, #0]
 800de12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de14:	79fb      	ldrb	r3, [r7, #7]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d105      	bne.n	800de26 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	4907      	ldr	r1, [pc, #28]	@ (800de3c <USBD_CDC_ProductStrDescriptor+0x34>)
 800de1e:	4808      	ldr	r0, [pc, #32]	@ (800de40 <USBD_CDC_ProductStrDescriptor+0x38>)
 800de20:	f7ff fdf7 	bl	800da12 <USBD_GetString>
 800de24:	e004      	b.n	800de30 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800de26:	683a      	ldr	r2, [r7, #0]
 800de28:	4904      	ldr	r1, [pc, #16]	@ (800de3c <USBD_CDC_ProductStrDescriptor+0x34>)
 800de2a:	4805      	ldr	r0, [pc, #20]	@ (800de40 <USBD_CDC_ProductStrDescriptor+0x38>)
 800de2c:	f7ff fdf1 	bl	800da12 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de30:	4b02      	ldr	r3, [pc, #8]	@ (800de3c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800de32:	4618      	mov	r0, r3
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	200044d0 	.word	0x200044d0
 800de40:	0800ef60 	.word	0x0800ef60

0800de44 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	4603      	mov	r3, r0
 800de4c:	6039      	str	r1, [r7, #0]
 800de4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	4904      	ldr	r1, [pc, #16]	@ (800de64 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800de54:	4804      	ldr	r0, [pc, #16]	@ (800de68 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800de56:	f7ff fddc 	bl	800da12 <USBD_GetString>
  return USBD_StrDesc;
 800de5a:	4b02      	ldr	r3, [pc, #8]	@ (800de64 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	200044d0 	.word	0x200044d0
 800de68:	0800ef78 	.word	0x0800ef78

0800de6c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	4603      	mov	r3, r0
 800de74:	6039      	str	r1, [r7, #0]
 800de76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	221a      	movs	r2, #26
 800de7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de7e:	f000 f843 	bl	800df08 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800de82:	4b02      	ldr	r3, [pc, #8]	@ (800de8c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800de84:	4618      	mov	r0, r3
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	20000168 	.word	0x20000168

0800de90 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	4603      	mov	r3, r0
 800de98:	6039      	str	r1, [r7, #0]
 800de9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de9c:	79fb      	ldrb	r3, [r7, #7]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d105      	bne.n	800deae <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dea2:	683a      	ldr	r2, [r7, #0]
 800dea4:	4907      	ldr	r1, [pc, #28]	@ (800dec4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dea6:	4808      	ldr	r0, [pc, #32]	@ (800dec8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dea8:	f7ff fdb3 	bl	800da12 <USBD_GetString>
 800deac:	e004      	b.n	800deb8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	4904      	ldr	r1, [pc, #16]	@ (800dec4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800deb2:	4805      	ldr	r0, [pc, #20]	@ (800dec8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800deb4:	f7ff fdad 	bl	800da12 <USBD_GetString>
  }
  return USBD_StrDesc;
 800deb8:	4b02      	ldr	r3, [pc, #8]	@ (800dec4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800deba:	4618      	mov	r0, r3
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	200044d0 	.word	0x200044d0
 800dec8:	0800ef8c 	.word	0x0800ef8c

0800decc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	6039      	str	r1, [r7, #0]
 800ded6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ded8:	79fb      	ldrb	r3, [r7, #7]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d105      	bne.n	800deea <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dede:	683a      	ldr	r2, [r7, #0]
 800dee0:	4907      	ldr	r1, [pc, #28]	@ (800df00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dee2:	4808      	ldr	r0, [pc, #32]	@ (800df04 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dee4:	f7ff fd95 	bl	800da12 <USBD_GetString>
 800dee8:	e004      	b.n	800def4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	4904      	ldr	r1, [pc, #16]	@ (800df00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800deee:	4805      	ldr	r0, [pc, #20]	@ (800df04 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800def0:	f7ff fd8f 	bl	800da12 <USBD_GetString>
  }
  return USBD_StrDesc;
 800def4:	4b02      	ldr	r3, [pc, #8]	@ (800df00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800def6:	4618      	mov	r0, r3
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	200044d0 	.word	0x200044d0
 800df04:	0800ef98 	.word	0x0800ef98

0800df08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800df0e:	4b0f      	ldr	r3, [pc, #60]	@ (800df4c <Get_SerialNum+0x44>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df14:	4b0e      	ldr	r3, [pc, #56]	@ (800df50 <Get_SerialNum+0x48>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df1a:	4b0e      	ldr	r3, [pc, #56]	@ (800df54 <Get_SerialNum+0x4c>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4413      	add	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d009      	beq.n	800df42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df2e:	2208      	movs	r2, #8
 800df30:	4909      	ldr	r1, [pc, #36]	@ (800df58 <Get_SerialNum+0x50>)
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f000 f814 	bl	800df60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df38:	2204      	movs	r2, #4
 800df3a:	4908      	ldr	r1, [pc, #32]	@ (800df5c <Get_SerialNum+0x54>)
 800df3c:	68b8      	ldr	r0, [r7, #8]
 800df3e:	f000 f80f 	bl	800df60 <IntToUnicode>
  }
}
 800df42:	bf00      	nop
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	1fff7590 	.word	0x1fff7590
 800df50:	1fff7594 	.word	0x1fff7594
 800df54:	1fff7598 	.word	0x1fff7598
 800df58:	2000016a 	.word	0x2000016a
 800df5c:	2000017a 	.word	0x2000017a

0800df60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df60:	b480      	push	{r7}
 800df62:	b087      	sub	sp, #28
 800df64:	af00      	add	r7, sp, #0
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	4613      	mov	r3, r2
 800df6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df6e:	2300      	movs	r3, #0
 800df70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df72:	2300      	movs	r3, #0
 800df74:	75fb      	strb	r3, [r7, #23]
 800df76:	e027      	b.n	800dfc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	0f1b      	lsrs	r3, r3, #28
 800df7c:	2b09      	cmp	r3, #9
 800df7e:	d80b      	bhi.n	800df98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	0f1b      	lsrs	r3, r3, #28
 800df84:	b2da      	uxtb	r2, r3
 800df86:	7dfb      	ldrb	r3, [r7, #23]
 800df88:	005b      	lsls	r3, r3, #1
 800df8a:	4619      	mov	r1, r3
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	440b      	add	r3, r1
 800df90:	3230      	adds	r2, #48	@ 0x30
 800df92:	b2d2      	uxtb	r2, r2
 800df94:	701a      	strb	r2, [r3, #0]
 800df96:	e00a      	b.n	800dfae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	0f1b      	lsrs	r3, r3, #28
 800df9c:	b2da      	uxtb	r2, r3
 800df9e:	7dfb      	ldrb	r3, [r7, #23]
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	440b      	add	r3, r1
 800dfa8:	3237      	adds	r2, #55	@ 0x37
 800dfaa:	b2d2      	uxtb	r2, r2
 800dfac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	011b      	lsls	r3, r3, #4
 800dfb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dfb4:	7dfb      	ldrb	r3, [r7, #23]
 800dfb6:	005b      	lsls	r3, r3, #1
 800dfb8:	3301      	adds	r3, #1
 800dfba:	68ba      	ldr	r2, [r7, #8]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dfc2:	7dfb      	ldrb	r3, [r7, #23]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	75fb      	strb	r3, [r7, #23]
 800dfc8:	7dfa      	ldrb	r2, [r7, #23]
 800dfca:	79fb      	ldrb	r3, [r7, #7]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d3d3      	bcc.n	800df78 <IntToUnicode+0x18>
  }
}
 800dfd0:	bf00      	nop
 800dfd2:	bf00      	nop
 800dfd4:	371c      	adds	r7, #28
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
	...

0800dfe0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b098      	sub	sp, #96	@ 0x60
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dfe8:	f107 030c 	add.w	r3, r7, #12
 800dfec:	2254      	movs	r2, #84	@ 0x54
 800dfee:	2100      	movs	r1, #0
 800dff0:	4618      	mov	r0, r3
 800dff2:	f000 fb19 	bl	800e628 <memset>
  if(pcdHandle->Instance==USB)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a15      	ldr	r2, [pc, #84]	@ (800e050 <HAL_PCD_MspInit+0x70>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d122      	bne.n	800e046 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e000:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e004:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e006:	2300      	movs	r3, #0
 800e008:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e00a:	f107 030c 	add.w	r3, r7, #12
 800e00e:	4618      	mov	r0, r3
 800e010:	f7f8 fd90 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e01a:	f7f3 f83b 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e01e:	4b0d      	ldr	r3, [pc, #52]	@ (800e054 <HAL_PCD_MspInit+0x74>)
 800e020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e022:	4a0c      	ldr	r2, [pc, #48]	@ (800e054 <HAL_PCD_MspInit+0x74>)
 800e024:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e028:	6593      	str	r3, [r2, #88]	@ 0x58
 800e02a:	4b0a      	ldr	r3, [pc, #40]	@ (800e054 <HAL_PCD_MspInit+0x74>)
 800e02c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e02e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e032:	60bb      	str	r3, [r7, #8]
 800e034:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e036:	2200      	movs	r2, #0
 800e038:	2100      	movs	r1, #0
 800e03a:	2014      	movs	r0, #20
 800e03c:	f7f5 fd37 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e040:	2014      	movs	r0, #20
 800e042:	f7f5 fd4e 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e046:	bf00      	nop
 800e048:	3760      	adds	r7, #96	@ 0x60
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	40005c00 	.word	0x40005c00
 800e054:	40021000 	.word	0x40021000

0800e058 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e06c:	4619      	mov	r1, r3
 800e06e:	4610      	mov	r0, r2
 800e070:	f7fe fd32 	bl	800cad8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e074:	bf00      	nop
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	460b      	mov	r3, r1
 800e086:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e08e:	78fa      	ldrb	r2, [r7, #3]
 800e090:	6879      	ldr	r1, [r7, #4]
 800e092:	4613      	mov	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	00db      	lsls	r3, r3, #3
 800e09a:	440b      	add	r3, r1
 800e09c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	78fb      	ldrb	r3, [r7, #3]
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	f7fe fd6c 	bl	800cb82 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e0aa:	bf00      	nop
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b082      	sub	sp, #8
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e0c4:	78fa      	ldrb	r2, [r7, #3]
 800e0c6:	6879      	ldr	r1, [r7, #4]
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	4413      	add	r3, r2
 800e0ce:	00db      	lsls	r3, r3, #3
 800e0d0:	440b      	add	r3, r1
 800e0d2:	3324      	adds	r3, #36	@ 0x24
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	78fb      	ldrb	r3, [r7, #3]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	f7fe fdb5 	bl	800cc48 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e0de:	bf00      	nop
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b082      	sub	sp, #8
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fe fec9 	bl	800ce8c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e0fa:	bf00      	nop
 800e0fc:	3708      	adds	r7, #8
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b084      	sub	sp, #16
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e10a:	2301      	movs	r3, #1
 800e10c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	795b      	ldrb	r3, [r3, #5]
 800e112:	2b02      	cmp	r3, #2
 800e114:	d001      	beq.n	800e11a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e116:	f7f2 ffbd 	bl	8001094 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e120:	7bfa      	ldrb	r2, [r7, #15]
 800e122:	4611      	mov	r1, r2
 800e124:	4618      	mov	r0, r3
 800e126:	f7fe fe73 	bl	800ce10 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e130:	4618      	mov	r0, r3
 800e132:	f7fe fe1f 	bl	800cd74 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e136:	bf00      	nop
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
	...

0800e140 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fe fe6e 	bl	800ce30 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	7a5b      	ldrb	r3, [r3, #9]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d005      	beq.n	800e168 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e15c:	4b04      	ldr	r3, [pc, #16]	@ (800e170 <HAL_PCD_SuspendCallback+0x30>)
 800e15e:	691b      	ldr	r3, [r3, #16]
 800e160:	4a03      	ldr	r2, [pc, #12]	@ (800e170 <HAL_PCD_SuspendCallback+0x30>)
 800e162:	f043 0306 	orr.w	r3, r3, #6
 800e166:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e168:	bf00      	nop
 800e16a:	3708      	adds	r7, #8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	e000ed00 	.word	0xe000ed00

0800e174 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	7a5b      	ldrb	r3, [r3, #9]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d007      	beq.n	800e194 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e184:	4b08      	ldr	r3, [pc, #32]	@ (800e1a8 <HAL_PCD_ResumeCallback+0x34>)
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	4a07      	ldr	r2, [pc, #28]	@ (800e1a8 <HAL_PCD_ResumeCallback+0x34>)
 800e18a:	f023 0306 	bic.w	r3, r3, #6
 800e18e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e190:	f000 f9f8 	bl	800e584 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe fe5e 	bl	800ce5c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e1a0:	bf00      	nop
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	e000ed00 	.word	0xe000ed00

0800e1ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e1b4:	4a2b      	ldr	r2, [pc, #172]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	4a29      	ldr	r2, [pc, #164]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1c0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e1c4:	4b27      	ldr	r3, [pc, #156]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1c6:	4a28      	ldr	r2, [pc, #160]	@ (800e268 <USBD_LL_Init+0xbc>)
 800e1c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e1ca:	4b26      	ldr	r3, [pc, #152]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1cc:	2208      	movs	r2, #8
 800e1ce:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e1d0:	4b24      	ldr	r3, [pc, #144]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1d2:	2202      	movs	r2, #2
 800e1d4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e1d6:	4b23      	ldr	r3, [pc, #140]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1d8:	2202      	movs	r2, #2
 800e1da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e1dc:	4b21      	ldr	r3, [pc, #132]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e1e2:	4b20      	ldr	r3, [pc, #128]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e1e8:	4b1e      	ldr	r3, [pc, #120]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e1ee:	4b1d      	ldr	r3, [pc, #116]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e1f4:	481b      	ldr	r0, [pc, #108]	@ (800e264 <USBD_LL_Init+0xb8>)
 800e1f6:	f7f6 f9c0 	bl	800457a <HAL_PCD_Init>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e200:	f7f2 ff48 	bl	8001094 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e20a:	2318      	movs	r3, #24
 800e20c:	2200      	movs	r2, #0
 800e20e:	2100      	movs	r1, #0
 800e210:	f7f7 fe79 	bl	8005f06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e21a:	2358      	movs	r3, #88	@ 0x58
 800e21c:	2200      	movs	r2, #0
 800e21e:	2180      	movs	r1, #128	@ 0x80
 800e220:	f7f7 fe71 	bl	8005f06 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e22a:	23c0      	movs	r3, #192	@ 0xc0
 800e22c:	2200      	movs	r2, #0
 800e22e:	2181      	movs	r1, #129	@ 0x81
 800e230:	f7f7 fe69 	bl	8005f06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e23a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e23e:	2200      	movs	r2, #0
 800e240:	2101      	movs	r1, #1
 800e242:	f7f7 fe60 	bl	8005f06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e24c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e250:	2200      	movs	r2, #0
 800e252:	2182      	movs	r1, #130	@ 0x82
 800e254:	f7f7 fe57 	bl	8005f06 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e258:	2300      	movs	r3, #0
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	200046d0 	.word	0x200046d0
 800e268:	40005c00 	.word	0x40005c00

0800e26c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e282:	4618      	mov	r0, r3
 800e284:	f7f6 fa47 	bl	8004716 <HAL_PCD_Start>
 800e288:	4603      	mov	r3, r0
 800e28a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e28c:	7bfb      	ldrb	r3, [r7, #15]
 800e28e:	4618      	mov	r0, r3
 800e290:	f000 f97e 	bl	800e590 <USBD_Get_USB_Status>
 800e294:	4603      	mov	r3, r0
 800e296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e298:	7bbb      	ldrb	r3, [r7, #14]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b084      	sub	sp, #16
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
 800e2aa:	4608      	mov	r0, r1
 800e2ac:	4611      	mov	r1, r2
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	70fb      	strb	r3, [r7, #3]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	70bb      	strb	r3, [r7, #2]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e2ca:	78bb      	ldrb	r3, [r7, #2]
 800e2cc:	883a      	ldrh	r2, [r7, #0]
 800e2ce:	78f9      	ldrb	r1, [r7, #3]
 800e2d0:	f7f6 fb8e 	bl	80049f0 <HAL_PCD_EP_Open>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2d8:	7bfb      	ldrb	r3, [r7, #15]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f000 f958 	bl	800e590 <USBD_Get_USB_Status>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b084      	sub	sp, #16
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e308:	78fa      	ldrb	r2, [r7, #3]
 800e30a:	4611      	mov	r1, r2
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7f6 fbcc 	bl	8004aaa <HAL_PCD_EP_Close>
 800e312:	4603      	mov	r3, r0
 800e314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e316:	7bfb      	ldrb	r3, [r7, #15]
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 f939 	bl	800e590 <USBD_Get_USB_Status>
 800e31e:	4603      	mov	r3, r0
 800e320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e322:	7bbb      	ldrb	r3, [r7, #14]
}
 800e324:	4618      	mov	r0, r3
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	460b      	mov	r3, r1
 800e336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e338:	2300      	movs	r3, #0
 800e33a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e33c:	2300      	movs	r3, #0
 800e33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e346:	78fa      	ldrb	r2, [r7, #3]
 800e348:	4611      	mov	r1, r2
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7f6 fc75 	bl	8004c3a <HAL_PCD_EP_SetStall>
 800e350:	4603      	mov	r3, r0
 800e352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e354:	7bfb      	ldrb	r3, [r7, #15]
 800e356:	4618      	mov	r0, r3
 800e358:	f000 f91a 	bl	800e590 <USBD_Get_USB_Status>
 800e35c:	4603      	mov	r3, r0
 800e35e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e360:	7bbb      	ldrb	r3, [r7, #14]
}
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b084      	sub	sp, #16
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	460b      	mov	r3, r1
 800e374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e376:	2300      	movs	r3, #0
 800e378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e384:	78fa      	ldrb	r2, [r7, #3]
 800e386:	4611      	mov	r1, r2
 800e388:	4618      	mov	r0, r3
 800e38a:	f7f6 fca8 	bl	8004cde <HAL_PCD_EP_ClrStall>
 800e38e:	4603      	mov	r3, r0
 800e390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e392:	7bfb      	ldrb	r3, [r7, #15]
 800e394:	4618      	mov	r0, r3
 800e396:	f000 f8fb 	bl	800e590 <USBD_Get_USB_Status>
 800e39a:	4603      	mov	r3, r0
 800e39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e3ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e3bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	da0b      	bge.n	800e3dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e3c4:	78fb      	ldrb	r3, [r7, #3]
 800e3c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3ca:	68f9      	ldr	r1, [r7, #12]
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4413      	add	r3, r2
 800e3d2:	00db      	lsls	r3, r3, #3
 800e3d4:	440b      	add	r3, r1
 800e3d6:	3312      	adds	r3, #18
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	e00b      	b.n	800e3f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e3dc:	78fb      	ldrb	r3, [r7, #3]
 800e3de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3e2:	68f9      	ldr	r1, [r7, #12]
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	4413      	add	r3, r2
 800e3ea:	00db      	lsls	r3, r3, #3
 800e3ec:	440b      	add	r3, r1
 800e3ee:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e3f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3714      	adds	r7, #20
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr

0800e400 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	460b      	mov	r3, r1
 800e40a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e40c:	2300      	movs	r3, #0
 800e40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e410:	2300      	movs	r3, #0
 800e412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e41a:	78fa      	ldrb	r2, [r7, #3]
 800e41c:	4611      	mov	r1, r2
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f6 fac2 	bl	80049a8 <HAL_PCD_SetAddress>
 800e424:	4603      	mov	r3, r0
 800e426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e428:	7bfb      	ldrb	r3, [r7, #15]
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 f8b0 	bl	800e590 <USBD_Get_USB_Status>
 800e430:	4603      	mov	r3, r0
 800e432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e434:	7bbb      	ldrb	r3, [r7, #14]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b086      	sub	sp, #24
 800e442:	af00      	add	r7, sp, #0
 800e444:	60f8      	str	r0, [r7, #12]
 800e446:	607a      	str	r2, [r7, #4]
 800e448:	603b      	str	r3, [r7, #0]
 800e44a:	460b      	mov	r3, r1
 800e44c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e44e:	2300      	movs	r3, #0
 800e450:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e45c:	7af9      	ldrb	r1, [r7, #11]
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	f7f6 fbb3 	bl	8004bcc <HAL_PCD_EP_Transmit>
 800e466:	4603      	mov	r3, r0
 800e468:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e46a:	7dfb      	ldrb	r3, [r7, #23]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f000 f88f 	bl	800e590 <USBD_Get_USB_Status>
 800e472:	4603      	mov	r3, r0
 800e474:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e476:	7dbb      	ldrb	r3, [r7, #22]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3718      	adds	r7, #24
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	607a      	str	r2, [r7, #4]
 800e48a:	603b      	str	r3, [r7, #0]
 800e48c:	460b      	mov	r3, r1
 800e48e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e490:	2300      	movs	r3, #0
 800e492:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e494:	2300      	movs	r3, #0
 800e496:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e49e:	7af9      	ldrb	r1, [r7, #11]
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	f7f6 fb49 	bl	8004b3a <HAL_PCD_EP_Receive>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4ac:	7dfb      	ldrb	r3, [r7, #23]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f000 f86e 	bl	800e590 <USBD_Get_USB_Status>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3718      	adds	r7, #24
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b082      	sub	sp, #8
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e4d4:	78fa      	ldrb	r2, [r7, #3]
 800e4d6:	4611      	mov	r1, r2
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7f6 fb5f 	bl	8004b9c <HAL_PCD_EP_GetRxCount>
 800e4de:	4603      	mov	r3, r0
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e4f4:	78fb      	ldrb	r3, [r7, #3]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d002      	beq.n	800e500 <HAL_PCDEx_LPM_Callback+0x18>
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d013      	beq.n	800e526 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e4fe:	e023      	b.n	800e548 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	7a5b      	ldrb	r3, [r3, #9]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d007      	beq.n	800e518 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e508:	f000 f83c 	bl	800e584 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e50c:	4b10      	ldr	r3, [pc, #64]	@ (800e550 <HAL_PCDEx_LPM_Callback+0x68>)
 800e50e:	691b      	ldr	r3, [r3, #16]
 800e510:	4a0f      	ldr	r2, [pc, #60]	@ (800e550 <HAL_PCDEx_LPM_Callback+0x68>)
 800e512:	f023 0306 	bic.w	r3, r3, #6
 800e516:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fe fc9c 	bl	800ce5c <USBD_LL_Resume>
    break;
 800e524:	e010      	b.n	800e548 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7fe fc7f 	bl	800ce30 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	7a5b      	ldrb	r3, [r3, #9]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d005      	beq.n	800e546 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e53a:	4b05      	ldr	r3, [pc, #20]	@ (800e550 <HAL_PCDEx_LPM_Callback+0x68>)
 800e53c:	691b      	ldr	r3, [r3, #16]
 800e53e:	4a04      	ldr	r2, [pc, #16]	@ (800e550 <HAL_PCDEx_LPM_Callback+0x68>)
 800e540:	f043 0306 	orr.w	r3, r3, #6
 800e544:	6113      	str	r3, [r2, #16]
    break;
 800e546:	bf00      	nop
}
 800e548:	bf00      	nop
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	e000ed00 	.word	0xe000ed00

0800e554 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e55c:	4b03      	ldr	r3, [pc, #12]	@ (800e56c <USBD_static_malloc+0x18>)
}
 800e55e:	4618      	mov	r0, r3
 800e560:	370c      	adds	r7, #12
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop
 800e56c:	200049ac 	.word	0x200049ac

0800e570 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]

}
 800e578:	bf00      	nop
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e588:	f7f1 ff7c 	bl	8000484 <SystemClock_Config>
}
 800e58c:	bf00      	nop
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	4603      	mov	r3, r0
 800e598:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e59a:	2300      	movs	r3, #0
 800e59c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e59e:	79fb      	ldrb	r3, [r7, #7]
 800e5a0:	2b03      	cmp	r3, #3
 800e5a2:	d817      	bhi.n	800e5d4 <USBD_Get_USB_Status+0x44>
 800e5a4:	a201      	add	r2, pc, #4	@ (adr r2, 800e5ac <USBD_Get_USB_Status+0x1c>)
 800e5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5aa:	bf00      	nop
 800e5ac:	0800e5bd 	.word	0x0800e5bd
 800e5b0:	0800e5c3 	.word	0x0800e5c3
 800e5b4:	0800e5c9 	.word	0x0800e5c9
 800e5b8:	0800e5cf 	.word	0x0800e5cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c0:	e00b      	b.n	800e5da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5c2:	2303      	movs	r3, #3
 800e5c4:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c6:	e008      	b.n	800e5da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e5cc:	e005      	b.n	800e5da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5ce:	2303      	movs	r3, #3
 800e5d0:	73fb      	strb	r3, [r7, #15]
    break;
 800e5d2:	e002      	b.n	800e5da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800e5d8:	bf00      	nop
  }
  return usb_status;
 800e5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3714      	adds	r7, #20
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <siprintf>:
 800e5e8:	b40e      	push	{r1, r2, r3}
 800e5ea:	b500      	push	{lr}
 800e5ec:	b09c      	sub	sp, #112	@ 0x70
 800e5ee:	ab1d      	add	r3, sp, #116	@ 0x74
 800e5f0:	9002      	str	r0, [sp, #8]
 800e5f2:	9006      	str	r0, [sp, #24]
 800e5f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e5f8:	4809      	ldr	r0, [pc, #36]	@ (800e620 <siprintf+0x38>)
 800e5fa:	9107      	str	r1, [sp, #28]
 800e5fc:	9104      	str	r1, [sp, #16]
 800e5fe:	4909      	ldr	r1, [pc, #36]	@ (800e624 <siprintf+0x3c>)
 800e600:	f853 2b04 	ldr.w	r2, [r3], #4
 800e604:	9105      	str	r1, [sp, #20]
 800e606:	6800      	ldr	r0, [r0, #0]
 800e608:	9301      	str	r3, [sp, #4]
 800e60a:	a902      	add	r1, sp, #8
 800e60c:	f000 f994 	bl	800e938 <_svfiprintf_r>
 800e610:	9b02      	ldr	r3, [sp, #8]
 800e612:	2200      	movs	r2, #0
 800e614:	701a      	strb	r2, [r3, #0]
 800e616:	b01c      	add	sp, #112	@ 0x70
 800e618:	f85d eb04 	ldr.w	lr, [sp], #4
 800e61c:	b003      	add	sp, #12
 800e61e:	4770      	bx	lr
 800e620:	20000184 	.word	0x20000184
 800e624:	ffff0208 	.word	0xffff0208

0800e628 <memset>:
 800e628:	4402      	add	r2, r0
 800e62a:	4603      	mov	r3, r0
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d100      	bne.n	800e632 <memset+0xa>
 800e630:	4770      	bx	lr
 800e632:	f803 1b01 	strb.w	r1, [r3], #1
 800e636:	e7f9      	b.n	800e62c <memset+0x4>

0800e638 <__errno>:
 800e638:	4b01      	ldr	r3, [pc, #4]	@ (800e640 <__errno+0x8>)
 800e63a:	6818      	ldr	r0, [r3, #0]
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop
 800e640:	20000184 	.word	0x20000184

0800e644 <__libc_init_array>:
 800e644:	b570      	push	{r4, r5, r6, lr}
 800e646:	4d0d      	ldr	r5, [pc, #52]	@ (800e67c <__libc_init_array+0x38>)
 800e648:	4c0d      	ldr	r4, [pc, #52]	@ (800e680 <__libc_init_array+0x3c>)
 800e64a:	1b64      	subs	r4, r4, r5
 800e64c:	10a4      	asrs	r4, r4, #2
 800e64e:	2600      	movs	r6, #0
 800e650:	42a6      	cmp	r6, r4
 800e652:	d109      	bne.n	800e668 <__libc_init_array+0x24>
 800e654:	4d0b      	ldr	r5, [pc, #44]	@ (800e684 <__libc_init_array+0x40>)
 800e656:	4c0c      	ldr	r4, [pc, #48]	@ (800e688 <__libc_init_array+0x44>)
 800e658:	f000 fc66 	bl	800ef28 <_init>
 800e65c:	1b64      	subs	r4, r4, r5
 800e65e:	10a4      	asrs	r4, r4, #2
 800e660:	2600      	movs	r6, #0
 800e662:	42a6      	cmp	r6, r4
 800e664:	d105      	bne.n	800e672 <__libc_init_array+0x2e>
 800e666:	bd70      	pop	{r4, r5, r6, pc}
 800e668:	f855 3b04 	ldr.w	r3, [r5], #4
 800e66c:	4798      	blx	r3
 800e66e:	3601      	adds	r6, #1
 800e670:	e7ee      	b.n	800e650 <__libc_init_array+0xc>
 800e672:	f855 3b04 	ldr.w	r3, [r5], #4
 800e676:	4798      	blx	r3
 800e678:	3601      	adds	r6, #1
 800e67a:	e7f2      	b.n	800e662 <__libc_init_array+0x1e>
 800e67c:	0800eff4 	.word	0x0800eff4
 800e680:	0800eff4 	.word	0x0800eff4
 800e684:	0800eff4 	.word	0x0800eff4
 800e688:	0800eff8 	.word	0x0800eff8

0800e68c <__retarget_lock_acquire_recursive>:
 800e68c:	4770      	bx	lr

0800e68e <__retarget_lock_release_recursive>:
 800e68e:	4770      	bx	lr

0800e690 <_free_r>:
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4605      	mov	r5, r0
 800e694:	2900      	cmp	r1, #0
 800e696:	d041      	beq.n	800e71c <_free_r+0x8c>
 800e698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e69c:	1f0c      	subs	r4, r1, #4
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	bfb8      	it	lt
 800e6a2:	18e4      	addlt	r4, r4, r3
 800e6a4:	f000 f8e0 	bl	800e868 <__malloc_lock>
 800e6a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e720 <_free_r+0x90>)
 800e6aa:	6813      	ldr	r3, [r2, #0]
 800e6ac:	b933      	cbnz	r3, 800e6bc <_free_r+0x2c>
 800e6ae:	6063      	str	r3, [r4, #4]
 800e6b0:	6014      	str	r4, [r2, #0]
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6b8:	f000 b8dc 	b.w	800e874 <__malloc_unlock>
 800e6bc:	42a3      	cmp	r3, r4
 800e6be:	d908      	bls.n	800e6d2 <_free_r+0x42>
 800e6c0:	6820      	ldr	r0, [r4, #0]
 800e6c2:	1821      	adds	r1, r4, r0
 800e6c4:	428b      	cmp	r3, r1
 800e6c6:	bf01      	itttt	eq
 800e6c8:	6819      	ldreq	r1, [r3, #0]
 800e6ca:	685b      	ldreq	r3, [r3, #4]
 800e6cc:	1809      	addeq	r1, r1, r0
 800e6ce:	6021      	streq	r1, [r4, #0]
 800e6d0:	e7ed      	b.n	800e6ae <_free_r+0x1e>
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	b10b      	cbz	r3, 800e6dc <_free_r+0x4c>
 800e6d8:	42a3      	cmp	r3, r4
 800e6da:	d9fa      	bls.n	800e6d2 <_free_r+0x42>
 800e6dc:	6811      	ldr	r1, [r2, #0]
 800e6de:	1850      	adds	r0, r2, r1
 800e6e0:	42a0      	cmp	r0, r4
 800e6e2:	d10b      	bne.n	800e6fc <_free_r+0x6c>
 800e6e4:	6820      	ldr	r0, [r4, #0]
 800e6e6:	4401      	add	r1, r0
 800e6e8:	1850      	adds	r0, r2, r1
 800e6ea:	4283      	cmp	r3, r0
 800e6ec:	6011      	str	r1, [r2, #0]
 800e6ee:	d1e0      	bne.n	800e6b2 <_free_r+0x22>
 800e6f0:	6818      	ldr	r0, [r3, #0]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	6053      	str	r3, [r2, #4]
 800e6f6:	4408      	add	r0, r1
 800e6f8:	6010      	str	r0, [r2, #0]
 800e6fa:	e7da      	b.n	800e6b2 <_free_r+0x22>
 800e6fc:	d902      	bls.n	800e704 <_free_r+0x74>
 800e6fe:	230c      	movs	r3, #12
 800e700:	602b      	str	r3, [r5, #0]
 800e702:	e7d6      	b.n	800e6b2 <_free_r+0x22>
 800e704:	6820      	ldr	r0, [r4, #0]
 800e706:	1821      	adds	r1, r4, r0
 800e708:	428b      	cmp	r3, r1
 800e70a:	bf04      	itt	eq
 800e70c:	6819      	ldreq	r1, [r3, #0]
 800e70e:	685b      	ldreq	r3, [r3, #4]
 800e710:	6063      	str	r3, [r4, #4]
 800e712:	bf04      	itt	eq
 800e714:	1809      	addeq	r1, r1, r0
 800e716:	6021      	streq	r1, [r4, #0]
 800e718:	6054      	str	r4, [r2, #4]
 800e71a:	e7ca      	b.n	800e6b2 <_free_r+0x22>
 800e71c:	bd38      	pop	{r3, r4, r5, pc}
 800e71e:	bf00      	nop
 800e720:	20004d10 	.word	0x20004d10

0800e724 <sbrk_aligned>:
 800e724:	b570      	push	{r4, r5, r6, lr}
 800e726:	4e0f      	ldr	r6, [pc, #60]	@ (800e764 <sbrk_aligned+0x40>)
 800e728:	460c      	mov	r4, r1
 800e72a:	6831      	ldr	r1, [r6, #0]
 800e72c:	4605      	mov	r5, r0
 800e72e:	b911      	cbnz	r1, 800e736 <sbrk_aligned+0x12>
 800e730:	f000 fba6 	bl	800ee80 <_sbrk_r>
 800e734:	6030      	str	r0, [r6, #0]
 800e736:	4621      	mov	r1, r4
 800e738:	4628      	mov	r0, r5
 800e73a:	f000 fba1 	bl	800ee80 <_sbrk_r>
 800e73e:	1c43      	adds	r3, r0, #1
 800e740:	d103      	bne.n	800e74a <sbrk_aligned+0x26>
 800e742:	f04f 34ff 	mov.w	r4, #4294967295
 800e746:	4620      	mov	r0, r4
 800e748:	bd70      	pop	{r4, r5, r6, pc}
 800e74a:	1cc4      	adds	r4, r0, #3
 800e74c:	f024 0403 	bic.w	r4, r4, #3
 800e750:	42a0      	cmp	r0, r4
 800e752:	d0f8      	beq.n	800e746 <sbrk_aligned+0x22>
 800e754:	1a21      	subs	r1, r4, r0
 800e756:	4628      	mov	r0, r5
 800e758:	f000 fb92 	bl	800ee80 <_sbrk_r>
 800e75c:	3001      	adds	r0, #1
 800e75e:	d1f2      	bne.n	800e746 <sbrk_aligned+0x22>
 800e760:	e7ef      	b.n	800e742 <sbrk_aligned+0x1e>
 800e762:	bf00      	nop
 800e764:	20004d0c 	.word	0x20004d0c

0800e768 <_malloc_r>:
 800e768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e76c:	1ccd      	adds	r5, r1, #3
 800e76e:	f025 0503 	bic.w	r5, r5, #3
 800e772:	3508      	adds	r5, #8
 800e774:	2d0c      	cmp	r5, #12
 800e776:	bf38      	it	cc
 800e778:	250c      	movcc	r5, #12
 800e77a:	2d00      	cmp	r5, #0
 800e77c:	4606      	mov	r6, r0
 800e77e:	db01      	blt.n	800e784 <_malloc_r+0x1c>
 800e780:	42a9      	cmp	r1, r5
 800e782:	d904      	bls.n	800e78e <_malloc_r+0x26>
 800e784:	230c      	movs	r3, #12
 800e786:	6033      	str	r3, [r6, #0]
 800e788:	2000      	movs	r0, #0
 800e78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e78e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e864 <_malloc_r+0xfc>
 800e792:	f000 f869 	bl	800e868 <__malloc_lock>
 800e796:	f8d8 3000 	ldr.w	r3, [r8]
 800e79a:	461c      	mov	r4, r3
 800e79c:	bb44      	cbnz	r4, 800e7f0 <_malloc_r+0x88>
 800e79e:	4629      	mov	r1, r5
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	f7ff ffbf 	bl	800e724 <sbrk_aligned>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	4604      	mov	r4, r0
 800e7aa:	d158      	bne.n	800e85e <_malloc_r+0xf6>
 800e7ac:	f8d8 4000 	ldr.w	r4, [r8]
 800e7b0:	4627      	mov	r7, r4
 800e7b2:	2f00      	cmp	r7, #0
 800e7b4:	d143      	bne.n	800e83e <_malloc_r+0xd6>
 800e7b6:	2c00      	cmp	r4, #0
 800e7b8:	d04b      	beq.n	800e852 <_malloc_r+0xea>
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	4639      	mov	r1, r7
 800e7be:	4630      	mov	r0, r6
 800e7c0:	eb04 0903 	add.w	r9, r4, r3
 800e7c4:	f000 fb5c 	bl	800ee80 <_sbrk_r>
 800e7c8:	4581      	cmp	r9, r0
 800e7ca:	d142      	bne.n	800e852 <_malloc_r+0xea>
 800e7cc:	6821      	ldr	r1, [r4, #0]
 800e7ce:	1a6d      	subs	r5, r5, r1
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	f7ff ffa6 	bl	800e724 <sbrk_aligned>
 800e7d8:	3001      	adds	r0, #1
 800e7da:	d03a      	beq.n	800e852 <_malloc_r+0xea>
 800e7dc:	6823      	ldr	r3, [r4, #0]
 800e7de:	442b      	add	r3, r5
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	f8d8 3000 	ldr.w	r3, [r8]
 800e7e6:	685a      	ldr	r2, [r3, #4]
 800e7e8:	bb62      	cbnz	r2, 800e844 <_malloc_r+0xdc>
 800e7ea:	f8c8 7000 	str.w	r7, [r8]
 800e7ee:	e00f      	b.n	800e810 <_malloc_r+0xa8>
 800e7f0:	6822      	ldr	r2, [r4, #0]
 800e7f2:	1b52      	subs	r2, r2, r5
 800e7f4:	d420      	bmi.n	800e838 <_malloc_r+0xd0>
 800e7f6:	2a0b      	cmp	r2, #11
 800e7f8:	d917      	bls.n	800e82a <_malloc_r+0xc2>
 800e7fa:	1961      	adds	r1, r4, r5
 800e7fc:	42a3      	cmp	r3, r4
 800e7fe:	6025      	str	r5, [r4, #0]
 800e800:	bf18      	it	ne
 800e802:	6059      	strne	r1, [r3, #4]
 800e804:	6863      	ldr	r3, [r4, #4]
 800e806:	bf08      	it	eq
 800e808:	f8c8 1000 	streq.w	r1, [r8]
 800e80c:	5162      	str	r2, [r4, r5]
 800e80e:	604b      	str	r3, [r1, #4]
 800e810:	4630      	mov	r0, r6
 800e812:	f000 f82f 	bl	800e874 <__malloc_unlock>
 800e816:	f104 000b 	add.w	r0, r4, #11
 800e81a:	1d23      	adds	r3, r4, #4
 800e81c:	f020 0007 	bic.w	r0, r0, #7
 800e820:	1ac2      	subs	r2, r0, r3
 800e822:	bf1c      	itt	ne
 800e824:	1a1b      	subne	r3, r3, r0
 800e826:	50a3      	strne	r3, [r4, r2]
 800e828:	e7af      	b.n	800e78a <_malloc_r+0x22>
 800e82a:	6862      	ldr	r2, [r4, #4]
 800e82c:	42a3      	cmp	r3, r4
 800e82e:	bf0c      	ite	eq
 800e830:	f8c8 2000 	streq.w	r2, [r8]
 800e834:	605a      	strne	r2, [r3, #4]
 800e836:	e7eb      	b.n	800e810 <_malloc_r+0xa8>
 800e838:	4623      	mov	r3, r4
 800e83a:	6864      	ldr	r4, [r4, #4]
 800e83c:	e7ae      	b.n	800e79c <_malloc_r+0x34>
 800e83e:	463c      	mov	r4, r7
 800e840:	687f      	ldr	r7, [r7, #4]
 800e842:	e7b6      	b.n	800e7b2 <_malloc_r+0x4a>
 800e844:	461a      	mov	r2, r3
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	42a3      	cmp	r3, r4
 800e84a:	d1fb      	bne.n	800e844 <_malloc_r+0xdc>
 800e84c:	2300      	movs	r3, #0
 800e84e:	6053      	str	r3, [r2, #4]
 800e850:	e7de      	b.n	800e810 <_malloc_r+0xa8>
 800e852:	230c      	movs	r3, #12
 800e854:	6033      	str	r3, [r6, #0]
 800e856:	4630      	mov	r0, r6
 800e858:	f000 f80c 	bl	800e874 <__malloc_unlock>
 800e85c:	e794      	b.n	800e788 <_malloc_r+0x20>
 800e85e:	6005      	str	r5, [r0, #0]
 800e860:	e7d6      	b.n	800e810 <_malloc_r+0xa8>
 800e862:	bf00      	nop
 800e864:	20004d10 	.word	0x20004d10

0800e868 <__malloc_lock>:
 800e868:	4801      	ldr	r0, [pc, #4]	@ (800e870 <__malloc_lock+0x8>)
 800e86a:	f7ff bf0f 	b.w	800e68c <__retarget_lock_acquire_recursive>
 800e86e:	bf00      	nop
 800e870:	20004d08 	.word	0x20004d08

0800e874 <__malloc_unlock>:
 800e874:	4801      	ldr	r0, [pc, #4]	@ (800e87c <__malloc_unlock+0x8>)
 800e876:	f7ff bf0a 	b.w	800e68e <__retarget_lock_release_recursive>
 800e87a:	bf00      	nop
 800e87c:	20004d08 	.word	0x20004d08

0800e880 <__ssputs_r>:
 800e880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e884:	688e      	ldr	r6, [r1, #8]
 800e886:	461f      	mov	r7, r3
 800e888:	42be      	cmp	r6, r7
 800e88a:	680b      	ldr	r3, [r1, #0]
 800e88c:	4682      	mov	sl, r0
 800e88e:	460c      	mov	r4, r1
 800e890:	4690      	mov	r8, r2
 800e892:	d82d      	bhi.n	800e8f0 <__ssputs_r+0x70>
 800e894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e898:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e89c:	d026      	beq.n	800e8ec <__ssputs_r+0x6c>
 800e89e:	6965      	ldr	r5, [r4, #20]
 800e8a0:	6909      	ldr	r1, [r1, #16]
 800e8a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8a6:	eba3 0901 	sub.w	r9, r3, r1
 800e8aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8ae:	1c7b      	adds	r3, r7, #1
 800e8b0:	444b      	add	r3, r9
 800e8b2:	106d      	asrs	r5, r5, #1
 800e8b4:	429d      	cmp	r5, r3
 800e8b6:	bf38      	it	cc
 800e8b8:	461d      	movcc	r5, r3
 800e8ba:	0553      	lsls	r3, r2, #21
 800e8bc:	d527      	bpl.n	800e90e <__ssputs_r+0x8e>
 800e8be:	4629      	mov	r1, r5
 800e8c0:	f7ff ff52 	bl	800e768 <_malloc_r>
 800e8c4:	4606      	mov	r6, r0
 800e8c6:	b360      	cbz	r0, 800e922 <__ssputs_r+0xa2>
 800e8c8:	6921      	ldr	r1, [r4, #16]
 800e8ca:	464a      	mov	r2, r9
 800e8cc:	f000 fae8 	bl	800eea0 <memcpy>
 800e8d0:	89a3      	ldrh	r3, [r4, #12]
 800e8d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8da:	81a3      	strh	r3, [r4, #12]
 800e8dc:	6126      	str	r6, [r4, #16]
 800e8de:	6165      	str	r5, [r4, #20]
 800e8e0:	444e      	add	r6, r9
 800e8e2:	eba5 0509 	sub.w	r5, r5, r9
 800e8e6:	6026      	str	r6, [r4, #0]
 800e8e8:	60a5      	str	r5, [r4, #8]
 800e8ea:	463e      	mov	r6, r7
 800e8ec:	42be      	cmp	r6, r7
 800e8ee:	d900      	bls.n	800e8f2 <__ssputs_r+0x72>
 800e8f0:	463e      	mov	r6, r7
 800e8f2:	6820      	ldr	r0, [r4, #0]
 800e8f4:	4632      	mov	r2, r6
 800e8f6:	4641      	mov	r1, r8
 800e8f8:	f000 faa8 	bl	800ee4c <memmove>
 800e8fc:	68a3      	ldr	r3, [r4, #8]
 800e8fe:	1b9b      	subs	r3, r3, r6
 800e900:	60a3      	str	r3, [r4, #8]
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	4433      	add	r3, r6
 800e906:	6023      	str	r3, [r4, #0]
 800e908:	2000      	movs	r0, #0
 800e90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e90e:	462a      	mov	r2, r5
 800e910:	f000 fad4 	bl	800eebc <_realloc_r>
 800e914:	4606      	mov	r6, r0
 800e916:	2800      	cmp	r0, #0
 800e918:	d1e0      	bne.n	800e8dc <__ssputs_r+0x5c>
 800e91a:	6921      	ldr	r1, [r4, #16]
 800e91c:	4650      	mov	r0, sl
 800e91e:	f7ff feb7 	bl	800e690 <_free_r>
 800e922:	230c      	movs	r3, #12
 800e924:	f8ca 3000 	str.w	r3, [sl]
 800e928:	89a3      	ldrh	r3, [r4, #12]
 800e92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e92e:	81a3      	strh	r3, [r4, #12]
 800e930:	f04f 30ff 	mov.w	r0, #4294967295
 800e934:	e7e9      	b.n	800e90a <__ssputs_r+0x8a>
	...

0800e938 <_svfiprintf_r>:
 800e938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e93c:	4698      	mov	r8, r3
 800e93e:	898b      	ldrh	r3, [r1, #12]
 800e940:	061b      	lsls	r3, r3, #24
 800e942:	b09d      	sub	sp, #116	@ 0x74
 800e944:	4607      	mov	r7, r0
 800e946:	460d      	mov	r5, r1
 800e948:	4614      	mov	r4, r2
 800e94a:	d510      	bpl.n	800e96e <_svfiprintf_r+0x36>
 800e94c:	690b      	ldr	r3, [r1, #16]
 800e94e:	b973      	cbnz	r3, 800e96e <_svfiprintf_r+0x36>
 800e950:	2140      	movs	r1, #64	@ 0x40
 800e952:	f7ff ff09 	bl	800e768 <_malloc_r>
 800e956:	6028      	str	r0, [r5, #0]
 800e958:	6128      	str	r0, [r5, #16]
 800e95a:	b930      	cbnz	r0, 800e96a <_svfiprintf_r+0x32>
 800e95c:	230c      	movs	r3, #12
 800e95e:	603b      	str	r3, [r7, #0]
 800e960:	f04f 30ff 	mov.w	r0, #4294967295
 800e964:	b01d      	add	sp, #116	@ 0x74
 800e966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e96a:	2340      	movs	r3, #64	@ 0x40
 800e96c:	616b      	str	r3, [r5, #20]
 800e96e:	2300      	movs	r3, #0
 800e970:	9309      	str	r3, [sp, #36]	@ 0x24
 800e972:	2320      	movs	r3, #32
 800e974:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e978:	f8cd 800c 	str.w	r8, [sp, #12]
 800e97c:	2330      	movs	r3, #48	@ 0x30
 800e97e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eb1c <_svfiprintf_r+0x1e4>
 800e982:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e986:	f04f 0901 	mov.w	r9, #1
 800e98a:	4623      	mov	r3, r4
 800e98c:	469a      	mov	sl, r3
 800e98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e992:	b10a      	cbz	r2, 800e998 <_svfiprintf_r+0x60>
 800e994:	2a25      	cmp	r2, #37	@ 0x25
 800e996:	d1f9      	bne.n	800e98c <_svfiprintf_r+0x54>
 800e998:	ebba 0b04 	subs.w	fp, sl, r4
 800e99c:	d00b      	beq.n	800e9b6 <_svfiprintf_r+0x7e>
 800e99e:	465b      	mov	r3, fp
 800e9a0:	4622      	mov	r2, r4
 800e9a2:	4629      	mov	r1, r5
 800e9a4:	4638      	mov	r0, r7
 800e9a6:	f7ff ff6b 	bl	800e880 <__ssputs_r>
 800e9aa:	3001      	adds	r0, #1
 800e9ac:	f000 80a7 	beq.w	800eafe <_svfiprintf_r+0x1c6>
 800e9b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9b2:	445a      	add	r2, fp
 800e9b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f000 809f 	beq.w	800eafe <_svfiprintf_r+0x1c6>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9ca:	f10a 0a01 	add.w	sl, sl, #1
 800e9ce:	9304      	str	r3, [sp, #16]
 800e9d0:	9307      	str	r3, [sp, #28]
 800e9d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9d8:	4654      	mov	r4, sl
 800e9da:	2205      	movs	r2, #5
 800e9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e0:	484e      	ldr	r0, [pc, #312]	@ (800eb1c <_svfiprintf_r+0x1e4>)
 800e9e2:	f7f1 fc1d 	bl	8000220 <memchr>
 800e9e6:	9a04      	ldr	r2, [sp, #16]
 800e9e8:	b9d8      	cbnz	r0, 800ea22 <_svfiprintf_r+0xea>
 800e9ea:	06d0      	lsls	r0, r2, #27
 800e9ec:	bf44      	itt	mi
 800e9ee:	2320      	movmi	r3, #32
 800e9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9f4:	0711      	lsls	r1, r2, #28
 800e9f6:	bf44      	itt	mi
 800e9f8:	232b      	movmi	r3, #43	@ 0x2b
 800e9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9fe:	f89a 3000 	ldrb.w	r3, [sl]
 800ea02:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea04:	d015      	beq.n	800ea32 <_svfiprintf_r+0xfa>
 800ea06:	9a07      	ldr	r2, [sp, #28]
 800ea08:	4654      	mov	r4, sl
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	f04f 0c0a 	mov.w	ip, #10
 800ea10:	4621      	mov	r1, r4
 800ea12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea16:	3b30      	subs	r3, #48	@ 0x30
 800ea18:	2b09      	cmp	r3, #9
 800ea1a:	d94b      	bls.n	800eab4 <_svfiprintf_r+0x17c>
 800ea1c:	b1b0      	cbz	r0, 800ea4c <_svfiprintf_r+0x114>
 800ea1e:	9207      	str	r2, [sp, #28]
 800ea20:	e014      	b.n	800ea4c <_svfiprintf_r+0x114>
 800ea22:	eba0 0308 	sub.w	r3, r0, r8
 800ea26:	fa09 f303 	lsl.w	r3, r9, r3
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	9304      	str	r3, [sp, #16]
 800ea2e:	46a2      	mov	sl, r4
 800ea30:	e7d2      	b.n	800e9d8 <_svfiprintf_r+0xa0>
 800ea32:	9b03      	ldr	r3, [sp, #12]
 800ea34:	1d19      	adds	r1, r3, #4
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	9103      	str	r1, [sp, #12]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	bfbb      	ittet	lt
 800ea3e:	425b      	neglt	r3, r3
 800ea40:	f042 0202 	orrlt.w	r2, r2, #2
 800ea44:	9307      	strge	r3, [sp, #28]
 800ea46:	9307      	strlt	r3, [sp, #28]
 800ea48:	bfb8      	it	lt
 800ea4a:	9204      	strlt	r2, [sp, #16]
 800ea4c:	7823      	ldrb	r3, [r4, #0]
 800ea4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea50:	d10a      	bne.n	800ea68 <_svfiprintf_r+0x130>
 800ea52:	7863      	ldrb	r3, [r4, #1]
 800ea54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea56:	d132      	bne.n	800eabe <_svfiprintf_r+0x186>
 800ea58:	9b03      	ldr	r3, [sp, #12]
 800ea5a:	1d1a      	adds	r2, r3, #4
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	9203      	str	r2, [sp, #12]
 800ea60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea64:	3402      	adds	r4, #2
 800ea66:	9305      	str	r3, [sp, #20]
 800ea68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eb2c <_svfiprintf_r+0x1f4>
 800ea6c:	7821      	ldrb	r1, [r4, #0]
 800ea6e:	2203      	movs	r2, #3
 800ea70:	4650      	mov	r0, sl
 800ea72:	f7f1 fbd5 	bl	8000220 <memchr>
 800ea76:	b138      	cbz	r0, 800ea88 <_svfiprintf_r+0x150>
 800ea78:	9b04      	ldr	r3, [sp, #16]
 800ea7a:	eba0 000a 	sub.w	r0, r0, sl
 800ea7e:	2240      	movs	r2, #64	@ 0x40
 800ea80:	4082      	lsls	r2, r0
 800ea82:	4313      	orrs	r3, r2
 800ea84:	3401      	adds	r4, #1
 800ea86:	9304      	str	r3, [sp, #16]
 800ea88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea8c:	4824      	ldr	r0, [pc, #144]	@ (800eb20 <_svfiprintf_r+0x1e8>)
 800ea8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea92:	2206      	movs	r2, #6
 800ea94:	f7f1 fbc4 	bl	8000220 <memchr>
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d036      	beq.n	800eb0a <_svfiprintf_r+0x1d2>
 800ea9c:	4b21      	ldr	r3, [pc, #132]	@ (800eb24 <_svfiprintf_r+0x1ec>)
 800ea9e:	bb1b      	cbnz	r3, 800eae8 <_svfiprintf_r+0x1b0>
 800eaa0:	9b03      	ldr	r3, [sp, #12]
 800eaa2:	3307      	adds	r3, #7
 800eaa4:	f023 0307 	bic.w	r3, r3, #7
 800eaa8:	3308      	adds	r3, #8
 800eaaa:	9303      	str	r3, [sp, #12]
 800eaac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaae:	4433      	add	r3, r6
 800eab0:	9309      	str	r3, [sp, #36]	@ 0x24
 800eab2:	e76a      	b.n	800e98a <_svfiprintf_r+0x52>
 800eab4:	fb0c 3202 	mla	r2, ip, r2, r3
 800eab8:	460c      	mov	r4, r1
 800eaba:	2001      	movs	r0, #1
 800eabc:	e7a8      	b.n	800ea10 <_svfiprintf_r+0xd8>
 800eabe:	2300      	movs	r3, #0
 800eac0:	3401      	adds	r4, #1
 800eac2:	9305      	str	r3, [sp, #20]
 800eac4:	4619      	mov	r1, r3
 800eac6:	f04f 0c0a 	mov.w	ip, #10
 800eaca:	4620      	mov	r0, r4
 800eacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ead0:	3a30      	subs	r2, #48	@ 0x30
 800ead2:	2a09      	cmp	r2, #9
 800ead4:	d903      	bls.n	800eade <_svfiprintf_r+0x1a6>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d0c6      	beq.n	800ea68 <_svfiprintf_r+0x130>
 800eada:	9105      	str	r1, [sp, #20]
 800eadc:	e7c4      	b.n	800ea68 <_svfiprintf_r+0x130>
 800eade:	fb0c 2101 	mla	r1, ip, r1, r2
 800eae2:	4604      	mov	r4, r0
 800eae4:	2301      	movs	r3, #1
 800eae6:	e7f0      	b.n	800eaca <_svfiprintf_r+0x192>
 800eae8:	ab03      	add	r3, sp, #12
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	462a      	mov	r2, r5
 800eaee:	4b0e      	ldr	r3, [pc, #56]	@ (800eb28 <_svfiprintf_r+0x1f0>)
 800eaf0:	a904      	add	r1, sp, #16
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	f3af 8000 	nop.w
 800eaf8:	1c42      	adds	r2, r0, #1
 800eafa:	4606      	mov	r6, r0
 800eafc:	d1d6      	bne.n	800eaac <_svfiprintf_r+0x174>
 800eafe:	89ab      	ldrh	r3, [r5, #12]
 800eb00:	065b      	lsls	r3, r3, #25
 800eb02:	f53f af2d 	bmi.w	800e960 <_svfiprintf_r+0x28>
 800eb06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb08:	e72c      	b.n	800e964 <_svfiprintf_r+0x2c>
 800eb0a:	ab03      	add	r3, sp, #12
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	462a      	mov	r2, r5
 800eb10:	4b05      	ldr	r3, [pc, #20]	@ (800eb28 <_svfiprintf_r+0x1f0>)
 800eb12:	a904      	add	r1, sp, #16
 800eb14:	4638      	mov	r0, r7
 800eb16:	f000 f879 	bl	800ec0c <_printf_i>
 800eb1a:	e7ed      	b.n	800eaf8 <_svfiprintf_r+0x1c0>
 800eb1c:	0800efb8 	.word	0x0800efb8
 800eb20:	0800efc2 	.word	0x0800efc2
 800eb24:	00000000 	.word	0x00000000
 800eb28:	0800e881 	.word	0x0800e881
 800eb2c:	0800efbe 	.word	0x0800efbe

0800eb30 <_printf_common>:
 800eb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb34:	4616      	mov	r6, r2
 800eb36:	4698      	mov	r8, r3
 800eb38:	688a      	ldr	r2, [r1, #8]
 800eb3a:	690b      	ldr	r3, [r1, #16]
 800eb3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb40:	4293      	cmp	r3, r2
 800eb42:	bfb8      	it	lt
 800eb44:	4613      	movlt	r3, r2
 800eb46:	6033      	str	r3, [r6, #0]
 800eb48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb4c:	4607      	mov	r7, r0
 800eb4e:	460c      	mov	r4, r1
 800eb50:	b10a      	cbz	r2, 800eb56 <_printf_common+0x26>
 800eb52:	3301      	adds	r3, #1
 800eb54:	6033      	str	r3, [r6, #0]
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	0699      	lsls	r1, r3, #26
 800eb5a:	bf42      	ittt	mi
 800eb5c:	6833      	ldrmi	r3, [r6, #0]
 800eb5e:	3302      	addmi	r3, #2
 800eb60:	6033      	strmi	r3, [r6, #0]
 800eb62:	6825      	ldr	r5, [r4, #0]
 800eb64:	f015 0506 	ands.w	r5, r5, #6
 800eb68:	d106      	bne.n	800eb78 <_printf_common+0x48>
 800eb6a:	f104 0a19 	add.w	sl, r4, #25
 800eb6e:	68e3      	ldr	r3, [r4, #12]
 800eb70:	6832      	ldr	r2, [r6, #0]
 800eb72:	1a9b      	subs	r3, r3, r2
 800eb74:	42ab      	cmp	r3, r5
 800eb76:	dc26      	bgt.n	800ebc6 <_printf_common+0x96>
 800eb78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb7c:	6822      	ldr	r2, [r4, #0]
 800eb7e:	3b00      	subs	r3, #0
 800eb80:	bf18      	it	ne
 800eb82:	2301      	movne	r3, #1
 800eb84:	0692      	lsls	r2, r2, #26
 800eb86:	d42b      	bmi.n	800ebe0 <_printf_common+0xb0>
 800eb88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb8c:	4641      	mov	r1, r8
 800eb8e:	4638      	mov	r0, r7
 800eb90:	47c8      	blx	r9
 800eb92:	3001      	adds	r0, #1
 800eb94:	d01e      	beq.n	800ebd4 <_printf_common+0xa4>
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	6922      	ldr	r2, [r4, #16]
 800eb9a:	f003 0306 	and.w	r3, r3, #6
 800eb9e:	2b04      	cmp	r3, #4
 800eba0:	bf02      	ittt	eq
 800eba2:	68e5      	ldreq	r5, [r4, #12]
 800eba4:	6833      	ldreq	r3, [r6, #0]
 800eba6:	1aed      	subeq	r5, r5, r3
 800eba8:	68a3      	ldr	r3, [r4, #8]
 800ebaa:	bf0c      	ite	eq
 800ebac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebb0:	2500      	movne	r5, #0
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	bfc4      	itt	gt
 800ebb6:	1a9b      	subgt	r3, r3, r2
 800ebb8:	18ed      	addgt	r5, r5, r3
 800ebba:	2600      	movs	r6, #0
 800ebbc:	341a      	adds	r4, #26
 800ebbe:	42b5      	cmp	r5, r6
 800ebc0:	d11a      	bne.n	800ebf8 <_printf_common+0xc8>
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	e008      	b.n	800ebd8 <_printf_common+0xa8>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	4652      	mov	r2, sl
 800ebca:	4641      	mov	r1, r8
 800ebcc:	4638      	mov	r0, r7
 800ebce:	47c8      	blx	r9
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	d103      	bne.n	800ebdc <_printf_common+0xac>
 800ebd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebdc:	3501      	adds	r5, #1
 800ebde:	e7c6      	b.n	800eb6e <_printf_common+0x3e>
 800ebe0:	18e1      	adds	r1, r4, r3
 800ebe2:	1c5a      	adds	r2, r3, #1
 800ebe4:	2030      	movs	r0, #48	@ 0x30
 800ebe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebea:	4422      	add	r2, r4
 800ebec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ebf4:	3302      	adds	r3, #2
 800ebf6:	e7c7      	b.n	800eb88 <_printf_common+0x58>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	4622      	mov	r2, r4
 800ebfc:	4641      	mov	r1, r8
 800ebfe:	4638      	mov	r0, r7
 800ec00:	47c8      	blx	r9
 800ec02:	3001      	adds	r0, #1
 800ec04:	d0e6      	beq.n	800ebd4 <_printf_common+0xa4>
 800ec06:	3601      	adds	r6, #1
 800ec08:	e7d9      	b.n	800ebbe <_printf_common+0x8e>
	...

0800ec0c <_printf_i>:
 800ec0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec10:	7e0f      	ldrb	r7, [r1, #24]
 800ec12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec14:	2f78      	cmp	r7, #120	@ 0x78
 800ec16:	4691      	mov	r9, r2
 800ec18:	4680      	mov	r8, r0
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	469a      	mov	sl, r3
 800ec1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec22:	d807      	bhi.n	800ec34 <_printf_i+0x28>
 800ec24:	2f62      	cmp	r7, #98	@ 0x62
 800ec26:	d80a      	bhi.n	800ec3e <_printf_i+0x32>
 800ec28:	2f00      	cmp	r7, #0
 800ec2a:	f000 80d2 	beq.w	800edd2 <_printf_i+0x1c6>
 800ec2e:	2f58      	cmp	r7, #88	@ 0x58
 800ec30:	f000 80b9 	beq.w	800eda6 <_printf_i+0x19a>
 800ec34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec3c:	e03a      	b.n	800ecb4 <_printf_i+0xa8>
 800ec3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec42:	2b15      	cmp	r3, #21
 800ec44:	d8f6      	bhi.n	800ec34 <_printf_i+0x28>
 800ec46:	a101      	add	r1, pc, #4	@ (adr r1, 800ec4c <_printf_i+0x40>)
 800ec48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec4c:	0800eca5 	.word	0x0800eca5
 800ec50:	0800ecb9 	.word	0x0800ecb9
 800ec54:	0800ec35 	.word	0x0800ec35
 800ec58:	0800ec35 	.word	0x0800ec35
 800ec5c:	0800ec35 	.word	0x0800ec35
 800ec60:	0800ec35 	.word	0x0800ec35
 800ec64:	0800ecb9 	.word	0x0800ecb9
 800ec68:	0800ec35 	.word	0x0800ec35
 800ec6c:	0800ec35 	.word	0x0800ec35
 800ec70:	0800ec35 	.word	0x0800ec35
 800ec74:	0800ec35 	.word	0x0800ec35
 800ec78:	0800edb9 	.word	0x0800edb9
 800ec7c:	0800ece3 	.word	0x0800ece3
 800ec80:	0800ed73 	.word	0x0800ed73
 800ec84:	0800ec35 	.word	0x0800ec35
 800ec88:	0800ec35 	.word	0x0800ec35
 800ec8c:	0800eddb 	.word	0x0800eddb
 800ec90:	0800ec35 	.word	0x0800ec35
 800ec94:	0800ece3 	.word	0x0800ece3
 800ec98:	0800ec35 	.word	0x0800ec35
 800ec9c:	0800ec35 	.word	0x0800ec35
 800eca0:	0800ed7b 	.word	0x0800ed7b
 800eca4:	6833      	ldr	r3, [r6, #0]
 800eca6:	1d1a      	adds	r2, r3, #4
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	6032      	str	r2, [r6, #0]
 800ecac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	e09d      	b.n	800edf4 <_printf_i+0x1e8>
 800ecb8:	6833      	ldr	r3, [r6, #0]
 800ecba:	6820      	ldr	r0, [r4, #0]
 800ecbc:	1d19      	adds	r1, r3, #4
 800ecbe:	6031      	str	r1, [r6, #0]
 800ecc0:	0606      	lsls	r6, r0, #24
 800ecc2:	d501      	bpl.n	800ecc8 <_printf_i+0xbc>
 800ecc4:	681d      	ldr	r5, [r3, #0]
 800ecc6:	e003      	b.n	800ecd0 <_printf_i+0xc4>
 800ecc8:	0645      	lsls	r5, r0, #25
 800ecca:	d5fb      	bpl.n	800ecc4 <_printf_i+0xb8>
 800eccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ecd0:	2d00      	cmp	r5, #0
 800ecd2:	da03      	bge.n	800ecdc <_printf_i+0xd0>
 800ecd4:	232d      	movs	r3, #45	@ 0x2d
 800ecd6:	426d      	negs	r5, r5
 800ecd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecdc:	4859      	ldr	r0, [pc, #356]	@ (800ee44 <_printf_i+0x238>)
 800ecde:	230a      	movs	r3, #10
 800ece0:	e011      	b.n	800ed06 <_printf_i+0xfa>
 800ece2:	6821      	ldr	r1, [r4, #0]
 800ece4:	6833      	ldr	r3, [r6, #0]
 800ece6:	0608      	lsls	r0, r1, #24
 800ece8:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecec:	d402      	bmi.n	800ecf4 <_printf_i+0xe8>
 800ecee:	0649      	lsls	r1, r1, #25
 800ecf0:	bf48      	it	mi
 800ecf2:	b2ad      	uxthmi	r5, r5
 800ecf4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ecf6:	4853      	ldr	r0, [pc, #332]	@ (800ee44 <_printf_i+0x238>)
 800ecf8:	6033      	str	r3, [r6, #0]
 800ecfa:	bf14      	ite	ne
 800ecfc:	230a      	movne	r3, #10
 800ecfe:	2308      	moveq	r3, #8
 800ed00:	2100      	movs	r1, #0
 800ed02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed06:	6866      	ldr	r6, [r4, #4]
 800ed08:	60a6      	str	r6, [r4, #8]
 800ed0a:	2e00      	cmp	r6, #0
 800ed0c:	bfa2      	ittt	ge
 800ed0e:	6821      	ldrge	r1, [r4, #0]
 800ed10:	f021 0104 	bicge.w	r1, r1, #4
 800ed14:	6021      	strge	r1, [r4, #0]
 800ed16:	b90d      	cbnz	r5, 800ed1c <_printf_i+0x110>
 800ed18:	2e00      	cmp	r6, #0
 800ed1a:	d04b      	beq.n	800edb4 <_printf_i+0x1a8>
 800ed1c:	4616      	mov	r6, r2
 800ed1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed22:	fb03 5711 	mls	r7, r3, r1, r5
 800ed26:	5dc7      	ldrb	r7, [r0, r7]
 800ed28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed2c:	462f      	mov	r7, r5
 800ed2e:	42bb      	cmp	r3, r7
 800ed30:	460d      	mov	r5, r1
 800ed32:	d9f4      	bls.n	800ed1e <_printf_i+0x112>
 800ed34:	2b08      	cmp	r3, #8
 800ed36:	d10b      	bne.n	800ed50 <_printf_i+0x144>
 800ed38:	6823      	ldr	r3, [r4, #0]
 800ed3a:	07df      	lsls	r7, r3, #31
 800ed3c:	d508      	bpl.n	800ed50 <_printf_i+0x144>
 800ed3e:	6923      	ldr	r3, [r4, #16]
 800ed40:	6861      	ldr	r1, [r4, #4]
 800ed42:	4299      	cmp	r1, r3
 800ed44:	bfde      	ittt	le
 800ed46:	2330      	movle	r3, #48	@ 0x30
 800ed48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed50:	1b92      	subs	r2, r2, r6
 800ed52:	6122      	str	r2, [r4, #16]
 800ed54:	f8cd a000 	str.w	sl, [sp]
 800ed58:	464b      	mov	r3, r9
 800ed5a:	aa03      	add	r2, sp, #12
 800ed5c:	4621      	mov	r1, r4
 800ed5e:	4640      	mov	r0, r8
 800ed60:	f7ff fee6 	bl	800eb30 <_printf_common>
 800ed64:	3001      	adds	r0, #1
 800ed66:	d14a      	bne.n	800edfe <_printf_i+0x1f2>
 800ed68:	f04f 30ff 	mov.w	r0, #4294967295
 800ed6c:	b004      	add	sp, #16
 800ed6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed72:	6823      	ldr	r3, [r4, #0]
 800ed74:	f043 0320 	orr.w	r3, r3, #32
 800ed78:	6023      	str	r3, [r4, #0]
 800ed7a:	4833      	ldr	r0, [pc, #204]	@ (800ee48 <_printf_i+0x23c>)
 800ed7c:	2778      	movs	r7, #120	@ 0x78
 800ed7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed82:	6823      	ldr	r3, [r4, #0]
 800ed84:	6831      	ldr	r1, [r6, #0]
 800ed86:	061f      	lsls	r7, r3, #24
 800ed88:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed8c:	d402      	bmi.n	800ed94 <_printf_i+0x188>
 800ed8e:	065f      	lsls	r7, r3, #25
 800ed90:	bf48      	it	mi
 800ed92:	b2ad      	uxthmi	r5, r5
 800ed94:	6031      	str	r1, [r6, #0]
 800ed96:	07d9      	lsls	r1, r3, #31
 800ed98:	bf44      	itt	mi
 800ed9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ed9e:	6023      	strmi	r3, [r4, #0]
 800eda0:	b11d      	cbz	r5, 800edaa <_printf_i+0x19e>
 800eda2:	2310      	movs	r3, #16
 800eda4:	e7ac      	b.n	800ed00 <_printf_i+0xf4>
 800eda6:	4827      	ldr	r0, [pc, #156]	@ (800ee44 <_printf_i+0x238>)
 800eda8:	e7e9      	b.n	800ed7e <_printf_i+0x172>
 800edaa:	6823      	ldr	r3, [r4, #0]
 800edac:	f023 0320 	bic.w	r3, r3, #32
 800edb0:	6023      	str	r3, [r4, #0]
 800edb2:	e7f6      	b.n	800eda2 <_printf_i+0x196>
 800edb4:	4616      	mov	r6, r2
 800edb6:	e7bd      	b.n	800ed34 <_printf_i+0x128>
 800edb8:	6833      	ldr	r3, [r6, #0]
 800edba:	6825      	ldr	r5, [r4, #0]
 800edbc:	6961      	ldr	r1, [r4, #20]
 800edbe:	1d18      	adds	r0, r3, #4
 800edc0:	6030      	str	r0, [r6, #0]
 800edc2:	062e      	lsls	r6, r5, #24
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	d501      	bpl.n	800edcc <_printf_i+0x1c0>
 800edc8:	6019      	str	r1, [r3, #0]
 800edca:	e002      	b.n	800edd2 <_printf_i+0x1c6>
 800edcc:	0668      	lsls	r0, r5, #25
 800edce:	d5fb      	bpl.n	800edc8 <_printf_i+0x1bc>
 800edd0:	8019      	strh	r1, [r3, #0]
 800edd2:	2300      	movs	r3, #0
 800edd4:	6123      	str	r3, [r4, #16]
 800edd6:	4616      	mov	r6, r2
 800edd8:	e7bc      	b.n	800ed54 <_printf_i+0x148>
 800edda:	6833      	ldr	r3, [r6, #0]
 800eddc:	1d1a      	adds	r2, r3, #4
 800edde:	6032      	str	r2, [r6, #0]
 800ede0:	681e      	ldr	r6, [r3, #0]
 800ede2:	6862      	ldr	r2, [r4, #4]
 800ede4:	2100      	movs	r1, #0
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7f1 fa1a 	bl	8000220 <memchr>
 800edec:	b108      	cbz	r0, 800edf2 <_printf_i+0x1e6>
 800edee:	1b80      	subs	r0, r0, r6
 800edf0:	6060      	str	r0, [r4, #4]
 800edf2:	6863      	ldr	r3, [r4, #4]
 800edf4:	6123      	str	r3, [r4, #16]
 800edf6:	2300      	movs	r3, #0
 800edf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edfc:	e7aa      	b.n	800ed54 <_printf_i+0x148>
 800edfe:	6923      	ldr	r3, [r4, #16]
 800ee00:	4632      	mov	r2, r6
 800ee02:	4649      	mov	r1, r9
 800ee04:	4640      	mov	r0, r8
 800ee06:	47d0      	blx	sl
 800ee08:	3001      	adds	r0, #1
 800ee0a:	d0ad      	beq.n	800ed68 <_printf_i+0x15c>
 800ee0c:	6823      	ldr	r3, [r4, #0]
 800ee0e:	079b      	lsls	r3, r3, #30
 800ee10:	d413      	bmi.n	800ee3a <_printf_i+0x22e>
 800ee12:	68e0      	ldr	r0, [r4, #12]
 800ee14:	9b03      	ldr	r3, [sp, #12]
 800ee16:	4298      	cmp	r0, r3
 800ee18:	bfb8      	it	lt
 800ee1a:	4618      	movlt	r0, r3
 800ee1c:	e7a6      	b.n	800ed6c <_printf_i+0x160>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	4632      	mov	r2, r6
 800ee22:	4649      	mov	r1, r9
 800ee24:	4640      	mov	r0, r8
 800ee26:	47d0      	blx	sl
 800ee28:	3001      	adds	r0, #1
 800ee2a:	d09d      	beq.n	800ed68 <_printf_i+0x15c>
 800ee2c:	3501      	adds	r5, #1
 800ee2e:	68e3      	ldr	r3, [r4, #12]
 800ee30:	9903      	ldr	r1, [sp, #12]
 800ee32:	1a5b      	subs	r3, r3, r1
 800ee34:	42ab      	cmp	r3, r5
 800ee36:	dcf2      	bgt.n	800ee1e <_printf_i+0x212>
 800ee38:	e7eb      	b.n	800ee12 <_printf_i+0x206>
 800ee3a:	2500      	movs	r5, #0
 800ee3c:	f104 0619 	add.w	r6, r4, #25
 800ee40:	e7f5      	b.n	800ee2e <_printf_i+0x222>
 800ee42:	bf00      	nop
 800ee44:	0800efc9 	.word	0x0800efc9
 800ee48:	0800efda 	.word	0x0800efda

0800ee4c <memmove>:
 800ee4c:	4288      	cmp	r0, r1
 800ee4e:	b510      	push	{r4, lr}
 800ee50:	eb01 0402 	add.w	r4, r1, r2
 800ee54:	d902      	bls.n	800ee5c <memmove+0x10>
 800ee56:	4284      	cmp	r4, r0
 800ee58:	4623      	mov	r3, r4
 800ee5a:	d807      	bhi.n	800ee6c <memmove+0x20>
 800ee5c:	1e43      	subs	r3, r0, #1
 800ee5e:	42a1      	cmp	r1, r4
 800ee60:	d008      	beq.n	800ee74 <memmove+0x28>
 800ee62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee6a:	e7f8      	b.n	800ee5e <memmove+0x12>
 800ee6c:	4402      	add	r2, r0
 800ee6e:	4601      	mov	r1, r0
 800ee70:	428a      	cmp	r2, r1
 800ee72:	d100      	bne.n	800ee76 <memmove+0x2a>
 800ee74:	bd10      	pop	{r4, pc}
 800ee76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee7e:	e7f7      	b.n	800ee70 <memmove+0x24>

0800ee80 <_sbrk_r>:
 800ee80:	b538      	push	{r3, r4, r5, lr}
 800ee82:	4d06      	ldr	r5, [pc, #24]	@ (800ee9c <_sbrk_r+0x1c>)
 800ee84:	2300      	movs	r3, #0
 800ee86:	4604      	mov	r4, r0
 800ee88:	4608      	mov	r0, r1
 800ee8a:	602b      	str	r3, [r5, #0]
 800ee8c:	f7f2 fcf0 	bl	8001870 <_sbrk>
 800ee90:	1c43      	adds	r3, r0, #1
 800ee92:	d102      	bne.n	800ee9a <_sbrk_r+0x1a>
 800ee94:	682b      	ldr	r3, [r5, #0]
 800ee96:	b103      	cbz	r3, 800ee9a <_sbrk_r+0x1a>
 800ee98:	6023      	str	r3, [r4, #0]
 800ee9a:	bd38      	pop	{r3, r4, r5, pc}
 800ee9c:	20004d04 	.word	0x20004d04

0800eea0 <memcpy>:
 800eea0:	440a      	add	r2, r1
 800eea2:	4291      	cmp	r1, r2
 800eea4:	f100 33ff 	add.w	r3, r0, #4294967295
 800eea8:	d100      	bne.n	800eeac <memcpy+0xc>
 800eeaa:	4770      	bx	lr
 800eeac:	b510      	push	{r4, lr}
 800eeae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eeb6:	4291      	cmp	r1, r2
 800eeb8:	d1f9      	bne.n	800eeae <memcpy+0xe>
 800eeba:	bd10      	pop	{r4, pc}

0800eebc <_realloc_r>:
 800eebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec0:	4680      	mov	r8, r0
 800eec2:	4615      	mov	r5, r2
 800eec4:	460c      	mov	r4, r1
 800eec6:	b921      	cbnz	r1, 800eed2 <_realloc_r+0x16>
 800eec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eecc:	4611      	mov	r1, r2
 800eece:	f7ff bc4b 	b.w	800e768 <_malloc_r>
 800eed2:	b92a      	cbnz	r2, 800eee0 <_realloc_r+0x24>
 800eed4:	f7ff fbdc 	bl	800e690 <_free_r>
 800eed8:	2400      	movs	r4, #0
 800eeda:	4620      	mov	r0, r4
 800eedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee0:	f000 f81a 	bl	800ef18 <_malloc_usable_size_r>
 800eee4:	4285      	cmp	r5, r0
 800eee6:	4606      	mov	r6, r0
 800eee8:	d802      	bhi.n	800eef0 <_realloc_r+0x34>
 800eeea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eeee:	d8f4      	bhi.n	800eeda <_realloc_r+0x1e>
 800eef0:	4629      	mov	r1, r5
 800eef2:	4640      	mov	r0, r8
 800eef4:	f7ff fc38 	bl	800e768 <_malloc_r>
 800eef8:	4607      	mov	r7, r0
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d0ec      	beq.n	800eed8 <_realloc_r+0x1c>
 800eefe:	42b5      	cmp	r5, r6
 800ef00:	462a      	mov	r2, r5
 800ef02:	4621      	mov	r1, r4
 800ef04:	bf28      	it	cs
 800ef06:	4632      	movcs	r2, r6
 800ef08:	f7ff ffca 	bl	800eea0 <memcpy>
 800ef0c:	4621      	mov	r1, r4
 800ef0e:	4640      	mov	r0, r8
 800ef10:	f7ff fbbe 	bl	800e690 <_free_r>
 800ef14:	463c      	mov	r4, r7
 800ef16:	e7e0      	b.n	800eeda <_realloc_r+0x1e>

0800ef18 <_malloc_usable_size_r>:
 800ef18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef1c:	1f18      	subs	r0, r3, #4
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	bfbc      	itt	lt
 800ef22:	580b      	ldrlt	r3, [r1, r0]
 800ef24:	18c0      	addlt	r0, r0, r3
 800ef26:	4770      	bx	lr

0800ef28 <_init>:
 800ef28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef2a:	bf00      	nop
 800ef2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef2e:	bc08      	pop	{r3}
 800ef30:	469e      	mov	lr, r3
 800ef32:	4770      	bx	lr

0800ef34 <_fini>:
 800ef34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef36:	bf00      	nop
 800ef38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef3a:	bc08      	pop	{r3}
 800ef3c:	469e      	mov	lr, r3
 800ef3e:	4770      	bx	lr
